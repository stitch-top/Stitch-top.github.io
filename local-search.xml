<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TestNG测试框架</title>
    <link href="/2020/07/23/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Java/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.TestNG%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/07/23/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Java/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.TestNG%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>TestNG，Next Generation，是一个开源自动化测试框架，灵感来自JUnit和NUnit，引入了一些新的功能，使用更加方便，旨在涵盖所有类别的测试，例如，单元测试、功能测试、端到端测试、集成测试等。<span id="more"></span></p><h2 id="1、首个测试用例"><a href="#1、首个测试用例" class="headerlink" title="1、首个测试用例"></a>1、首个测试用例</h2><ul><li>IntelliJ IDEA的src中新建一个TestNG包，包中创建一个FirstTest.java文件。</li></ul><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2><h2 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h2>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TestNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit4测试框架</title>
    <link href="/2020/06/30/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Java/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/06/30/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Java/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<p>JUnit是一个编写可重复测试的Java单元测试框架，继承TestCase类，是xUnit架构的一个实例，在测试驱动开发中发挥着至关重要的作用，提出了“首先测试然后编码”的概念，强调为一段可以先测试然后实现的代码设置测试数据。<span id="more"></span></p><h2 id="1、安装与简介"><a href="#1、安装与简介" class="headerlink" title="1、安装与简介"></a>1、安装与简介</h2><ul><li>单元测试框架，主要完成以下任务。<ul><li>提供用例组织与执行：用例多时容易产生扩展性与维护性等问题，需要考虑用例的规范与组织问题。</li><li>提供丰富的断言方法：用例执行完成后，需要实际与预期结果比较(即断言)，从而断定用例是否通过。</li><li>提供丰富的日志：用例执行失败时可以抛出清晰的失败原因，当所有用例执行完成后能提供丰富的执行结果。</li></ul></li><li>IntelliJ IDEA安装：File-&gt;Settings-&gt;左侧Plugins-&gt;右上Marketplace-&gt;分别搜索JUnit和TestNG进行Install-&gt;重启即可。</li></ul><h2 id="2、单元用例测试"><a href="#2、单元用例测试" class="headerlink" title="2、单元用例测试"></a>2、单元用例测试</h2><ul><li>IntelliJ IDEA的src中新建一个UnitTest包，包中创建一个JunitDemo.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JunitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> &#123;                        <span class="hljs-comment">// 创建被测试类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;          <span class="hljs-comment">// 计算并返回两个参数的和</span><br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test</span>                                       <span class="hljs-comment">// 用于注释一个普通的方法为一条测试用例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myFirstTest</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-number">2</span> + <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);                 <span class="hljs-comment">// 断言两个值是否相关</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> &#123;<br>        JunitDemo.<span class="hljs-type">Count</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>();    <span class="hljs-comment">// new出Count类</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> count.add(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);           <span class="hljs-comment">// 调用add()方法并传参</span><br>        assertEquals(result, <span class="hljs-number">4</span>);                <span class="hljs-comment">// 断言返回结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/001.jpg" srcset="/img/load.gif" lazyload alt="单元测试用例"></p><h2 id="3、注解"><a href="#3、注解" class="headerlink" title="3、注解"></a>3、注解</h2><ul><li>说明<ul><li>@Test：标识一条测试用例。</li><li>@Ignore：忽略的测试用例。</li><li>@Before：每一个测试方法之前运行。</li><li>@After：每一个测试方法之后运行。</li><li>@BeforeClass：所有测试开始之前运行。</li><li>@AfterClass：所有测试结果之后运行。</li></ul></li><li>修改IntelliJ IDEA中的JunitDemo.java文件内容。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.Ignore;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JunitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> &#123;                        <span class="hljs-comment">// 创建被测试类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;          <span class="hljs-comment">// 计算并返回两个参数的和</span><br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">division</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;     <span class="hljs-comment">// 计算并返回两个数相除的结果</span><br>            <span class="hljs-keyword">return</span> a / b;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test(timeout = 100)</span>                        <span class="hljs-comment">// 验证超时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">101</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test(expected = ArithmeticException.class)</span> <span class="hljs-comment">// 验证抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDivision</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().division(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-meta">@Ignore</span>                                     <span class="hljs-comment">// 跳过该条用例</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Count</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> count.add(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>        assertEquals(result, <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/002.jpg" srcset="/img/load.gif" lazyload alt="注解"></p><ul><li>testAdd1()用例中设置timeout&#x3D;100，该用例运行时间不超过100毫秒，用例中添加sleep()休眠101毫秒，因此用例执行失败。</li><li>Java中被除数不能为0，所以8&#x2F;0会报ArithmeticException异常，用例中设置验证该异常，说明抛出该异常符合预期。</li></ul><h3 id="3-1、Fixture"><a href="#3-1、Fixture" class="headerlink" title="3.1、Fixture"></a>3.1、Fixture</h3><ul><li>Fixture指一个测试运行所需的固定环境。<ul><li>通常要把环境设置成已知状态来创建测试，每次测试开始时都处于一个固定的初始状态。</li><li>测试结束后需要把测试状态还原，因此测试执行所需要的固定环境称之为Test Fixture。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个TestFixture.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFixture</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> &#123;                        <span class="hljs-comment">// 创建被测试类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;          <span class="hljs-comment">// 计算并返回两个参数的和</span><br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">division</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;     <span class="hljs-comment">// 计算并返回两个数相除的结果</span><br>            <span class="hljs-keyword">return</span> a / b;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@BeforeClass</span>                                <span class="hljs-comment">// 在当前测试类开始时运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeClass</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==============beforeClass.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterClass</span>                                 <span class="hljs-comment">// 在当前测试类结束后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterClass</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==============afterClass.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Before</span>                                     <span class="hljs-comment">// 每个测试方法运行之前运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;******Before.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span>                                      <span class="hljs-comment">// 每个测试方法运行之后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;******After.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().add(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>);<br>        assertEquals(<span class="hljs-number">7</span>, result);<br>        System.out.println(<span class="hljs-string">&quot;Test run testadd1.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().add(<span class="hljs-number">15</span>, <span class="hljs-number">12</span>);<br>        assertEquals(<span class="hljs-number">27</span>, result);<br>        System.out.println(<span class="hljs-string">&quot;Test run testadd2.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/003.jpg" srcset="/img/load.gif" lazyload alt="注解-Fixture"></p><ul><li>若是Web UI自动化测试，可将浏览器驱动的定义放到@Before中，浏览器的关闭放到@After中。</li></ul><h3 id="3-2、Rule"><a href="#3-2、Rule" class="headerlink" title="3.2、Rule"></a>3.2、Rule</h3><ul><li>一个JUnit Rule即一个实现了TestRule的类，类似于@Before和@After等注解，用在每个测试方法的执行前后。</li><li>@Before和@After等注解都只能作用于一个类，而JUnit Rule可以动态获取将要运行的测试类和测试方法的信息。</li><li>如果一个setup需在两个类中同时使用，就要在两个测试类中定义相同的@Before和@After等注解，会造成代码重复。</li></ul><h4 id="3-2-1、框架自带"><a href="#3-2-1、框架自带" class="headerlink" title="3.2.1、框架自带"></a>3.2.1、框架自带</h4><ul><li>JUnit4添加了很多核心Rule，包括Rule特性。<ul><li>Timeout：为类中的所有测试应用相同的超时时间。</li><li>ExpectedException：在测试中指定期望的异常类型与消息。</li><li>TemporaryFolder：测试可创建文件与目录，并在测试运行结束后将其删除，对于与文件系统打交道，且独立运行的测试而言很有用。</li><li>ExternalResource：一种资源使用模式，提前建好资源并在测试结束后将其销毁，对于使用socket、嵌入式服务器等资源的测试而言很有用。</li><li>ErrorCollector：让测试在失败后继续运行，并在测试结束时报告所有错误，对于需验证大量独立条件的测试而言很有用。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个RuleTimeoutDemo.java文件，来看Timeout这个Rule的使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Rule;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.rules.Timeout;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleTimeoutDemo</span> &#123;<br>    <span class="hljs-comment">// 使用Timeout这个Rule</span><br>    <span class="hljs-meta">@Rule</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">Timeout</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timeout</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">1010</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">990</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/008.jpg" srcset="/img/load.gif" lazyload alt="注解-Rule-框架自带"></p><ul><li>JUnit所提供的Timeout类用于控制测试用例的执行超时时间，已弃用，难怪用例运行结果总失效😅。</li><li>设置时长1秒，用例执行超过则失败，testMethod1和testMethod2中，前者超过1秒，所以运行失败。</li><li>新版JUnit5早在2017年就已发布，具体内容可参考【<a href="https://zhuanlan.zhihu.com/p/366142877">五年了，你还在用Junit4吗？</a>】。</li></ul><h4 id="3-2-2、自定义的"><a href="#3-2-2、自定义的" class="headerlink" title="3.2.2、自定义的"></a>3.2.2、自定义的</h4><ul><li>自定义一个Rule即implement一个TestRule接口，并实现apply()方法，该方法需返回一个Statement对象。</li><li>IntelliJ IDEA的UnitTest中，创建一个MethodNameRule.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.rules.TestRule;<br><span class="hljs-keyword">import</span> org.junit.runner.Description;<br><span class="hljs-keyword">import</span> org.junit.runners.model.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodNameRule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestRule</span> &#123;<br>    <span class="hljs-keyword">public</span> Statement <span class="hljs-title function_">apply</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Statement base, <span class="hljs-keyword">final</span> Description description)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Statement</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evaluate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">// 在测试方法运行之前做一些事情，在base.evaluate()之前</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> description.getClassName();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> description.getMethodName();<br>                base.evaluate();            <span class="hljs-comment">//运行测试方法</span><br>                <span class="hljs-comment">// 在测试方法运行之后做一些事情，在base.evaluate()之后</span><br>                System.out.println(<span class="hljs-string">&quot;Class Name: &quot;</span> + className + <span class="hljs-string">&quot;\nMethod Name: &quot;</span> + methodName);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现的功能：每次运行测试用例后，打印当前测试用例的类名和方法名。</li><li>IntelliJ IDEA的UnitTest中，创建一个RuleTestDemo.java文件，添加定义的MethodNameRule。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Rule;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.rules.Timeout;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleTestDemo</span> &#123;<br>    <span class="hljs-comment">// 使用Timeout这个Rule</span><br>    <span class="hljs-meta">@Rule</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">Timeout</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timeout</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 使用自定义的Rule</span><br>    <span class="hljs-meta">@Rule</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">MethodNameRule</span> <span class="hljs-variable">methodNameRule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodNameRule</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">1010</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">990</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/009.jpg" srcset="/img/load.gif" lazyload alt="注解-Rule-自定义的"></p><h2 id="4、用例执行顺序"><a href="#4、用例执行顺序" class="headerlink" title="4、用例执行顺序"></a>4、用例执行顺序</h2><ul><li>JUnit通过@FixMethodOrder注解来控制测试方法的执行顺序。</li><li>注解参数是org.junit.runners.MethodSorters对象，该枚举类定义了三种顺序类型。<ul><li>MethodSorters.JVM：JVM方法顺序，即代码中定义的方法顺序。</li><li>MethodSorters.DEFAULT：默认顺序，即以确定但不可预期的顺序。</li><li>MethodSorters.NAME_ASCENDING：按照方法名字母顺序。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个TestRunSequence.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.FixMethodOrder;<br><span class="hljs-keyword">import</span> org.junit.runners.MethodSorters;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><br><span class="hljs-meta">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span>   <span class="hljs-comment">// 按照方法名字母顺序执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRunSequence</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestCase1</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-number">2</span>+<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestCase2</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-number">2</span>+<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestAisa</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Hi&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/004.jpg" srcset="/img/load.gif" lazyload alt="用例执行顺序"></p><ul><li>MethodSorters.NAME_ASCENDING设置按照方法名字母顺序执行，所以TestAisa()先被执行了。</li></ul><h2 id="5、断言方法"><a href="#5、断言方法" class="headerlink" title="5、断言方法"></a>5、断言方法</h2><ul><li>JUnit所提供的断言方法与说明，如下所示。<ul><li>assertArrayEquals(expecteds, actuals)：查看两个数组是否相等。</li><li>assertEquals(expected, actual)：查看两个对象是否相等，类似于字符串比较使用的equals()方法。</li><li>assertNotEquals(first, second)：查看两个对象是否不相等。</li><li>assertNull(object)：查看对象是否为空。</li><li>assertNotNull(object)：查看对象是否不为空。</li><li>assertSame(expected, actual)：查看两个对象的引用是否相等，类似于使用“&#x3D;&#x3D;”比较两个对象。</li><li>assertNotSame(unexpected, actual)：查看两个对象的引用是否不相等，类似于使用“!&#x3D;”比较两个对象。</li><li>assertTrue(condition)：查看运行结果是否为True。</li><li>assertFalse(condition)：查看运行结果是否为False。</li><li>assertThat(actual, matcher)：查看实际值是否满足指定的条件。</li><li>fail()：让测试失败。</li></ul></li><li>其中assertEquals()用得最多，IntelliJ IDEA的UnitTest中，创建一个AssertTest.java文件，来看下assertTrue()的使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertTrue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssertTest</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断一个数是否为素数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">Prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;Math.sqrt(n); i++) &#123;<br>            <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPrime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        assertTrue(AssertTest.Prime(n));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/005.jpg" srcset="/img/load.gif" lazyload alt="断言方法"></p><ul><li>Prime()方法用于判断一个数是否为素数，并返回True或False，在测试用例中通过assertTrue断言结果。</li></ul><h2 id="6、用例批量运行"><a href="#6、用例批量运行" class="headerlink" title="6、用例批量运行"></a>6、用例批量运行</h2><ul><li>以上测试用例的运行主要针对单个测试类进行，如果想运行所有用例，有两种方法。</li></ul><h3 id="6-1、IntelliJ-IDEA目录运行"><a href="#6-1、IntelliJ-IDEA目录运行" class="headerlink" title="6.1、IntelliJ IDEA目录运行"></a>6.1、IntelliJ IDEA目录运行</h3><ul><li>选中要运行的所有用例所在目录，鼠标右键Run ‘Tests in ‘UnitTest’ ‘。</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/006.jpg" srcset="/img/load.gif" lazyload alt="用例批量运行-IntelliJ IDEA目录运行"></p><h3 id="6-2、测试套件运行"><a href="#6-2、测试套件运行" class="headerlink" title="6.2、测试套件运行"></a>6.2、测试套件运行</h3><ul><li>JUnit提供了一种批量运行测试类的方法，叫测试套件。</li><li>遵循原则<ul><li>创建一个空类作为测试套件的入口。</li><li>使用注解org.junit.runner.RunWith和org.junit.runners.Suite.SuitClasses修饰空类。</li><li>将org.junit.runners.Suite作为参数传给注解RunWith，提示为此类测试使用套件运行器执行。</li><li>把需要放入此测试套件的测试类组成数组，作为注解SuitClasses的参数。</li><li>保证创建的空类使用public修饰，并且存在公开的不带任何参数的构造函数。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个RunAllTest.java文件，测试类即RunAllTest。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.junit.runners.Suite;<br><span class="hljs-keyword">import</span> org.junit.runners.Suite.SuiteClasses;<br><br><span class="hljs-meta">@RunWith(Suite.class)</span><br><span class="hljs-meta">@SuiteClasses(&#123;</span><br><span class="hljs-meta">        JunitDemo.class,</span><br><span class="hljs-meta">        TestFixture.class,</span><br><span class="hljs-meta">        AssertTest.class,</span><br><span class="hljs-meta">        TestRunSequence.class,</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunAllTest</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/007.jpg" srcset="/img/load.gif" lazyload alt="用例批量运行-测试套件运行"></p><ul><li>将需要运行的测试类放到SuiteClasses中，运行RunAllTest测试类即可批量运行测试用例。</li></ul><blockquote><p><a href="http://class.itest.info/junit">Java Junit测试框架-重定向科技</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JUnit4自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫</title>
    <link href="/2020/02/18/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Python/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Python.Python%E7%88%AC%E8%99%AB/"/>
    <url>/2020/02/18/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Python/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Python.Python%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<p>网络爬虫，即网页蜘蛛，互联网时代下的一种网络信息搜集技术，按照一定规则自动抓取万维网信息的程序或脚本，使用该技术获取站点数据，对数据进行加工后就可以拿来当测试数据使用。<span id="more"></span></p><h2 id="1、获取课程信息"><a href="#1、获取课程信息" class="headerlink" title="1、获取课程信息"></a>1、获取课程信息</h2><ul><li>爬虫套路<ul><li>访问一个站点，获取该站点的HTML代码。</li><li>解析代码，将感兴趣的数据从代码中分离出来。</li><li>将数据打印出来，并存储数据到本地。</li></ul></li><li>实例分析<ul><li>假设需要抓取<a href="https://www.imooc.com/">慕课网</a>的所有自动化测试课程。</li><li>先访问<a href="https://coding.imooc.com/?c=zdhtest">自动化测试</a>课程页面，拿到对应的HTML代码。</li><li>解析HTML代码，打印并保存所有课程的名称和地址。</li></ul></li><li>使用环境<ul><li>Requests库用于发起HTTP请求，并获取目标站点的HTML代码。</li><li>BeautifulSoup库用于解析HTML代码，从中提取课程的名称和地址等内容。</li></ul></li><li>HTML代码分析</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;course-card&quot;</span> <span class="hljs-attr">data-end-time</span>=<span class="hljs-string">&quot;1649347199&quot;</span> <span class="hljs-attr">data-cid</span>=<span class="hljs-string">&quot;558&quot;</span> <span class="hljs-attr">data-typestr</span>=<span class="hljs-string">&quot;实战&quot;</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">&quot;测试高薪必学-大厂全链路质量保障体系落地实战&quot;</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/class/558.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(//img.mukewang.com/szimg/6226b94e0958682505400304.jpg)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title ellipsis2&quot;</span>&gt;</span>测试高薪必学-大厂全链路质量保障体系落地实战<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--实战--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>进阶 · 76人报名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--拼团相关--&gt;</span><br>        <span class="hljs-comment">&lt;!--无优惠--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price l red bold&quot;</span>&gt;</span>￥488.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add-shop-cart r&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon imv2-shopping-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>加购物车<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--学习进度--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>课程名称的HTML标签是<code>&lt;p class=&quot;title ellipsis2&quot;&gt;</code>，只要获取页面上的所有该标签文本，就能把课程名称解析出来。</li><li>新建名为getCourses.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 定义被抓取页面的url</span><br>url = <span class="hljs-string">&quot;https://coding.imooc.com/?c=zdhtest&quot;</span><br><span class="hljs-comment"># 获取被抓取页面的HTML代码，并使用html.parser实例化BeautifulSoup</span><br>soup = BeautifulSoup(requests.get(url).text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><span class="hljs-comment"># 遍历页面上所有的&lt;p class=&quot;title ellipsis2&quot;&gt;</span><br><span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&quot;p&quot;</span>, attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;title ellipsis2&quot;</span>&#125;):<br>    <span class="hljs-comment"># 打印出&lt;p class=&quot;title ellipsis2&quot;&gt;的text属性</span><br>    <span class="hljs-built_in">print</span>(course.text)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Text">测试高薪必学-大厂全链路质量保障体系落地实战<br>Python自动化测试开发实战  搞定分布式并发场景<br>深度解锁SpringCloud主流组件 一战解决微服务诸多难题<br>Java Web自动化测试 Selenium基础到企业实际应用（全新上线）<br>测试面试全方位讲解   百度资深工程师亲授   兼具广度与深度<br>Python Web自动化测试系统入门   在测试行业更抢手<br>Selenium3与Python3实战Web自动化测试框架<br>Selenium3.0平台级自动化测试框架综合实战<br>Python移动自动化测试面试-面试分析+知识理论+面试技巧<br></code></pre></td></tr></table></figure><h2 id="2、图片爬虫"><a href="#2、图片爬虫" class="headerlink" title="2、图片爬虫"></a>2、图片爬虫</h2><ul><li>图片爬虫套路与文本爬虫类似，区别在于前者会下载需要的文件，后者可能做一些持久化的工作。</li><li>实例分析<ul><li>访问<a href="http://jandan.net/drawings">煎蛋画廊</a>主页，获取HTML代码。</li><li>分析代码，找出所有图片的HTML特征。</li><li>解析代码，拿到所有图片的src，图片的HTML标签默认img，只需拿到页面上所有的img标签的src即可。</li><li>通过src下载图片。</li></ul></li><li>新建名为getImages.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 网站做了反爬处理，会拒绝类似爬虫的请求，后台发现请求的User-Agent异常，即返回403错误</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">downloadFile</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Downding %s&quot;</span> %url)<br>    local_Filename = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>    r = requests.get(url, stream=<span class="hljs-literal">True</span>, headers=headers)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(local_Filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> r.iter_content(chunk_size=<span class="hljs-number">1024</span>):<br>            <span class="hljs-keyword">if</span> chunk:<br>                f.write(chunk)<br>                f.flush()<br>    <span class="hljs-keyword">return</span> local_Filename<br><br>url = <span class="hljs-string">&#x27;http://jandan.net/drawings&#x27;</span><br>soup = BeautifulSoup(requests.get(url, headers=headers).text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment"># 使用bs的过滤器功能</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validImg</span>(<span class="hljs-params">src</span>):<br>    <span class="hljs-keyword">return</span> src.endswith(<span class="hljs-string">&#x27;jpg&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;tva4.sinaimg.cn&#x27;</span> <span class="hljs-keyword">in</span> src<br><br><span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;img&#x27;</span>, src=validImg):<br>    src = img[<span class="hljs-string">&#x27;src&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> src.startswith(<span class="hljs-string">&#x27;http&#x27;</span>):<br>        src = <span class="hljs-string">&#x27;http:&#x27;</span> + src<br>    downloadFile(src)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Text">Downding http://tva4.sinaimg.cn/mw600/9ca31f66ly1g9jqalor18j21650u0acq.jpg<br>Downding http://tva4.sinaimg.cn/mw600/9ca31f66ly1g9jqan3sn1j21650u0ade.jpg<br></code></pre></td></tr></table></figure><h2 id="3、知乎最热问题"><a href="#3、知乎最热问题" class="headerlink" title="3、知乎最热问题"></a>3、知乎最热问题</h2><ul><li>实例分析<ul><li>获取<a href="https://www.zhihu.com/explore">知乎近期热点</a>功能，访问页面获取HTML代码。</li><li>分析代码，找出近期最热的HTML特征。</li><li>解析代码，拿到所有满足条件的链接。</li><li>打印链接。</li></ul></li><li>分析代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;[object Object]&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;css-1nd7dqm&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.zhihu.com/question/531937490&quot;</span>&gt;</span><br>    5 月 9 日俄罗斯在莫斯科红场举行纪念卫国战争胜利 77 周年阅兵式，红场阅兵有哪些看点值得关注?<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>只需要拿到所有的class&#x3D;”css-1nd7dqm”的a标签即可。</li><li>新建名为getZhihu.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">&#x27;https://www.zhihu.com/explore&#x27;</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0&#x27;</span><br>&#125;<br><br>soup = BeautifulSoup(requests.get(url, headers=headers).text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>, class_=<span class="hljs-string">&#x27;css-1nd7dqm&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(link.text)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Text">5 月 9 日俄罗斯在莫斯科红场举行纪念卫国战争胜利 77 周年阅兵式，红场阅兵有哪些看点值得关注?<br>5 月 7 日晚浙江舟山出现血红天空，气象局称「是光的折射现象，光源尚不清楚」，你拍到这一景象了吗？<br>5 月 8 日香港特别行政区第六任行政长官选举投票结束，李家超当选，有哪些信息值得关注？<br>5 月 8 日上海新增本土「322+3625」，新增死亡 11 例，目前疫情情况如何？<br></code></pre></td></tr></table></figure><h2 id="4、爬虫对抗"><a href="#4、爬虫对抗" class="headerlink" title="4、爬虫对抗"></a>4、爬虫对抗</h2><ul><li>爬虫爬取的一些资源，一般都是服务提供商重点保护资产，许多站点都会启用反爬虫策略。</li><li>常用手段<ul><li>监控后台日志和流量模式，发现异常活动就限制访问。<ul><li>可以通过以下措施进行访问限制。<ul><li>访问速率限制</li><li>检测异常活动</li><li>不只通过IP地址监控和限制访问速率，也可以使用表单提交速度、User-Agent等指标。</li><li>使用验证码替代临时阻止访问的方案。</li></ul></li><li>反爬建议：可以使用IP池，降低访问频率或浏览器自动化工具爬虫来进行对抗。</li></ul></li><li>要求注册和登录<ul><li>为避免自动化创建许多帐户的脚本，应该做以下事情。<ul><li>注册需电子邮箱，并且用户必须通过链接验证邮箱才能激活帐户，每个邮箱只允许一个账户。</li><li>需要在注册帐户期间显示验证码，防止自动化脚本创建帐户。</li></ul></li><li>反爬建议：爬虫模拟登录，降低访问频率，以免暴露真实意图。</li></ul></li><li>阻止来自云托管主机和爬虫服务的IP地址的访问。<ul><li>爬虫有时会从网络托管服务(例如Amazon Web Services或Google App Engine)或VPSes运行。</li><li>限制(或显示验证码)来源于此类云主机服务使用的IP地址请求访问网站，可以阻止从爬虫服务使用的IP地址的访问。</li><li>还可以限制代理或VPN提供商使用的IP地址的访问，爬虫可能使用此类代理服务器来避免单个IP发出许多请求。</li><li>反爬建议：使用代理和IP池。</li></ul></li><li>如果采取阻止访问的做法，将错误消息进行调整，确保不让爬虫了解出错的实际原因。<ul><li>对用户友好的显示内容，例如“抱歉，网站出了一些问题，请联系xxx进行维护。”</li><li>反爬建议：使用浏览器自动化工具，伪装成真实的用户。</li></ul></li><li>如果网站被爬虫访问，则使用验证码。<ul><li>验证码可以有效地阻止爬虫，但对用户也会产生负面影响。</li><li>使用验证码注意事项。<ul><li>不要自己实现验证码，应使用类似Google的reCaptcha的东西，可以更好的解决问题。</li><li>不要在HTML标记中包含验证码的解决方案。</li><li>验证码可以批量验证。</li></ul></li><li>反爬建议：使用人肉打码服务。</li></ul></li><li>将文本内容转成图片<ul><li>服务器端将文本转换成图像，然后在客户端显示，可以阻碍简单的爬虫提取文本。</li><li>不过这种方法对于屏幕阅读器，搜索引擎，性能等是不利的，也容易被一些OCR技术绕过。</li><li>反爬建议：使用OCR图片识别技术。</li></ul></li><li>不要公开完整数据集<ul><li>如果是以下情况，那么该方法将无效。<ul><li>爬虫机器人或脚本并不想或需完整的数据集。</li><li>文章的URL类似example.com&#x2F;article.php?articleId&#x3D;12345格式，爬虫可简单迭代并请求到所有文章。</li><li>编写脚本跟踪文章内容的链接，或搜索一些特殊字符会显示出所有内容，或需搜索引擎查找内容。</li></ul></li><li>反爬建议：便利数字型id，基本可以拿到所有内容。</li></ul></li></ul></li><li>内容出处<ul><li><a href="https://zhuanlan.zhihu.com/p/31334372">Web 网页爬虫对抗指南 Part.1</a></li><li><a href="https://zhuanlan.zhihu.com/p/31486597">Web 网页爬虫对抗指南 Part.2</a></li></ul></li></ul><h2 id="5、Selenium爬虫"><a href="#5、Selenium爬虫" class="headerlink" title="5、Selenium爬虫"></a>5、Selenium爬虫</h2><ul><li>Selenium是通过真实的浏览器进行操作，因此反爬虫策略较难察觉到，不过缺点在于效率低下。</li><li>开发环境需要用到selenium库和Chrome driver或Firefox driver驱动，这里不赘述。</li><li>仍以<a href="https://www.zhihu.com/explore">知乎近期热点</a>为例，新建名为getZhihuSel.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>url = <span class="hljs-string">&#x27;https://www.zhihu.com/explore&#x27;</span><br>driver = webdriver.Firefox()<br>driver.get(url)<br><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> driver.find_elements_by_css_selector(<span class="hljs-string">&#x27;a[class=&quot;css-1nd7dqm&quot;]&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(link.text)<br><br>driver.quit()<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Text">5 月 9 日俄罗斯在莫斯科红场举行纪念卫国战争胜利 77 周年阅兵式，红场阅兵有哪些看点值得关注?<br>5 月 7 日晚浙江舟山出现血红天空，气象局称「是光的折射现象，光源尚不清楚」，你拍到这一景象了吗？<br>5 月 8 日香港特别行政区第六任行政长官选举投票结束，李家超当选，有哪些信息值得关注？<br>5 月 8 日上海新增本土「322+3625」，新增死亡 11 例，目前疫情情况如何？<br></code></pre></td></tr></table></figure><ul><li>鉴于Selenium的爬虫效率低，可以使用headless无界面浏览模式来提升。</li><li>如果对于Selenium的API不熟悉，可以直接使用Puppeteer来做爬虫。</li></ul><blockquote><p><a href="http://class.itest.info/crawler">Python爬虫-重定向科技</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Requests</tag>
      
      <tag>BautifulSoup</tag>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python接口测试</title>
    <link href="/2020/01/27/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Python/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Python.Python%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <url>/2020/01/27/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88/Python/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Python.Python%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>接口测试是测试系统组件间接口的一种测试，主要用于检测外部系统与系统之间，以及内部各个子系统之间的交互点，测试重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。<span id="more"></span></p><h2 id="1、简单的接口"><a href="#1、简单的接口" class="headerlink" title="1、简单的接口"></a>1、简单的接口</h2><ul><li>获取资源的接口，例如：<a href="https://www.v2ex.com/p/7v9TEc53">V2EX API 接口</a>。</li><li>接口的具体描述，即接口文档如下。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Text">获得指定节点的名字，简介，URL 及头像图片的地址。<br>https://www.v2ex.com/api/nodes/show.json<br><br>Method: GET<br>Authentication: None<br>接受参数：<br>    name: 节点名（V2EX的节点名全是半角英文或者数字）<br>    例如：https://www.v2ex.com/api/nodes/show.json?name=python<br></code></pre></td></tr></table></figure><ul><li>接口分析<ul><li>协议：采用https协议。</li><li>请求方法：GET方法。</li><li>鉴权方式：None不需要登录。</li><li>请求参数：name参数，指定资源的名称。</li></ul></li></ul><h2 id="2、Postman接口测试"><a href="#2、Postman接口测试" class="headerlink" title="2、Postman接口测试"></a>2、Postman接口测试</h2><ul><li>常见的接口测试工具：postman、jmeter、soapui、insomnia、paw。</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Python.Python%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/001.jpg" srcset="/img/load.gif" lazyload alt="Postman接口测试"></p><ul><li>服务器响应的重要信息<ul><li>Body：返回的主体。</li><li>Headers：键值对数据，补充请求的主体内容。</li><li>Status：状态码，显示200说明响应是正常的。</li><li>Time：响应时间。</li><li>Size：响应的大小。</li></ul></li></ul><h2 id="3、Json简介"><a href="#3、Json简介" class="headerlink" title="3、Json简介"></a>3、Json简介</h2><ul><li>Json，JavaScript Object Notation，一种轻量级的数据交换格式。</li><li>Json可理解为一种规定了格式的字符串，通过这种格式可在不同的编程语言之间互相传递信息。</li><li>例如将JavaScript的对象转换成Json传递给Java，这样Java可以反解析出Java语言自身的对象。</li><li>同理把Java对象转换成Json，通过解析Json，Python可将其转换成自身的dict(字典)或list(列表)。</li><li>将Json字符串转换成Python的dict，操作如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># coding: utf-8</span><br><span class="hljs-keyword">import</span> json<br>json_str = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;avatar_large&quot;: &quot;https://cdn.v2ex.com/navatar/8613/985e/90_large.png?m=1648339948&quot;,</span><br><span class="hljs-string">    &quot;name&quot;: &quot;python&quot;,</span><br><span class="hljs-string">    &quot;avatar_normal&quot;: &quot;https://cdn.v2ex.com/navatar/8613/985e/90_normal.png?m=1648339948&quot;,</span><br><span class="hljs-string">    &quot;title&quot;: &quot;Python&quot;,</span><br><span class="hljs-string">    &quot;url&quot;: &quot;https://www.v2ex.com/go/python&quot;,</span><br><span class="hljs-string">    &quot;topics&quot;: 14915,</span><br><span class="hljs-string">    &quot;footer&quot;: &quot;&quot;,</span><br><span class="hljs-string">    &quot;header&quot;: &quot;这里讨论各种 Python 语言编程话题，也包括 Django，Tornado 等框架的讨论。这里是一个能够帮助你解决实际问题的地方。&quot;,</span><br><span class="hljs-string">    &quot;title_alternative&quot;: &quot;Python&quot;,</span><br><span class="hljs-string">    &quot;avatar_mini&quot;: &quot;https://cdn.v2ex.com/navatar/8613/985e/90_mini.png?m=1648339948&quot;,</span><br><span class="hljs-string">    &quot;stars&quot;: 9919,</span><br><span class="hljs-string">    &quot;aliases&quot;: [],</span><br><span class="hljs-string">    &quot;root&quot;: false,</span><br><span class="hljs-string">    &quot;id&quot;: 90,</span><br><span class="hljs-string">    &quot;parent_node_name&quot;: &quot;programming&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>res = json.loads(json_str)<br><span class="hljs-built_in">print</span>(res[<span class="hljs-string">&#x27;id&#x27;</span>])                            <span class="hljs-comment"># 90</span><br><span class="hljs-built_in">print</span>(res[<span class="hljs-string">&#x27;name&#x27;</span>])                          <span class="hljs-comment"># python</span><br><span class="hljs-built_in">print</span>(res[<span class="hljs-string">&#x27;url&#x27;</span>])                           <span class="hljs-comment"># http://www.v2ex.com/go/python</span><br></code></pre></td></tr></table></figure><h2 id="4、3A原则"><a href="#4、3A原则" class="headerlink" title="4、3A原则"></a>4、3A原则</h2><ul><li>3A原则是单元测试用例编写时应遵循的原则，将其扩展到接口自动化测试的用例编写中。</li><li>单元测试用例<ul><li>arrange：初始化测试对象或准备测试数据。</li><li>act：调用被测方法。</li><li>assert：进行断言。</li></ul></li><li>服务级接口测试实际上是黑盒测试，3A原则适用于这种测试用例的编写。</li><li>接口测试用例<ul><li>arrange：初始化测试数据，输入的数据和目标接口所涉及的资源数据。</li><li>act：调用接口，传入输入的数据。</li><li>assert：对返回的资源信息进行断言。</li></ul></li><li>手工测试用例<ul><li>arrange：准备被测功能相关的测试数据。</li><li>act：调用被测的功能。</li><li>assert：进行断言。</li></ul></li><li>接口自动化测试用例总结<ul><li>arrange：测试用例执行之前，需要准备测试数据，包括输入数据和存量数据。</li><li>act：通过不同的参数来调用接口，拿到数据并返回。</li><li>assert：必须进行断言，否则测试用例就没有任何意义。</li></ul></li></ul><h2 id="5、UnitTest框架"><a href="#5、UnitTest框架" class="headerlink" title="5、UnitTest框架"></a>5、UnitTest框架</h2><ul><li>UnitTest是Python自带的单元测试框架，也可以用来做接口的自动化测试。<ul><li>拥有一套固定套路，定义测试用例时可以更加简单和统一。</li><li>提供了一系列的断言。</li><li>通过test suit或扩展方式，可以自定义用例执行的策略。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> unittest                                             <span class="hljs-comment"># 导入库</span><br><span class="hljs-comment"># 定义测试类，类名自定义，所有测试类须直接或间接继承自unittest.TestCase类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTestCase</span>(unittest.TestCase):<br>    <span class="hljs-comment"># setUp(self)是钩子方法，每个测试用例执行前都会执行一次，做数据初始化</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># arrange，为每个测试方法定义被测对象，这里则是self.test_string</span><br>        self.test_string = <span class="hljs-string">&quot;This is a tring.&quot;</span>     <br>    <span class="hljs-comment"># 该方法是一个测试用例，只有方法名以test开头的方法才是测试用例</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testUpper</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 如果断言失败，则在测试报告中打印出错误原因</span><br>        self.asserEqual(<span class="hljs-string">&quot;THIS IS A STRING.&quot;</span>, self.test_string.upper())<br><br><span class="hljs-comment"># 直接执行该文件，运行所有的测试类中的测试用例，即以test开头的方法</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><ul><li>使用unittest需记住：<ul><li>导入unittest库，定义继承自unittest.TestCase的测试类。</li><li>定义以test开头的测试方法，即测试用例，可以在一个类中定义n个。</li><li>进行断言，unittest.main()是执行测试用例最简单的方式。</li></ul></li></ul><h2 id="6、Requests库"><a href="#6、Requests库" class="headerlink" title="6、Requests库"></a>6、Requests库</h2><ul><li>Requests库可以简化发送HTTP请求及获取响应的代码。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发请求，传参数</span><br>r = requests.get(<span class="hljs-string">&quot;https://p.3.cn/prices/mgets&quot;</span>, auth=(<span class="hljs-string">&quot;skuIds&quot;</span>, <span class="hljs-string">&quot;100026761926&quot;</span>))<br><span class="hljs-built_in">print</span>(r.status_code)                        <span class="hljs-comment"># 获取响应</span><br><span class="hljs-built_in">print</span>(r.headers[<span class="hljs-string">&#x27;content-type&#x27;</span>])            <span class="hljs-comment"># 获取响应headers</span><br><span class="hljs-built_in">print</span>(r.encoding)                           <span class="hljs-comment"># 获取响应编码</span><br><span class="hljs-built_in">print</span>(r.text)                               <span class="hljs-comment"># 获取响应文本</span><br><span class="hljs-built_in">print</span>(r.json)                               <span class="hljs-comment"># 获取响应Json</span><br></code></pre></td></tr></table></figure><h2 id="7、接口测试用例"><a href="#7、接口测试用例" class="headerlink" title="7、接口测试用例"></a>7、接口测试用例</h2><ul><li>测试数据：节点名称为python。</li><li>接口地址：<a href="https://www.v2ex.com/api/nodes/show.json">https://www.v2ex.com/api/nodes/show.json</a>。</li><li>断言：返回的结果中，id必须是90，name必须是python。</li><li>先前已经用Postman测过接口，点击右边栏的Code&lt;&#x2F;&gt;图标。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://www.v2ex.com/api/nodes/show.json?name=python&quot;</span><br>payload=&#123;&#125;<br>files=&#123;&#125;<br>headers = &#123;&#125;<br>response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url, headers=headers, data=payload, files=files)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><ul><li>使用unittest重构代码，Python-Requests中的代码只是3A原则中的arrange和act。</li><li>新建名为v2exAPICase.py的文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">V2exAPITestCase</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_node_api</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">&quot;https://www.v2ex.com/api/nodes/show.json&quot;</span><br>        querystring = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;python&quot;</span>&#125;<br>        response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url, params=querystring).json()<br>        self.assertEqual(response[<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;python&quot;</span>)<br>        self.assertEqual(response[<span class="hljs-string">&quot;id&quot;</span>], <span class="hljs-number">90</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><ul><li>执行v2exAPICase.py文件，运行结果如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python">.<br>----------------------------------------------------------------------<br>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.142</span>s<br>OK<br></code></pre></td></tr></table></figure><ul><li>Postman可以帮助完成一半的工作，例如调试接口、导出部分代码等。</li><li>使用UnitTest框架重构用例可以帮助添加断言，提供在命令行执行的能力，易与CI工具进行集成。</li></ul><h2 id="8、Mock-Server"><a href="#8、Mock-Server" class="headerlink" title="8、Mock Server"></a>8、Mock Server</h2><ul><li>使用场景<ul><li>前端客户端与后端服务端开发节奏往往不一致。</li><li>前端多数情况下都需要等后台的API开发完成后才能进行开发联调和测试。</li><li>开发节奏不一致，容易造成整个项目或产品交付延期。</li><li>一种解决方案思路是前后端事先约定好后端提供的API接口的细节。</li><li>前端人员自行模拟出这些后端的实现，调用假实现拿到返回数据。</li><li>不过由前端实现的假API没办法迅速反映出后端的变化。</li><li>若后端对约定好的API接口做出修改且未知会前端，这样假API没有相应更新，正式联调时就会出错。</li><li>像这种不管是前后端的假API实现，都可以称为Mock Server。<ul><li>Mock表示这个API返回的数据是假的，仅作为测试用。</li><li>Server表示需要启动服务，简单来说就是一个服务程序。</li></ul></li></ul></li><li>契约测试<ul><li>前后端导致信息不对称，约定的API在前后端可能都会变化，保证一致性就成为挑战。</li><li>这时契约测试出现，即前后端共用一份契约，约定API的细节。</li><li>前后端的任何变化都需要先修改契约，通过它通知前后端，统一更新实现。</li></ul></li><li>如果为契约测试设置一种测试工具，需要规划如下特性。<ul><li>契约的描述工具：用什么工具去定义才能让前后端团队秒懂。</li><li>通过契约自动生成Mock Server实现，这样前端就可以拿来即用，若契约修改了也容易感知。</li><li>通过契约自动生成接口测试用例，持续运行这些接口测试用例，后端就可以在第一时间发现契约的修改。</li></ul></li></ul><h2 id="9、Flask实现Mock-Server"><a href="#9、Flask实现Mock-Server" class="headerlink" title="9、Flask实现Mock Server"></a>9、Flask实现Mock Server</h2><ul><li>Flask<ul><li>Python实现的简单Web框架，与Django互补。</li><li>路由 -&gt; &#x2F;request&#x2F;uri。</li><li>handler -&gt; 路由进来之后处理request并返回response的逻辑。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)                             </span><span class="hljs-comment"># 路由</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():                                <span class="hljs-comment"># handler                    </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World.&quot;</span><br></code></pre></td></tr></table></figure><ul><li>新建名为smileTaskMockServer.py的文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify, g<br><span class="hljs-keyword">import</span> copy<br>app = Flask(__name__)<br><span class="hljs-meta">@app.before_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_up_data</span>():<br>    g.data = [<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 1&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 1&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 2&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 2&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 3&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 3&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 4&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 4&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 5&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 5&#x27;</span>&#125;<br>    ]<br>    g.task_does_not_exist = &#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;Task does not exist.&quot;</span>&#125;<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/tasks&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_tasks</span>():                        <span class="hljs-comment"># 获取所有的任务</span><br>    <span class="hljs-keyword">return</span> jsonify(g.data)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/tasks/&lt;int:task_id&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_task</span>(<span class="hljs-params">task_id</span>):                      <span class="hljs-comment"># 查看一个任务的详情</span><br>    <span class="hljs-keyword">if</span> task_id &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> task_id &lt;= <span class="hljs-built_in">len</span>(g.data):<br>        <span class="hljs-keyword">return</span> jsonify(g.data[task_id-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(g.task_does_not_exist)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/tasks/&lt;int:task_id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;PUT&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complete_task</span>(<span class="hljs-params">task_id</span>):                 <span class="hljs-comment"># 完成一个任务</span><br>    <span class="hljs-keyword">if</span> task_id &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> task_id &lt;= <span class="hljs-built_in">len</span>(g.data):<br>        tmp = copy.deepcopy(g.data[task_id-<span class="hljs-number">1</span>])<br>        tmp[<span class="hljs-string">&#x27;done&#x27;</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> jsonify(tmp)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(g.task_does_not_exist)<br></code></pre></td></tr></table></figure><ul><li>命令窗口进入到smileTaskMockServer.py文件所在的目录。</li><li>设置FLASK_APP：Set FLASK_APP&#x3D;smileTaskMockServer.py。</li><li>flask run回车，打开浏览器输入<a href="http://127.0.0.1:5000/api/tasks/1">http://127.0.0.1:5000/api/tasks/1</a>进行查看。</li></ul><blockquote><p><a href="http://class.itest.info/interface">Python接口测试-重定向科技</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>UnitTest框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/2020/01/01/Python/Python.Python%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/01/01/Python/Python.Python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>Python由荷兰数学和计算机科学研究学会的吉多·范罗苏姆于1990年代初设计，作为一门叫ABC语言的替代品，它是跨平台解释型脚本语言，面向对象，易于阅读和维护。<span id="more"></span></p><h2 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h2><ul><li>5个标准类型<ul><li>Numbers(数字)<ul><li>例如：int num &#x3D; 5、float f &#x3D; 3.14。</li><li>int，有符号整型。</li><li>long，长整型，可代表8进制和16进制，3.x版本中被移除，int替代。</li><li>float，浮点型。</li><li>complex，复数，a + bj，或complex(a, b)。</li></ul></li><li>String(字符串)<ul><li>例如：str &#x3D; “Practice makes perfect.”。</li><li>两种取值顺序，从左到右0开始索引，从右到左-1开始索引，例如：str[0]。</li></ul></li><li>List(列表)，支持嵌套。<ul><li>例如：list &#x3D; [‘a’, ‘b’, ‘c’]、nestedlist &#x3D; [1, 2, [3, 4, 5]]。</li><li>切片获取元素，从左到右0开始索引，从右到左-1开始索引，例如：list[1:]。</li></ul></li><li>Tuple(元组)，不能二次赋值。<ul><li>例如：tuple &#x3D; (1, 2, 3)、tinytuple &#x3D; (‘a’, ‘b’, ‘c’)。</li><li>切片获取元素，从左到右0开始索引，从右到左-1开始索引，例如：tuple[2]。</li></ul></li><li>Dictionary(字典)，例如：dict &#x3D; {‘a’: ‘1’, ‘b’: ‘2’, ‘c’: ‘3’}。</li></ul></li><li>数据类型转换，例如：x转整数int(x)、字符x转整数值ord(x)、整数x转8进制oct(x)。</li><li>7种运算符<ul><li>算术运算符：+、-、*、&#x2F;、%、**、&#x2F;&#x2F;。</li><li>比较(关系)运算符：&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;。</li><li>赋值运算符：&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、**&#x3D;、&#x2F;&#x2F;&#x3D;。</li><li>逻辑运算符：and、or、not。</li><li>位运算符：&amp;、|、^、~、&lt;&lt;、&gt;&gt;，将数字看作2进制来计算。</li><li>成员运算符：in、not in。</li><li>身份运算符：is、is not。<ul><li>&#x3D;&#x3D;用于判断引用变量的值是否相等。</li><li>is用于判断两个变量引用对象是否为同一个(同一块内存空间)。</li></ul></li><li>如果不清楚优先级关系，使用()表达。</li><li></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
