<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Allure 报告框架</title>
    <link href="/2022/03/01/testing/testing05-allure-bao-gao-kuang-jia/"/>
    <url>/2022/03/01/testing/testing05-allure-bao-gao-kuang-jia/</url>
    
    <content type="html"><![CDATA[<p>Allure是一款轻量级的开源自动化测试报告生成框架，支持绝大部分测试框架，例如TestNG、JUnit、PyTest、UnitTest等。</p><span id="more"></span><h1 id="1-allure框架"><a href="#1-allure框架" class="headerlink" title="1 allure框架"></a>1 allure框架</h1><ul><li>allure框架<ul><li><a href="https://github.com/allure-framework/allure2/releases">allure2下载</a>：<a href="https://github.com/allure-framework/allure2/releases/download/2.20.1/allure-2.20.1.zip">allure-2.20.1.zip</a>，JDK1.8版本，<code>pip install allure-pytest</code>安装Python依赖。</li><li>添加变量：控制面板—&gt;用户账户—&gt;更改环境变量—&gt;Path—&gt;添加<code>...\allure-2.20.1\bin</code>。</li><li>Python依赖包含allure-pytest和allure-python-commons两个包，生成与allure2兼容的报告数据。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case.py</span><br><br><br><span class="hljs-meta">@pytest.mark.skip()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---use case a---&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---use case b---&#x27;</span>)<br><br><span class="hljs-comment"># pytest -vs --alluredir=./report/xml --clean-alluredir         # 生成xml格式的报告数据</span><br><span class="hljs-comment"># allure serve report\xml                                       # 直接在本地浏览器中打开报告</span><br></code></pre></td></tr></table></figure><ul><li>报告结构介绍<ul><li>Overview：总览。</li><li>Categories：用例类别，默认failed和error，可快速查看哪些用例执行是failed和error的。</li><li>Suites：即所有用例的层级关系，可以依据package、module、class和method来查找用例。</li><li>Graphs：测试结果的图形化展示，包括分布图等。</li><li>Timeline：测试用例的执行顺序，包括执行时间。</li><li>Behaviors：依据epic、feature、story进行用例分组。</li><li>Packages：按package、module进行测试用例的分组。</li></ul></li></ul><h2 id="1-1-添加环境变量"><a href="#1-1-添加环境变量" class="headerlink" title="1-1 添加环境变量"></a>1-1 添加环境变量</h2><ul><li>添加环境变量<ul><li>Overview的ENVIRONMENT<ul><li>在生成xml格式的报告数据文件夹中，创建一个<code>environment.properties</code>文件。</li><li>同理也可以在生成xml格式的报告数据文件夹中创建一个<code>environment.xml</code>文件。</li></ul></li><li>环境变量添加完成后，需要重新执行命令<code>allure serve report\xml</code>，在本地浏览器中重新打开报告才能生效。</li></ul></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Txt">Browser=Chrome                                           # environment.properties文件<br>Browser.Version=107.0                                    # 最好不带注释信息，可能乱码显示<br>Stand=Production<br>Type=Properties<br><br>###########################################################################################<br>&lt;environment&gt;                                            &lt;!-- environment.xml文件 --&gt;<br>    &lt;parameter&gt;                                          &lt;!-- .xml配置优先于.properties --&gt;<br>        &lt;key&gt;Browser&lt;/key&gt;<br>        &lt;value&gt;Chrome&lt;/value&gt;<br>    &lt;/parameter&gt;<br>    &lt;parameter&gt;<br>        &lt;key&gt;Browser.Version&lt;/key&gt;<br>        &lt;value&gt;100.0&lt;/value&gt;<br>    &lt;/parameter&gt;<br>    &lt;parameter&gt;<br>        &lt;key&gt;Stand&lt;/key&gt;<br>        &lt;value&gt;Production&lt;/value&gt;<br>    &lt;/parameter&gt;<br>    &lt;parameter&gt;<br>        &lt;key&gt;Type&lt;/key&gt;<br>        &lt;value&gt;xml&lt;/value&gt;<br>    &lt;/parameter&gt;<br>&lt;/environment&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-自定义缺陷分类"><a href="#1-2-自定义缺陷分类" class="headerlink" title="1-2 自定义缺陷分类"></a>1-2 自定义缺陷分类</h2><ul><li>自定义缺陷分类<ul><li>Categories：在生成xml格式的报告数据文件夹中创建一个<code>categories.json</code>文件。</li><li>Json文件参数说明<ul><li>name：必填，类别名称，可以是中文。</li><li>messageRegex：可选，用例运行的错误消息，默认<code>&quot;.*&quot;</code>，可以通过正则表达式进行匹配。</li><li>traceRegex：可选，用例运行错误消息的堆栈跟踪，默认<code>&quot;.*&quot;</code>，可以通过正则表达式匹配。</li><li>matchedStatuses：可选，用例运行状态，默认<code>[&quot;failed&quot;,&quot;broken&quot;,&quot;passed&quot;,&quot;skipped&quot;,&quot;unknown&quot;]</code>。</li><li>如果用例运行结果的状态在列表中，并且错误消息和堆栈跟踪都与之模式相匹配，则测试结果属于该类别。</li></ul></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">[</span>                                                        <span class="hljs-comment">// categories.json文件</span><br>  <span class="hljs-punctuation">&#123;</span>                                                      <span class="hljs-comment">// 文件中最好不要带注释信息，否则无效</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ignored tests&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;skipped&quot;</span><span class="hljs-punctuation">]</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Infrastructure problems&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;broken&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;failed&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;messageRegex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*bye-bye.*&quot;</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Outdated tests&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;broken&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;traceRegex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*FileNotFoundException.*&quot;</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Execution failed&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;failed&quot;</span><span class="hljs-punctuation">]</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test defects&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;broken&quot;</span><span class="hljs-punctuation">]</span> <br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h1 id="2-allure注释说明"><a href="#2-allure注释说明" class="headerlink" title="2 allure注释说明"></a>2 allure注释说明</h1><ul><li>allure注释说明<ul><li><code>@allure.step()</code>：测试用例的步骤，参数传什么，在allure中步骤名就显示什么。</li><li><code>@allure.attach()</code>：显示不同类型的附件，补充测试结果，可依据自身情况调整。</li><li><code>@allure.title()</code>：自定义用例标题，支持占位符传递关键字参数，标题更具可读性。</li><li><code>@allure.description()</code>：为测试用例添加详细的描述，并且将其展示到测试报告中。</li><li>访问链接：将测试报告与bug管理工具或测试管理系统进行关联。<ul><li><code>@allure.link()</code>：访问网址的链接。</li><li><code>@allure.issue()</code>：访问缺陷的链接。</li><li><code>@allure.testcase()</code>：访问用例链接。</li></ul></li><li>BDD风格的标记：行为驱动开发(BDD)，在测试驱动开发(TDD)基础上发展而来的一种软件开发方法。<ul><li><code>@allure.epic()</code>：相当于module级的标签，敏捷里面的概念。</li><li><code>@allure.feature()</code>：相当于class级的标签，epic是feature的父级。</li><li><code>@allure.story()</code>：相当于method级的标签，feature是story的父级。</li></ul></li><li><code>@allure.severity()</code>：划分测试用例的等级，并展示到测试报告内。</li><li>测试套件：已有BDD风格的标记，测试套件不常用，可以做简单了解。<ul><li><code>@allure.suite()</code>：是与当前测试套件同级的测试套件。</li><li><code>@allure.sub_suite()</code>：当前测试套件的子级测试套件。</li><li><code>@allure.parent_suite()</code>：当前测试套件的父级测试套件。</li></ul></li></ul></li></ul><h2 id="2-1-用例步骤"><a href="#2-1-用例步骤" class="headerlink" title="2-1 用例步骤"></a>2-1 用例步骤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_step.py</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Open the login site.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter your account and password.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password</span>():<br>    input_username_password_and_login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter account, password &#123;arg1&#125;, &#123;arg2&#125;, and click login.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password_and_login</span>(<span class="hljs-params">arg1, arg2</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Verify the login process.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>():<br>    <span class="hljs-built_in">open</span>()<br>    input_username_password()<br><br><span class="hljs-comment"># pytest -vs test_step.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-2-用例补充"><a href="#2-2-用例补充" class="headerlink" title="2-2 用例补充"></a>2-2 用例补充</h2><ul><li>用例补充<ul><li><code>allure.attach(body, name, attachment_type, extension)</code>：用于未想要导入现成的附件情况。</li><li><code>allure.attach.file(source, name, attachment_type, extension)</code>：用于已有对应的附件情况。<ul><li>body：显示内容。</li><li>name：附件名称。</li><li>source：附件路径。</li><li>extension：附件扩展名。</li><li>attachment_type：附件类型。</li></ul></li><li>附件类型<ul><li>text<ul><li><code>CSV = (&quot;text/csv&quot;, &quot;csv&quot;)</code></li><li><code>TEXT = (&quot;text/plain&quot;, &quot;txt&quot;)</code></li><li><code>HTML = (&quot;text/html&quot;, &quot;html&quot;)</code></li><li><code>URI_LIST = (&quot;text/uri-list&quot;, &quot;uri&quot;)</code></li><li><code>TSV = (&quot;text/tab-separated-values&quot;, &quot;tsv&quot;)</code></li></ul></li><li>image<ul><li><code>PNG = (&quot;image/png&quot;, &quot;png&quot;)</code></li><li><code>JPG = (&quot;image/jpg&quot;, &quot;jpg&quot;)</code></li><li><code>BMP = (&quot;image/bmp&quot;, &quot;bmp&quot;)</code></li><li><code>GIF = (&quot;image/gif&quot;, &quot;gif&quot;)</code></li><li><code>TIFF = (&quot;image/tiff&quot;, &quot;tiff&quot;)</code></li><li><code>SVG = (&quot;image/svg-xml&quot;, &quot;svg&quot;)</code></li></ul></li><li>video<ul><li><code>MP4 = (&quot;video/mp4&quot;, &quot;mp4&quot;)</code></li><li><code>OGG = (&quot;video/ogg&quot;, &quot;ogg&quot;)</code></li><li><code>WEBM = (&quot;video/webm&quot;, &quot;webm&quot;)</code></li></ul></li><li>application<ul><li><code>XML = (&quot;application/xml&quot;, &quot;xml&quot;)</code></li><li><code>PDF = (&quot;application/pdf&quot;, &quot;pdf&quot;)</code></li><li><code>JSON = (&quot;application/json&quot;, &quot;json&quot;)</code></li><li><code>YAML = (&quot;application/yaml&quot;, &quot;yaml&quot;)</code></li><li><code>PCAP = (&quot;application/vnd.tcpdump.pcap&quot;, &quot;pcap&quot;)</code></li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_attach.py</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Open the login site.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter your account and password.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password</span>():<br>    input_username_password_and_login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter account, password &#123;arg1&#125;, &#123;arg2&#125;, and click login.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password_and_login</span>(<span class="hljs-params">arg1, arg2</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Verify the login process.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>():<br>    <span class="hljs-built_in">open</span>()<br>    input_username_password()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_attach</span>():<br>    allure.attach(<span class="hljs-string">&#x27;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;strong&gt;Add an html page.&lt;/strong&gt;&lt;/body&gt;&#x27;</span>,<br>                  <span class="hljs-string">&#x27;Attach with HTML type&#x27;</span>, allure.attachment_type.HTML)<br>    <span class="hljs-comment"># 注意：需要在当前test_attach.py文件的目录下放置report.html和report.jpg，否则报错</span><br>    allure.attach.file(<span class="hljs-string">&#x27;./report.html&#x27;</span>, attachment_type=allure.attachment_type.HTML)<br>    allure.attach.file(<span class="hljs-string">&#x27;./report.jpg&#x27;</span>, attachment_type=allure.attachment_type.JPG)<br><br><span class="hljs-comment"># pytest test_attach.py --alluredir=./report/annex</span><br><span class="hljs-comment"># allure serve ./report/annex</span><br></code></pre></td></tr></table></figure><h2 id="2-3-用例标题"><a href="#2-3-用例标题" class="headerlink" title="2-3 用例标题"></a>2-3 用例标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_title.py</span><br><span class="hljs-keyword">import</span> allure<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Pre-operation: Get username.&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_use</span>(<span class="hljs-params">request</span>):<br>    use = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Username: <span class="hljs-subst">&#123;use&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> use<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Pre-operation: Get password.&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pwd</span>(<span class="hljs-params">request</span>):<br>    pwd = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Password: <span class="hljs-subst">&#123;pwd&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> pwd<br><br><br>use_data = [<span class="hljs-string">&quot;Holy&quot;</span>, <span class="hljs-string">&quot;Lucy&quot;</span>]<br>pwd_data = [<span class="hljs-string">&quot;1235&quot;</span>, <span class="hljs-string">&quot;1236&quot;</span>]<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Username: &#123;get_use&#125; --- Password: &#123;get_pwd&#125;.&quot;</span></span>)   </span><span class="hljs-comment"># 占位符传递关键字参数</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;get_use&quot;</span>, use_data, indirect=<span class="hljs-literal">True</span></span>)    </span><span class="hljs-comment"># 动态标题，结合parametrize使用</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;get_pwd&quot;</span>, pwd_data, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_userinfo</span>(<span class="hljs-params">get_use, get_pwd</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Username: <span class="hljs-subst">&#123;get_use&#125;</span> --- Password: <span class="hljs-subst">&#123;get_pwd&#125;</span>.&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_title.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-4-用例描述"><a href="#2-4-用例描述" class="headerlink" title="2-4 用例描述"></a>2-4 用例描述</h2><ul><li>用例描述<ul><li>在用例函数声明的下方使用<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>，使用<code>@allure.description()</code>装饰器。</li><li>使用<code>@allure.description_html()</code>装饰器添加html描述，类似attach传html。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_description.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_description1</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Verify 1=1</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><br><br><span class="hljs-meta">@allure.description(<span class="hljs-params"><span class="hljs-string">&quot;Verify 1=1&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_description2</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><br><br><span class="hljs-meta">@allure.description_html(<span class="hljs-params"><span class="hljs-string">&quot;&quot;&quot;&lt;h1&gt;Verify 1=1&lt;/h1&gt;&quot;&quot;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_description3</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><br><span class="hljs-comment"># pytest -vs test_description.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-5-访问链接"><a href="#2-5-访问链接" class="headerlink" title="2-5 访问链接"></a>2-5 访问链接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_access.py</span><br><br>test_case_link = <span class="hljs-string">&quot;https://docs.qq.com/mind/DSnRoQU9kRlNTRm1v&quot;</span><br><br><br><span class="hljs-meta">@allure.link(<span class="hljs-params"><span class="hljs-string">&quot;https://stitch-top.github.io&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.link(<span class="hljs-params"><span class="hljs-string">&quot;https://stitch-top.github.io&quot;</span>, name=<span class="hljs-string">&quot;Click on the title to view the content.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_name_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.issue(<span class="hljs-params"><span class="hljs-string">&quot;https://docs.qq.com/mind/DSkNVTGVwVUhzYnBt&quot;</span>, <span class="hljs-string">&quot;Defect link&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_issue_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.testcase(<span class="hljs-params">test_case_link, <span class="hljs-string">&quot;Test case link&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_testcase_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_access.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-6-BDD风格的标记"><a href="#2-6-BDD风格的标记" class="headerlink" title="2-6 BDD风格的标记"></a>2-6 BDD风格的标记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                       <span class="hljs-comment"># test_style.py</span><br><br><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;epic_a&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_a&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_b&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;feature_b&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_b&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.epic(<span class="hljs-params"><span class="hljs-string">&quot;epic_b&quot;</span></span>)</span><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;feature_b&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_b&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_e</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_style.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br><span class="hljs-comment"># pytest --alluredir ./report/allure --allure-epics=epic_b          # 只运行epic中名为epic_b的用例</span><br><span class="hljs-comment"># pytest --alluredir ./report/allure --allure-features=feature_b    # 只运行feature中名为feature_b的用例</span><br><span class="hljs-comment"># pytest test_style.py --allure-stories story_a,story_b             # 只运行story_a,story_b的用例</span><br><span class="hljs-comment"># pytest test_style.py --allure-features feature_b --allure-stories story_a</span><br></code></pre></td></tr></table></figure><h2 id="2-7-用例等级的划分"><a href="#2-7-用例等级的划分" class="headerlink" title="2-7 用例等级的划分"></a>2-7 用例等级的划分</h2><ul><li>用例等级的划分<ul><li>blocker：阻塞缺陷，功能未实现。</li><li>critical：严重缺陷，功能点缺失。</li><li>normal：一般缺陷，边界情况，格式错误。</li><li>minor：次要缺陷，界面错误及UI需求不符。</li><li>trivial：轻微缺陷，必须项无提示，或提示不规范。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                     <span class="hljs-comment"># test_severity.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                                     <span class="hljs-comment"># 没标记severity的方法默认优先级为normal</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.BLOCKER</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():                                                     <span class="hljs-comment"># 优先级为blocker</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.CRITICAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():                                                     <span class="hljs-comment"># 优先级为critical</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.NORMAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>():                                                     <span class="hljs-comment"># 优先级为normal</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.MINOR</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_e</span>():                                                     <span class="hljs-comment"># 优先级为minor</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.TRIVIAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_f</span>():                                                     <span class="hljs-comment"># 优先级为trivial</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.NORMAL</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>(<span class="hljs-title class_ inherited__">object</span>):                                           <span class="hljs-comment"># 类优先级normal</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_g</span>(<span class="hljs-params">self</span>):                                             <span class="hljs-comment"># 默认继承类优先级normal</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @allure.severity(<span class="hljs-params">allure.severity_level.CRITICAL</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_h</span>(<span class="hljs-params">self</span>):                                             <span class="hljs-comment"># 类优先级normal，函数优先级critical</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_severity.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br><span class="hljs-comment"># pytest test_severity.py --allure-severities=normal,critical     # 只运行优先级为normal和critical的用例</span><br><span class="hljs-comment"># pytest test_severity.py --allure-severities blocker,critical    # 只运行优先级为blocker和critical的用例</span><br></code></pre></td></tr></table></figure><h2 id="2-8-测试套件的使用"><a href="#2-8-测试套件的使用" class="headerlink" title="2-8 测试套件的使用"></a>2-8 测试套件的使用</h2><ul><li>测试套件的使用<ul><li>未被suite修饰时，一个py文件和一个class默认就是一个测试套件。</li><li>关系为py包含class套件，py和class下都可有它们各自的测试用例。</li><li>被suite修饰的类和方法，会被认为是和当前文件同级的测试套件。</li><li>如果类和类内方法同时被修饰，类修饰会被类内方法的修饰替代。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_suite.py</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test kit: suite&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test kit: sub_suite&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test kit: parent_suite&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test suites&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSuiteX</span>:<br><span class="hljs-meta">    @allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;class internal test kit d&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_e</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSuiteY</span>:                                               <span class="hljs-comment"># 无suite修饰的测试类</span><br><span class="hljs-meta">    @allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;class internal test kit f&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_f</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_g</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_suite.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h1 id="3-命令行参数介绍"><a href="#3-命令行参数介绍" class="headerlink" title="3 命令行参数介绍"></a>3 命令行参数介绍</h1><ul><li>命令行参数介绍<ul><li><code>pytest --alluredir=./report/xml test_file.py</code>：执行test_file.py文件用例。<ul><li>当多次执行不同文件用例时，报告存放的路径保持一致，那么报告数据将累加。</li><li>使用<code>--clean-alluredir</code>命令行参数生成的报告，可以清空报告的历史执行记录。</li><li>命令：<code>pytest --alluredir=./report/xml test_file.py --clean-alluredir</code>。</li></ul></li><li><code>allure -h</code>：查看参数帮助文档。<ul><li>generate：生成allure的html报告。</li><li>serve：启动allure服务，打开报告。</li><li>open：打开用generate生成的报告。</li></ul></li><li>浏览器打开allure报告的两种方式<ul><li><code>pytest -sq --alluredir=./report/xml</code>：执行测试用例文件，并指定结果目录。</li><li><code>allure serve ./report/xml</code>：打开allure测试报告。</li><li><code>allure generate -c -o ./report/xml ./report/html</code>：生成allure的html报告。</li><li><code>allure open ./report/html</code>：打开allure测试报告。</li></ul></li></ul></li></ul><h1 id="4-用例标题动态化"><a href="#4-用例标题动态化" class="headerlink" title="4 用例标题动态化"></a>4 用例标题动态化</h1><ul><li>用例标题动态化<ul><li>使用参数化，报告默认的用例标题为用例名称，可读性差。</li><li>参数化使用ids，会保留用例名称，也无法完全解决可读性差的问题。</li><li>若使用<code>@allure.title()</code>装饰器写死用例标题，后期维护成本较高。</li><li>将parametrize参数化数据驱动与<code>@allure.title()</code>装饰器结合使用，更加高效便捷。</li></ul></li></ul><h2 id="4-1-参数化"><a href="#4-1-参数化" class="headerlink" title="4-1 参数化"></a>4-1 参数化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param1.py</span><br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)          </span><span class="hljs-comment"># 参数化默认的标题</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param1.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-2-参数化id"><a href="#4-2-参数化id" class="headerlink" title="4-2 参数化id"></a>4-2 参数化id</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param2.py</span><br><br>info = [<br>    pytest.param(&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;admin1 login success&quot;</span>),<br>    pytest.param(&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;admin2 failed to log in&quot;</span>),<br>    pytest.param(&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;admin3 username does not exist&quot;</span>)<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)          </span><span class="hljs-comment"># 参数化ids</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param2.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-3-参数化ids"><a href="#4-3-参数化ids" class="headerlink" title="4-3 参数化ids"></a>4-3 参数化ids</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param3.py</span><br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br>ids = [<span class="hljs-string">&quot;admin1 login success&quot;</span>, <span class="hljs-string">&quot;admin2 failed to log in&quot;</span>, <span class="hljs-string">&quot;admin3 username does not exist&quot;</span>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, ids=ids, indirect=<span class="hljs-literal">True</span></span>) </span><span class="hljs-comment"># 参数化ids</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param3.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-4-allure-title"><a href="#4-4-allure-title" class="headerlink" title="4-4 @allure.title()"></a>4-4 @allure.title()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param4.py</span><br><span class="hljs-keyword">import</span> allure<br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Login use case: admin1 success, admin2 failure, admin3 user name does not exist.&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)          </span><span class="hljs-comment"># @allure.title()写死标题</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param4.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-5-参数化与装饰器结合"><a href="#4-5-参数化与装饰器结合" class="headerlink" title="4-5 参数化与装饰器结合"></a>4-5 参数化与装饰器结合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param5.py</span><br><span class="hljs-keyword">import</span> allure<br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Login use case: &#123;login&#125;.&quot;</span></span>)                       </span><span class="hljs-comment"># 参数化与title动态生成标题，结合fixture</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">info = [</span><br><span class="hljs-string">    (&quot;admin1&quot;, &quot;12345&quot;, &quot;admin1 login success&quot;),</span><br><span class="hljs-string">    (&quot;admin2&quot;, &quot;12346&quot;, &quot;admin2 failed to log in&quot;),</span><br><span class="hljs-string">    (&quot;admin3&quot;, &quot;12347&quot;, &quot;admin3 username does not exist&quot;)</span><br><span class="hljs-string">]</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">@allure.title(&quot;Login use case: &#123;title&#125;.&quot;)                       # 参数化与title动态生成标题，不结合fixture</span><br><span class="hljs-string">@pytest.mark.parametrize(&quot;username, pwd, title&quot;, info)</span><br><span class="hljs-string">def test_login(username, pwd, title):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># pytest -vs test_param5.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h1 id="5-dynamic动态标记"><a href="#5-dynamic动态标记" class="headerlink" title="5 dynamic动态标记"></a>5 dynamic动态标记</h1><ul><li>dynamic动态标记<ul><li><code>allure.dynamic.issue</code>、<code>allure.dynamic.link</code>、<code>allure.dynamic.testcase</code>。</li><li><code>allure.dynamic.story</code>、<code>allure.dynamic.feature</code>、<code>allure.dynamic.description</code>。</li><li><code>allure.dynamic.title</code>、<code>allure.dynamic.severity</code>、<code>allure.dynamic.description_html</code>。</li></ul></li></ul><h2 id="5-1-title"><a href="#5-1-title" class="headerlink" title="5-1 title"></a>5-1 title</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic1.py</span><br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Title: Use case will be replaced after successful execution.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_with_dynamic_title_success</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br>    allure.dynamic.title(<span class="hljs-string">&quot;Success: updated title.&quot;</span>)<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Title: Use case execution will not be replaced after failure.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_with_dynamic_title_failed</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br>    allure.dynamic.title(<span class="hljs-string">&quot;Failure: Invalid title.&quot;</span>)             <span class="hljs-comment"># Python执行机制影响，该行代码不会执行</span><br><br><span class="hljs-comment"># pytest -vs test_dynamic1.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="5-2-description"><a href="#5-2-description" class="headerlink" title="5-2 description"></a>5-2 description</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic2.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Description: The use case will be replaced after successful execution.</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br>    allure.dynamic.description(<span class="hljs-string">&quot;Success: updated description.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Description: The use case will not be replaced after a failed execution.</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br>    allure.dynamic.description(<span class="hljs-string">&quot;Failure: Invalid description.&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_dynamic2.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="5-3-结合参数化"><a href="#5-3-结合参数化" class="headerlink" title="5-3 结合参数化"></a>5-3 结合参数化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic3.py</span><br><span class="hljs-keyword">import</span> pytest<br><br>info = [<br>    [<span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-string">&quot;Use case login success.&quot;</span>],             <span class="hljs-comment"># 这里必须是列表，字典顺序会乱</span><br>    [<span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;12346&quot;</span>, <span class="hljs-string">&quot;Use case login failed.&quot;</span>],<br>    [<span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;12347&quot;</span>, <span class="hljs-string">&quot;Account does not exist.&quot;</span>]<br>]<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, pwd, title&quot;</span>, info</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">username, pwd, title</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param username:</span><br><span class="hljs-string">    :param pwd:</span><br><span class="hljs-string">    :param title:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    allure.dynamic.title(title)<br>    allure.dynamic.description(<span class="hljs-string">f&quot;Username: <span class="hljs-subst">&#123;username&#125;</span>, Password: <span class="hljs-subst">&#123;pwd&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_dynamic3.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="5-4-结合其他特性"><a href="#5-4-结合其他特性" class="headerlink" title="5-4 结合其他特性"></a>5-4 结合其他特性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic4.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br>    allure.dynamic.feature(<span class="hljs-string">&quot;Dynamic feature&quot;</span>)<br>    allure.dynamic.story(<span class="hljs-string">&quot;Dynamic story&quot;</span>)<br>    allure.dynamic.severity(allure.severity_level.BLOCKER)<br>    allure.dynamic.link(<span class="hljs-string">&quot;Dynamic link: https://stitch-top.github.io&quot;</span>)<br>    allure.dynamic.issue(<span class="hljs-string">&quot;Dynamic issue: https://docs.qq.com/mind/DSkNVTGVwVUhzYnBt&quot;</span>)<br>    allure.dynamic.testcase(<span class="hljs-string">&quot;Dynamic testcase: https://docs.qq.com/mind/DSnRoQU9kRlNTRm1v&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_dynamic4.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h1 id="6-pytest-xdist插件"><a href="#6-pytest-xdist插件" class="headerlink" title="6 pytest-xdist插件"></a>6 pytest-xdist插件</h1><ul><li>pytest-xdist插件<ul><li>为了让自动化测试用例可分布式执行，节省时间，引入pytest-xdist插件。</li><li>pytest-xdist属于进程级别的并发，分布式执行测试用例的设计原则如下。<ul><li>用例之间相互独立：保证用例之间没有依赖关系，可以完全独立运行。</li><li>用例没有执行顺序：保证随机顺序的执行测试用例，都可以正常执行。</li><li>用例之间互不影响：保证用例的运行结果不会影响到其他的测试用例。</li></ul></li><li>命令窗口下安装pytest-xdist插件：<code>pip install pytest-xdist</code>。</li><li>原理<ul><li>xdist通过产生一个或多个由master控制的workers来工作，再按master的指示运行用例。</li><li>每个workers负责执行收集到的完整测试用例集，master本身是不执行任何测试用例的。</li></ul></li><li>命令<ul><li>指定CPU的具体个数：<code>pytest -s -n num</code>，<code>-n</code>可以用<code>--numprocesses</code>代替。</li><li>使用与当前计算机CPU内核一样多的进程，速度提升大：<code>pytest -s -n auto</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># ..\conftest.py                                                # 项目结构</span><br><span class="hljs-comment"># ..\test_case.py</span><br><span class="hljs-comment"># ..\test_module1\test_case1.py</span><br><span class="hljs-comment"># ..\test_module2\test_case2.py</span><br><span class="hljs-comment"># ..\test_module3\test_case3.py</span><br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># conftest.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---start use case---&quot;</span>)<br>    name, pwd = <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span><br><br>    <span class="hljs-keyword">yield</span> name, pwd<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---exit use case---&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case.py</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_index</span>(<span class="hljs-params">login, x</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---home use case---&quot;</span>, x)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case1.py</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case1</span>(<span class="hljs-params">x</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module1: test case 1&quot;</span>, x)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case2.py</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case2</span>(<span class="hljs-params">x</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module2: test case 2&quot;</span>, x)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep                                          <span class="hljs-comment"># test_case3.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case3</span>():<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module3: test case 3&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;                  ！！！执行时可在任务管理器中查看相应的IDE执行情况。</span><br><span class="hljs-string"># pytest                                                        # 不使用分布式执行</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 31 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_case.py ..........                                                             [ 32%]</span><br><span class="hljs-string">test_module1\test_case1.py ..........                                               [ 64%]</span><br><span class="hljs-string">test_module2\test_case2.py ..........                                               [ 96%]</span><br><span class="hljs-string">test_module3\test_case3.py ..........                                               [100%]</span><br><span class="hljs-string">=================================== 31 passed in 31.43s ===================================</span><br><span class="hljs-string"></span><br><span class="hljs-string"># pytest -s -n auto                                             # 使用分布式执行</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">gw0 [31] / gw1 [31] / gw2 [31] / gw3 [31] / gw4 [31] / gw5 [31]</span><br><span class="hljs-string">...............................</span><br><span class="hljs-string">=================================== 31 passed in 7.45s ====================================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-1-插件问题"><a href="#6-1-插件问题" class="headerlink" title="6-1 插件问题"></a>6-1 插件问题</h2><ul><li>插件问题<ul><li>优点<ul><li>xdist插件充分利用机器多核CPU的优势，提高了资源利用率。</li><li>将常用的功能放到fixture，更是提高了代码的复用性和维护性。</li></ul></li><li>缺点<ul><li>接口自动化时，通常会将接口放到fixture中，并设置<code>scope=session</code>，全局只运行一次。</li><li>此时若使用xdist插件进行分布式执行，<code>scope=session</code>的fixture将无法保证只运行一次。</li></ul></li><li>尽管没有内置支持确保<code>scope=session</code>的fixture只执行一次，但可通过文件锁进行进程间的通信来实现。<ul><li>使用xdist指定n个线程执行用例时，使用文件锁，fixture实际只执行一次。</li><li>其他n-1个进程通过进程间读取共享缓存文件的方式，复用fixture的数据。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># ..\conftest.py                                                # 项目结构</span><br><span class="hljs-comment"># ..\test_case1.py</span><br><span class="hljs-comment"># ..\test_case2.py</span><br><span class="hljs-comment"># ..\test_case3.py</span><br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># contest.py</span><br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)                                </span><span class="hljs-comment"># 未用文件锁</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xdist_fixture</span>():<br>    data = <span class="hljs-built_in">str</span>(random.random())<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case1</span>(<span class="hljs-params">xdist_fixture</span>):                                  <span class="hljs-comment"># test_case1.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data1：<span class="hljs-subst">&#123;xdist_fixture&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case2</span>(<span class="hljs-params">xdist_fixture</span>):                                  <span class="hljs-comment"># test_case2.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data2：<span class="hljs-subst">&#123;xdist_fixture&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case3</span>(<span class="hljs-params">xdist_fixture</span>):                                  <span class="hljs-comment"># test_case3.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data3：<span class="hljs-subst">&#123;xdist_fixture&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># pytest -n 3 --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test_case1---Data1：0.8613196731229967                          # session的fixture执行了3次</span><br><span class="hljs-string">test_case2---Data2：0.2953396024322359</span><br><span class="hljs-string">test_case3---Data3：0.5252796017515756</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-2-使用文件锁"><a href="#6-2-使用文件锁" class="headerlink" title="6-2 使用文件锁"></a>6-2 使用文件锁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json                                                     <span class="hljs-comment"># contest.py</span><br><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> filelock <span class="hljs-keyword">import</span> FileLock<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)                                </span><span class="hljs-comment"># 使用文件锁</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xdist_fixture</span>(<span class="hljs-params">tmp_path_factory, worker_id</span>):<br>    <span class="hljs-comment"># In case of stand-alone operation, the code blocks here cannot be deleted, modified.</span><br>    <span class="hljs-keyword">if</span> worker_id == <span class="hljs-string">&quot;master&quot;</span>:                                   <span class="hljs-comment"># 不可删除、修改</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Custom code blocks.</span><br><span class="hljs-string">        This is where you customize the actions to be done, </span><br><span class="hljs-string">        such as: login requests, adding data, clearing database history, etc.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        data = <span class="hljs-built_in">str</span>(random.random())<br>        <span class="hljs-comment"># If required by the test case, the corresponding data, such as token, can be returned.</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Master is executed for the first time, the data is <span class="hljs-subst">&#123;data&#125;</span>.&quot;</span>)<br>        <span class="hljs-keyword">return</span> data<br><br>    <span class="hljs-comment"># In case of distributed operation, get a temporary directory shared by all child nodes.</span><br>    fn = root_tmp_dir / <span class="hljs-string">&quot;data.json&quot;</span>                             <span class="hljs-comment"># 不可删除、修改</span><br>    root_tmp_dir = tmp_path_factory.getbasetemp().parent        <span class="hljs-comment"># 不可删除、修改</span><br>    <br>    <span class="hljs-keyword">with</span> FileLock(<span class="hljs-built_in">str</span>(fn) + <span class="hljs-string">&quot;.lock&quot;</span>):                           <span class="hljs-comment"># 不可删除、修改</span><br>        <span class="hljs-keyword">if</span> fn.is_file():                                        <span class="hljs-comment"># 不可删除、修改</span><br>            <span class="hljs-comment"># Read data from a cache file, like a token in the case of a login operation.</span><br>            data = json.loads(fn.read_text())<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The worker reads the cache file and the data is <span class="hljs-subst">&#123;data&#125;</span>.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            Custom code blocks.</span><br><span class="hljs-string">            This is where you customize the actions to be done, </span><br><span class="hljs-string">            such as: login requests, adding data, clearing database history, etc.</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            data = <span class="hljs-built_in">str</span>(random.random())<br>            fn.write_text(json.dumps(data))                     <span class="hljs-comment"># 不可删除、修改</span><br>            <span class="hljs-comment"># If required by the test case, the corresponding data, such as token, can be returned.</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The worker reads the cache file and the data is <span class="hljs-subst">&#123;data&#125;</span>.&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># pytest -n 3 --alluredir=./report/xml --clean-alluredir        # xdist分布式执行</span><br><span class="hljs-string"># allure serve report\xml</span><br><span class="hljs-string">The worker reads the cache file and the data is 0.14799648172518787.</span><br><span class="hljs-string">Data1：0.14799648172518787</span><br><span class="hljs-string">The worker reads the cache file and the data is 0.14799648172518787.</span><br><span class="hljs-string">Data2：0.14799648172518787</span><br><span class="hljs-string">The worker reads the cache file and the data is 0.14799648172518787.</span><br><span class="hljs-string">Data3：0.14799648172518787</span><br><span class="hljs-string"></span><br><span class="hljs-string"># pytest --alluredir=./report/xml --clean-alluredir             # 不使用xdist分布式执行</span><br><span class="hljs-string"># allure serve report\xml</span><br><span class="hljs-string">Master is executed for the first time, the data is 0.5299300518971257.</span><br><span class="hljs-string">Data1：0.5299300518971257</span><br><span class="hljs-string">Data2：0.5299300518971257</span><br><span class="hljs-string">Data3：0.5299300518971257</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="7-重复执行用例插件"><a href="#7-重复执行用例插件" class="headerlink" title="7 重复执行用例插件"></a>7 重复执行用例插件</h1><ul><li>重复执行用例插件<ul><li>pytest-repeat是一个pytest插件，安装命令：<code>pip install pytest-repeat</code>。</li><li>可以重复执行单个测试用例，或多个测试用例，也可以自定义重复执行的次数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                                   <span class="hljs-comment"># test_repeat1.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs --count 3                                          # 指定重复运行3次</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 6 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat1.py::test_a[1-3] ---use case a---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_a[2-3] ---use case a---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_a[3-3] ---use case a---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_b[1-3] ---use case b---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_b[2-3] ---use case b---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_b[3-3] ---use case b---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">==================================== warnings summary =====================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">=============================== 6 passed, 1 warning in 0.04s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-1-重复直到失败"><a href="#7-1-重复直到失败" class="headerlink" title="7-1 重复直到失败"></a>7-1 重复直到失败</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random                                                   <span class="hljs-comment"># test_repeat2.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():                                                <br>    num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">assert</span> num != <span class="hljs-number">10</span><br><br><span class="hljs-comment"># pytest --count 11 -x test_repeat2.py                          # 重复执行11次直到失败停止</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 11 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat2.py ......F</span><br><span class="hljs-string">======================================== FAILURES =========================================</span><br><span class="hljs-string">_____________________________________ test_case[7-11] _____________________________________</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_case():</span><br><span class="hljs-string">        num = random.randint(1, 11)</span><br><span class="hljs-string">&gt;       assert num != 10</span><br><span class="hljs-string">E       assert 10 != 10</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat2.py:6: AssertionError</span><br><span class="hljs-string">==================================== warnings summary =====================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">================================== short test summary info ================================</span><br><span class="hljs-string">FAILED test_repeat2.py::test_case[7-11] - assert 10 != 10</span><br><span class="hljs-string">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="hljs-string">=========================== 1 failed, 6 passed, 1 warning in 0.57s ========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-2-repeat装饰器"><a href="#7-2-repeat装饰器" class="headerlink" title="7-2 repeat装饰器"></a>7-2 repeat装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_repeat3.py</span><br><br><br><span class="hljs-meta">@pytest.mark.repeat(<span class="hljs-params"><span class="hljs-number">3</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case---&quot;</span>)<br><br><span class="hljs-comment"># pytest test_repeat3.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat3.py ...                                                                 [100%]</span><br><span class="hljs-string">==================================== warnings summary =====================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">=============================== 3 passed, 1 warning in 0.12s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-3-命令参数说明"><a href="#7-3-命令参数说明" class="headerlink" title="7-3 命令参数说明"></a>7-3 命令参数说明</h2><ul><li>命令参数说明<ul><li><code>--repeat-scope</code>：覆盖默认的用例执行顺序，类似于fixture的scope。</li><li>function：默认，范围针对每个用例重复执行，然后再执行下一个用例。</li><li>class：以类为用例的集合单位，重复执行类里面的用例，再执行下一个用例。</li><li>module：以模块为集合单位，重复执行模块里面的用例，再执行下一个用例。</li><li>session：重复整个测试会话，即所有测试用例都执行一次，然后再执行第二次。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_repeat4.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase1</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br>        <br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case d---&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># pytest -s --count=2 --repeat-scope=class test_repeat4.py      # 重复执行class级别用例</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string"></span><br><span class="hljs-string"># pytest -s --count=2 --repeat-scope=module test_repeat4.py     # 重复执行module级别用例</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Testing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Allure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyTest 测试框架</title>
    <link href="/2022/02/03/testing/testing04-pytest-ce-shi-kuang-jia/"/>
    <url>/2022/02/03/testing/testing04-pytest-ce-shi-kuang-jia/</url>
    
    <content type="html"><![CDATA[<p>PyTest是Python的一种单元测试框架，与Python自带的UnitTest测试框架类似，但使用比UnitTest框架更简洁，效率更高。</p><span id="more"></span><h1 id="1-规则说明"><a href="#1-规则说明" class="headerlink" title="1 规则说明"></a>1 规则说明</h1><ul><li>规则说明<ul><li>PyTest是Python2默认自带的，在Python3中则是独立的，需使用<code>pip install pytest</code>进行安装。</li><li>运行规则<ul><li>查找当前目录及子目录中<code>test_*.py</code>或<code>*_test.py</code>文件。</li><li>找到所有的文件后，执行文件中以<code>test</code>开头的所有函数。</li></ul></li><li>用例设计规则<ul><li>测试文件以<code>test_</code>开头，或以<code>_test</code>结尾，测试类以<code>Test</code>开头，并且不能带有<code>init</code>方法。</li><li>测试函数和方法以<code>test_</code>开头，断言用<code>assert</code>，所有的package包必须带<code>__init__.py</code>文件。</li></ul></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">pip install pytest                          # 安装PyTest<br>pip show pytest                             # 查看PyTest版本的详细信息<br>pytest --version                            # 简单查看PyTest的安装版本<br>pytest -h                                   # PyTest查看帮助<br>pytest --<span class="hljs-built_in">help</span>                               # PyTest查看帮助<br></code></pre></td></tr></table></figure><h2 id="1-1-用例执行规则"><a href="#1-1-用例执行规则" class="headerlink" title="1-1 用例执行规则"></a>1-1 用例执行规则</h2><ul><li>用例执行规则<ul><li>执行某个目录下所有的用例：<code>pytest FolderName/</code>。</li><li>执行某个文件中的所有用例：<code>pytest FileName.py</code>。</li><li>遇到错误时，停止正在执行的测试用例：<code>pytest -x FileName.py</code>。</li><li>用例错误个数达到指定数量时，停止测试：<code>pytest --maxfail=num</code>。</li><li>按照关键字进行模糊匹配，匹配名称不区分大小写：<code>pytest -k &quot;xxx&quot;</code>。</li><li>简单结果：<code>pytest -q FileName.py</code>，<code>--quiet decrease verbosity</code>。</li><li>按节点运行<ul><li>每个测试用例都分配了唯一的nodeid，nodeid由模块名和说明符组成。</li><li>模块名和说明符以<code>::</code>间隔，说明符可以包含类名、函数名和标记参数。</li></ul></li><li>标记表达式运行用<code>@pytest.mark.slow</code>修饰器修饰的所有用例：<code>pytest -m slow</code>。</li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">pytest                                   # 执行PyTest用例的命令，推荐使用<br>py.test                                  # 某文件夹下不带参数执行时，查找该文件夹下所有符合条件的用例<br>python -m pytest<br><br>pytest -k &quot;ClassName&quot;                    # 运行ClassName类下的所有方法<br>pytest -k &quot;MethodName&quot;                   # 运行所有名为MethodName的方法<br>pytest -k &quot;ClassName and <span class="hljs-keyword">not</span> MethodName&quot; # 运行ClassName类下的除MethodName以外的所有方法<br><br>pytest FileName.py::FunctionName                       # 函数名<br>pytest FileName.py::ClassName::FunctionName            # 类名+函数名<br>pytest FileName.py::ClassName::FunctionName[num1-num2] # 类名+函数名+标记参数<br>pytest FileName.py -vv                                 # FileName.py文件下的所有用例节点执行结果<br></code></pre></td></tr></table></figure><h2 id="1-2-PyCharm运行方式"><a href="#1-2-PyCharm运行方式" class="headerlink" title="1-2 PyCharm运行方式"></a>1-2 PyCharm运行方式</h2><ul><li>PyCharm运行方式<ul><li>默认以Autodetect形式运行，可以通过修改PyCharm设置来改变运行方式。</li><li>File—&gt;Setting—&gt;Tools—&gt;Python Integrated Tools—&gt;Default test runner。</li><li>PyTest兼容UnitTest，用UnitTest框架编写的测试用例也能用PyTest框架运行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_node.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-meta">    @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x, y&quot;</span>,[(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">3</span></span>), (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">5</span></span>)]</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-keyword">assert</span> x + <span class="hljs-number">2</span> == y<br><br><span class="hljs-comment"># pytest test_node.py::test_one                         # 函数名</span><br><span class="hljs-comment"># pytest test_node.py::TestNode::test_one               # 类名+函数名</span><br><span class="hljs-comment"># pytest test_node.py::TestNode::test_two[1-3]          # 类名+函数名+标记参数</span><br><span class="hljs-comment"># pytest test_node.py::TestNode::test_two[3-5]          # 类名+函数名+标记参数</span><br><span class="hljs-comment"># pytest test_node.py -vv                               # 该文件下的所有用例节点执行结果</span><br></code></pre></td></tr></table></figure><h1 id="2-跳过用例"><a href="#2-跳过用例" class="headerlink" title="2 跳过用例"></a>2 跳过用例</h1><ul><li>跳过用例<ul><li><code>@pytest.mark.skip()</code>：标记无法在某平台上运行或希望失败的测试功能，跳过用例。</li><li><code>pytest.skip()</code>：测试用例执行期间，强制跳过不再继续执行，类似于break跳出循环。</li><li><code>pytest.xfail()</code>：若用例之间存在依赖，其中一个用例运行失败时，标记依赖的用例为失败，并跳过用例。</li><li><code>@pytest.mark.skipif(condition, reason=&quot;&quot;)</code>：有条件地跳过某些测试用例，condition返回True时跳过。</li><li>自定义跳过标识<ul><li>将<code>pytest.mark.skip()</code>或<code>@pytest.mark.skipif()</code>赋值给一个自定义标识变量，不同模块之间进行共享。</li><li>如果有多个模块的用例需要用到同个标识变量，可以单独文件管理通用的标识变量，适用于整个测试用例集。</li></ul></li><li><code>pytest.importorskip()</code>：如果缺少某些导入，则跳过模块中的所有测试用例。</li></ul></li></ul><h2 id="2-1-pytest-mark-skip"><a href="#2-1-pytest-mark-skip" class="headerlink" title="2-1 @pytest.mark.skip"></a>2-1 @pytest.mark.skip</h2><ul><li>@pytest.mark.skip<ul><li>可选参数reason：跳过的原因，会在执行结果中打印。</li><li>用在跳过单个用例、类用例、类的方法用例、函数用例上。</li><li>如果加在类用例上，类里面的所有测试用例都不会被执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_skip.py</span><br><br><br><span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&#x27;skip function use cases&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br><span class="hljs-meta">    @pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&#x27;skip class method use case&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_skip.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skip.py::test_a SKIPPED (skip function use cases)             [ 33%]</span><br><span class="hljs-string">Skipped: skip function use cases</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skip.py::TestCase::test_b SKIPPED (skip class method use case)[ 66%]</span><br><span class="hljs-string">Skipped: skip class method use case</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skip.py::TestCase::test_c PASSED                              [100%]---test case c---</span><br><span class="hljs-string">========================= 1 passed, 2 skipped, 1 warning in 0.10s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-pytest-skip"><a href="#2-2-pytest-skip" class="headerlink" title="2-2 pytest.skip()"></a>2-2 pytest.skip()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyskip1.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;---use case <span class="hljs-subst">&#123;n&#125;</span> execution---&quot;</span>)<br>        n += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">5</span>:                                      <span class="hljs-comment"># pytest.skip(msg=&quot;&quot;)</span><br>            pytest.skip(<span class="hljs-string">&quot;---use case 5 exit---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyskip1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip1.py::test_case SKIPPED (---use case 5 exit---) [100%]---use case 0 execution---</span><br><span class="hljs-string">---use case 1 execution---</span><br><span class="hljs-string">---use case 2 execution---</span><br><span class="hljs-string">---use case 3 execution---</span><br><span class="hljs-string">---use case 4 execution---</span><br><span class="hljs-string"></span><br><span class="hljs-string">Skipped: ---use case 5 exit---</span><br><span class="hljs-string">============================== 1 skipped, 1 warning in 0.09s ==============================</span><br></code></pre></td></tr></table></figure><ul><li>跳过测试模块<ul><li><code>pytestmark = pytest.mark.skip(reason=&quot;&quot;)</code>：pytestmark为不可更改变量名。</li><li><code>pytest.skip(&quot;&quot;, allow_module_level=True)</code>：设置在模块级别跳过整个模块。</li></ul></li></ul><h4 id="1-pytestmark"><a href="#1-pytestmark" class="headerlink" title="(1) pytestmark"></a>(1) pytestmark</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyskip2.py</span><br><br>pytestmark = pytest.mark.skip(reason=<span class="hljs-string">&quot;skip current module&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyskip2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip2.py::test_a SKIPPED (skip current module)                    [ 33%]</span><br><span class="hljs-string">Skipped: skip current module</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip2.py::TestCase::test_b SKIPPED (skip current module)          [ 66%]</span><br><span class="hljs-string">Skipped: skip current module</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip2.py::TestCase::test_c SKIPPED (skip current module)          [100%]</span><br><span class="hljs-string">Skipped: skip current module</span><br><span class="hljs-string">============================== 3 skipped, 1 warning in 0.04s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-allow-module-level"><a href="#2-allow-module-level" class="headerlink" title="(2) allow_module_level"></a>(2) allow_module_level</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyskip3.py</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sys.platform.startswith(<span class="hljs-string">&quot;darwin&quot;</span>):<br>    pytest.skip(<span class="hljs-string">&quot;use cases are executed under Mac only&quot;</span>, allow_module_level=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyskip3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;          ！！！win是Windows平台，darwin是Mac平台，Linux是Linux平台           </span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... </span><br><span class="hljs-string">Skipped: use cases are executed under Mac only</span><br><span class="hljs-string">collected 0 items / 1 skipped</span><br><span class="hljs-string">============================== 1 skipped, 1 warning in 0.06s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-pytest-xfail"><a href="#2-3-pytest-xfail" class="headerlink" title="2-3 pytest.xfail()"></a>2-3 pytest.xfail()</h2><ul><li>pytest.xfail()<ul><li>以登录操作为例，将登录作为前置条件，账户和密码参数化设置。</li><li>用例a、b、c全部调用了fixture的login功能，用例a用于测试登录。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyxfail.py</span><br><br>parameter = [&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;]   <span class="hljs-comment"># 修改参数部分，让用例a执行失败</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    username = request.param[<span class="hljs-string">&quot;username&quot;</span>]<br>    password = request.param[<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;login: username%s, password%s&quot;</span> % (username, password))<br>    <span class="hljs-keyword">if</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, parameter, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">self, login</span>):<br>        result = login<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a results: %s---&quot;</span> % result)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span> == result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self, login</span>):<br>        result = login<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b results: %s---&quot;</span> % result)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>            pytest.xfail(<span class="hljs-string">&quot;login failed, marked as xfail&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, login</span>):<br>        result = login<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c results: %s---&quot;</span> % result)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>            pytest.xfail(<span class="hljs-string">&quot;login failed, marked as xfail&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyxfail.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyxfail.py::TestCase::test_a[login0] login: usernameTest, password123</span><br><span class="hljs-string">FAILED                                              [ 33%]---use case a results: False---</span><br><span class="hljs-string">test_pyxfail.py:18 (TestCase.test_a[login0])</span><br><span class="hljs-string">True != False</span><br><span class="hljs-string">Expected :False</span><br><span class="hljs-string">Actual   :True</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string">self = &lt;Skip.test_pyxfail.TestCase object at 0x00000186EE687E50&gt;, login = False</span><br><span class="hljs-string">    def test_a(self, login):</span><br><span class="hljs-string">        result = login</span><br><span class="hljs-string">        print(&quot;---use case a results: %s---&quot; % result)</span><br><span class="hljs-string">&gt;       assert True == result</span><br><span class="hljs-string">E       assert True == False</span><br><span class="hljs-string">E         +True</span><br><span class="hljs-string">E         -False</span><br><span class="hljs-string">test_pyxfail.py:22: AssertionError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyxfail.py::TestCase::test_b[login0] </span><br><span class="hljs-string">XFAIL (login failed, marke...)                      [ 66%]---use case b results: False---</span><br><span class="hljs-string">self = &lt;Skip.test_pyxfail.TestCase object at 0x00000186EE6EBD60&gt;, login = False</span><br><span class="hljs-string">    def test_b(self, login):</span><br><span class="hljs-string">        result = login</span><br><span class="hljs-string">        print(&quot;---use case b results: %s---&quot; % result)</span><br><span class="hljs-string">        if not result:</span><br><span class="hljs-string">&gt;           pytest.xfail(&quot;login failed, marked as xfail&quot;)</span><br><span class="hljs-string">E           _pytest.outcomes.XFailed: login failed, marked as xfail</span><br><span class="hljs-string">test_pyxfail.py:28: XFailed</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyxfail.py::TestCase::test_c[login0] </span><br><span class="hljs-string">XFAIL (login failed, marke...)                      [100%]---use case c results: False---</span><br><span class="hljs-string">self = &lt;Skip.test_pyxfail.TestCase object at 0x00000186EE715040&gt;, login = False</span><br><span class="hljs-string">    def test_c(self, login):</span><br><span class="hljs-string">        result = login</span><br><span class="hljs-string">        print(&quot;---use case c results: %s---&quot; % result)</span><br><span class="hljs-string">        if not result:</span><br><span class="hljs-string">&gt;           pytest.xfail(&quot;login failed, marked as xfail&quot;)</span><br><span class="hljs-string">E           _pytest.outcomes.XFailed: login failed, marked as xfail</span><br><span class="hljs-string">test_pyxfail.py:34: XFailed</span><br><span class="hljs-string">========================= 1 failed, 2 xfailed, 1 warning in 0.29s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-pytest-mark-skipif"><a href="#2-4-pytest-mark-skipif" class="headerlink" title="2-4 @pytest.mark.skipif"></a>2-4 @pytest.mark.skipif</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_skipif.py</span><br><br><br><span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">10</span></span>), reason=<span class="hljs-string">&quot;python version not less than 3.10&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">condition=sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">10</span></span>), reason=<span class="hljs-string">&quot;python version not less than 3.10&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, </span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_skipif.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;                           ！！！这里用的Python3.9版本                         </span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skipif.py::test_a SKIPPED (python version not less than 3.10)              [ 33%]</span><br><span class="hljs-string">Skipped: python version not less than 3.10</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skipif.py::TestCase::test_b SKIPPED (python version not less th...)        [ 66%]</span><br><span class="hljs-string">Skipped: python version not less than 3.10</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skipif.py::TestCase::test_c SKIPPED (python version not less th...)        [100%]</span><br><span class="hljs-string">Skipped: python version not less than 3.10</span><br><span class="hljs-string">============================== 3 skipped, 1 warning in 0.16s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-自定义跳过标识"><a href="#2-5-自定义跳过标识" class="headerlink" title="2-5 自定义跳过标识"></a>2-5 自定义跳过标识</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_skiptag.py</span><br><br><span class="hljs-comment"># mark_version = pytest.mark.skip(reason=&quot;not working on win&quot;)</span><br>mark_version = pytest.mark.skipif(sys.platform != <span class="hljs-string">&#x27;win&#x27;</span>, reason=<span class="hljs-string">&quot;not working on win&quot;</span>)<br><br><br><span class="hljs-meta">@mark_version</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><span class="hljs-meta">    @mark_version</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, </span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_skiptag.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skiptag.py::test_a SKIPPED (not working on win)              [ 33%]</span><br><span class="hljs-string">Skipped: not working on win</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skiptag.py::TestCase::test_b PASSED                          [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skiptag.py::TestCase::test_c SKIPPED (not working on win)    [100%]</span><br><span class="hljs-string">Skipped: not working on win</span><br><span class="hljs-string">========================= 1 passed, 2 skipped, 1 warning in 0.06s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-pytest-importorskip"><a href="#2-6-pytest-importorskip" class="headerlink" title="2-6 pytest.importorskip()"></a>2-6 pytest.importorskip()</h2><ul><li>pytest.importorskip()<ul><li><code>pytest.importorskip(modname: str, minversion: Optional[str] = None, reason: Optional[str] = None)</code></li><li>参数列表：modname-模块名、minversion-版本号、reason-跳过原因，模块名必选，版本号和跳过原因都是可选的。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_importorskip.py</span><br><br>sys = pytest.importorskip(<span class="hljs-string">&quot;sys&quot;</span>, minversion=<span class="hljs-string">&quot;1.0&quot;</span>)<br><br><br><span class="hljs-meta">@sys</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test cases---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_importorskip.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... </span><br><span class="hljs-string">Skipped: module &#x27;sys&#x27; has __version__ None, required is: &#x27;1.0&#x27;</span><br><span class="hljs-string">collected 0 items / 1 skipped</span><br><span class="hljs-string">============================== 1 skipped, 1 warning in 0.25s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-assert断言"><a href="#3-assert断言" class="headerlink" title="3 assert断言"></a>3 assert断言</h1><ul><li>assert断言<ul><li>即实际结果和期望结果的比对，符合预期就pass，不符合则failed。</li><li>PyTest允许使用标准的Python断言assert来验证测试中的期望和值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():                                                <span class="hljs-comment"># test_assert.py</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_function</span>():<br>    <span class="hljs-keyword">assert</span> f() == <span class="hljs-number">5</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_assert.py::test_function FAILED                                     [100%]</span><br><span class="hljs-string">test_assert.py:4 (test_function)</span><br><span class="hljs-string">3 != 5</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :5</span><br><span class="hljs-string">Actual   :3</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def test_function():</span><br><span class="hljs-string">&gt;       assert f() == 5</span><br><span class="hljs-string">E       assert 3 == 5</span><br><span class="hljs-string">E         +3</span><br><span class="hljs-string">E         -5</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_assert.py:6: AssertionError</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.63s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-1-异常信息"><a href="#3-1-异常信息" class="headerlink" title="3-1 异常信息"></a>3-1 异常信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():                                                <span class="hljs-comment"># test_excinfo1.py</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_function</span>():<br>    x = f()<br>    <span class="hljs-keyword">assert</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Determine if x is an even number and the current value of x is %s.&quot;</span> % x<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo1.py::test_function FAILED                                   [100%]</span><br><span class="hljs-string">test_excinfo1.py:4 (test_function)</span><br><span class="hljs-string">1 != 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :0</span><br><span class="hljs-string">Actual   :1</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def test_function():</span><br><span class="hljs-string">        x = f()</span><br><span class="hljs-string">&gt;       assert x % 2 == 0, &quot;Determine if x is an even number and the current value of x is %s.&quot; % x</span><br><span class="hljs-string">E       AssertionError: Determine if x is an even number and the current value of x is 3.</span><br><span class="hljs-string">E       assert 1 == 0</span><br><span class="hljs-string">E         +1</span><br><span class="hljs-string">E         -0</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo1.py:7: AssertionError</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.73s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-2-异常断言"><a href="#3-2-异常断言" class="headerlink" title="3-2 异常断言"></a>3-2 异常断言</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_excinfo2.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_zero_division</span>():<br>    <span class="hljs-keyword">with</span> pytest.raises(ZeroDivisionError):              <span class="hljs-comment"># 使用pytest.raises作为上下文管理器</span><br>        <span class="hljs-number">1</span> / <span class="hljs-number">0</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo2.py::test_zero_division PASSED                              [100%]</span><br><span class="hljs-string">============================== 1 passed, 1 warning in 0.15s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>异常类型<ul><li>要判断抛出的异常是否预期，例如<code>1/0</code>抛出的异常为：<code>ZeroDivisionError: division by zero</code>。</li><li>断言该异常，通常是断言异常的type和value值，type是ZeroDivisionError，value是division by zero。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_excinfo3.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_zero_division</span>():                               <span class="hljs-comment"># 断言异常</span><br>    <span class="hljs-keyword">with</span> pytest.raises(ZeroDivisionError) <span class="hljs-keyword">as</span> excinfo:   <span class="hljs-comment"># 使用pytest.raises作为上下文管理器</span><br>        <span class="hljs-number">1</span> / <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">assert</span> excinfo.<span class="hljs-built_in">type</span> == ZeroDivisionError            <span class="hljs-comment"># 断言异常type值</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;division by zero&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(excinfo.value)     <span class="hljs-comment"># 断言异常value值</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo3.py::test_zero_division PASSED                              [100%]</span><br><span class="hljs-string">============================== 1 passed, 1 warning in 0.15s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-常用断言"><a href="#3-3-常用断言" class="headerlink" title="3-3 常用断言"></a>3-3 常用断言</h2><ul><li>常用断言<ul><li><code>assert xx</code>：判断xx为真。</li><li><code>assert not xx</code>：判断xx不为真。</li><li><code>assert a in b</code>：判断b包含a。</li><li><code>assert a == b</code>：判断a等于b。</li><li><code>assert a != b</code>：判断a不等于b。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_commonassert.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_true</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_01</span>():<br>    a = <span class="hljs-number">5</span><br>    b = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> is_true(a)                                   <span class="hljs-comment"># 断言a为真</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> is_true(b)                               <span class="hljs-comment"># 断言b不为真</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_02</span>():<br>    a = <span class="hljs-string">&#x27;hello&#x27;</span><br>    b = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-keyword">assert</span> a <span class="hljs-keyword">in</span> b                                       <span class="hljs-comment"># 断言b包含a</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_03</span>():<br>    a = <span class="hljs-string">&#x27;Yoyo&#x27;</span><br>    b = <span class="hljs-string">&#x27;Yoyo&#x27;</span><br>    <span class="hljs-keyword">assert</span> a == b                                       <span class="hljs-comment"># 断言相等</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_04</span>():<br>    a = <span class="hljs-number">5</span><br>    b = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">assert</span> a != b                                       <span class="hljs-comment"># 断言不相等</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_commonassert.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_commonassert.py::test_01 PASSED                                     [ 25%]</span><br><span class="hljs-string">test_commonassert.py::test_02 PASSED                                     [ 50%]</span><br><span class="hljs-string">test_commonassert.py::test_03 PASSED                                     [ 75%]</span><br><span class="hljs-string">test_commonassert.py::test_04 PASSED                                     [100%]</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.38s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="4-用例运行级别"><a href="#4-用例运行级别" class="headerlink" title="4 用例运行级别"></a>4 用例运行级别</h1><ul><li>用例运行级别<ul><li>模块级：setup_module、teardown_module，在所有用例前后只执行一次。</li><li>函数级：setup_function、teardown_function，在所有用例前后都执行一次。</li><li>类级别：setup_class、teardown_class，在类中的所有用例前后只执行一次。</li><li>类方法级：setup_method、teardown_method，在类中的所有用例前后都执行一次。</li><li>类方法细化级：setup、teardown，运行规则与类方法级相同，在每个用例前后都执行一次。</li></ul></li></ul><h2 id="4-1-模块级"><a href="#4-1-模块级" class="headerlink" title="4-1 模块级"></a>4-1 模块级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_module.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_module</span>():                                     <span class="hljs-comment"># 模块级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_module</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;this&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_module.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_module.py::test_one </span><br><span class="hljs-string">---setup_module: execute only once before and after all use cases---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_one()</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_module.py::test_two PASSED                 [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_module: execute only once before and after all use cases---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.15s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-函数级"><a href="#4-2-函数级" class="headerlink" title="4-2 函数级"></a>4-2 函数级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_function.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_function</span>():                                   <span class="hljs-comment"># 函数级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_function: execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_function: Execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;this&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_function.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_function.py::test_one </span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                        [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown_function: Execute once before and after all use cases---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_function.py::test_two </span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                        [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_function: Execute once before and after all use cases---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.05s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-3-类级别"><a href="#4-3-类级别" class="headerlink" title="4-3 类级别"></a>4-3 类级别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_class.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类级别</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_class.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_class.py::TestCase::test_one </span><br><span class="hljs-string">---setup_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                              [ 50%]---running---test_one()</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_class.py::TestCase::test_two PASSED            [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.19s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-类方法级"><a href="#4-4-类方法级" class="headerlink" title="4-4 类方法级"></a>4-4 类方法级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_method.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类方法级</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_method.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_method.py::TestCase::test_one </span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_method.py::TestCase::test_two </span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                          [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.06s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-5-类方法细化级"><a href="#4-5-类方法细化级" class="headerlink" title="4-5 类方法细化级"></a>4-5 类方法细化级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixclass.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类方法细化级</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixclass.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixclass.py::TestCase::test_one </span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                              [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixclass.py::TestCase::test_two </span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                              [100%]---running---test_two()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.13s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-类和方法混合"><a href="#4-6-类和方法混合" class="headerlink" title="4-6 类和方法混合"></a>4-6 类和方法混合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mixclass.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_class</span>(<span class="hljs-params">self</span>):                              <span class="hljs-comment"># 类级</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_method</span>(<span class="hljs-params">self</span>):                             <span class="hljs-comment"># 方法级</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self</span>):                                    <span class="hljs-comment"># 类方法细化级</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_mixclass.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixclass.py::TestCase::test_one </span><br><span class="hljs-string">---setup_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixclass.py::TestCase::test_two </span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                                          [100%]---running---test_two()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">---teardown_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.17s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-7-模块和类混合"><a href="#4-7-模块和类混合" class="headerlink" title="4-7 模块和类混合"></a>4-7 模块和类混合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mixmodule.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_module</span>():                                     <span class="hljs-comment"># 模块级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_module</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_function</span>():                                   <span class="hljs-comment"># 函数级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_function: execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_function: execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_a()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;this&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_b()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类级别</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_c()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;class&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_d()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;module&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;m&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_mixmodule.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;            ！！！注意：模块级优先权最大，函数级和类级别互不干涉。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::test_a </span><br><span class="hljs-string">---setup_module: execute only once before and after all use cases---</span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                          [ 25%]---running---test_a()</span><br><span class="hljs-string">---teardown_function: execute once before and after all use cases---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::test_b </span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_b()</span><br><span class="hljs-string">---teardown_function: execute once before and after all use cases---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::TestCase::test_c </span><br><span class="hljs-string">---setup_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                          [ 75%]---running---test_c()</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::TestCase::test_d </span><br><span class="hljs-string">PASSED                                          [100%]---running---test_d()</span><br><span class="hljs-string">---teardown_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">---teardown_module: execute only once before and after all use cases---</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.16s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="5-fixture预置条件"><a href="#5-fixture预置条件" class="headerlink" title="5 fixture预置条件"></a>5 fixture预置条件</h1><ul><li>fixture预置条件<ul><li>相比用例运行级别的setup和teardown，fixture的命名方式更为灵活。</li><li><code>@pytest.fixture(scope=&quot;function&quot;, params=&quot;None&quot;, autouse=False, ids=None, name=None)</code><ul><li>scope：类似于作用域，默认function，还可以是class、module、session、package。</li><li>autouse：默认为False，用例手动调用该fixture，若为True则作用域内的用例自动调用。</li><li>name：默认的装饰器名称，同一模块的fixture相互调用时可以使用不同的name进行命名。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture.py</span><br><br><br><span class="hljs-meta">@pytest.fixture()                                       </span><span class="hljs-comment"># 不带参数时默认scope=&quot;function&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter your account number and password to log in.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():                                           <span class="hljs-comment"># 不传参login</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;           ！！！实现场景：用例a需要登录，用例b不需要登录，用例c需要登录。         </span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture.py::test_a Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                           [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture.py::test_b PASSED                   [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture.py::test_c Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                           [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.10s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-1-conftest-py"><a href="#5-1-conftest-py" class="headerlink" title="5-1 conftest.py"></a>5-1 conftest.py</h2><ul><li>conftest.py<ul><li>配置文件里可以实现数据共享(多个<code>.py</code>文件的预置操作)，不用import，PyTest就能自动查找配置。</li><li>注意：<code>conftest.py</code>配置脚本名称固定，与运行的用例要在同个package下且有<code>__init__.py</code>文件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># conftest.py</span><br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter your account number and password to log in.&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_conftest.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():                                           <span class="hljs-comment"># 不传参login</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_conftest.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;   ！！！单独运行test_conftest.py时可以调用到conftest.py配置文件中的login()方法。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_conftest.py::test_a Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                          [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_conftest.py::test_b PASSED                 [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_conftest.py::test_c Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                          [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.03s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-scope实现setup"><a href="#5-2-scope实现setup" class="headerlink" title="5-2 scope实现setup"></a>5-2 scope实现setup</h2><ul><li>scope实现setup<ul><li>fixture的参数<code>scope=&quot;module&quot;</code>可以实现多个<code>.py</code>跨文件共享前置。</li><li>module作用于整个<code>.py</code>文件，用例调用时，参数写上函数名称即可。</li><li><code>scope=&quot;module&quot;</code>可以理解为在测试用例中加上前置条件，类似setup。</li></ul></li></ul><h4 id="1-用例全调用"><a href="#1-用例全调用" class="headerlink" title="(1) 用例全调用"></a>(1) 用例全调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_scope1.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_scope1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;              ！！！三个用例都调用了open函数，但只在用例a处执行一次。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope1.py::test_a Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">PASSED                                           [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope1.py::test_b PASSED                    [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope1.py::test_c PASSED                    [100%]---test case c: searching pytest---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.05s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-部分用例调用"><a href="#2-部分用例调用" class="headerlink" title="(2) 部分用例调用"></a>(2) 部分用例调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_scope2.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_scope2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;         ！！！用例a和用例c不调用open函数，用例b调用，只在用例b处执行一次。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope2.py::test_a PASSED                    [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope2.py::test_b Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">PASSED                                           [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope2.py::test_c PASSED                    [100%]---test case c: searching pytest---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.04s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-3-yield实现teardown"><a href="#5-3-yield实现teardown" class="headerlink" title="5-3 yield实现teardown"></a>5-3 yield实现teardown</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_yield.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Execute teardown.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_yield.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_yield.py::test_a Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">PASSED                                           [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_yield.py::test_b PASSED                     [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_yield.py::test_c PASSED                     [100%]---test case c: searching pytest---</span><br><span class="hljs-string">Execute teardown.</span><br><span class="hljs-string">Close your browser.</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.05s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-用例异常"><a href="#1-用例异常" class="headerlink" title="(1) 用例异常"></a>(1) 用例异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_exception1.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Execute teardown.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br>    <span class="hljs-keyword">raise</span> NameError                                     <span class="hljs-comment"># 模拟异常，不影响其他用例执行</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_exception1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;                   ！！！用例异常时，不影响yield实现teardown的执行。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py::test_a Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">FAILED                                           [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py:12 (test_a)</span><br><span class="hljs-string">open = None</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_a(open):</span><br><span class="hljs-string">        print(&quot;---test case a: searching pytest---&quot;)</span><br><span class="hljs-string">&gt;       raise NameError                          # 模拟异常，不影响其他用例执行</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py:15: NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py::test_b PASSED                [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py::test_c PASSED                [100%]---test case c: searching pytest---</span><br><span class="hljs-string">Execute teardown.</span><br><span class="hljs-string">Close your browser.</span><br><span class="hljs-string">========================= 1 failed, 2 passed, 1 warning in 0.36s ==========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-setup异常"><a href="#2-setup异常" class="headerlink" title="(2) setup异常"></a>(2) setup异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_exception2.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br>    <span class="hljs-keyword">raise</span> NameError                                     <span class="hljs-comment"># 模拟setup异常</span><br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Execute teardown.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_exception2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py::test_a ERROR       [ 33%]Open your browser and open the Baidu homepage.</span><br><span class="hljs-string"></span><br><span class="hljs-string">test setup failed</span><br><span class="hljs-string">@pytest.fixture(scope=&quot;module&quot;)</span><br><span class="hljs-string">    def open():</span><br><span class="hljs-string">        print(&quot;Open your browser and open the Baidu homepage.&quot;)</span><br><span class="hljs-string">&gt;       raise NameError  # 模拟setup异常</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py:7: NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py::test_b ERROR       [ 66%]</span><br><span class="hljs-string">test setup failed</span><br><span class="hljs-string">@pytest.fixture(scope=&quot;module&quot;)</span><br><span class="hljs-string">    def open():</span><br><span class="hljs-string">        print(&quot;Open your browser and open the Baidu homepage.&quot;)</span><br><span class="hljs-string">&gt;       raise NameError  # 模拟setup异常</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py:7: NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py::test_c ERROR       [100%]</span><br><span class="hljs-string">test setup failed</span><br><span class="hljs-string">@pytest.fixture(scope=&quot;module&quot;)</span><br><span class="hljs-string">    def open():</span><br><span class="hljs-string">        print(&quot;Open your browser and open the Baidu homepage.&quot;)</span><br><span class="hljs-string">&gt;       raise NameError  # 模拟setup异常</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py:7: NameError</span><br><span class="hljs-string">============================== 1 warning, 3 errors in 0.39s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-配合with使用"><a href="#3-配合with使用" class="headerlink" title="(3) 配合with使用"></a>(3) 配合with使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_with.py</span><br><span class="hljs-keyword">import</span> smtplib<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">smtp</span>():<br>    <span class="hljs-keyword">with</span> smtplib.SMTP(<span class="hljs-string">&quot;smtp.gmail.com&quot;</span>, <span class="hljs-number">587</span>, timeout=<span class="hljs-number">5</span>) <span class="hljs-keyword">as</span> smtp:<br>        <span class="hljs-keyword">yield</span> smtp                                      <span class="hljs-comment"># smtp对象自动关闭时，with语句结束</span><br></code></pre></td></tr></table></figure><h2 id="5-4-addfinalizer终结函数"><a href="#5-4-addfinalizer终结函数" class="headerlink" title="5-4 addfinalizer终结函数"></a>5-4 addfinalizer终结函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_addfinalizer.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_addfinalizer</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser.&quot;</span>)<br>    test = <span class="hljs-string">&quot;test_addfinalizer&quot;</span>                          <span class="hljs-comment"># 前置操作setup</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fin</span>():                                          <span class="hljs-comment"># 后置操作teardown</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br>    request.addfinalizer(fin)<br>    <span class="hljs-keyword">return</span> test                                         <span class="hljs-comment"># 返回前置操作的变量</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>(<span class="hljs-params">test_addfinalizer</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test cases---&quot;</span>, test_addfinalizer)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_addfinalizer.py::test_case Open your browser.</span><br><span class="hljs-string">PASSED                                   [100%]---test cases--- test_addfinalizer</span><br><span class="hljs-string">Close your browser.</span><br><span class="hljs-string">============================== 1 passed, 1 warning in 0.14s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-5-调用fixture的3种方法"><a href="#5-5-调用fixture的3种方法" class="headerlink" title="5-5 调用fixture的3种方法"></a>5-5 调用fixture的3种方法</h2><ul><li>调用fixture的3种方法<ul><li>函数或类的方法中传fixture的函数参数名称。</li><li>用装饰器<code>@pytest.mark.usefixtures()</code>修饰。</li><li>设置fixture的参数为<code>autouse=True</code>来自动使用。</li></ul></li></ul><h4 id="1-用例fixture传参"><a href="#1-用例fixture传参" class="headerlink" title="(1) 用例fixture传参"></a>(1) 用例fixture传参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling1.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of function---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">start</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling1.py::test_a </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling1.py::TestCase::test_b </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling1.py::TestCase::test_c </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.06s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-装饰器usefixtures"><a href="#2-装饰器usefixtures" class="headerlink" title="(2) 装饰器usefixtures"></a>(2) 装饰器usefixtures</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling2.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of function---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.usefixtures(<span class="hljs-params"><span class="hljs-string">&quot;start&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">start</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.usefixtures(<span class="hljs-params"><span class="hljs-string">&quot;start&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling2.py::test_a </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling2.py::TestCase::test_b </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling2.py::TestCase::test_c </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.18s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-设置autouse-x3D-True"><a href="#3-设置autouse-x3D-True" class="headerlink" title="(3) 设置autouse&#x3D;True"></a>(3) 设置autouse&#x3D;True</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling3.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of module---&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module: %s&quot;</span> % request.module.__name__)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---start browser---&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---end of test---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_home</span>(<span class="hljs-params">request</span>):                                 <span class="hljs-comment"># 函数实现</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function: %s \n---back to home page---&quot;</span> % request.function.__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling3.py::test_a </span><br><span class="hljs-string">---start execution of module---</span><br><span class="hljs-string">module: test_calling3</span><br><span class="hljs-string">---start browser---</span><br><span class="hljs-string">function: test_a </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                          [ 50%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling3.py::test_b function: test_b </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                          [100%]---use case b---</span><br><span class="hljs-string">---end of test---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.08s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>设置autouse&#x3D;True<ul><li>start设置scope为module级别，在当前用例模块中只执行一次，<code>autouse=True</code>自动使用。</li><li>open_home设置scope为function级别，每个用例前都调用一次，<code>autouse=True</code>自动使用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling4.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of module---&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module: %s&quot;</span> % request.module.__name__)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---start browser---&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---end of test---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br><span class="hljs-meta">    @pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_home</span>(<span class="hljs-params">self, request</span>):                       <span class="hljs-comment"># 类实现</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function: %s \n---back to home page---&quot;</span> % request.function.__name__)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling4.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling4.py::TestCase::test_a </span><br><span class="hljs-string">---start execution of module---</span><br><span class="hljs-string">module: test_calling4</span><br><span class="hljs-string">---start browser---</span><br><span class="hljs-string">function: test_a </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                [ 50%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling4.py::TestCase::test_b </span><br><span class="hljs-string">function: test_b </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                [100%]---use case b---</span><br><span class="hljs-string">---end of test---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.17s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="6-自定义标记mark"><a href="#6-自定义标记mark" class="headerlink" title="6 自定义标记mark"></a>6 自定义标记mark</h1><ul><li>自定义标记mark<ul><li>自定义标记可以将一个Web项目划分为多个模块，然后指定模块名称进行执行。</li><li>APP自动化时，若想让Android与IOS共用一套代码，也可以使用标记指定名称。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mark1.py</span><br><br><br><span class="hljs-meta">@pytest.mark.a</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                           <span class="hljs-comment"># 标记test_a()为a</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_server.py&#x27;</span>, <span class="hljs-string">&#x27;-m=a&#x27;</span>])<br><br><span class="hljs-comment"># pytest -v -m a test_mark1.py</span><br><span class="hljs-string">&quot;&quot;&quot; ！！！此时的a标签为未识别标签，没有注册直接使用将弹出警告信息，不注册时仍可挑选用例。</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items / 2 deselected / 1 selected</span><br><span class="hljs-string">test_mark1.py::test_a PASSED                                      [100%]</span><br><span class="hljs-string">================================== warnings summary =======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mark1.py:4</span><br><span class="hljs-string">  ...\test_mark1.py:4: PytestUnknownMarkWarning: Unknown pytest.mark.a - is this a typo?</span><br><span class="hljs-string">  You can register custom marks to avoid this warning - for details, </span><br><span class="hljs-string">  see https://docs.pytest.org/en/stable/mark.html</span><br><span class="hljs-string">    @pytest.mark.a</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">====================== 1 passed, 2 deselected, 2 warnings in 0.04s ========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><a href="http://localhost:4000/2022/10/31/PyTest/#1-1-%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99">用例执行规则</a><ul><li>命令窗口下只运行用tagname标记的测试用例时，可以使用命令：<code>pytest -v -m tagname</code>。</li><li>若不想执行tagname标记的用例，文件内容对应修改，使用命令：<code>pytest -v -m &quot;not tagname&quot;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mark2.py</span><br><br><br><span class="hljs-meta">@pytest.mark.a</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                           <span class="hljs-comment"># 标记test_a()为a</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_mark2.py&#x27;</span>, <span class="hljs-string">&#x27;-m=not a&#x27;</span>])<br><br><span class="hljs-comment"># pytest -v -m &quot;not a&quot; test_mark2.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================== test session starts ====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items / 1 deselected / 2 selected</span><br><span class="hljs-string">test_mark2.py::test_b PASSED                                      [ 50%] </span><br><span class="hljs-string">test_mark2.py::TestCase::test_c PASSED                            [100%]</span><br><span class="hljs-string">=================================== warnings summary ======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mark2.py:4</span><br><span class="hljs-string">  ...\test_mark2.py:4: PytestUnknownMarkWarning: Unknown pytest.mark.a - is this a typo?  </span><br><span class="hljs-string">  You can register custom marks to avoid this warning - for details, </span><br><span class="hljs-string">  see https://docs.pytest.org/en/stable/mark.html</span><br><span class="hljs-string">    @pytest.mark.a</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">====================== 2 passed, 1 deselected, 2 warnings in 0.05s ========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-1-重写注册标签"><a href="#6-1-重写注册标签" class="headerlink" title="6-1 重写注册标签"></a>6-1 重写注册标签</h2><ul><li>重写注册标签<ul><li>根目录创建<code>conftest.py</code>文件，在文件中重写pytest_configure函数的方式可以注册标签。</li><li>函数名pytest_configure和参数config是固定的，唯一需要变更的是注册标签的名字和描述。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_configure</span>(<span class="hljs-params">config</span>):                           <span class="hljs-comment"># conftest.py</span><br>    config.addinivalue_line(<br>        <span class="hljs-string">&quot;markers&quot;</span>, <span class="hljs-string">&quot;a: a test&quot;</span><br>    )<br><br><span class="hljs-comment"># pytest -v -m a test_mark1.py                          # test_mark1.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items / 2 deselected / 1 selected</span><br><span class="hljs-string">test_mark1.py::test_a PASSED                                      [100%]</span><br><span class="hljs-string">================================== warnings summary =======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">====================== 1 passed, 2 deselected, 1 warning in 0.04s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-2-配置注册标签"><a href="#6-2-配置注册标签" class="headerlink" title="6-2 配置注册标签"></a>6-2 配置注册标签</h2><ul><li>配置注册标签<ul><li>还有一种更加便捷的注册标签的方式，即在<code>pytest.ini</code>配置文件中进行语法配置。</li><li>同样在根目录创建<code>pytest.ini</code>文件，只需要在文件中编写如下配置内容就可以了。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Ini"><span class="hljs-section">[pytest]</span>                                                <span class="hljs-comment"># pytest.ini</span><br><br><br><span class="hljs-attr">markers</span> =<br>    a: a tests<br><br><span class="hljs-comment"># pytest -v -m &quot;not a&quot; test_mark2.py                    # test_mark2.py</span><br>&quot;&quot;&quot;             ！！！该方法便捷简单，实际自动化脚本开发时，更推荐使用。               <br>================================== test session <span class="hljs-attr">starts</span> ====================================<br>...<br>collected 3 items / 1 deselected / 2 selected<br>test_mark2.py::test_b PASSED                                      <span class="hljs-section">[ 50%]</span> <br>test_mark2.py::TestCase::test_c PASSED                            <span class="hljs-section">[100%]</span><br>=================================== warnings <span class="hljs-attr">summary</span> ======================================<br>...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from <br>&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working<br>    return isinstance(x, collections.Callable)<br><br>-- Docs: https://docs.pytest.org/en/stable/<span class="hljs-attr">warnings.html</span><br>====================== 2 passed, 1 deselected, 1 warning in <span class="hljs-attr">0.04s</span> =========================<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><h2 id="6-3-灵活挑选用例"><a href="#6-3-灵活挑选用例" class="headerlink" title="6-3 灵活挑选用例"></a>6-3 灵活挑选用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[pytest]                        # pytest.ini</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">markers =</span><br><span class="hljs-string">    a: a tests</span><br><span class="hljs-string">    b: b tests</span><br><span class="hljs-string">    function: function tests</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                   <span class="hljs-comment"># test_mark3.py</span><br><br><br><span class="hljs-meta">@pytest.mark.a                  </span><span class="hljs-comment"># 每个测试函数可以自定义多个标签</span><br><span class="hljs-meta">@pytest.mark.function           </span><span class="hljs-comment"># 实际开发中某些用例既可用作功能用例，也可以用作冒烟测试用例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.b</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.function</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">pytest -v -m a test_mark3.py</span><br><span class="hljs-string">pytest -v -m &quot;not a&quot; test_mark3.py</span><br><span class="hljs-string">pytest -v -m &quot;a and b&quot; test_mark3.py</span><br><span class="hljs-string">pytest -v -m &quot;a or function&quot; test_mark3.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="7-用例的参数化设置"><a href="#7-用例的参数化设置" class="headerlink" title="7 用例的参数化设置"></a>7 用例的参数化设置</h1><ul><li>用例的参数化设置<ul><li>参数化方式有两种：parametrize参数化和fixture参数化。</li><li>使用<code>@pytest.mark.parametrize</code>装饰器实现用例的参数化。</li><li>parametrize还可以结合内置函数，标记测试实例进行参数化。</li></ul></li></ul><h2 id="7-1-parametrize"><a href="#7-1-parametrize" class="headerlink" title="7-1 parametrize"></a>7-1 parametrize</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param1.py</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;test_input, expected&quot;</span>, [(<span class="hljs-params"><span class="hljs-string">&#x27;3+3&#x27;</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;2+4&#x27;</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;6*1&#x27;</span>, <span class="hljs-number">6</span></span>)]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_eval</span>(<span class="hljs-params">test_input, expected</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">eval</span>(test_input) == expected<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param1.py::test_eval[3+3-6] PASSED                                  [ 33%]</span><br><span class="hljs-string">test_param1.py::test_eval[2+4-6] PASSED                                  [ 66%]</span><br><span class="hljs-string">test_param1.py::test_eval[6*1-6] PASSED                                  [100%]</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.09s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-结合内置函数"><a href="#1-结合内置函数" class="headerlink" title="(1) 结合内置函数"></a>(1) 结合内置函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param2.py</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;test_input, expected&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">                         [(<span class="hljs-params"><span class="hljs-string">&#x27;3+3&#x27;</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;2+4&#x27;</span>, <span class="hljs-number">6</span></span>), pytest.param(<span class="hljs-params"><span class="hljs-string">&#x27;6*1&#x27;</span>, <span class="hljs-number">6</span>, marks=pytest.mark.xfail</span>)]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_eval</span>(<span class="hljs-params">test_input, expected</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">eval</span>(test_input) == expected<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param2.py::test_eval[3+3-6] PASSED                                  [ 33%]</span><br><span class="hljs-string">test_param2.py::test_eval[2+4-6] PASSED                                  [ 66%]</span><br><span class="hljs-string">test_param2.py::test_eval[6*1-6] XPASS                                   [100%]</span><br><span class="hljs-string">========================= 2 passed, 1 xpassed, 1 warning in 0.05s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-参数组合使用"><a href="#2-参数组合使用" class="headerlink" title="(2) 参数组合使用"></a>(2) 参数组合使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param3.py</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;x&#x27;</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;y&#x27;</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Test data: x---%s, y---%s&quot;</span> % (x, y))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param3.py::test_case[2-0] PASSED                   [ 25%]Test data: x---0, y---2</span><br><span class="hljs-string">test_param3.py::test_case[2-1] PASSED                   [ 50%]Test data: x---1, y---2</span><br><span class="hljs-string">test_param3.py::test_case[3-0] PASSED                   [ 75%]Test data: x---0, y---3</span><br><span class="hljs-string">test_param3.py::test_case[3-1] PASSED                   [100%]Test data: x---1, y---3</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.10s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-函数传参操作"><a href="#3-函数传参操作" class="headerlink" title="(3) 函数传参操作"></a>(3) 函数传参操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param4.py</span><br><br>info = [(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>), (<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]              <span class="hljs-comment"># 测试登录数据</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">username, password</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Account: %s&#x27;</span> % username)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s&#x27;</span> % password)<br>    <span class="hljs-keyword">if</span> password:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;username, password&#x27;</span>, info</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">username, password</span>):<br>    result = login(username, password)<br>    <span class="hljs-keyword">assert</span> result == <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;Reason for failure: password is empty.&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param4.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py::test_login[admin-12345] PASSED                      [ 50%]Account: admin</span><br><span class="hljs-string">Password: 12345</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py::test_login[admin-] FAILED                           [100%]Account: admin</span><br><span class="hljs-string">Password: </span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py:14 (test_login[admin-])</span><br><span class="hljs-string">False != True</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :True</span><br><span class="hljs-string">Actual   :False</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">username = &#x27;admin&#x27;, password = &#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @pytest.mark.parametrize(&#x27;username, password&#x27;, info)</span><br><span class="hljs-string">    def test_login(username, password):</span><br><span class="hljs-string">        result = login(username, password)</span><br><span class="hljs-string">&gt;       assert result == True, &#x27;Reason for failure: password is empty.&#x27;</span><br><span class="hljs-string">E       AssertionError: Reason for failure: password is empty.</span><br><span class="hljs-string">E       assert False == True</span><br><span class="hljs-string">E         +False</span><br><span class="hljs-string">E         -True</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py:18: AssertionError</span><br><span class="hljs-string">========================= 1 failed, 1 passed, 1 warning in 0.26s ==========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-2-fixture传参"><a href="#7-2-fixture传参" class="headerlink" title="7-2 fixture传参"></a>7-2 fixture传参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture1.py</span><br><br>info = [<span class="hljs-string">&#x27;admin1&#x27;</span>, <span class="hljs-string">&#x27;admin2&#x27;</span>]                             <span class="hljs-comment"># 测试账号数据</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    user = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login account: %s&#x27;</span> % user)<br>    <span class="hljs-keyword">return</span> user<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;login&#x27;</span>, info, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):                                  <span class="hljs-comment"># indirect=True声明login是一个函数</span><br>    value = login<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return value of login in the test case: %s&#x27;</span> % value)<br>    <span class="hljs-keyword">assert</span> value != <span class="hljs-string">&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture1.py::test_login[admin1] Login account: admin1</span><br><span class="hljs-string">PASSED                              [ 50%]Return value of login in the test case: admin1</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture1.py::test_login[admin2] Login account: admin2</span><br><span class="hljs-string">PASSED                              [100%]Return value of login in the test case: admin2</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.13s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-传两个参数"><a href="#1-传两个参数" class="headerlink" title="(1) 传两个参数"></a>(1) 传两个参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture2.py</span><br><br>info = [&#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin1&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;12345&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin2&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;]         <span class="hljs-comment"># 测试登录数据，传多个参数用字典存储</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    user = request.param[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = request.param[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login account: %s&#x27;</span> % user)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s&#x27;</span> % password)<br>    <span class="hljs-keyword">if</span> password:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;login&#x27;</span>, info, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):                                  <span class="hljs-comment"># 登录用例</span><br>    value = login<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return value of login in the test case: %s&#x27;</span> % value)<br>    <span class="hljs-keyword">assert</span> value, <span class="hljs-string">&#x27;Failure reason: password is empty.&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py::test_login[login0] Login account: admin1</span><br><span class="hljs-string">Password: 12345</span><br><span class="hljs-string">PASSED                              [ 50%]Return value of login in the test case: True</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py::test_login[login1] Login account: admin2</span><br><span class="hljs-string">Password: </span><br><span class="hljs-string">FAILED                              [100%]Return value of login in the test case: False</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py:18 (test_login[login1])</span><br><span class="hljs-string">login = False</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @pytest.mark.parametrize(&#x27;login&#x27;, info, indirect=True)</span><br><span class="hljs-string">    def test_login(login):                              # 登录用例</span><br><span class="hljs-string">        value = login</span><br><span class="hljs-string">        print(&#x27;Return value of login in the test case: %s&#x27; % value)</span><br><span class="hljs-string">&gt;       assert value, &#x27;Failure reason: password is empty.&#x27;</span><br><span class="hljs-string">E       AssertionError: Failure reason: password is empty.</span><br><span class="hljs-string">E       assert False</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py:23: AssertionError</span><br><span class="hljs-string">========================= 1 failed, 1 passed, 1 warning in 0.31s ==========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-多个fixture"><a href="#2-多个fixture" class="headerlink" title="(2) 多个fixture"></a>(2) 多个fixture</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture3.py</span><br><br>test_username = [<span class="hljs-string">&#x27;admin1&#x27;</span>, <span class="hljs-string">&#x27;admin2&#x27;</span>]                    <span class="hljs-comment"># 用例组合是2个参数的个数相乘：2*2</span><br>test_password = [<span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-string">&#x27;12346&#x27;</span>]<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username</span>(<span class="hljs-params">request</span>):<br>    username = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login account: %s&#x27;</span> % username)<br>    <span class="hljs-keyword">return</span> username<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_password</span>(<span class="hljs-params">request</span>):<br>    password = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s&#x27;</span> % password)<br>    <span class="hljs-keyword">return</span> password<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;input_username&#x27;</span>, test_username, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;input_password&#x27;</span>, test_password, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">input_username, input_password</span>):<br>    u = input_username<br>    p = input_password<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test data: u---%s, p---%s&#x27;</span> % (u, p))<br>    <span class="hljs-keyword">assert</span> p<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12345-admin1] Login account: admin1</span><br><span class="hljs-string">Password: 12345</span><br><span class="hljs-string">PASSED                        [ 25%]Test data: u---admin1, p---12345</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12345-admin2] Login account: admin2</span><br><span class="hljs-string">PASSED                        [ 50%]Test data: u---admin2, p---12345</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12346-admin2] Password: 12346</span><br><span class="hljs-string">PASSED                        [ 75%]Test data: u---admin2, p---12346</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12346-admin1] Login account: admin1</span><br><span class="hljs-string">PASSED                        [100%]Test data: u---admin1, p---12346</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.18s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="8-命令行参数的配置"><a href="#8-命令行参数的配置" class="headerlink" title="8 命令行参数的配置"></a>8 命令行参数的配置</h1><ul><li>命令行参数的配置<ul><li>在<code>conftest.py</code>文件中添加命令行选项，命令行传入参数<code>--cmdopt</code>，用例需用到时即调用cmdpot函数。</li><li>配置文件<code>pytest.ini</code>也可以改变pytest的运行方式，是一个固定文件，读取配置信息，按指定方式运行。</li><li>PyTest框架的部分文件说明<ul><li><code>conftest.py</code>：参数用例的一些fixture配置。</li><li><code>setup.cfg</code>：ini格式文件，影响<code>setup.py</code>的行为。</li><li><code>pytest.ini</code>：主配置文件，改变PyTest的默认行为。</li><li><code>tox.ini</code>：与<code>pytest.ini</code>类似，使用tox工具时才用。</li><li><code>__init__.py</code>：识别该文件所在的文件夹为Python的package包。</li></ul></li></ul></li></ul><h2 id="8-1-conftest-py"><a href="#8-1-conftest-py" class="headerlink" title="8-1 conftest.py"></a>8-1 conftest.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># conftest.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_addoption</span>(<span class="hljs-params">parser</span>):<br>    parser.addoption(<span class="hljs-string">&#x27;--cmdopt&#x27;</span>,<br>                     action=<span class="hljs-string">&#x27;store&#x27;</span>,<br>                     default=<span class="hljs-string">&#x27;type1&#x27;</span>,<br>                     <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;myoption: type1 or type2&#x27;</span>)<br><br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmdopt</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> request.config.getoption(<span class="hljs-string">&#x27;--cmdopt&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-不带参数执行"><a href="#1-不带参数执行" class="headerlink" title="(1) 不带参数执行"></a>(1) 不带参数执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_sample.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_answer</span>(<span class="hljs-params">cmdopt</span>):<br>    <span class="hljs-keyword">if</span> cmdopt == <span class="hljs-string">&#x27;type1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---1---&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> cmdopt == <span class="hljs-string">&#x27;type2&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---2---&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_sample.py&#x27;</span>])<br><br><span class="hljs-comment"># pytest -s test_sample.py                              # 不带参数执行，默认传type1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py ---1---</span><br><span class="hljs-string">F</span><br><span class="hljs-string"></span><br><span class="hljs-string">====================================== FAILURES ===========================================</span><br><span class="hljs-string">_____________________________________ test_answer _________________________________________</span><br><span class="hljs-string">cmdopt = &#x27;type1&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_answer(cmdopt):</span><br><span class="hljs-string">        if cmdopt == &#x27;type1&#x27;:</span><br><span class="hljs-string">            print(&#x27;---1---&#x27;)</span><br><span class="hljs-string">        elif cmdopt == &#x27;type2&#x27;:</span><br><span class="hljs-string">            print(&#x27;---2---&#x27;)</span><br><span class="hljs-string">&gt;       assert 0</span><br><span class="hljs-string">E       assert 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py:9: AssertionError</span><br><span class="hljs-string">=================================== warnings summary ======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">================================ short test summary info ==================================</span><br><span class="hljs-string">FAILED test_sample.py::test_answer - assert 0</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.42s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-带上参数执行"><a href="#2-带上参数执行" class="headerlink" title="(2) 带上参数执行"></a>(2) 带上参数执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># pytest -s test_sample.py --cmdopt=type2               # 带上参数执行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py ---2---</span><br><span class="hljs-string">F</span><br><span class="hljs-string"></span><br><span class="hljs-string">====================================== FAILURES ===========================================</span><br><span class="hljs-string">_____________________________________ test_answer _________________________________________</span><br><span class="hljs-string">cmdopt = &#x27;type2&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_answer(cmdopt):</span><br><span class="hljs-string">        if cmdopt == &#x27;type1&#x27;:</span><br><span class="hljs-string">            print(&#x27;---1---&#x27;)</span><br><span class="hljs-string">        elif cmdopt == &#x27;type2&#x27;:</span><br><span class="hljs-string">            print(&#x27;---2---&#x27;)</span><br><span class="hljs-string">&gt;       assert 0</span><br><span class="hljs-string">E       assert 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py:9: AssertionError</span><br><span class="hljs-string">=================================== warnings summary ======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">================================ short test summary info ==================================</span><br><span class="hljs-string">FAILED test_sample.py::test_answer - assert 0</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.28s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-pytest-ini配置"><a href="#8-2-pytest-ini配置" class="headerlink" title="8-2 pytest.ini配置"></a>8-2 pytest.ini配置</h2><ul><li>pytest.ini配置<ul><li>一个项目有一个<code>pytest.ini</code>文件即可，放在项目的根目录下。</li><li>命令窗口下使用<code>pytest --help</code>指令，可以查看到<code>pytest.ini</code>文件中的设置选项。</li><li><code>pytest.ini</code>文件不能带中文注释，否则运行将报错：<code>UnicodeDecodeError: &#39;gbk&#39;...illegal multibyte</code>。</li><li>addopts参数默认更改命令行选项，例如：执行完用例需要生成报告，使用命令<code>pytest --html=report.html</code>。</li><li>将生成报告的命令加入<code>pytest.ini</code>文件中，下次直接执行<code>pytest</code>指令，PyTest就会默认带上这些新增的参数。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Ini"><span class="hljs-section">[pytest]</span>                                                <span class="hljs-comment"># pytest.ini，放在项目的根目录下</span><br><br><br>markers =                                               <span class="hljs-comment"># 自定义mark标记的配置注册</span><br>    a: a tests<br>    b: b tests<br>    function: Function tests<br>    webtest: Run the webtest case<br><br><br><span class="hljs-attr">addopts</span> = --html=report.html                            <span class="hljs-comment"># 执行完用例生成报告，需事先安装好插件</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://stitch-top.github.io/2022/01/11/testing/testing01-pytest-ce-shi-kuang-jia-yi/#6-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AE%B0mark">mark标记</a><ul><li>使用mark标记功能，对后续分类测试用例十分有用，将自定义标记写入<code>pytest.ini</code>文件中，方便管理。</li><li>命令窗口对应<code>pytest.ini</code>文件所在的文件夹下，输入<code>pytest --markers</code>命令可以查看到已定义的标记。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_xpass.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---use case a---&#x27;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.xfail()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    y = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-keyword">assert</span> x == y<br><br><br><span class="hljs-meta">@pytest.mark.xfail()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    y = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-keyword">assert</span> x != y<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_xpass.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py::test_a PASSED                                        [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py::test_b XFAIL                                         [ 66%]</span><br><span class="hljs-string">@pytest.mark.xfail()</span><br><span class="hljs-string">    def test_b():</span><br><span class="hljs-string">        x = &#x27;hello&#x27;</span><br><span class="hljs-string">        y = &#x27;hello world&#x27;</span><br><span class="hljs-string">&gt;       assert x == y</span><br><span class="hljs-string">E       AssertionError: assert &#x27;hello&#x27; == &#x27;hello world&#x27;</span><br><span class="hljs-string">E         - hello world</span><br><span class="hljs-string">E         + hello</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py:13: AssertionError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py::test_c XPASS                                         [100%]</span><br><span class="hljs-string">=================== 1 passed, 1 xfailed, 1 xpassed, 1 warning in 0.27s ====================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>禁用xpass<ul><li>设置<code>xfail_strict = true</code>可以让标记为<code>@pytest.mark.xfail</code>但实际通过的用例被报告为失败。</li><li>在<code>test_xpass.py</code>实例中，test_b和test_c都标记为失败，这里希望b和c用例不用执行就显示xfail。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Ini"><span class="hljs-section">[pytest]</span>                                                <span class="hljs-comment"># pytest.ini，禁用XPASS</span><br><br><br><span class="hljs-attr">xfail_strict</span> = <span class="hljs-literal">true</span>                                     <span class="hljs-comment"># 再次执行test_xpass.py，查看结果</span><br><br>&quot;&quot;&quot;                    ！！！test_c的XPASS被强制性标记为FAILED。<br>=================================== test session <span class="hljs-attr">starts</span> ===================================<br>collecting ... collected 3 items<br><br>test_xpass.py::test_a PASSED                                        <span class="hljs-section">[ 33%]</span>---use case a---<br><br>test_xpass.py::test_b XFAIL                                         <span class="hljs-section">[ 66%]</span><br>@pytest.mark.xfail()<br>    def test_b():<br>        <span class="hljs-attr">x</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-attr">y</span> = <span class="hljs-string">&#x27;hello world&#x27;</span><br>&gt;       assert <span class="hljs-attr">x</span> == y<br>E       AssertionError: assert <span class="hljs-attr">&#x27;hello&#x27;</span> == <span class="hljs-string">&#x27;hello world&#x27;</span><br>E         - hello world<br>E         + hello<br><br>test_xpass.py:13: AssertionError<br><br>test_xpass.py::test_c FAILED                                        <span class="hljs-section">[100%]</span><br>test_xpass.py:15 (test_c)<br><span class="hljs-section">[XPASS(strict)]</span> <br>==================== 1 failed, 1 passed, 1 xfailed, 1 warning in <span class="hljs-attr">0.26s</span> ====================<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><h1 id="9-生成html测试报告"><a href="#9-生成html测试报告" class="headerlink" title="9 生成html测试报告"></a>9 生成html测试报告</h1><ul><li>生成html测试报告<ul><li>pytest-html：PyTest用于生成测试结果的html报告插件，<code>pip install pytest-html</code>进行安装。<ul><li>执行方法：<code>pytest --html=report.html</code>，当前目录中生成<code>report.html</code>报告文件。</li><li>指定执行某个<code>.py</code>文件生成报告：<code>pytest test_filename.py --html=report.html</code>。</li><li>生成报告到当前文件夹的report目录中：<code>pytest test_filename.py --html=./report/report.html</code>。</li><li>上述方法生成的报告，css独立，分享报告时样式将丢失，为更好展示报告，可将css样式合并到html中。</li><li>让<code>report.html</code>报告独立显示，可使用命令：<code>pytest --html=report.html --self-contained-html</code>。</li><li>用例执行失败重跑需依赖pytest-rerunfailures插件，命令安装：<code>pip install pytest-rerunfailures</code>。<ul><li>重跑n次：<code>pytest --reruns n</code>，失败才重跑，成功用例使用无效。</li><li>重跑n次，每次间隔m秒：<code>pytest --reruns n --reruns-delay m</code>。</li></ul></li></ul></li><li>allure：report框架，支持Python的PyTest、Java的JUnit、TestNG等框架，可以集成到Jenkins上。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># conftest.py，用例报错时进行截图的配置代码</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>driver: webdriver.Firefox = <span class="hljs-literal">None</span>                        <span class="hljs-comment"># 需用到浏览器插件，提前配置好</span><br><br><br><span class="hljs-meta">@pytest.mark.hookwrapper</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_makereport</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    When a use case fails to execute, a screenshot is automatically displayed in the report.</span><br><span class="hljs-string">    :param item:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    pytest_html = item.config.pluginmanager.getplugin(<span class="hljs-string">&#x27;html&#x27;</span>)<br>    outcome = <span class="hljs-keyword">yield</span><br>    report = outcome.get_result()<br>    extra = <span class="hljs-built_in">getattr</span>(report, <span class="hljs-string">&#x27;extra&#x27;</span>, [])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type item: &quot;</span>, <span class="hljs-built_in">type</span>(item))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type report: &quot;</span>, <span class="hljs-built_in">type</span>(report))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;extra:&quot;</span>, extra)<br><br>    <span class="hljs-keyword">if</span> report.when == <span class="hljs-string">&#x27;call&#x27;</span> <span class="hljs-keyword">or</span> report.when == <span class="hljs-string">&#x27;setup&#x27;</span>:<br>        xfail = <span class="hljs-built_in">hasattr</span>(report, <span class="hljs-string">&#x27;wasfail&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (report.skipped <span class="hljs-keyword">and</span> xfail) <span class="hljs-keyword">or</span> (report.failed <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> xfail):<br>            file_name = report.nodeid.replace(<span class="hljs-string">&quot;::&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>) + <span class="hljs-string">&quot;.png&quot;</span><br>            screen_img = _capter_screenshot()<br>            <span class="hljs-keyword">if</span> file_name:<br>                html = <span class="hljs-string">&#x27;&lt;div&gt;&lt;img src=&quot;data:image/png;base64,%s&quot; \</span><br><span class="hljs-string">                        alt=&quot;screenshot&quot; style=&quot;width:600px;height:300px;&quot;&#x27;</span> \<br>                       <span class="hljs-string">&#x27;onclick=&quot;window.open(this.src)&quot; align=&quot;right&quot;/&gt;&lt;/div&gt;&#x27;</span> % screen_img<br>                extra.append(pytest_html.extras.html(html))<br>        report.extra = extra<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_capter_screenshot</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Screenshots are saved as base64 and displayed in the html report.</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> driver.get_screenshot_as_base64()<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;session&#x27;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">browser</span>():<br>    <span class="hljs-keyword">global</span> driver<br>    <span class="hljs-keyword">if</span> driver <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        driver = webdriver.Firefox()<br>    <span class="hljs-keyword">return</span> driver<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> time                                             <span class="hljs-comment"># test_screenshot.py</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_title</span>(<span class="hljs-params">browser</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :type browser: webdriver.firefox</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.get(<span class="hljs-string">&quot;https://stitch-top.github.io/&quot;</span>)        <span class="hljs-comment"># GitHub网站访问较慢</span><br>    time.sleep(<span class="hljs-number">5</span>)<br>    t = browser.title<br>    <span class="hljs-keyword">assert</span> t == <span class="hljs-string">&quot;Stitch.top&quot;</span>                            <span class="hljs-comment"># &quot;Dr.626&quot;</span><br>    browser.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_screenshot.py::test_get_title type item:  &lt;class &#x27;_pytest.python.Function&#x27;&gt;</span><br><span class="hljs-string">type report:  &lt;class &#x27;_pytest.reports.TestReport&#x27;&gt;</span><br><span class="hljs-string">extra: []</span><br><span class="hljs-string">type item:  &lt;class &#x27;_pytest.python.Function&#x27;&gt;</span><br><span class="hljs-string">type report:  &lt;class &#x27;_pytest.reports.TestReport&#x27;&gt;</span><br><span class="hljs-string">extra: []</span><br><span class="hljs-string">FAILED                                                  [100%]</span><br><span class="hljs-string">test_screenshot.py:4 (test_get_title)</span><br><span class="hljs-string">&#x27;Dr.626&#x27; != &#x27;Stitch.top&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :&#x27;Stitch.top&#x27;</span><br><span class="hljs-string">Actual   :&#x27;Dr.626&#x27;</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">browser = &lt;selenium.webdriver.firefox.webdriver.WebDriver (session=&quot;7b59821c-6f12-45c5-b952-d00e512a9a2c&quot;)&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_get_title(browser):</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        :<span class="hljs-built_in">type</span> browser: webdriver.firefox<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        browser.get(&quot;https://stitch-top.github.io/&quot;)</span><br><span class="hljs-string">        time.sleep(5)</span><br><span class="hljs-string">        t = browser.title</span><br><span class="hljs-string">&gt;       assert t == &quot;Stitch.top&quot;                        # &quot;Dr.626&quot;</span><br><span class="hljs-string">E       AssertionError: assert &#x27;Dr.626&#x27; == &#x27;Stitch.top&#x27;</span><br><span class="hljs-string">E         - Stitch.top</span><br><span class="hljs-string">E         + Dr.626</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_screenshot.py:12: AssertionError</span><br><span class="hljs-string">type item:  &lt;class &#x27;_pytest.python.Function&#x27;&gt;</span><br><span class="hljs-string">type report:  &lt;class &#x27;_pytest.reports.TestReport&#x27;&gt;</span><br><span class="hljs-string">extra: []</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 16.11s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Testing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>PyTest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium 基础</title>
    <link href="/2022/01/08/testing/testing03-selenium-ji-chu/"/>
    <url>/2022/01/08/testing/testing03-selenium-ji-chu/</url>
    
    <content type="html"><![CDATA[<p>Selenium提供了一个简单的API，使用WebDriver来编写校验测试，通过API可直观地使用Selenium WebDriver的所有功能。</p><span id="more"></span><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><ul><li>概念<ul><li><a href="https://www.selenium.dev/zh-cn/documentation/">官方文档</a>，PyPI的官方库支持下载Selenium，命令安装：<code>pip install selenium</code>。</li><li>各浏览器驱动<ul><li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a>。</li><li>Chrome：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a>。</li><li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver</a>。</li><li>下载解压驱动，将其复制到Python的安装目录中，与<code>python.exe</code>同一文件夹位置。</li></ul></li><li>使用Edge驱动报错<ul><li>报错信息：<code>Message: &#39;MicrosoftWebDriver.exe&#39; executable needs to be in Path</code>。</li><li>驱动版本正确，路径也已加，则将驱动名msedgedriver.exe改为MicrosoftWebDriver.exe。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># test.py</span><br><br>driver = webdriver.Edge()<br><span class="hljs-comment"># driver = webdriver.Chrome()</span><br><span class="hljs-comment"># driver = webdriver.Firefox()                          # 初始化一个火狐浏览器实例</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)                              <span class="hljs-comment"># 设置隐式时间等待</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)                     <span class="hljs-comment"># 通过get方法打开百度</span><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br><span class="hljs-comment"># driver.close()                                        # close只会关闭一个标签页</span><br></code></pre></td></tr></table></figure><h1 id="2-定位元素"><a href="#2-定位元素" class="headerlink" title="2 定位元素"></a>2 定位元素</h1><ul><li>定位元素<ul><li>定位单个元素：公共方法。<ul><li><code>find_element_by_id</code>、<code>find_element_by_name</code>。</li><li><code>find_element_by_xpath</code>、<code>find_element_by_tag_name</code>。</li><li><code>find_element_by_class_name</code>、<code>find_element_by_css_selector</code>。</li><li><code>find_element_by_link_text</code>、<code>find_element_by_partial_link_text</code>。</li></ul></li><li>定位一组元素：返回一个List列表，公共方法。<ul><li><code>find_elements_by_id</code>、<code>find_elements_by_name</code>。</li><li><code>find_elements_by_xpath</code>、<code>find_elements_by_tag_name</code>。</li><li><code>find_elements_by_class_name</code>、<code>find_elements_by_css_selector</code>。</li><li><code>find_elements_by_link_text</code>、<code>find_elements_by_partial_link_text</code>。</li></ul></li><li>find_element和find_elements：私有方法。<ul><li>调用这两个私有方法，通过By声明定位，传入对应定位方法的定位参数。</li><li>使用前先导入模块：<code>from selenium.webdriver.common.by import By</code>。</li><li>两参数分别是定位类型和定位值：<code>driver.find_element(By.ID, &#39;kw&#39;)</code>。<ul><li><code>ID = &quot;id&quot;</code>、<code>NAME = &quot;name&quot;</code>。</li><li><code>XPATH = &quot;xpath&quot;</code>、<code>TAG_NAME = &quot;tag name&quot;</code>。</li><li><code>CLASS_NAME = &quot;class name&quot;</code>、<code>CSS_SELECTOR = &quot;css selector&quot;</code>。</li><li><code>LINK_TEXT = &quot;link text&quot;</code>、<code>PARTIAL_LINK_TEXT = &quot;partial link text&quot;</code>。</li></ul></li></ul></li></ul></li></ul><h2 id="2-1-ID"><a href="#2-1-ID" class="headerlink" title="2-1 ID"></a>2-1 ID</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- find_element_by_id(&#x27;loginForm&#x27;)，找不到元素会抛出NoSuchElementException异常 --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Name"><a href="#2-2-Name" class="headerlink" title="2-2 Name"></a>2-2 Name</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Clear&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- find_element_by_name(&#x27;username&#x27;) --&gt;</span><br><span class="hljs-comment">&lt;!-- find_element_by_name(&#x27;password&#x27;) --&gt;</span><br><span class="hljs-comment">&lt;!-- find_element_by_name(&#x27;continue&#x27;) --&gt;</span><br><span class="hljs-comment">&lt;!-- 找不到元素会抛出NoSuchElementException异常 --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-XPath"><a href="#2-3-XPath" class="headerlink" title="2-3 XPath"></a>2-3 XPath</h2><ul><li>XPath<ul><li>注意：该定位方式在Selenium版本4.x.x已弃用，若要使用，需回退到4.0.0之前的版本。</li><li>索引，当前层级下第1个input标签：<code>find_element_by_xpath(&quot;//input[1]&quot;)</code>。</li><li>元素属性定位<ul><li>特定属性名<code>@属性名</code>：<code>find_element_by_xpath(&quot;//form[@id]&quot;)</code>。</li><li><code>@属性名=&quot;属性值&quot;</code>：<code>find_element_by_xpath(&quot;//form[@id=&#39;loginForm&#39;]&quot;)</code>。</li><li>任意属性名<code>@*=&quot;属性值&quot;</code>：<code>find_element_by_xpath(&quot;//input[@*=&#39;username&#39;]&quot;)</code>。</li><li>多属性结合<ul><li><code>find_element_by_xpath(&quot;//input[@name=&#39;continue&#39;][@type=&#39;submit&#39;]&quot;)</code>。</li><li><code>find_element_by_xpath(&quot;//input[@name=&#39;continue&#39; or @type=&#39;submit&#39;]&quot;)</code>。</li><li><code>find_element_by_xpath(&quot;//input[@name=&#39;continue&#39; and @type=&#39;submit&#39;]&quot;)</code>。</li></ul></li></ul></li><li>路径定位<ul><li>相对路径<code>//</code>：<code>find_element_by_xpath(&quot;//form&quot;)</code>。</li><li>绝对路径<code>/</code>：<code>find_element_by_xpath(&quot;/html/body/form&quot;)</code>。</li><li>当前路径<code>.</code>：<code>find_element_by_xpath(&quot;//form/.&quot;)</code>，等同于<code>//form</code>。</li><li>上级路径<code>..</code>：<code>find_element_by_xpath(&quot;//form/input[1]/..&quot;)</code>，等同于<code>//form</code>。</li></ul></li><li>函数定位<ul><li><code>last()</code>：<code>find_element_by_xpath(&quot;//input[last()]&quot;)</code>。</li><li><code>text()</code>：<code>find_element_by_xpath(&quot;//a[text()=&#39;Mouclick&#39;]&quot;)</code>。</li><li><code>contains()</code>：<code>find_element_by_xpath(&quot;//input[contains(@type, &#39;submit&#39;)]&quot;)</code>。</li><li><code>starts-with()</code>：<code>find_element_by_xpath(&quot;//a[starts-with(text(), &#39;Mouclick&#39;)]&quot;)</code>。</li></ul></li><li>轴定位<ul><li>child：<code>find_element_by_xpath(&quot;//form/child&quot;)</code>。</li><li>parent：<code>find_element_by_xpath(&quot;//input[1]/parent&quot;)</code>。</li><li>preceding：<code>find_element_by_xpath(&quot;//a[text()=&#39;Continue&#39;]/preceding::a&quot;)</code>。</li><li>following：<code>find_element_by_xpath(&quot;//a[text()=&#39;Continue&#39;]/following::input[1]&quot;)</code>。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mouclick.html&quot;</span>&gt;</span>Mouclick<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;continue.html&quot;</span>&gt;</span>Continue<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Clear&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-标签名"><a href="#2-4-标签名" class="headerlink" title="2-4 标签名"></a>2-4 标签名</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h</span>&gt;</span>Welcome<span class="hljs-tag">&lt;/<span class="hljs-name">h</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Site content goes here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- find_element_by_tag_name(&#x27;h&#x27;)，找不到元素会抛出NoSuchElementException异常 --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-ClassName"><a href="#2-5-ClassName" class="headerlink" title="2-5 ClassName"></a>2-5 ClassName</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Site content goes here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- find_element_by_class_name(&#x27;content&#x27;)，找不到元素会抛出NoSuchElementException异常 --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-CSS选择器"><a href="#2-6-CSS选择器" class="headerlink" title="2-6 CSS选择器"></a>2-6 CSS选择器</h2><ul><li>CSS选择器<ul><li>标签名定位：<code>find_element_by_css_selector(&quot;p&quot;)</code>。</li><li>id定位：<code>find_element_by_css_selector(&quot;#loginForm&quot;)</code>。</li><li>class定位：<code>find_element_by_css_selector(&quot;.content&quot;)</code>。</li><li>元素定位<ul><li><code>element&gt;element</code>：<code>find_element_by_css_selector(&quot;form&gt;p&quot;)</code>，儿子节点。</li><li><code>element element</code>：<code>find_element_by_css_selector(&quot;form p.content&quot;)</code>，子孙节点。</li><li><code>element+element</code>：<code>find_element_by_css_selector(&quot;a+input&quot;)</code>，紧挨着的兄弟节点，子节点不算。</li><li>注意：使用Firefox浏览器时，+号前后要加空格，否则定位不到，Chrome和Edge不用，CSS本身也不用。</li></ul></li><li>属性定位<ul><li><code>[属性=属性值]</code>：<code>find_element_by_css_selector(&quot;[name=&#39;username&#39;]&quot;)</code>。</li><li><code>[属性^=属性值]</code>：<code>find_element_by_css_selector(&quot;[name^=&#39;con&#39;]&quot;)</code>，name属性开头为con的标签。</li><li><code>[属性*=属性值]</code>：<code>find_element_by_css_selector(&quot;[name*=&#39;con&#39;]&quot;)</code>，name属性包含con的所有标签。</li><li><code>[属性$=属性值]</code>：<code>find_element_by_css_selector(&quot;[name$=&#39;nue&#39;]&quot;)</code>，name的属性值结尾是nue的所有标签。</li></ul></li><li>下标定位<ul><li><code>#loginForm&gt;:last-child</code>：id为loginForm标签下的最后1个标签。</li><li><code>#loginForm&gt;:nth-last-child(2)</code>：id为loginForm标签下的倒数第2个标签。</li><li><code>#loginForm&gt;input:nth-child(3)</code>：id为loginForm的标签下的第3个标签，且标签名为input。</li><li><code>#loginForm&gt;:nth-child(1)</code>或<code>#loginForm&gt;:first-child</code>：id为loginForm标签下的第1个标签。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mouclick.html&quot;</span>&gt;</span>Mouclick<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;continue.html&quot;</span>&gt;</span>Continue<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Login&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Clear&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>Site content goes here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-7-链接文本获取"><a href="#2-7-链接文本获取" class="headerlink" title="2-7 链接文本获取"></a>2-7 链接文本获取</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Are you sure you want to do this?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;continue.html&quot;</span>&gt;</span>Continue<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mouclick.html&quot;</span>&gt;</span>Mouclick<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 找不到元素会NoSuchElementException异常 --&gt;</span><br><span class="hljs-comment">&lt;!-- find_element_by_link_text(&#x27;Continue&#x27;) --&gt;</span><br><span class="hljs-comment">&lt;!-- find_element_by_partial_link_text(&#x27;Conti&#x27;) --&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-等待设置"><a href="#3-等待设置" class="headerlink" title="3 等待设置"></a>3 等待设置</h1><ul><li>等待设置<ul><li>固定等待：<code>timd.sleep()</code>。<ul><li>不管浏览器是否加载完，程序都得等待，对于调试阶段十分有用。</li><li>但太过死板，严重影响程序执行速度，自动化测试时不建议使用。</li></ul></li><li>隐式等待：<code>implicitly_wait()</code>。<ul><li>规定时间内网页加载完，则执行下一步，否则等到时间截止，再执行下一步。</li><li>该等待方式对于整个浏览器驱动的周期都起作用，所以只需要设置一次即可。</li></ul></li><li>显示等待：<code>WebDriverWait()</code>。<ul><li>程序隔几秒看一眼，条件成立则执行下一步，否则继续等待。</li><li>直到超过设置的最长时间，然后抛出TimeoutException异常。</li></ul></li></ul></li></ul><h2 id="3-1-固定等待"><a href="#3-1-固定等待" class="headerlink" title="3-1 固定等待"></a>3-1 固定等待</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># wait1.py</span><br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>sleep(<span class="hljs-number">30</span>)                                               <span class="hljs-comment"># 固定等待30秒再执行下一步</span><br><span class="hljs-built_in">print</span>(driver.current_url)                               <span class="hljs-comment"># 获取当前页面的URL</span><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="3-2-隐式等待"><a href="#3-2-隐式等待" class="headerlink" title="3-2 隐式等待"></a>3-2 隐式等待</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># wait2.py</span><br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">30</span>)                              <span class="hljs-comment"># 隐式等待，最长等30秒</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><span class="hljs-built_in">print</span>(driver.current_url)                               <span class="hljs-comment"># 获取当前页面的URL</span><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="3-3-显示等待"><a href="#3-3-显示等待" class="headerlink" title="3-3 显示等待"></a>3-3 显示等待</h2><ul><li>显示等待<ul><li><code>WebDriverWait(driver, timeout, poll_frequency, ignored_exceptions)</code></li><li>参数说明<ul><li>driver：浏览器驱动。</li><li>timeout：最长超时时间，默认以秒为单位。</li><li>poll_frequency：调用until或until_not方法的间隔时间，默认为0.5秒。</li><li>ignored_exceptions：超时后的异常信息，默认抛出NoSuchElementException异常。</li></ul></li><li>调用方法<ul><li><code>WebDriverWait(driver, timeout=3).until(method, message=&quot;&quot;)</code>，返回值True。</li><li><code>WebDriverWait(driver, timeout=3).until_not(method, message=&quot;&quot;)</code>，返回值False。</li></ul></li><li>expected_conditions类提供的预期条件判断方法<ul><li>alert_is_present：判断页面上是否存在alert。</li><li>element_to_be_clickable：判断某个元素是否可以点击。</li><li>title<ul><li>title_is：判断当前页面的标题是否等于预期字符串。</li><li>title_contains：判断当前页面的标题是否包含预期。</li></ul></li><li>presence<ul><li>presence_of_element_located：验证只要一个符合条件的元素被加载出来，就可通过。</li><li>presence_of_all_elements_located：验证必须所有符合条件的元素都加载出来才通过。</li></ul></li><li>staleness_of：判断一个元素是否仍在DOM中，传入WebElement，可判断页面是否刷新了。</li><li>visibility<ul><li>visibility_of：判断元素是否可见，传入WebElement。</li><li>visibility_of_element_located：判断元素是否可见，传入的参数是元组类型的locator。</li><li>invisibility_of_element_located：判断元素是否不可见，传入参数是元组类型的locator。</li></ul></li><li>text<ul><li>text_to_be_present_in_element：判断某个元素中的text是否包含预期的字符串。</li><li>text_to_be_present_in_element_value：判断某个元素的value属性是否包含预期的字符串。</li></ul></li><li>frame_to_be_available_and_switch_to_it：判断表单是否可以切入，可切入则返回True并切入。</li><li>element<ul><li>element_to_be_selected：判断元素是否被选中，传入WebElement对象。</li><li>element_located_to_be_selected：判断元素是否被选中，传locator元组。</li><li>element_selection_state_to_be：判断元素是否被选中，传入WebElement对象和状态，相等返回True。</li><li>element_located_selection_state_to_be：判断元素是否被选中，传入locator以及状态，相等返回True。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                            <span class="hljs-comment"># wait3.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.wait <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                  <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)                                <span class="hljs-comment"># 隐式等待，最长等10秒</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>locator = (By.LINK_TEXT, <span class="hljs-string">&#x27;hao123&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    wait = WebDriverWait(driver, <span class="hljs-number">20</span>, <span class="hljs-number">0.5</span>)                 <span class="hljs-comment"># 显示等待可同隐式等待一起用</span><br>    wait.until(EC.presence_of_element_located(locator))   <span class="hljs-comment"># 最长的等待时间取决于两者之间的最大值</span><br>    driver.find_element_by_link_text(<span class="hljs-string">&#x27;hao123&#x27;</span>)<br><span class="hljs-keyword">finally</span>:<br>    driver.close()                                        <span class="hljs-comment"># 关闭当前标签页</span><br></code></pre></td></tr></table></figure><h1 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4 常用方法"></a>4 常用方法</h1><ul><li>常用方法<ul><li><code>name</code>·····································查看浏览器名称</li><li><code>title</code>····································获取当前页面标题，判断页面跳转是否符合预期</li><li><code>current_url</code>······························获取当前页面URL，一般可以用来测试重定向操作</li><li><code>back()</code>···································后退</li><li><code>forward()</code>································前进</li><li><code>refresh()</code>································刷新页面</li><li><code>maximize_window()</code>························浏览器窗口最大化</li><li><code>switch_to_alert()</code>························焦点切换到弹窗中</li><li><code>get_window_position()</code>····················获取当前窗口的坐标</li><li><code>get_window_size()</code>························获取当前窗口的宽和高</li><li><code>set_window_size(width, height)</code>···········设置当前窗口的宽和高</li><li><code>get_screenshot_as_file(filename)</code>·········截取当前页面</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># common.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Browser: &quot;</span> + driver.name)                        <span class="hljs-comment"># 查看浏览器名称</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Title: &quot;</span> + driver.title)                         <span class="hljs-comment"># 获取当前页面标题</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;URL: &quot;</span> + driver.current_url)                     <span class="hljs-comment"># 获取当前页面URL</span><br><br>driver.find_element_by_id(<span class="hljs-string">&quot;kw&quot;</span>).send_keys(<span class="hljs-string">&quot;Selenium&quot;</span>)<br>driver.find_element_by_id(<span class="hljs-string">&quot;su&quot;</span>).click()                 <span class="hljs-comment"># 点击搜索selenium内容</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.back()                                           <span class="hljs-comment"># 后退回百度首页</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.forward()                                        <span class="hljs-comment"># 前进到搜索selenium页面</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.back()                                           <span class="hljs-comment"># 后退回百度首页</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.refresh()                                        <span class="hljs-comment"># 刷新页面</span><br><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br>setmenu = driver.find_element_by_id(<span class="hljs-string">&quot;s-usersetting-top&quot;</span>)<br>ActionChains(driver).move_to_element(setmenu).perform()<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;搜索设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;保存设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>text = driver.switch_to_alert().text                    <span class="hljs-comment"># 切换到弹窗中，获取弹窗提示信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pop-up alert message: &quot;</span> + text)<br>sleep(<span class="hljs-number">3</span>)<br>driver.switch_to.alert.accept()                         <span class="hljs-comment"># 接受警告框</span><br>sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Coordinates of the current window: &quot;</span> + <span class="hljs-built_in">str</span>(driver.get_window_position()))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Width and height of the current window: &quot;</span> + <span class="hljs-built_in">str</span>(driver.get_window_size()))<br>driver.set_window_size(<span class="hljs-number">1440</span>, <span class="hljs-number">900</span>)                       <span class="hljs-comment"># 设置当前窗口的宽和高</span><br>driver.get_screenshot_as_file(<span class="hljs-string">&quot;.\common.png&quot;</span>)           <span class="hljs-comment"># 截取当前页面</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-1-Cookie"><a href="#4-1-Cookie" class="headerlink" title="4-1 Cookie"></a>4-1 Cookie</h2><ul><li>Cookie<ul><li><code>get_cookies()</code>····························获取所有Cookie</li><li><code>get_cookie(name)</code>·························获取name属性的Cookie</li><li><code>delete_all_cookies()</code>·····················删除浏览器中的所有Cookie</li><li><code>delete_cookie(name)</code>······················删除name属性的Cookie</li><li><code>add_cookie(cookie_dic)</code>···················添加Cookie(Cookie格式为字典)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># cookie.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><br><span class="hljs-built_in">print</span>(driver.get_cookies())                             <span class="hljs-comment"># 获取所有Cookie</span><br><span class="hljs-built_in">print</span>(driver.get_cookie(name=<span class="hljs-string">&quot;ZFY&quot;</span>))                    <span class="hljs-comment"># 获取ZFY属性的Cookie</span><br>driver.delete_cookie(name=<span class="hljs-string">&quot;ZFY&quot;</span>)                        <span class="hljs-comment"># 删除ZFY属性的Cookie</span><br><span class="hljs-keyword">if</span> driver.get_cookie(name=<span class="hljs-string">&quot;ZFY&quot;</span>):                       <span class="hljs-comment"># 判断ZFY属性的Cookie是否还在</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to delete.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Deleted successfully.&quot;</span>)<br>driver.delete_all_cookies()                             <span class="hljs-comment"># 删除浏览器中的所有Cookie</span><br>driver.add_cookie(&#123;                                     <span class="hljs-comment"># 添加Cookie</span><br>    <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;.baidu.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;expiry&#x27;</span>: <span class="hljs-number">2022112517</span>,<br>    <span class="hljs-string">&#x27;httpOnly&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Test&#x27;</span>,<br>    <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-string">&#x27;sameSite&#x27;</span>: <span class="hljs-string">&#x27;None&#x27;</span>,<br>    <span class="hljs-string">&#x27;secure&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;BWo2kLK:ASP9EHiAqyW83MVaN3FAjB:BD1FVCezH7s42g:C&#x27;</span><br>&#125;)<br><span class="hljs-built_in">print</span>(driver.get_cookie(name=<span class="hljs-string">&quot;Test&quot;</span>))                   <span class="hljs-comment"># 获取Test属性的Cookie</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-2-多窗口"><a href="#4-2-多窗口" class="headerlink" title="4-2 多窗口"></a>4-2 多窗口</h2><ul><li>多窗口<ul><li>首先需要获得每一个窗口的句柄，句柄即唯一标识符号。</li><li><code>quit()</code>···································关闭所有窗口</li><li><code>close()</code>··································关闭当前窗口</li><li><code>window_handles</code>···························获取所有窗口的句柄</li><li><code>switch_to.window()</code>·······················切换到相应的窗口中</li><li><code>current_window_handle</code>····················获取当前窗口的句柄</li><li><code>switch_to.parent_content</code>·················返回上一级表单，新方法</li><li><code>switch_to_parent_content()</code>···············返回上一级表单，旧方法</li><li><code>switch_to.default_content()</code>··············返回最外层表单，新方法</li><li><code>switch_to_default_content()</code>··············返回最外层表单，旧方法</li><li><code>switch_to.frame(id/name/xpath)</code>···········切换到被嵌套的frame中</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># multiwin.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.execute_script(<span class="hljs-string">&quot;window.open(&#x27;https://mail.163.com/&#x27;)&quot;</span>)<br><br>handles = driver.window_handles                         <span class="hljs-comment"># 获取所有窗口的句柄</span><br><span class="hljs-built_in">print</span>(handles)<br>current = driver.current_window_handle                  <span class="hljs-comment"># 获取当前窗口的句柄</span><br><span class="hljs-built_in">print</span>(current)<br><span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> handles:<br>    <span class="hljs-keyword">if</span> handle != current:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Switch to second window.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(handle)<br>        driver.close()                                  <span class="hljs-comment"># close关闭当前窗口</span><br>        sleep(<span class="hljs-number">3</span>)<br>        driver.switch_to.window(handle)                 <span class="hljs-comment"># 切换到第二个窗口</span><br>        sleep(<span class="hljs-number">3</span>)<br><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>iframe = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;loginDiv&#x27;]/iframe&quot;</span>)<br>driver.switch_to.frame(iframe)                          <span class="hljs-comment"># 切换到被嵌套的frame中</span><br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;login-form&#x27;]/div/div/div[2]/input&quot;</span>).send_keys(<span class="hljs-string">&#x27;admin&#x27;</span>)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 输入账号</span><br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;login-form&#x27;]/div/div[3]/div[2]/input[2]&quot;</span>).send_keys(<span class="hljs-string">&#x27;12345&#x27;</span>)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 输入密码</span><br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;login-form&#x27;]/div/div[8]/a&quot;</span>).click()<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 点击登录</span><br><br>driver.switch_to.parent_frame()                         <span class="hljs-comment"># 返回上一级表单</span><br><span class="hljs-comment"># driver.switch_to.default_content()                    # 返回最外层表单</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-3-警告框"><a href="#4-3-警告框" class="headerlink" title="4-3 警告框"></a>4-3 警告框</h2><ul><li>警告框<ul><li>WebDriver处理JavaScript生成的alert、confirm和prompt，使用<code>switch_to.alert</code>方法实现。</li><li><code>switch_to.alert.text</code>·····················返回alert、confirm、prompt中的文字信息</li><li><code>switch_to.alert.accept()</code>·················接受现有警告框</li><li><code>switch_to.alert.dismiss()</code>················解散现有警告框</li><li><code>switch_to.alert.send_keys()</code>··············警告框中输入文本，只适用于prompt弹窗<ul><li>alert方法有一个参数，弹窗显示后，只一个确认或关闭按钮。</li><li>confirm方法要求用户选择，有确认有返回，确定则True，取消则False。</li><li>prompt方法可在弹窗中输入文本，输入值后可点击确定，取消值为Null。</li></ul></li></ul></li></ul><h4 id="1-warning-py"><a href="#1-warning-py" class="headerlink" title="(1) warning.py"></a>(1) warning.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># warning.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br><br>setmenu = driver.find_element_by_id(<span class="hljs-string">&quot;s-usersetting-top&quot;</span>)<br>ActionChains(driver).move_to_element(setmenu).perform()<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;搜索设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;保存设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>text = driver.switch_to.alert.text                      <span class="hljs-comment"># 切换到弹窗中，获取弹窗提示信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pop-up alert message: &quot;</span> + text)<br>sleep(<span class="hljs-number">3</span>)<br>driver.switch_to.alert.dismiss()                        <span class="hljs-comment"># 取消</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.get(<span class="hljs-string">&quot;file:///D:/Website/Python/MyProject/Selenium/warning.html&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//button[@onclick=&#x27;myFunction()&#x27;]&quot;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>driver.switch_to.alert.send_keys(<span class="hljs-string">&#x27;Dr.626&#x27;</span>)<br>sleep(<span class="hljs-number">5</span>)<br>driver.switch_to.alert.accept()                         <span class="hljs-comment"># 接受警告框</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-warning-html"><a href="#2-warning-html" class="headerlink" title="(2) warning.html"></a>(2) warning.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- warning.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>警告框<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击按钮查看输入的对话框。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 195px; height: 40px;&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> x;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> person = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (person != <span class="hljs-literal">null</span> &amp;&amp; person != <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                x = <span class="hljs-string">&quot;你好，&quot;</span> + person + <span class="hljs-string">&quot;！今天感觉如何？&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = x;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-下拉框"><a href="#4-4-下拉框" class="headerlink" title="4-4 下拉框"></a>4-4 下拉框</h2><ul><li>下拉框<ul><li>先定位到下拉框，再定位选项。</li><li>需点击才能显示选项时，有两次点击动作，第一次点击下拉框，第二次点击选项。</li><li>不需点击，鼠标放上去就会显示选项时，则可使用<code>move_to_element()</code>方法定位。</li><li>针对下拉框是select标签的<ul><li>导入Select类：<code>from selenium.webdriver.support.select import Select</code>。<ul><li><code>select_by_index(index)</code>···········根据index属性定位选项，index从0开始</li><li><code>select_by_value(value)</code>···········根据value属性定位选项</li><li><code>select_by_visible_text(text)</code>·····根据选项文本值定位选项</li><li><code>first_selected_option</code>············返回选中的第一个选择项</li><li><code>first_selected_option.text</code>·······返回默认选项的文本信息</li><li><code>all_selected_options</code>·············返回所有已选中的选择项</li></ul></li><li>取消选择deselect，只适用于添加了multiple的下拉框，否则会报错。<ul><li><code>deselect_by_index(index)</code>·········根据index属性清除选定的选项，index从0开始</li><li><code>deselect_by_value(value)</code>·········根据value属性清除选定的选项</li><li><code>deselect_by_visible_text(text)</code>···根据选项文本值清除选定的选项</li><li><code>deselect_all()</code>···················清除所有选项</li></ul></li></ul></li></ul></li></ul><h4 id="1-dropdown-py"><a href="#1-dropdown-py" class="headerlink" title="(1) dropdown.py"></a>(1) dropdown.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># dropdown.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.select <span class="hljs-keyword">import</span> Select<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;file:///D:/.../dropdown2.html&quot;</span>)             <span class="hljs-comment"># dropdown2.html文件存放路径</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br><br>select1 = Select(driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/form[2]/select&quot;</span>))<br>select1.select_by_index(<span class="hljs-number">0</span>)                              <span class="hljs-comment"># 根据index属性定位选项，index从0开始</span><br>select1.select_by_value(<span class="hljs-string">&quot;2&quot;</span>)                            <span class="hljs-comment"># 根据value属性定位选项</span><br>select1.select_by_visible_text(<span class="hljs-string">&quot;March&quot;</span>)                 <span class="hljs-comment"># 根据选项文本值定位选项</span><br><span class="hljs-keyword">for</span> select <span class="hljs-keyword">in</span> select1.all_selected_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected selections 1: &quot;</span> + select.text)      <span class="hljs-comment"># 返回所有已选中的选择项</span><br><br>select2 = Select(driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/form[1]/select&quot;</span>))<br>text1 = select2.first_selected_option                   <span class="hljs-comment"># 返回选中的第一个选择项</span><br>text2 = select2.first_selected_option.text              <span class="hljs-comment"># 返回默认选项的文本信息</span><br><span class="hljs-built_in">print</span>(text1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Default option text 0: &quot;</span> + text2)<br><br>select1.select_by_index(<span class="hljs-number">0</span>)<br>select1.select_by_index(<span class="hljs-number">1</span>)<br>select1.select_by_index(<span class="hljs-number">2</span>)<br>select1.select_by_index(<span class="hljs-number">3</span>)<br>select1.select_by_index(<span class="hljs-number">4</span>)<br>select1.select_by_index(<span class="hljs-number">5</span>)<br>select1.deselect_by_index(<span class="hljs-number">0</span>)                            <span class="hljs-comment"># 根据index属性清除选定的选项，index从0开始</span><br>select1.deselect_by_value(<span class="hljs-string">&quot;1&quot;</span>)                          <span class="hljs-comment"># 根据value属性清除选定的选项</span><br>select1.deselect_by_visible_text(<span class="hljs-string">&quot;March&quot;</span>)               <span class="hljs-comment"># 根据选项文本值清除选定的选项</span><br><span class="hljs-keyword">for</span> select <span class="hljs-keyword">in</span> select1.all_selected_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected selections 2: &quot;</span> + select.text)      <span class="hljs-comment"># 返回所有已选中的选择项</span><br><br>select1.deselect_all()                                  <span class="hljs-comment"># 清除所有选项</span><br><span class="hljs-keyword">for</span> select <span class="hljs-keyword">in</span> select1.all_selected_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected selections 3: &quot;</span> + select.text)      <span class="hljs-comment"># 返回所有已选中的选择项</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-dropdown1-html"><a href="#2-dropdown1-html" class="headerlink" title="(2) dropdown1.html"></a>(2) dropdown1.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- dropdown1.html，“水果拼盘”模拟下拉框多选操作暂未找到实现方法 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>下拉框1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 搜索引擎：select单选</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">oc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">f1</span>.<span class="hljs-property">t1</span>.<span class="hljs-title function_">value</span>());</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 水果拼盘、选择城市：multiple可多选</span></span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            selectMultip = &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">register</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 思路：为下拉选创建一个隐藏的子选项</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 每次单选之后将单选的值追加到隐藏的子选项中，并将子选项选中显示</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 全局查找所有标记multip的select</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[multip]&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">render</span>(e);</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">reload</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id, data, setData</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> htm = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                        htm += <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + data[i].<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + data[i].<span class="hljs-property">text</span> + <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> e = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);</span><br><span class="language-javascript">                    e.<span class="hljs-property">innerHTML</span> = htm;</span><br><span class="language-javascript">                    <span class="hljs-title function_">render</span>(e);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setVal</span>(id, setData);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">setVal</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id, str</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> type = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(str);</span><br><span class="language-javascript">                    <span class="hljs-keyword">switch</span> (type) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;[object String]&quot;</span>:</span><br><span class="language-javascript">                            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">val</span> = str;</span><br><span class="language-javascript">                            <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;[object Array]&quot;</span>:</span><br><span class="language-javascript">                            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">val</span> = str.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                            <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                        <span class="hljs-attr">default</span>:</span><br><span class="language-javascript">                            <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">getVal</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">val</span>;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript"></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                e.<span class="hljs-property">param</span> = &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">arr</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">valarr</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">opts</span>: []</span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> choosevalue = <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                    op;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; e.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    op = e.<span class="hljs-title function_">item</span>(i);</span><br><span class="language-javascript">                    e.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">push</span>(op);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (op.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&quot;choose&quot;</span>)) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (choosevalue == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                            choosevalue = op.<span class="hljs-property">value</span></span><br><span class="language-javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                            choosevalue += <span class="hljs-string">&quot;,&quot;</span> + op.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 创建一个隐藏的option标签用来存储多选的值，其中的值为一个数组</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> option = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;option&quot;</span>);</span><br><span class="language-javascript">                option.<span class="hljs-property">hidden</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                e.<span class="hljs-title function_">appendChild</span>(option);</span><br><span class="language-javascript">                e.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;input&quot;</span>, selchange);</span><br><span class="language-javascript">                e.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;input&quot;</span>, selchange);</span><br><span class="language-javascript">                <span class="hljs-comment">// 重新定义标签基础属性的get和set方法，实现取值和赋值的功能</span></span><br><span class="language-javascript">                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(e, <span class="hljs-string">&quot;val&quot;</span>, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[hidden]&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                        &#125;,</span><br><span class="language-javascript">                        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">                            e.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span> = [];</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> valrealarr = value == <span class="hljs-string">&quot;&quot;</span> ? [] : value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>);</span><br><span class="language-javascript">                            e.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span> = [];</span><br><span class="language-javascript">                            e.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;</span><br><span class="language-javascript">                                o.<span class="hljs-property">style</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                            &#125;);</span><br><span class="language-javascript">                            <span class="hljs-keyword">if</span> (valrealarr.<span class="hljs-title function_">toString</span>()) &#123;</span><br><span class="language-javascript">                                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; valrealarr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                                    e.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;</span><br><span class="language-javascript">                                        <span class="hljs-keyword">if</span> (o.<span class="hljs-property">value</span> == valrealarr[i]) &#123;</span><br><span class="language-javascript">                                            o.<span class="hljs-property">style</span> = <span class="hljs-string">&quot;color: blue;&quot;</span>;</span><br><span class="language-javascript">                                            e.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(o.<span class="hljs-property">text</span>);</span><br><span class="language-javascript">                                            e.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">push</span>(o.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">                                        &#125;</span><br><span class="language-javascript">                                    &#125;);</span><br><span class="language-javascript">                                &#125;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">text</span> = e.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">value</span> = e.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-number">0</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">                        &#125;,</span><br><span class="language-javascript">                        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    <span class="hljs-comment">// 添加属性choose，此属性添加到option中用来指定默认值</span></span><br><span class="language-javascript">                e.<span class="hljs-property">val</span> = choosevalue;</span><br><span class="language-javascript">                <span class="hljs-comment">// 添加属性tip，此属性添加到select标签上</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (e.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&quot;tip&quot;</span>) &amp;&amp; !e.<span class="hljs-property">tiped</span>) &#123;</span><br><span class="language-javascript">                    e.<span class="hljs-property">tiped</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                    e.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&#x27;afterend&#x27;</span>, <span class="hljs-string">&#x27;&lt;i style=&quot;color: red; \</span></span><br><span class="hljs-string"><span class="language-javascript">                                          font-size: 12px&quot;&gt;*可多选*\&lt;/i&gt;&#x27;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">selchange</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedIndex</span>].<span class="hljs-property">text</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedIndex</span>].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedIndex</span>].<span class="hljs-property">style</span> = <span class="hljs-string">&quot;color: blue;&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> ind = <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">indexOf</span>(text);</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (ind &gt; -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">splice</span>(ind, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">splice</span>(ind, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (o.<span class="hljs-property">value</span> == value) &#123;</span><br><span class="language-javascript">                            o.<span class="hljs-property">style</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;);</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(text);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">push</span>(value);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">text</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-number">0</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        搜索引擎：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id1&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id2&quot;</span>&gt;</span>必应<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id3&quot;</span>&gt;</span>搜狗<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o4&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id4&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o4&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id5&quot;</span>&gt;</span>火狐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        水果拼盘：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multip</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruits&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span> <span class="hljs-attr">tip</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>樱桃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>杨桃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>蜜柚<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>            selectMultip.register();<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        选择城市：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multip</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wh&quot;</span>&gt;</span>武汉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xm&quot;</span>&gt;</span>厦门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hz&quot;</span>&gt;</span>杭州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sz&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sz&quot;</span>&gt;</span>苏州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;nj&quot;</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cq&quot;</span>&gt;</span>重庆<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 355px; height: 45px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>单选按钮Radio<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pg&quot;</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jz&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jz&quot;</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xj&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xj&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;li&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>葡萄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xg&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 355px; height: 130px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>多选按钮Checkbox<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;汽车&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qc&quot;</span>&gt;</span>汽车<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;购物&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gw&quot;</span>&gt;</span>购物<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;购物&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ms&quot;</span>&gt;</span>美食<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;旅游&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ly&quot;</span> <span class="hljs-attr">readonly</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;音乐&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yy&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不可选 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-dropdown2-html"><a href="#3-dropdown2-html" class="headerlink" title="(3) dropdown2.html"></a>(3) dropdown2.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- dropdown2.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>下拉框2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Single Select --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        月份单选：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>January<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>February<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>March<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>April<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>May<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>June<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>July<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span>August<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>September<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>October<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span>November<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>December<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- Multiple Select --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        月份多选：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>January<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>February<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>March<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>April<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>May<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>June<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>July<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span>August<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>September<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>October<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span>November<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>December<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span> <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;select&#x27;</span>).<span class="hljs-title function_">multipleSelect</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-5-鼠标事件"><a href="#4-5-鼠标事件" class="headerlink" title="4-5 鼠标事件"></a>4-5 鼠标事件</h2><ul><li>鼠标事件<ul><li>使用前需先导入ActionChains类：<code>from selenium.webdriver.common.action_chains import ActionChains</code>。</li><li>用户行为不会立即执行，而是将所有操作放在一个队列中，执行perform方法时按放入队列的顺序，先进先出执行。</li><li><code>perform()</code>······················执行ActionChains类中存储的所有行为，可以理解为对整个操作的提交动作</li><li><code>release()</code>······················在某个元素上释放鼠标，写在<code>perform()</code>前，通过<code>perform()</code>方法来执行</li><li><code>click()</code>························鼠标点击</li><li><code>double_click()</code>·················鼠标双击</li><li><code>context_click()</code>················鼠标右击</li><li><code>click_and_hold()</code>···············按住鼠标左键不动</li><li><code>move_to_element(target)</code>·····························移动到某个元素上</li><li><code>move_by_offset(xoffset, yoffset)</code>····················移动到某个坐标上</li><li><code>drag_and_drop(source, target)</code>·······················按住鼠标左键，然后移动到目标元素并释放鼠标按钮</li><li><code>drag_and_drop_by_offset(source, xoffset, yoffset)</code>···按住鼠标左键，然后移动到目标偏移并释放鼠标按钮</li></ul></li></ul><h4 id="1-mouse-py"><a href="#1-mouse-py" class="headerlink" title="(1) mouse.py"></a>(1) mouse.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># mouse.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element1 = driver.find_element_by_id(<span class="hljs-string">&quot;kw&quot;</span>)<br>ActionChains(driver).click(element1).perform()          <span class="hljs-comment"># 鼠标点击</span><br>sleep(<span class="hljs-number">3</span>)<br>element2 = driver.find_element_by_id(<span class="hljs-string">&quot;hotsearch-refresh-btn&quot;</span>)<br>ActionChains(driver).double_click(element2).perform()   <span class="hljs-comment"># 鼠标双击</span><br>sleep(<span class="hljs-number">3</span>)<br>element3 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;lg&#x27;]/img&quot;</span>)<br>ActionChains(driver).context_click(element3).perform()  <span class="hljs-comment"># 鼠标右击</span><br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).drag_and_drop(element3, element1).perform()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.get(<span class="hljs-string">&quot;file:///D:/.../mouse.html&quot;</span>)                 <span class="hljs-comment"># mouse.html文件存放路径</span><br>element4 = driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/div[1]/div[2]/div/div&quot;</span>)<br>wholesld = driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/div[1]/div[2]&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Size: &quot;</span> + <span class="hljs-built_in">str</span>(element4.size), <span class="hljs-string">&quot;Position: &quot;</span> + <span class="hljs-built_in">str</span>(element4.location[<span class="hljs-string">&#x27;x&#x27;</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Size: &quot;</span> + <span class="hljs-built_in">str</span>(wholesld.size), <span class="hljs-string">&quot;Position: &quot;</span> + <span class="hljs-built_in">str</span>(wholesld.location[<span class="hljs-string">&#x27;x&#x27;</span>]))<br>ActionChains(driver).click_and_hold(element4).perform() <span class="hljs-comment"># 按住鼠标左键不动</span><br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).drag_and_drop_by_offset(element4, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>).perform()<br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).drag_and_drop_by_offset(element4, <span class="hljs-number">312</span>, <span class="hljs-number">0</span>).release().perform()<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 需鼠标移动到对应的自动化控制浏览器上</span><br>element5 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;dragEle&#x27;]&quot;</span>)<br>ActionChains(driver).move_to_element(element5).perform()<br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).move_by_offset(<span class="hljs-number">100</span>, <span class="hljs-number">30</span>).perform()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-mouse-html"><a href="#2-mouse-html" class="headerlink" title="(2) mouse.html"></a>(2) mouse.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- mouse.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滑动框1 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>滑动框<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#E8E8E8</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span> solid powderblue;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.3125rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#canvas</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: indianred;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#block</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.refreshIcon</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">280px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">21px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./refresh.png</span>);</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.verSliderBlock</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00ff7f</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./right_arrow.png&#x27;</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>);</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#45494c</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.bar</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#f7f9fa</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#45494c</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e7eb</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#bar-mask</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span> solid <span class="hljs-number">#1991fa</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#d1e9fe</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;310&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;155&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;310&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;155&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;block&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;refreshIcon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bar-mask&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;verSliderBlock&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;slide&quot;</span>&gt;</span>向右滑动验证<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    (<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">window</span></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> block = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;block&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas_ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> block_ctx = block.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> refresh = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.refreshIcon&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">200</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">            y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">            w = <span class="hljs-number">42</span>,</span><br><span class="language-javascript">            l = <span class="hljs-number">42</span>,</span><br><span class="language-javascript">            r = <span class="hljs-number">10</span>,</span><br><span class="language-javascript">            <span class="hljs-variable constant_">PI</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 获取图片后面的随机号码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomNumberByRange</span>(<span class="hljs-params">start, end</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (end - start) + start)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 初始化图片</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">initImg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                canvas_ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>)</span><br><span class="language-javascript">                block_ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> blockWidth = w + r * <span class="hljs-number">2</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 滑块实际的y坐标</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> _y = y - r * <span class="hljs-number">2</span> + <span class="hljs-number">2</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> <span class="hljs-title class_">ImageData</span> = block_ctx.<span class="hljs-title function_">getImageData</span>(x, _y, blockWidth, blockWidth)</span><br><span class="language-javascript">                block.<span class="hljs-property">width</span> = blockWidth</span><br><span class="language-javascript">                block_ctx.<span class="hljs-title function_">putImageData</span>(<span class="hljs-title class_">ImageData</span>, <span class="hljs-number">0</span>, _y)</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            img.<span class="hljs-property">crossOrigin</span> = <span class="hljs-string">&quot;Anonymous&quot;</span></span><br><span class="language-javascript">            img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://picsum.photos/300/150/?image=&#x27;</span> + <span class="hljs-title function_">getRandomNumberByRange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 清除图片</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">clean</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">200</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y)</span><br><span class="language-javascript">            canvas_ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>);</span><br><span class="language-javascript">            block_ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>)</span><br><span class="language-javascript">            block.<span class="hljs-property">width</span> = <span class="hljs-number">310</span></span><br><span class="language-javascript">            <span class="hljs-title function_">draw</span>(canvas_ctx, <span class="hljs-string">&#x27;fill&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-title function_">draw</span>(block_ctx, <span class="hljs-string">&#x27;clip&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 绘制方块</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">ctx, operation</span>) &#123;</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">beginPath</span>()</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(x, y)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">arc</span>(x + l / <span class="hljs-number">2</span>, y - r + <span class="hljs-number">2</span>, r, <span class="hljs-number">0.72</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-number">2.26</span> * <span class="hljs-variable constant_">PI</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x + l, y)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">arc</span>(x + l + r - <span class="hljs-number">2</span>, y + l / <span class="hljs-number">2</span>, r, <span class="hljs-number">1.21</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-number">2.78</span> * <span class="hljs-variable constant_">PI</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x + l, y + l)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x, y + l)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">arc</span>(x + r - <span class="hljs-number">2</span>, y + l / <span class="hljs-number">2</span>, r + <span class="hljs-number">0.4</span>, <span class="hljs-number">2.76</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-number">1.24</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x, y)</span><br><span class="language-javascript">            ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span></span><br><span class="language-javascript">            ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.7)&#x27;</span></span><br><span class="language-javascript">            ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.7)&#x27;</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">stroke</span>()</span><br><span class="language-javascript">            ctx[operation]()</span><br><span class="language-javascript">            ctx.<span class="hljs-property">globalCompositeOperation</span> = <span class="hljs-string">&#x27;overlay&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">initImg</span>()</span><br><span class="language-javascript">        <span class="hljs-title function_">draw</span>(canvas_ctx, <span class="hljs-string">&#x27;fill&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">draw</span>(block_ctx, <span class="hljs-string">&#x27;clip&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 添加移动事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> block_slider = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#block&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> slider = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.verSliderBlock&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> slider_mark = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#bar-mask&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 用于判断当前是否是在按住滑块的情况下</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> yd = <span class="hljs-literal">false</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> moveX = <span class="hljs-number">0</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> downX = <span class="hljs-number">0</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标按下</span></span><br><span class="language-javascript">        slider.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            downX = e.<span class="hljs-property">clientX</span>;</span><br><span class="language-javascript">            yd = <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标移动事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">hadleMousemove</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (yd) &#123;</span><br><span class="language-javascript">                moveX = e.<span class="hljs-property">clientX</span> - downX;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#slide&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (moveX &gt;= <span class="hljs-number">310</span>) &#123;</span><br><span class="language-javascript">                    moveX = <span class="hljs-number">310</span> - <span class="hljs-number">40</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (moveX &gt; -<span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#1991FA&quot;</span>;</span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderWidth</span> = <span class="hljs-string">&quot;1px&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;#1991fa&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = moveX + <span class="hljs-number">40</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                    block_slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = (<span class="hljs-number">310</span> - <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) / (<span class="hljs-number">310</span> - <span class="hljs-number">40</span>) * moveX + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = moveX + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标抬起事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">hadleMouseup</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (yd) &#123;</span><br><span class="language-javascript">                slider.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(moveX)</span><br><span class="language-javascript">                block_slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = (<span class="hljs-number">310</span> - <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) / (<span class="hljs-number">310</span> - <span class="hljs-number">40</span>) * moveX + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>((<span class="hljs-number">310</span> - <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) / (<span class="hljs-number">310</span> - <span class="hljs-number">40</span>) * moveX - x) &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;url(&#x27;./success.png&#x27;)&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;100%&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                    <span class="hljs-comment">// alert(&#x27;验证成功&#x27;)</span></span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">rest</span>();</span><br><span class="language-javascript">                    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#fce1e1&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderWidth</span> = <span class="hljs-string">&quot;1px&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;#f57a7a&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#f57a7a&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;url(&#x27;./fail.png&#x27;)&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;100%&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">rest</span>();</span><br><span class="language-javascript">                    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                yd = <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标在按住滑块下移动</span></span><br><span class="language-javascript">        slider.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMousemove</span>(e)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标在滑块下抬起</span></span><br><span class="language-javascript">        slider.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMouseup</span>(e)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 设置全局的移动事件，当鼠标按下滑块后，移动过程中鼠标可能会移出滑块</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 此时滑块也会监听鼠标的移动进行相应的移动</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMousemove</span>(e)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMouseup</span>(e)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">rest</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">clean</span>()</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#slide&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;向右滑动验证&#x27;</span></span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#fff&quot;</span>;</span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;url(&#x27;./right_arrow.png&#x27;)&quot;</span>;</span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;100%&#x27;</span></span><br><span class="language-javascript">            block_slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#d1e9fe&quot;</span></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderWidth</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;#d1e9fe&quot;</span></span><br><span class="language-javascript">            <span class="hljs-title function_">initImg</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 刷新</span></span><br><span class="language-javascript">        refresh.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">rest</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;(<span class="hljs-variable language_">window</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滑动框2 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span> solid powderblue;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#range</span> &#123;</span><br><span class="language-css">            -webkit-appearance: none;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#999</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">490px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=range]</span>::-webkit-slider-thumb &#123;</span><br><span class="language-css">            -webkit-appearance: none;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: green;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: -<span class="hljs-number">2px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.range</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.value</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffebc7</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;range&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.value&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;0&quot;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> rangeSwitch = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = $(<span class="hljs-string">&quot;#range&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;width&quot;</span>: (x / <span class="hljs-number">10</span>) * <span class="hljs-number">500</span> * <span class="hljs-number">0.96</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.value&quot;</span>).<span class="hljs-title function_">html</span>(x)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#range&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;input&quot;</span>, rangeSwitch)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滑动框3 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            appearance: none;</span><br><span class="language-css">            -moz-appearance: none;</span><br><span class="language-css">            -webkit-appearance: none;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* margin: 20px 0 0 200px; */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#686B69</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.btn</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#0c7</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-class">.tips</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">        <span class="hljs-selector-id">#submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">28px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-number">#0c7</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dragEle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tips&quot;</span>&gt;</span>&gt;&gt;拖动滑块验证<br>                &lt;&lt;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交验证&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">DragValidate</span>(<span class="hljs-params">dargEle, msgEle</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 滑块拖动标识</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> dragging = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> iX;</span><br><span class="language-javascript">            dargEle.<span class="hljs-title function_">mousedown</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                msgEle.<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">                dragging = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取初始坐标</span></span><br><span class="language-javascript">                iX = e.<span class="hljs-property">clientX</span>;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (dragging) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> oX = e.<span class="hljs-property">clientX</span> - iX;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (oX &lt; <span class="hljs-number">30</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    &#125;;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 容器宽度+10</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (oX &gt;= <span class="hljs-number">210</span>) &#123;</span><br><span class="language-javascript">                        oX = <span class="hljs-number">200</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    &#125;;</span><br><span class="language-javascript">                    dargEle.<span class="hljs-title function_">width</span>(oX + <span class="hljs-string">&quot;px&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">// console.log(oX);</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">mouseup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> width = dargEle.<span class="hljs-title function_">width</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (width &lt; <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//console.log(width);</span></span><br><span class="language-javascript">                    dargEle.<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;30px&quot;</span>);</span><br><span class="language-javascript">                    msgEle.<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;&gt;&gt;拖动滑块验证&lt;&lt;&quot;</span>);</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    dargEle.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;validate&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;验证成功！&quot;</span>).<span class="hljs-title function_">unbind</span>(<span class="hljs-string">&quot;mousedown&quot;</span>);</span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">                dragging = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-title class_">DragValidate</span>($(<span class="hljs-string">&quot;#dragEle&quot;</span>), $(<span class="hljs-string">&quot;.tips&quot;</span>));</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#submit&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&quot;#dragEle&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;validate&quot;</span>)) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请先拖动滑块验证！&quot;</span>);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证成功！&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-键盘事件"><a href="#4-6-键盘事件" class="headerlink" title="4-6 键盘事件"></a>4-6 键盘事件</h2><ul><li>键盘事件<ul><li>导入Keys类：<code>from selenium.webdriver.common.keys import Keys</code>。</li><li>组合键<ul><li><code>send_keys(Keys.CONTROL, &#39;a&#39;)</code>······················全选</li><li><code>send_keys(Keys.CONTROL, &#39;c&#39;)</code>······················复制</li><li><code>send_keys(Keys.CONTROL, &#39;v&#39;)</code>······················粘贴</li><li><code>send_keys(Keys.CONTROL, &#39;x&#39;)</code>······················剪切</li></ul></li><li>非组合键<ul><li><code>send_keys(Keys.F1~F12)</code>····························键盘F1~F12，例如：刷新键F5</li><li><code>send_keys(Keys.TAB)</code>·······························制表键</li><li><code>send_keys(Keys.ENTER)</code>·····························回车键</li><li><code>send_keys(Keys.SPACE)</code>·····························空格键</li><li><code>send_keys(Keys.ESCAPE)</code>····························回退键</li><li><code>send_keys(Keys.BACK_SPACE)</code>························删除键</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># keyboard.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element1 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)<br>element1.send_keys(<span class="hljs-string">&quot;SeleniumT&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.BACK_SPACE)                     <span class="hljs-comment"># 删除输入的最后一个单词T</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;a&#x27;</span>)                   <span class="hljs-comment"># 全选</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;c&#x27;</span>)                   <span class="hljs-comment"># 复制</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;x&#x27;</span>)                   <span class="hljs-comment"># 剪切</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;v&#x27;</span>)                   <span class="hljs-comment"># 粘贴</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.ENTER)                          <span class="hljs-comment"># 回车</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element2 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)<br>element2.send_keys(<span class="hljs-string">&quot;Python&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.SPACE)                          <span class="hljs-comment"># 空格</span><br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.ESCAPE)                         <span class="hljs-comment"># 回退</span><br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.F5)                             <span class="hljs-comment"># 刷新页面</span><br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.TAB)                            <span class="hljs-comment"># 制表下一个标题</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-7-操作对象元素"><a href="#4-7-操作对象元素" class="headerlink" title="4-7 操作对象元素"></a>4-7 操作对象元素</h2><ul><li>操作对象元素<ul><li><code>size</code>··················································返回元素尺寸</li><li><code>text</code>··················································获取元素文本信息</li><li><code>clear()</code>···············································清除内容</li><li><code>click()</code>···············································鼠标点击</li><li><code>submit()</code>··············································提交表单</li><li><code>location</code>··············································获取元素坐标</li><li><code>tag_name</code>··············································获取元素标签类型</li><li><code>send_keys()</code>···········································向输入框输入内容</li><li><code>is_enabled()</code>·····判断元素是否可用，针对<code>type=&quot;button&quot;</code>，返回值一般为True，按钮置灰为False</li><li><code>is_selected()</code>····判断元素是否被选中，一般用于判断表单元素，例如：radio或checkbox是否被选中</li><li><code>is_displayed()</code>···判断元素是否显示，返回结果为一个布尔值，返回True或者False</li><li><code>get_attribute()</code>·······································获取元素某个属性值<ul><li><code>get_attribute(&#39;textContent&#39;)</code>······················获取标签之间的文本内容</li><li><code>get_attribute(&#39;innerHTML&#39;)</code>························获取标签之间的完整HTML</li><li><code>get_attribute(&#39;outerHTML&#39;)</code>························获取当前标签的完整HTML</li></ul></li><li><code>value_of_css_property(css_name)</code>·······················获取CSS的属性值</li></ul></li></ul><h4 id="1-element-py"><a href="#1-element-py" class="headerlink" title="(1) element.py"></a>(1) element.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># element.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element1 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#lg &gt; map:nth-child(4) &gt; area:nth-child(1)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Size: &quot;</span> + <span class="hljs-built_in">str</span>(element1.size))                    <span class="hljs-comment"># 百度logo图片尺寸</span><br>element2 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;s-top-left&#x27;]&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Text: &quot;</span> + element2.text)                         <span class="hljs-comment"># 获取导航栏文本信息</span><br>element3 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)<br>element3.click()<br>sleep(<span class="hljs-number">3</span>)<br>element3.send_keys(<span class="hljs-string">&quot;Python&quot;</span>)                            <span class="hljs-comment"># 向输入框输入Python</span><br>sleep(<span class="hljs-number">3</span>)<br>element3.clear()                                        <span class="hljs-comment"># 清除文本内容</span><br>element4 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;su&#x27;]&quot;</span>)<br>element4.submit()                                       <span class="hljs-comment"># 提交表单，百度一下</span><br>sleep(<span class="hljs-number">3</span>)<br>element5 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.title-text&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Location: &quot;</span> + <span class="hljs-built_in">str</span>(element5.location))            <span class="hljs-comment"># 百度热搜坐标</span><br><br>driver.get(<span class="hljs-string">&quot;file:///D:/.../element.html&quot;</span>)               <span class="hljs-comment"># element.html文件存放路径</span><br>sleep(<span class="hljs-number">3</span>)<br>element6 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;but1&#x27;]&quot;</span>)<br>element7 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;but2&#x27;]&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enabled: &quot;</span> + <span class="hljs-built_in">str</span>(element6.is_enabled()))         <span class="hljs-comment"># 判断按钮是否可用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enabled: &quot;</span> + <span class="hljs-built_in">str</span>(element7.is_enabled()))         <span class="hljs-comment"># 判断按钮是否可用</span><br><br>driver.get(<span class="hljs-string">&quot;https://mail.163.com/&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>iframe = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;loginDiv&#x27;]/iframe&quot;</span>)<br>driver.switch_to.frame(iframe)                          <span class="hljs-comment"># 切换到iframe中</span><br>element8 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#un-login&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seleted: &quot;</span> + <span class="hljs-built_in">str</span>(element8.is_selected()))        <span class="hljs-comment"># 判断是否勾选，type=&quot;checkbox&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Display: &quot;</span> + <span class="hljs-built_in">str</span>(element8.is_displayed()))       <span class="hljs-comment"># 判断单选框是否显示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;TagMame: &quot;</span> + <span class="hljs-built_in">str</span>(element8.tag_name))             <span class="hljs-comment"># 获取单选框的标签类型</span><br>element9 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#account-box &gt; div:nth-child(2)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Content: &quot;</span> + <span class="hljs-built_in">str</span>(element9.get_attribute(<span class="hljs-string">&quot;textContent&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;InnerHTML: &quot;</span> + <span class="hljs-built_in">str</span>(element9.get_attribute(<span class="hljs-string">&quot;innerHTML&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OuterHTML: &quot;</span> + <span class="hljs-built_in">str</span>(element9.get_attribute(<span class="hljs-string">&quot;outerHTML&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Get Width: &quot;</span> + <span class="hljs-built_in">str</span>(element9.value_of_css_property(<span class="hljs-string">&quot;width&quot;</span>)))<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-element-html"><a href="#2-element-html" class="headerlink" title="(2) element.html"></a>(2) element.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- element.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>操作对象元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">display_alert</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;啥也不是！&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;display_alert()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击我，有惊喜！&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;display_alert()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击我，有惊喜！&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-调用JavaScript"><a href="#5-调用JavaScript" class="headerlink" title="5 调用JavaScript"></a>5 调用JavaScript</h1><ul><li>调用JavaScript<ul><li>开发Web端自动化用例代码时，主要过程可以拆分为四个阶段。<ul><li>Web页面加载。</li><li>定位页面元素。</li><li>操作页面元素。</li><li>判断返回结果。</li></ul></li><li>实际使用中常遇到代码执行缓慢，以及代码执行稳定性不高等问题。</li><li>针对稳定性问题，可以将这部分对网页元素进行操作的代码替换成对应的JavaScript脚本。</li><li>就可较大程度地提高稳定性和执行效率(浏览器原生支持JavaScript，直接在内核中执行)。</li></ul></li></ul><h2 id="5-1-百度查询"><a href="#5-1-百度查询" class="headerlink" title="5-1 百度查询"></a>5-1 百度查询</h2><h4 id="1-javascript1-py"><a href="#1-javascript1-py" class="headerlink" title="(1) javascript1.py"></a>(1) javascript1.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript1.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>query = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    // 给value属性赋值，实现关键字的输入</span><br><span class="hljs-string">    keywordInput.value = &quot;Selenium&quot;;</span><br><span class="hljs-string">    // 延迟5秒点击&#x27;百度一下&#x27;按钮，setTimeout是异步执行</span><br><span class="hljs-string">    setTimeout(function () &#123;</span><br><span class="hljs-string">        // 根据全局唯一的ID获取查询按钮对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">        var queryBtn = document.getElementById(&quot;su&quot;);</span><br><span class="hljs-string">        // 触发按钮的click点击操作</span><br><span class="hljs-string">        queryBtn.click();</span><br><span class="hljs-string">    &#125;, 5000);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(query)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-javascript2-py"><a href="#2-javascript2-py" class="headerlink" title="(2) javascript2.py"></a>(2) javascript2.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript2.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>query = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    // 给value属性赋值，实现关键字的输入</span><br><span class="hljs-string">    keywordInput.value = &quot;Selenium JavaScript&quot;;</span><br><span class="hljs-string">    // 延迟5秒点击&#x27;百度一下&#x27;按钮，setTimeout是异步执行</span><br><span class="hljs-string">    setTimeout(function () &#123;</span><br><span class="hljs-string">        // 根据全局唯一的ID获取查询按钮对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">        var queryBtn = document.getElementById(&quot;su&quot;);</span><br><span class="hljs-string">        // 创建event事件对象</span><br><span class="hljs-string">        var event = document.createEvent(&quot;MouseEvents&quot;);</span><br><span class="hljs-string">        // 初始化事件对象为click事件</span><br><span class="hljs-string">        event.initEvent(&quot;click&quot;, true, true);</span><br><span class="hljs-string">        // 有些标签元素没有onclick属性，直接调用click方法并不会触发对象的点击操作</span><br><span class="hljs-string">        queryBtn.dispatchEvent(event);</span><br><span class="hljs-string">    &#125;, 5000);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(query)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="5-2-返回元素对象"><a href="#5-2-返回元素对象" class="headerlink" title="5-2 返回元素对象"></a>5-2 返回元素对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript3.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 执行JavaScript脚本返回标签元素对象WebElement</span><br>getKeyWordInput = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    return keywordInput;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>keyWordInputElement = driver.execute_script(getKeyWordInput)<br>keyWordInputElement.send_keys(<span class="hljs-string">&quot;Selenium JavaScript&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="5-3-浏览器滚动条"><a href="#5-3-浏览器滚动条" class="headerlink" title="5-3 浏览器滚动条"></a>5-3 浏览器滚动条</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript4.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 执行JavaScript脚本操作页面下拉框</span><br>scrollScript = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    keywordInput.value = &quot;Selenium&quot;;</span><br><span class="hljs-string">    // 延迟5秒点击&#x27;百度一下&#x27;按钮，setTimeout是异步执行</span><br><span class="hljs-string">    setTimeout(function () &#123;</span><br><span class="hljs-string">        // 根据全局唯一的ID获取查询按钮对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">        var queryBtn = document.getElementById(&quot;su&quot;);</span><br><span class="hljs-string">        queryBtn.click();</span><br><span class="hljs-string">        setTimeout(function () &#123;</span><br><span class="hljs-string">            // 适用于除Chrome浏览器外的其他浏览器</span><br><span class="hljs-string">            document.documentElement.scrollTop = 10000 ;</span><br><span class="hljs-string">            // Chrome浏览器使用这种方法</span><br><span class="hljs-string">            // document.body.scrollTop = 10000;</span><br><span class="hljs-string">        &#125;, 5000);</span><br><span class="hljs-string">        // 延迟5秒下拉滚动条到页面最低端</span><br><span class="hljs-string">    &#125;, 5000);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(scrollScript)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="5-4-相似元素过滤"><a href="#5-4-相似元素过滤" class="headerlink" title="5-4 相似元素过滤"></a>5-4 相似元素过滤</h2><h4 id="1-javascript5-py"><a href="#1-javascript5-py" class="headerlink" title="(1) javascript5.py"></a>(1) javascript5.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript5.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>clickNewsLink = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 获取超链接的HTML父元素节点</span><br><span class="hljs-string">    var linkParentElement = document.getElementById(&quot;s-top-left&quot;);</span><br><span class="hljs-string">    // 获取linkParentElement元素下的所有超链接</span><br><span class="hljs-string">    var links = linkParentElement.getElementsByTagName(&quot;a&quot;);</span><br><span class="hljs-string">    for (var i = 0; i &lt; links.length; i++) &#123;</span><br><span class="hljs-string">        // 通过&#x27;新闻&#x27;关键字过滤需要的超链接</span><br><span class="hljs-string">        var linkText = links[i].innerHTML.trim();</span><br><span class="hljs-string">        if (linkText.indexOf(&quot;新闻&quot;) != -1) &#123;</span><br><span class="hljs-string">            // 点击超链接</span><br><span class="hljs-string">            links[i].click();</span><br><span class="hljs-string">            break;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(clickNewsLink)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-javascript6-py"><a href="#2-javascript6-py" class="headerlink" title="(2) javascript6.py"></a>(2) javascript6.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript6.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;file:///D:/.../javascript.html&quot;</span>)            <span class="hljs-comment"># javascript.html文件存放路径</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>script = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 获取当前页面的所有a标签元素</span><br><span class="hljs-string">    var a_tags = document.getElementsByTagName(&quot;a&quot;);   </span><br><span class="hljs-string">    for (var i = 0; i &lt; a_tags.length; i++) &#123;</span><br><span class="hljs-string">        // 要点击的JavaScript超链接有一个name=&quot;JavaScript&quot;属性和关键字javascript</span><br><span class="hljs-string">        // 获取超链接的内容</span><br><span class="hljs-string">        var a_text = a_tags[i].innerHTML.trim();   </span><br><span class="hljs-string">        if (a_tags[i].hasAttribute(&quot;name&quot;) &amp;&amp; a_text.indexOf(&quot;JavaScript Language&quot;) != -1) &#123;</span><br><span class="hljs-string">            // 获取具有属性name且内容中包含&#x27;JavaScript Language&#x27;字符串的a标签，并触发点击操作</span><br><span class="hljs-string">            a_tags[i].click();</span><br><span class="hljs-string">            break;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(script)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="3-javascript-html"><a href="#3-javascript-html" class="headerlink" title="(3) javascript.html"></a>(3) javascript.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- javascript.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>相似标签过滤<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Part One<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;language1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Python&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part One - Python&#x27;)&quot;</span>&gt;</span>Python Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Java&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part One - Java&#x27;)&quot;</span>&gt;</span>Java Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;C#&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part One - C#&#x27;)&quot;</span>&gt;</span>C# Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Scala&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part One - Scala&#x27;)&quot;</span>&gt;</span>Scala Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JavaScript&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part One - JavaScript&#x27;)&quot;</span>&gt;</span>JavaScript Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Part Two<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;language2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part Two - Python&#x27;)&quot;</span>&gt;</span>Python Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part Two - Java&#x27;)&quot;</span>&gt;</span>Java Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part Two - C#&#x27;)&quot;</span>&gt;</span>C# Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part Two - Scala&#x27;)&quot;</span>&gt;</span>Scala Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;Part Two - JavaScript&#x27;)&quot;</span>&gt;</span>JavaScript Language<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-上传及下载文件"><a href="#6-上传及下载文件" class="headerlink" title="6 上传及下载文件"></a>6 上传及下载文件</h1><ul><li>上传及下载文件<ul><li>上传文件：打开一个系统的Window窗口，从窗口选择文件上传，问题一般会卡在如何操作Window窗口上。<ul><li>控件标签为input时，只要定位上传按钮，通过<code>send_keys()</code>添加文件路径就可以了。</li><li>控件标签为非input时，可以借助第三方工具AutoIt：<a href="https://www.autoitx.com/Doc/">https://www.autoitx.com/Doc/</a>。</li></ul></li><li>下载文件：Selenium的WebDriver允许设置默认下载路径(配置浏览器参数)，从而可以跳过下载弹窗提示。</li></ul></li></ul><h2 id="6-1-上传文件"><a href="#6-1-上传文件" class="headerlink" title="6-1 上传文件"></a>6-1 上传文件</h2><h4 id="1-upload-py"><a href="#1-upload-py" class="headerlink" title="(1) upload.py"></a>(1) upload.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># upload.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;file:///D:/.../upload.html&quot;</span>)                <span class="hljs-comment"># upload.html文件存放路径</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>upload = driver.find_element_by_name(<span class="hljs-string">&quot;upfile&quot;</span>)          <span class="hljs-comment"># 定位上传文件按钮</span><br>upload.send_keys(<span class="hljs-string">r&quot;D:/.../test.py&quot;</span>)                     <span class="hljs-comment"># test.py文件存放路径</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-upload-html"><a href="#2-upload-html" class="headerlink" title="(2) upload.html"></a>(2) upload.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- upload.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;upfile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-2-下载文件"><a href="#6-2-下载文件" class="headerlink" title="6-2 下载文件"></a>6-2 下载文件</h2><ul><li>下载文件<ul><li>Firefox<ul><li><code>browser.download.dir</code><ul><li>自定义下载路径，默认只自动创建一级目录，若指定了多级不存在的目录，会下载到默认路径中。</li><li>例如：定义了多级不存在的目录<code>G:\\Download\\Python</code>，文件就会自动下载到默认下载目录中。</li></ul></li><li><code>browser.download.folderList</code><ul><li>0表示下载到桌面，1表示下载到浏览器默认下载路径，2表示使用自定义下载路径。</li><li>与<code>browser.download.dir</code>配合使用，如果设置成0或1，那么dir路径的配置将无用。</li></ul></li><li><code>browser.download.manager.useWindow</code>：设定下载框是否要进行隐藏。</li><li><code>browser.download.manager.closeWhenDone</code>：设定下载结束后是否自动关闭下载框。</li><li><code>browser.download.manager.alertOnEXEOpen</code>：设定下载<code>.exe</code>文件是否要弹出警告。</li><li><code>browser.download.manager.showWhenStarting</code>：设定启动下载时是否显示下载管理器。</li><li><code>browser.download.manager.focusWhenStarting</code>：设定开始下载时是否获取浏览器焦点。</li><li><code>browser.download.manager.showAlertOnComplete</code>：设定下载结束后是否显示下载完成提示框。</li><li><code>browser.helperApps.alwaysAsk.force</code><ul><li>未知的MIME类型文件，浏览器会弹窗让用户处理，默认值为True。</li><li>将默认值改为False，表示不会记录打开未知MIME类型文件的方式。</li></ul></li><li><code>browser.helperApps.neverAsk.openFile</code><ul><li>直接打开下载文件，不显示确认框，默认值为空字符串，右侧代码设定多种文件的MIME类型。</li><li>例如：<code>application/exe</code>表示<code>.exe</code>类型的文件，<code>application/excel</code>表示Excel类型的文件。</li></ul></li><li><code>browser.helperApps.neverAsk.saveToDisk</code><ul><li>对所给文件类型不再弹框进行询问，直接保存到本地磁盘，可选文件类型如下。</li><li><code>text/plain</code></li><li><code>application/zip</code></li><li><code>application/pdf</code></li><li><code>application/a-gzip</code></li><li><code>application/x-gzip</code></li><li><code>application/x-gtar</code></li><li><code>application/x-compressed</code></li><li><code>application/octet-stream</code></li></ul></li></ul></li><li>Chrome<ul><li><code>download.default_directory</code>：设置下载路径。</li><li><code>safebrowsing.enabled</code>：是否提示安全警告，一般下载XML文件时弹窗提醒，True为信任不弹窗。</li><li><code>profile.default_content_settings.popups</code>：取消下载时保存路径弹窗，0是禁止弹出所有窗口。</li></ul></li></ul></li></ul><h4 id="1-Firefox"><a href="#1-Firefox" class="headerlink" title="(1) Firefox"></a>(1) Firefox</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># download1.py</span><br><br>fp = webdriver.FirefoxProfile()                         <span class="hljs-comment"># 创建Firefox配置信息对象，存放自定义配置</span><br>fp.set_preference(<span class="hljs-string">&#x27;browser.download.dir&#x27;</span>, <span class="hljs-string">&#x27;G:\\Download\\Python\\Test&#x27;</span>)<br>fp.set_preference(<span class="hljs-string">&#x27;browser.download.folderList&#x27;</span>, <span class="hljs-number">2</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.useWindow&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.closeWhenDone&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.alertOnEXEOpen&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&#x27;browser.download.manager.showWhenStarting&#x27;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.focusWhenStarting&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.showAlertOnComplete&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.helperApps.alwaysAsk.force&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.helperApps.neverAsk.openFile&quot;</span>, <span class="hljs-string">&quot;application/zip&quot;</span>)<br>fp.set_preference(<span class="hljs-string">&#x27;browser.helperApps.neverAsk.saveToDisk&#x27;</span>, <span class="hljs-string">&#x27;application/zip, application/pdf&#x27;</span>)<br><br>driver = webdriver.Firefox(firefox_profile=fp)          <span class="hljs-comment"># 通过参数将配置添加到FirefoxProfile对象中</span><br>driver.get(<span class="hljs-string">&quot;https://npm.taobao.org/mirrors/geckodriver/v0.20.0/&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>file = driver.find_element_by_link_text(<span class="hljs-string">&quot;geckodriver-v0.20.0-win64.zip&quot;</span>)<br>file.click()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-Chrome"><a href="#2-Chrome" class="headerlink" title="(2) Chrome"></a>(2) Chrome</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># download2.py</span><br><br>options = webdriver.ChromeOptions()                     <span class="hljs-comment"># 创建Google加载项对象</span><br>prefs = &#123;<span class="hljs-string">&#x27;profile.default_content_settings.popups&#x27;</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment"># 定义加载项参数</span><br>         <span class="hljs-string">&#x27;download.default_directory&#x27;</span>: <span class="hljs-string">&#x27;D:\\&#x27;</span>&#125;<br>options.add_experimental_option(<span class="hljs-string">&#x27;prefs&#x27;</span>, prefs)         <span class="hljs-comment"># 将加载项参数添加到Google加载项对象中</span><br>driver = webdriver.Chrome(options=options)              <span class="hljs-comment"># 创建浏览器对象，并添加加载项对象</span><br>driver.get(<span class="hljs-string">&#x27;https://npm.taobao.org/mirrors/chromedriver/80.0.3987.106/&#x27;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_link_text(<span class="hljs-string">&quot;chromedriver_win32.zip&quot;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h1 id="7-HTML5标签处理"><a href="#7-HTML5标签处理" class="headerlink" title="7 HTML5标签处理"></a>7 HTML5标签处理</h1><ul><li>HTML5标签处理<ul><li>video视频标签：<code>&lt;video&gt;&lt;/video&gt;</code>。<ul><li><code>return arguments[0].play()</code>：在线播放视频。</li><li><code>return arguments[0].load()</code>：重新载入视频。</li><li><code>return arguments[0].pause()</code>：暂停播放视频。</li><li><code>return arguments[0].duration</code>：获取视频文件的播放时长。</li><li><code>return arguments[0].currentSrc</code>：获取视频文件的网络存储地址。</li></ul></li><li>canvas画图标签：<code>&lt;canvas&gt;&lt;/canvas&gt;</code>，结合鼠标事件或JavaScript脚本实现效果图。</li></ul></li></ul><h2 id="7-1-video视频标签"><a href="#7-1-video视频标签" class="headerlink" title="7-1 video视频标签"></a>7-1 video视频标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># h5video.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://videojs.com/&quot;</span>)                      <span class="hljs-comment"># 有梯子更佳，部分地区访问速度慢</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">30</span>)<br><br>element_video = driver.find_element_by_id(<span class="hljs-string">&quot;preview-player_html5_api&quot;</span>)<br>url = driver.execute_script(<span class="hljs-string">&quot;return arguments[0].currentSrc&quot;</span>, element_video)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Src: &quot;</span> + url)                                    <span class="hljs-comment"># 获取视频文件的网络存储地址</span><br>dur = driver.execute_script(<span class="hljs-string">&quot;return arguments[0].duration&quot;</span>, element_video)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Dur: &quot;</span> + <span class="hljs-built_in">str</span>(dur))                               <span class="hljs-comment"># 获取视频文件的播放时长</span><br><br>ActionChains(driver).click(element_video).perform()     <span class="hljs-comment"># 使用鼠标事件进行点击，播放3秒</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.execute_script(<span class="hljs-string">&quot;return arguments[0].pause()&quot;</span>, element_video)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 暂停视频</span><br>driver.execute_script(<span class="hljs-string">&quot;return arguments[0].load()&quot;</span>, element_video)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 重新载入视频</span><br>driver.execute_script(<span class="hljs-string">&quot;return arguments[0].play()&quot;</span>, element_video)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 持续播放3秒</span><br>driver.save_screenshot(<span class="hljs-string">r&quot;D:/.../h5video.png&quot;</span>)           <span class="hljs-comment"># 截图存放路径</span><br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 视频截图</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="7-2-canvas画图标签"><a href="#7-2-canvas画图标签" class="headerlink" title="7-2 canvas画图标签"></a>7-2 canvas画图标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># h5canvas.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;http://literallycanvas.com/&quot;</span>)               <span class="hljs-comment"># 有梯子更佳，部分地区访问速度慢</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">30</span>)<br><br>element_canvas = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;literally-canvas&#x27;]/div[3]/div[1]/canvas[1]&quot;</span>)<br>ActionChains(driver).click_and_hold(element_canvas).perform()<br>ActionChains(driver).move_by_offset(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).move_by_offset(<span class="hljs-number">10</span>, -<span class="hljs-number">10</span>).perform()<br>ActionChains(driver).release().perform()                <span class="hljs-comment"># 模拟鼠标释放操作</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h1 id="8-分页爬取B站数据"><a href="#8-分页爬取B站数据" class="headerlink" title="8 分页爬取B站数据"></a>8 分页爬取B站数据</h1><ul><li>分页爬取B站数据<ul><li>爬虫：即获取网页并提取和保存信息的自动化程序。</li><li>获取网页源代码，分析源代码，从中提取想要的数据，最通用的方法是使用正则表达式。</li><li>如果网页的结构存在一定的规则，还可以根据一些节点属性，结合定位元素来提取数据。</li><li>提取数据后，一般都会将数据保存到文档中，例如：TXT文本、JSON文本、Excel文档。</li><li>或保存到数据库中，如MySQL、MongoDB等，甚至借助SFTP等工具保存到远程服务器上，方便后续的使用。</li></ul></li></ul><h2 id="8-1-数据爬取"><a href="#8-1-数据爬取" class="headerlink" title="8-1 数据爬取"></a>8-1 数据爬取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br><span class="hljs-comment"># 浏览器无界面操作，不清楚操作情况，代码执行过程中容易定位不到而报错</span><br><span class="hljs-comment"># driver = webdriver.ChromeOptions()</span><br><span class="hljs-comment"># driver.add_argument(&#x27;--headless&#x27;)</span><br><span class="hljs-comment"># driver = webdriver.Chrome(chrome_options=driver)</span><br><br><span class="hljs-comment"># Edge界面操作，可以清楚地看到翻页过程，方便代码抓取元素进行定位</span><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span>)<br>driver.maximize_window()<br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 定位搜索框，输入搜索内容，回车进行搜索</span><br>search = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.nav-search-input&quot;</span>)<br>search.send_keys(<span class="hljs-string">&quot;Selenium教程&quot;</span>)<br>search.send_keys(Keys.ENTER)<br><br><span class="hljs-comment"># 获取浏览器中的所有句柄，切换至搜索到的内容页面</span><br>handles = driver.window_handles<br>current = driver.current_window_handle<br><span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> handles:<br>    <span class="hljs-keyword">if</span> handle != current:<br>        driver.close()<br>        driver.implicitly_wait(<span class="hljs-number">10</span>)<br>        driver.switch_to.window(handle)<br>        driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 定位“下一页”按钮的前一个页面按钮，提取最大页数文本</span><br>pages = driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(10)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总页数：&quot;</span> + pages.text)<br><br><span class="hljs-comment"># 将获取到的数据写入Excel文档</span><br>book = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, style_compression=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 遍历页面</span><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pages.text)+<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;----------------------------Page <span class="hljs-subst">&#123;page&#125;</span>----------------------------&quot;</span>)<br>    <span class="hljs-comment"># 定位“标题名称、作者、发布时间”元素</span><br>    titles = driver.find_elements_by_css_selector(<span class="hljs-string">&quot;.bili-video-card__info--right&quot;</span>)<br><br>    <span class="hljs-comment"># 分页写入数据</span><br>    sheet = book.add_sheet(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;page&#125;</span>页&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;名称&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;作者&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;发布时间&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;URL&#x27;</span>)<br><br>    <span class="hljs-comment"># 设置Excel表格列宽</span><br>    sheet.col(<span class="hljs-number">0</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br>    sheet.col(<span class="hljs-number">1</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">2</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">3</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br><br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> titles:<br>        <span class="hljs-comment"># 多出部分隐藏的url，隐藏部分无text，判空跳过</span><br>        <span class="hljs-keyword">if</span> title.text == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 逐行读取text</span><br>            lines = (title.text).split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            url = title.find_element_by_xpath(<span class="hljs-string">&#x27;a&#x27;</span>).get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            num += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># Excel写入数据</span><br>        sheet.write(num, <span class="hljs-number">0</span>, lines[<span class="hljs-number">0</span>])<br>        sheet.write(num, <span class="hljs-number">1</span>, lines[<span class="hljs-number">1</span>])<br>        sheet.write(num, <span class="hljs-number">2</span>, lines[<span class="hljs-number">2</span>])<br>        sheet.write(num, <span class="hljs-number">3</span>, url)<br><br>    <span class="hljs-comment"># 点击“下一页”按钮进行翻页</span><br>    driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(11)&quot;</span>).click()<br>    sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 将Excel保存到指定路径下</span><br>book.save(<span class="hljs-string">r&#x27;D:\...\bilibili.xls&#x27;</span>)<br>driver.quit()<br></code></pre></td></tr></table></figure><h2 id="8-2-代码整合"><a href="#8-2-代码整合" class="headerlink" title="8-2 代码整合"></a>8-2 代码整合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.common.exceptions <span class="hljs-keyword">import</span> TimeoutException<br><br><span class="hljs-comment"># Edge界面操作</span><br>driver = webdriver.Edge()<br><span class="hljs-comment"># 将获取到的数据写入Excel文档</span><br>book = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, style_compression=<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_source</span>():<br>    driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span>)<br>    driver.maximize_window()<br>    driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><br><span class="hljs-comment"># 定位搜索框，输入搜索内容，回车进行搜索</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_search</span>():<br>    search = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.nav-search-input&quot;</span>)<br>    search.send_keys(<span class="hljs-string">&quot;Selenium教程&quot;</span>)<br>    search.send_keys(Keys.ENTER)<br><br><br><span class="hljs-comment"># 获取浏览器中的所有句柄，切换至搜索到的内容页面</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_window</span>():<br>    handles = driver.window_handles<br>    current = driver.current_window_handle<br>    <span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> handles:<br>        <span class="hljs-keyword">if</span> handle != current:<br>            driver.close()<br>            driver.implicitly_wait(<span class="hljs-number">10</span>)<br>            driver.switch_to.window(handle)<br>            driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><br><span class="hljs-comment"># 点击“下一页”按钮进行翻页</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">next_page</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;----------------------------Page <span class="hljs-subst">&#123;page&#125;</span>----------------------------&quot;</span>)<br>        <span class="hljs-comment"># 动态进度条进行加载</span><br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>            sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r当前进度：&#123;0&#125;&#123;1&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;■&#x27;</span> * t * <span class="hljs-number">5</span>, (t * <span class="hljs-number">10</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(11)&quot;</span>).click()<br>        sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> TimeoutException:<br>        driver.refresh()<br>        <span class="hljs-keyword">return</span> next_page(page)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_to_excel</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-comment"># 分页写入数据</span><br>    sheet = book.add_sheet(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;page&#125;</span>页&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;名称&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;作者&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;发布时间&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;URL&#x27;</span>)<br><br>    <span class="hljs-comment"># 设置Excel表格列宽</span><br>    sheet.col(<span class="hljs-number">0</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br>    sheet.col(<span class="hljs-number">1</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">2</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">3</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br><br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 定位“标题名称、作者、发布时间”元素</span><br>    titles = driver.find_elements_by_css_selector(<span class="hljs-string">&quot;.bili-video-card__info--right&quot;</span>)<br>    <span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> titles:<br>        <span class="hljs-comment"># 多出部分隐藏的url，隐藏部分无text，判空跳过</span><br>        <span class="hljs-keyword">if</span> title.text == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 逐行读取text</span><br>            lines = (title.text).split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            url = title.find_element_by_xpath(<span class="hljs-string">&#x27;a&#x27;</span>).get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            num += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># Excel写入数据</span><br>        sheet.write(num, <span class="hljs-number">0</span>, lines[<span class="hljs-number">0</span>])<br>        sheet.write(num, <span class="hljs-number">1</span>, lines[<span class="hljs-number">1</span>])<br>        sheet.write(num, <span class="hljs-number">2</span>, lines[<span class="hljs-number">2</span>])<br>        sheet.write(num, <span class="hljs-number">3</span>, url)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        get_source()<br>        get_search()<br>        switch_window()<br><br>        <span class="hljs-comment"># 定位“下一页”按钮的前一个页面按钮，提取最大页数文本</span><br>        pages = driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(10)&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总页数：&quot;</span> + pages.text)<br><br>        <span class="hljs-comment"># 遍历页面</span><br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pages.text) + <span class="hljs-number">1</span>):<br>            next_page(page)<br>            write_to_excel(page)<br>    <span class="hljs-keyword">finally</span>:<br>        driver.quit()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br>    <span class="hljs-comment"># 将Excel保存到指定路径下</span><br>    book.save(<span class="hljs-string">r&#x27;D:\...\bilibili.xls&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Testing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>F12 开发者工具</title>
    <link href="/2021/09/20/testing/testing01-f12-kai-fa-zhe-gong-ju/"/>
    <url>/2021/09/20/testing/testing01-f12-kai-fa-zhe-gong-ju/</url>
    
    <content type="html"><![CDATA[<p>利用浏览器中的F12开发者工具选项，进行网站界面的测试、调试及分析网页出现的问题，支持查看HTML元素、响应事件等。</p><span id="more"></span><h1 id="1-开发者工具"><a href="#1-开发者工具" class="headerlink" title="1 开发者工具"></a>1 开发者工具</h1><ul><li>开发者工具：以Chrome正式版本108.0.5359.125为例。<ul><li>Elements：元素，用于查找网页源代码中的元素，手动修改任一元素的属性和样式能在浏览器中得到实时反馈。</li><li>Console：控制台，记录开发者开发过程中的日志信息，并且可以作为与JavaScript代码进行交互的命令行Shell。</li><li>Sources：源代码。<ul><li>用于查看页面的HTML源代码、JavaScript源代码、CSS源代码。</li><li>还可用于调试JavaScript源代码，给JavaScript源代码添加断点。</li></ul></li><li>Network：网络。<ul><li>从发起网页页面请求Request，到分析HTTP请求后，得到的各个请求资源信息。</li><li>包括名称、状态、类型、启动器、大小、时间、瀑布流，测试人员应重点掌握。</li></ul></li><li>Performance：前端性能，监控CPU、内存、网络、GPU、时间消耗等资源。</li><li>Memory：内存，查看当前网页的JavaScript占用内存情况。</li><li>Application：应用，记录加载的所有资源，包括存储空间、IndexedDB、Web SQL、Cookie、应用程序缓存等。</li><li>Security：安全，调试当前网页的安全和认证问题，确保在网站上正确地实现HTTPS，判断当前网页是否安全。</li></ul></li></ul><h2 id="1-1-Elements"><a href="#1-1-Elements" class="headerlink" title="1-1 Elements"></a>1-1 Elements</h2><ul><li>Elements<ul><li>查看页面的所有HTML元素及CSS样式，用于页面结构分析，也可用于自动化脚本的元素定位。</li><li>Styles：样式，实时修改属性值。<ul><li>所有样式都是可编辑的，在每个属性后单击可添加新样式。</li><li>点击样式面板右侧的文件名，界面将跳转到Source面板中。</li></ul></li><li>Computed：盒模型，底部是当前盒模型的具体属性。</li><li>Layout：Grid和Flexbox布局。</li><li>Event Listeners：事件监听器。</li><li>DOM Breakpoints：DOM断点。</li><li>Properties：属性，支持过滤查找。</li><li>Accessibility：无障碍的功能模式。</li></ul></li></ul><p><img src="/../../img/F12/F12@001.jpg" srcset="/img/load.gif" lazyload alt="Elements"></p><h2 id="1-2-Console"><a href="#1-2-Console" class="headerlink" title="1-2 Console"></a>1-2 Console</h2><ul><li>Console<ul><li>查看调试日志信息或异常错误信息，前端开发依据具体问题进行调试，从而解决出现的Bug问题。</li><li>通过JavaScript代码或命令行，将日志信息输出到控制台。<ul><li><code>console.log()</code>：以字符串形式打印基本的日志信息。</li><li><code>console.dir()</code>：以对象结构扩展列表形式打印信息。</li><li>消息分组<ul><li><code>console.group</code>：给相关日志分组。</li><li><code>console.groupEnd()</code>：对消息进行分组，避免混乱。</li><li><code>console.groupCollapsed()</code>：默认情况下折叠分组。</li></ul></li><li>时间函数<ul><li><code>console.time()</code>：启动计时器。</li><li><code>console.timeLog()</code>：每次调用时打印自计时器启动3秒后的时间。</li><li><code>console.timeEnd()</code>：打印总时间。</li></ul></li><li><code>console.warn()</code>：显示带有黄色小图标的警告信息。</li><li><code>console.error()</code>：显示带有红色小图标的错误信息。</li><li><code>console.table()</code>：将对象打印成表格形式，每个对象的属性带有标记的行。</li><li><code>console.trace()</code>：调用堆栈顶部所需的函数，查看调用该代码的确切位置。</li><li><code>console.count()</code>：计数，可自定义标签打印，每次调用时计数值加1，结合forEach打印。</li><li><code>console.assert()</code>：通过属性做条件筛选，当条件不成立时才打印设置的消息，调试必备。</li></ul></li><li>控制台交互<ul><li><code>$()</code>：返回与指定的CSS选择器相匹配的第一个元素，等同于<code>document.querySelector()</code>。</li><li><code>$$()</code>：返回与指定的CSS选择器相匹配的所有元素数组，等同于<code>document.querySelectorAll()</code>。</li><li><code>$x()</code>：返回与指定的XPath相匹配的所有元素数组。</li></ul></li><li>常见报错内容：XXX类没找到、XXX变量未定义、SSL证书失效、前后端跨域错误等。</li></ul></li></ul><p><img src="/../../img/F12/F12@002.jpg" srcset="/img/load.gif" lazyload alt="Console"></p><h2 id="1-3-Sources"><a href="#1-3-Sources" class="headerlink" title="1-3 Sources"></a>1-3 Sources</h2><ul><li>Sources<ul><li>当前打开的网页界面所涉及到的所有源代码都会出现在该栏，包括css样式、img图片、js文件等。</li><li>调试JavaScript代码<ul><li>如果当前代码经过压缩，点击下方的花括号<code>&#123;&#125;</code>增强可读性。</li><li>支持点击JavaScript代码块前的行数来设置断点，所有断点都会在右侧的断点区中列出来。</li><li>断点可在DOM元素节点发生改变时、XHR生命周期状态改变时、指定的事件执行时被触发。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@003.jpg" srcset="/img/load.gif" lazyload alt="Sources"></p><h2 id="1-4-Network"><a href="#1-4-Network" class="headerlink" title="1-4 Network"></a>1-4 Network</h2><ul><li>Network<ul><li>网络查询，前后端信息通过接口传输，Network记录了接口信息，包括请求头、请求体、响应体等。</li><li>Google官方将Network面板分成了5大窗格(Pane)。<ul><li>Controls：主要控制Network的外观以及功能。</li><li>Filters：控制Requests Table具体显示的内容。</li><li>Overview：以时间流形式显示获取到的资源时间轴信息。</li><li>Requests Table：按获取到资源的前后顺序显示资源信息。</li><li>Summary：显示总的请求数、数据传输量、加载时间信息。</li></ul></li></ul></li></ul><h4 id="1-Controls"><a href="#1-Controls" class="headerlink" title="(1) Controls"></a>(1) Controls</h4><ul><li>监控网络请求：默认开启，会在面板处记录网络连接信息，关闭后则不会记录。</li><li>清空网络请求：点击按钮，将清除底下网络请求列表包括Overview的所有内容。</li><li>过滤网络请求：点击按钮，打开Filter栏，控制Requests Table具体显示的内容。</li><li>搜索请求列表：点击按钮，左侧弹出一个Search面板，供搜索请求及响应资源。</li><li>保留请求资源：用户重新加载当前页面时，之前的请求资源信息会被保留下来。</li><li>关闭缓存：勾选后页面资源不会存入缓存，可从Status一栏的状态码看到文件的请求状态。</li><li>弱网设置：网速模拟限制，可选“不限速、Fast 3G、Slow 3G、Offline(离线)、自定义”。</li><li>网络设置<ul><li>Caching(缓存设置)、Network throttling(弱网设置)、Accepted Content-Encodings(服务端压缩格式)。</li><li>User agent(HTTP请求头的一部分，指所用浏览器和操作系统的类型及版本、浏览器内核等信息的标识)。</li></ul></li></ul><p><img src="/../../img/F12/F12@004.jpg" srcset="/img/load.gif" lazyload alt="Network-Controls"></p><h4 id="2-Filters"><a href="#2-Filters" class="headerlink" title="(2)  Filters"></a>(2)  Filters</h4><ul><li>自定义条件过滤：Filter栏输入内容。</li><li>预定义方式过滤：All(显示所有请求)。<ul><li>Fetch&#x2F;XHR(Ajax、Axios的异步请求)、JS(Js文件)、CSS(Css文件)、Img(图片)。</li><li>Media(媒体文件，音视频等)、Font(Web字体)、Doc(HTML)、WS(Websocket请求)。</li><li>Wasm(WebAssembly文件)、Manifest(AndroidManifest.xml文件)、Other(其他请求)。</li></ul></li></ul><p><img src="/../../img/F12/F12@005.jpg" srcset="/img/load.gif" lazyload alt="Network-Filters"></p><h4 id="3-Overview"><a href="#3-Overview" class="headerlink" title="(3)  Overview"></a>(3)  Overview</h4><p><img src="/../../img/F12/F12@006.jpg" srcset="/img/load.gif" lazyload alt="Network-Overview"></p><h4 id="4-Requests-Table"><a href="#4-Requests-Table" class="headerlink" title="(4)  Requests Table"></a>(4)  Requests Table</h4><ul><li>Name：资源名称，点击名称，右侧面板将显示该资源的详情。</li><li>Status：响应状态码，包括2XX(成功)、3XX(重定向)、4XX(客户端错误)、5XX(服务器错误)。</li><li>Type：响应数据类型，MIME类型指Multipurpose Internet Mail Extensions(即html、css、js等)。</li><li>Initiator：标记请求是由哪个对象或进程发起的(即请求源)。</li><li>Size：响应数据大小，如果是从缓存中取得的资源则显示“from cache”。</li><li>Time：响应时间，从发起Request开始，至获取到Response所用的总时间。</li><li>Waterfall<ul><li>可视化瀑布流，可以看到请求所花费的时间具体到哪些部分。</li><li>将一次HTTP请求所花时间做了拆解，有助于分析和定位问题。</li></ul></li></ul><p><img src="/../../img/F12/F12@007.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table"></p><h5 id="✧-Name-资源名称"><a href="#✧-Name-资源名称" class="headerlink" title="✧ Name(资源名称)"></a>✧ Name(资源名称)</h5><ul><li>Headers：该资源的HTTP头信息。<ul><li>General，常规的。<ul><li>Request URL：资源请求URL。</li><li>Request Method：请求方式。</li><li>Status Code：HTTP状态码。</li><li>Remote Address：请求的远程地址。</li><li>Referrer Policy<ul><li>作用是控制请求头中referrer的内容，目前是一个候选标准，不过已有部分浏览器支持，包含以下值。</li><li>空字符串：默认按照浏览器机制设置referrer的内容，与no-referrer-when-downgrade的设置一致。</li><li>no-referrer：在请求头中不显示referrer的任何信息。</li><li>no-referrer-when-downgrade：默认值。<ul><li>当从HTTPS网站跳转到HTTP网站，或请求资源时(即HTTPS安全降级HTTP)，则不显示referrer的信息。</li><li>其他情况(HTTPS安全同级HTTPS，或HTTP安全同级HTTP)，在referrer中显示完整的源网站URL信息。</li></ul></li><li>same-origin：浏览器只会显示referrer信息给同源网站(即协议、域名、端口都相同)，且是完整的URL信息。</li><li>origin：浏览器在referrer字段中只显示源网站的源地址(即协议、域名、端口)，而不包括完整的路径。</li><li>strict-origin：该策略更为安全，与origin策略相似。<ul><li>只是不允许referrer信息显示在从HTTPS网站到HTTP网站的请求中(安全降级)。</li></ul></li><li>origin-when-cross-origin<ul><li>发送请求给同源网站时，浏览器会在referrer中显示完整的URL信息。</li><li>发送请求给非同源网站时，浏览器只显示源地址(即协议、域名、端口)。</li></ul></li><li>strict-origin-when-cross-origin：与origin-when-cross-origin策略相似。<ul><li>只是不允许referrer信息显示在从HTTPS网站到HTTP网站的请求中(安全降级)。</li></ul></li><li>unsafe-url：无论请求发送给任何网站，浏览器总是会将完整的URL信息显示在referrer字段中。</li></ul></li></ul></li><li>Response Headers，响应头。<ul><li>Content-Length：响应体的长度。</li><li>Content-Language：响应体的语言。</li><li>Accept-Ranges：服务器是否支持指定范围的请求及分段请求的类型。</li><li>Connection：维护客户端和服务端的连接关系，表示是否需要持久连接。</li><li>Content-Encoding：服务端选定的内容编码类型，格式包括gzip和deflate。</li><li>Content-Type：服务端发送的媒体类型信息，以及采用的请求体编码格式。<ul><li>type：主类型，任意字符串，如text，如果是<code>*</code>则代表所有。</li><li>subtype：子类型，任意字符串，如html，用<code>/</code>与主类型隔开。</li><li>parameter：可选参数，如charset、boundary等。</li><li>例：<code>text(主)/html(子);charset:utf-8(参);</code>。</li></ul></li><li>Date：客户端请求服务端的时间。</li><li>Server：服务端的Web服务端名。</li><li>Expires：响应过期的日期和时间。</li><li>ETag：请求变量实体标签的当前值。</li><li>Last-Modified：请求资源的最后修改时间。</li><li>Transfer-Encoding：分块(chunked)传递数据到客户端。</li><li>Vary：告诉下游代理使用缓存响应还是从原始服务器响应。</li></ul></li><li>Request Headers，请求头。<ul><li>Accept：客户端接收的资源类型。</li><li>Authorization：HTTP授权的授权证书。</li><li>Accept-Language：客户端接收的语言类型。</li><li>Accept-Charset：浏览器可接收的字符编码集。</li><li>Accept-Encoding：客户端接收的压缩数据类型。</li><li>Host：连接的目标主机以及端口号。</li><li>Cookie：客户端暂存服务端的信息。</li><li>Referer：从哪个页面发起该请求的。</li><li>User-Agent：包含发出请求的用户信息。</li><li>Via：通知中间网关或代理服务器地址，通信协议。</li><li>Cache-Control：指定请求和响应遵循的缓存机制。</li><li>Accept-Ranges：可请求网页实体的一个或多个子范围字段。</li><li>Connection：指维护客户端和服务端的连接关系，表示是否需要持久连接。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@008.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Name"></p><ul><li>Preview：根据所选资源类型(JSON、图片、文本等)显示相应的预览，通常以Json格式展示，便于理解。</li><li>Response：显示HTTP的Response信息，与Preview展示的是同一个内容，以整体的形式展示，便于使用。</li><li>Initiator：标记请求是由哪个对象或进程发起的(即请求源)。</li><li>Timing：资源在整个请求生命周期过程中各部分花费的时间。<ul><li>Queued at：查询结束。</li><li>Started at：查询开始。</li><li>Queueing：排队队列的时间花费，即浏览器将资源放入队列的时间。</li><li>Stalled<ul><li>阻塞，从HTTP连接建立，到请求能够被发送出去(真正传输数据)之间所花费的时间。</li><li>包含了处理代理的时间，若有已建立好的连接，还包含等待已建立连接被复用的时间。</li></ul></li><li>Proxy Negotiation：与代理服务器协商时间。</li><li>DNS Lookup：DNS解析时间，浏览器需要将域名转换成IP。</li><li>Initial Connection：初始化连接所花费的时间，这里一般是指TCP三次连接握手的时间。</li><li>SSL：HTTPS特有，若网站使用了HTTPS，则指浏览器与服务器建立安全性连接的时间。</li><li>Request sent：发送请求所消耗的时间。</li><li>Waiting (TTFB)，TTFB即Time to First Byte，首字节时间。<ul><li>等待服务端返回数据的时间，浏览器等待响应第一个字节到达所花的时间。</li><li>包含来回的延迟时间和服务器准备响应的时间，受限于服务器的处理性能。</li></ul></li><li>Content Download：浏览器用来下载资源所用的时间，这段时间越长说明资源越大。</li></ul></li></ul><p><img src="/../../img/F12/F12@009.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Timing"></p><ul><li>Cookies：客户端非敏感数据存储，与存放路径有关，以键值对形式存储。</li></ul><p><img src="/../../img/F12/F12@010.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Cookies"></p><h5 id="✧-Waterfall-瀑布流"><a href="#✧-Waterfall-瀑布流" class="headerlink" title="✧ Waterfall(瀑布流)"></a>✧ Waterfall(瀑布流)</h5><ul><li>颜色代表的含义<ul><li>浅灰：查询中。</li><li>绿色：等待中。</li><li>蓝色：内容下载。</li><li>橙色：初始连接。</li><li>深灰：停滞、代理转发、请求发送。</li></ul></li><li>除了上述横向的柱状颜色图外，还有一条纵向的紫线，是开始通过脚本加载资源的一个临界线。<ul><li>紫线前，是通过HTML文件进行加载的资源，如链接的SRC或脚本的SRC。</li><li>紫线后，是通过执行HTML文件加载进来的JavaScript进行加载资源的操作。</li><li>这条线对于前端开发而言至关重要，可以帮助他们进行前端性能的优化分析。</li></ul></li></ul><p><img src="/../../img/F12/F12@011.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Waterfall"></p><h4 id="5-Summary"><a href="#5-Summary" class="headerlink" title="(5)  Summary"></a>(5)  Summary</h4><p><img src="/../../img/F12/F12@012.jpg" srcset="/img/load.gif" lazyload alt="Network-Summary"></p><h2 id="1-5-Performance"><a href="#1-5-Performance" class="headerlink" title="1-5 Performance"></a>1-5 Performance</h2><ul><li>Performance<ul><li>在某段时间内，监控所有页面操作下前端页面的性能，以及资源的消耗。</li><li>启动性能监控按钮前，可将截图、内存和前端重要信息三个选项勾选上。</li><li>启动性能监控按钮，用户进行页面操作后，点击Stop按钮关闭性能监控，查看结果。</li></ul></li></ul><p><img src="/../../img/F12/F12@013.jpg" srcset="/img/load.gif" lazyload alt="Performance"></p><h2 id="1-6-Memory"><a href="#1-6-Memory" class="headerlink" title="1-6 Memory"></a>1-6 Memory</h2><p><img src="/../../img/F12/F12@014.jpg" srcset="/img/load.gif" lazyload alt="Memory"></p><h2 id="1-7-Application"><a href="#1-7-Application" class="headerlink" title="1-7 Application"></a>1-7 Application</h2><ul><li>Application<ul><li>记录网站加载的所有资源信息，包括存储和缓存数据、字体、图片、脚本、样式表等。</li><li>存储数据又包含了Local Storage、Session Storage、IndexedDB、Web SQL、Cookies。</li><li>Local Storage<ul><li>浏览器永久存储，如果在开发过程中使用了Local Storage来存储键值对。</li><li>那么就可通过Local Storage窗格来检查、新增、修改、删除这个键值对。</li></ul></li><li>Cache Storage：浏览器本地缓存。</li><li>Session Storage：浏览器临时存储，会话级别。</li><li>Application Cache：应用程序缓存，可使用该窗格查看通过Application Cache API创建的资源。</li><li>Frames<ul><li>将页面上的资源按frame类别分组显示，顶级的top是一个主文档。</li><li>在top下是主文档的Fonts、Images、Scripts、Stylesheets等资源。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@015.jpg" srcset="/img/load.gif" lazyload alt="Application"></p><h2 id="1-8-Security"><a href="#1-8-Security" class="headerlink" title="1-8 Security"></a>1-8 Security</h2><ul><li>Security<ul><li>HTTPS，Hyper Text Transfer Protocol over Secure Socket Layer，以安全为目的的HTTP通道。</li><li>HTTPS与HTTP的区别<ul><li>HTTPS协议需要到CA申请证书，免费证书比较少，一般都要求缴费，比HTTP协议安全。</li><li>HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTP连接简单，是无状态的，HTTPS是由SSL和HTTP构建的，是可进行加密传输、身份认证的网络协议。</li></ul></li><li>如果网页安全，显示消息：<code>This page is secure (valid HTTPS)</code>。<ul><li>点击<code>View certificate</code>按钮可查看Main origin的服务器证书信息。</li></ul></li><li>如果网页不安全(有两种类型)，显示消息：<code>This page is not secure</code>。<ul><li>点击<code>View requests in Network Panel</code>按钮会跳转到Network面板。</li><li>被请求的页面通过HTTP提供服务，则Main origin将会被标记为不安全。</li><li>被请求的页面通过HTTPS获取，该页面继续通过HTTP从其他来源检索内容，则该页面仍然会被标记为不安全。<ul><li>这种类型的网页即混合内容页面，只部分受保护，非加密内容可被嗅探入侵，易受中间人攻击。</li><li>中间人攻击，即Man-in-the-Middle Attack，简称为MITM攻击，是一种间接的入侵攻击手段。</li><li>通过各种技术将控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，该计算机就称为中间人。</li></ul></li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@016.jpg" srcset="/img/load.gif" lazyload alt="Security"></p><h1 id="2-语言改中文设置"><a href="#2-语言改中文设置" class="headerlink" title="2 语言改中文设置"></a>2 语言改中文设置</h1><p><img src="/../../img/F12/F12@017.jpg" srcset="/img/load.gif" lazyload alt="语言改中文设置-Settings"></p><ul><li>语言改中文设置<ul><li>点击界面右上角的Settings按钮，选择Preferences的Language为“Chinese-中文”，右上角点“×”关闭Settings界面。</li><li>此时，F12开发者工具选项的界面上显示<code>Reload DevTools</code>按钮，点击该按钮，重新加载开发者工具选项界面就可以了。</li></ul></li></ul><p><img src="/../../img/F12/F12@018.jpg" srcset="/img/load.gif" lazyload alt="语言改中文设置-Preferences"></p><h1 id="3-定位前后端问题"><a href="#3-定位前后端问题" class="headerlink" title="3 定位前后端问题"></a>3 定位前后端问题</h1>]]></content>
    
    
    <categories>
      
      <category>Testing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome</tag>
      
      <tag>F12</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 机器学习</title>
    <link href="/2021/06/06/python/python10-python-ji-qi-xue-xi/"/>
    <url>/2021/06/06/python/python10-python-ji-qi-xue-xi/</url>
    
    <content type="html"><![CDATA[<p>机器学习是一种分析数据并学习预测结果的程序，是让计算机从研究数据和统计数据中学习，是迈向人工智能(AI)方向的一步。</p><span id="more"></span><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><ul><li>简介<ul><li>数据类型三大类：数值的、绝对的、序数。<ul><li>数值数据是数字，两个类别：离散数据(仅限于整数)、连续数据(具有无限价值)。</li><li>分类数据是无法相互比较的值，而序数数据类似于分类数据，但是可以相互比较。</li></ul></li><li>平均数<code>mean</code>、中位数<code>median</code>、众数<code>mode</code>。</li><li>标准差<code>std</code>、方差<code>var</code>、方差的平方根&#x3D;标准差、百分位数<code>percentile()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><span class="hljs-keyword">from</span> warnings <span class="hljs-keyword">import</span> simplefilter     <span class="hljs-comment"># 忽略警告信息</span><br>simplefilter(action=<span class="hljs-string">&#x27;ignore&#x27;</span>, category=FutureWarning)<br><br>speed = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br>a = numpy.mean(speed)                 <span class="hljs-comment"># 平均数</span><br>b = numpy.median(speed)               <span class="hljs-comment"># 中位数</span><br>c = stats.mode(speed)                 <span class="hljs-comment"># 众数</span><br>d = numpy.std(speed)                  <span class="hljs-comment"># 标准差，方差的平方根，通常用符号Sigma表示σ</span><br>e = numpy.var(speed)                  <span class="hljs-comment"># 方差，每个值与平均数的差值的平方值的和的平均数，Sigma Squared表示σ2</span><br>f = numpy.percentile(speed, <span class="hljs-number">80</span>)       <span class="hljs-comment"># 查找百分位数</span><br><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></table></figure><h2 id="1-1-数据分布"><a href="#1-1-数据分布" class="headerlink" title="1-1 数据分布"></a>1-1 数据分布</h2><ul><li>数据分布<ul><li>正态数据分布：高斯数据分布，正态分布图也被叫做钟形曲线，具有钟形特征。</li><li>随机数据分布：测试算法时可能没有真实世界的数据，此时需用随机生成的值。</li></ul></li></ul><h4 id="1-直方图"><a href="#1-直方图" class="headerlink" title="(1) 直方图"></a>(1) 直方图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = numpy.random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">250</span>)         <span class="hljs-comment"># 250个介于0和5之间的随机浮点数数组</span><br><br><span class="hljs-built_in">print</span>(x)<br>plt.hist(x, <span class="hljs-number">5</span>)                                  <span class="hljs-comment"># 绘制直方图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-正态分布"><a href="#2-正态分布" class="headerlink" title="(2) 正态分布"></a>(2) 正态分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = numpy.random.normal(<span class="hljs-number">5.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">100000</span>)       <span class="hljs-comment"># 100000个平均数为5.0，标准差为1.0的数组</span><br><br><span class="hljs-built_in">print</span>(x)<br>plt.hist(x, <span class="hljs-number">100</span>)                                <span class="hljs-comment"># 正态数据分布，绘制包含100个柱的直方图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-散点图"><a href="#3-散点图" class="headerlink" title="(3) 散点图"></a>(3) 散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt                <span class="hljs-comment"># Matplotlib有个绘制散点图的方法，需两个相同长度的数组</span><br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>] <span class="hljs-comment"># x数组代表每辆汽车的年龄，y数组代表每辆车的速度</span><br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br><br>plt.scatter(x, y)                              <span class="hljs-comment"># 绘制散点图</span><br>plt.show()                                     <span class="hljs-comment"># 越新的车越快，也可能是巧合，数据量少</span><br></code></pre></td></tr></table></figure><h4 id="4-随机分布"><a href="#4-随机分布" class="headerlink" title="(4) 随机分布"></a>(4) 随机分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = numpy.random.normal(<span class="hljs-number">5.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1000</span>)         <span class="hljs-comment"># 1000个数组，平均值为5.0，标准差为1.0的随机数</span><br>y = numpy.random.normal(<span class="hljs-number">10.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">1000</span>)        <span class="hljs-comment"># 1000个数组，平均值为10.0，标准差为2.0的随机数</span><br><br>plt.scatter(x, y)                               <span class="hljs-comment"># 随机数据分布，具有1000个点的散点图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="1-2-线性回归"><a href="#1-2-线性回归" class="headerlink" title="1-2 线性回归"></a>1-2 线性回归</h2><ul><li>线性回归(R关系)<ul><li>知道x和y轴的值之间的关系，没有关系则线性回归不能用于预测结果。</li><li>R关系的取值范围为-1到1，0表示没有关系，1和-1则表示100%相关。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt   <span class="hljs-comment"># 13辆汽车经过收费站时的车龄和速度</span><br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):                      <span class="hljs-comment"># 创建一个使用slope和intercept值返回新值的函数</span><br>    <span class="hljs-keyword">return</span> slope * x + intercept  <span class="hljs-comment"># 这个新值表示对应的x值在y轴上的位置</span><br><br><br>model = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(func, x))        <span class="hljs-comment"># 通过函数运行x数组的每个值，生成一个新数组，包含y轴的新值</span><br>plt.scatter(x, y)                 <span class="hljs-comment"># 绘制原始散点图</span><br>plt.plot(x, model)                <span class="hljs-comment"># 绘制线性回归线</span><br>plt.show()                        <span class="hljs-comment"># 显示图表</span><br></code></pre></td></tr></table></figure><h4 id="1-R关系"><a href="#1-R关系" class="headerlink" title="(1) R关系"></a>(1) R关系</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br><br>slope, intercept, r, p, std_err = stats.linregress(x, y)  <span class="hljs-comment"># 数据在线性回归中的拟合程度</span><br><span class="hljs-built_in">print</span>(r)                                                  <span class="hljs-comment"># -0.76表明存在关系，但并不完美</span><br></code></pre></td></tr></table></figure><h4 id="2-预测未来价值"><a href="#2-预测未来价值" class="headerlink" title="(2) 预测未来价值"></a>(2) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br><br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> slope * x + intercept<br><br><br>speed = func(<span class="hljs-number">10</span>)                                          <span class="hljs-comment"># 预测一辆10年车龄的汽车速度</span><br><span class="hljs-built_in">print</span>(speed)                                              <span class="hljs-comment"># 85.6，也可以从图表中读取</span><br></code></pre></td></tr></table></figure><h4 id="3-非预测最佳法"><a href="#3-非预测最佳法" class="headerlink" title="(3) 非预测最佳法"></a>(3) 非预测最佳法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats             <span class="hljs-comment"># 线性回归不是预测未来值的最佳方法</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">89</span>, <span class="hljs-number">43</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>, <span class="hljs-number">95</span>, <span class="hljs-number">10</span>, <span class="hljs-number">66</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">48</span>, <span class="hljs-number">64</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">36</span>, <span class="hljs-number">66</span>, <span class="hljs-number">72</span>, <span class="hljs-number">40</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">46</span>, <span class="hljs-number">3</span>, <span class="hljs-number">35</span>, <span class="hljs-number">67</span>, <span class="hljs-number">95</span>, <span class="hljs-number">53</span>, <span class="hljs-number">72</span>, <span class="hljs-number">58</span>, <span class="hljs-number">10</span>, <span class="hljs-number">26</span>, <span class="hljs-number">34</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">56</span>, <span class="hljs-number">2</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>]<br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><span class="hljs-built_in">print</span>(r)                            <span class="hljs-comment"># 0.013，得到的R值小，表明关系很差，该数据集不适合做线性回归</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> slope * x + intercept<br><br><br>model = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(func, x))<br>plt.scatter(x, y)<br>plt.plot(x, model)<br>plt.show()                          <span class="hljs-comment"># x轴和y轴的值导致线性回归的拟合非常差</span><br></code></pre></td></tr></table></figure><h2 id="1-3-多项式回归"><a href="#1-3-多项式回归" class="headerlink" title="1-3 多项式回归"></a>1-3 多项式回归</h2><ul><li>多项式回归(R平方)<ul><li>若x和y轴的值之间没有关系，则多项式回归不能用于预测结果。</li><li>R平方值的取值范围为0到1，0表示没有关系，1表示100%相关。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt               <span class="hljs-comment"># 收集了通过某收费站的18辆汽车的超车发生时间和汽车速度</span><br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]<br>y = [<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br>lines = numpy.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>)            <span class="hljs-comment"># 指定该行将如何显示，从位置1开始，到位置22结束</span><br><br>plt.scatter(x, y)                             <span class="hljs-comment"># 绘制原始散点图</span><br>plt.plot(lines, model(lines))                 <span class="hljs-comment"># 绘制多项式回归线</span><br>plt.show()                                    <span class="hljs-comment"># 显示图表</span><br></code></pre></td></tr></table></figure><h4 id="1-R平方"><a href="#1-R平方" class="headerlink" title="(1) R平方"></a>(1) R平方</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]<br>y = [<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))    <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br><span class="hljs-built_in">print</span>(r2_score(y, model(x)))                    <span class="hljs-comment"># 数据在多项式回归中的拟合程度，0.94表明关系非常好</span><br></code></pre></td></tr></table></figure><h4 id="2-预测未来价值-1"><a href="#2-预测未来价值-1" class="headerlink" title="(2) 预测未来价值"></a>(2) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]<br>y = [<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))    <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br>speed = model(<span class="hljs-number">17</span>)                               <span class="hljs-comment"># 预测17:00左右通过某收费站的汽车速度</span><br><span class="hljs-built_in">print</span>(speed)                                    <span class="hljs-comment"># 88.87，也可以从图中读取该值</span><br></code></pre></td></tr></table></figure><h4 id="3-非预测最佳法-1"><a href="#3-非预测最佳法-1" class="headerlink" title="(3) 非预测最佳法"></a>(3) 非预测最佳法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score          <span class="hljs-comment"># 多项式回归不是预测未来值的最佳方法</span><br><br>x = [<span class="hljs-number">89</span>, <span class="hljs-number">43</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>, <span class="hljs-number">95</span>, <span class="hljs-number">10</span>, <span class="hljs-number">66</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">48</span>, <span class="hljs-number">64</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">36</span>, <span class="hljs-number">66</span>, <span class="hljs-number">72</span>, <span class="hljs-number">40</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">46</span>, <span class="hljs-number">3</span>, <span class="hljs-number">35</span>, <span class="hljs-number">67</span>, <span class="hljs-number">95</span>, <span class="hljs-number">53</span>, <span class="hljs-number">72</span>, <span class="hljs-number">58</span>, <span class="hljs-number">10</span>, <span class="hljs-number">26</span>, <span class="hljs-number">34</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">56</span>, <span class="hljs-number">2</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br>lines = numpy.linspace(<span class="hljs-number">2</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(r2_score(y, model(x)))                  <span class="hljs-comment"># 0.00995表明关系很差，该数据集不适合做多项式回归</span><br><br>plt.scatter(x, y)<br>plt.plot(lines, model(lines))<br>plt.show()                                    <span class="hljs-comment"># x轴和y轴的值导致多项式回归的拟合非常差</span><br></code></pre></td></tr></table></figure><h2 id="1-4-多元线性回归"><a href="#1-4-多元线性回归" class="headerlink" title="1-4 多元线性回归"></a>1-4 多元线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)            <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]                               <span class="hljs-comment"># 将依赖值放在一个名为y的变量中</span><br><br>regr = linear_model.LinearRegression()      <span class="hljs-comment"># 创建一个线性回归对象</span><br>regr.fit(X.values, y.values)                <span class="hljs-comment"># 将独立值和相关值作为参数，并用描述关系的数据填充回归对象</span><br><br>predictedCO2 = regr.predict([[<span class="hljs-number">2300</span>, <span class="hljs-number">1300</span>]]) <span class="hljs-comment"># 根据汽车的重量和体积预测CO2值</span><br><span class="hljs-built_in">print</span>(predictedCO2)                         <span class="hljs-comment"># 预测一辆配备1.3升发动机、重量为2300kg的汽车每行驶一公里释放107克CO2</span><br></code></pre></td></tr></table></figure><h4 id="1-系数"><a href="#1-系数" class="headerlink" title="(1) 系数"></a>(1) 系数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model        <span class="hljs-comment"># 系数是描述与未知变量之间关系的因子</span><br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)        <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]            <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]                           <span class="hljs-comment"># 将依赖值放在一个名为y的变量中</span><br><br>regr = linear_model.LinearRegression()  <span class="hljs-comment"># 创建一个线性回归对象</span><br>regr.fit(X.values, y.values)            <span class="hljs-comment"># 将独立值和相关值作为参数，并用描述关系的数据填充回归对象</span><br><br><span class="hljs-built_in">print</span>(regr.coef_)                       <span class="hljs-comment"># 回归对象的系数值[重量0.00755095 体积0.00780526]</span><br><br><span class="hljs-comment"># 体重增加1kg，CO2排放量就会增加0.00755095g，发动机尺寸增加1cm3，CO2排放量增加0.00780526g</span><br></code></pre></td></tr></table></figure><h4 id="2-预测未来价值-2"><a href="#2-预测未来价值-2" class="headerlink" title="(2) 预测未来价值"></a>(2) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)            <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]                               <span class="hljs-comment"># 将依赖值放在一个名为y的变量中</span><br><br>regr = linear_model.LinearRegression()      <span class="hljs-comment"># 创建一个线性回归对象</span><br>regr.fit(X.values, y.values)                <span class="hljs-comment"># 将独立值和相关值作为参数，并用描述关系的数据填充回归对象</span><br><br>predictedCO2 = regr.predict([[<span class="hljs-number">3300</span>, <span class="hljs-number">1300</span>]]) <span class="hljs-comment"># 将权重从2300更改为3300</span><br><span class="hljs-built_in">print</span>(predictedCO2)                         <span class="hljs-comment"># 一辆配备1.3升发动机、重量为3300kg的汽车每行驶一公里将释放115克CO2</span><br></code></pre></td></tr></table></figure><h2 id="1-5-比例特征方法"><a href="#1-5-比例特征方法" class="headerlink" title="1-5 比例特征方法"></a>1-5 比例特征方法</h2><ul><li>比例特征方法<ul><li>当数据具有不同的值，甚至不同的测量单位时，很难比较，可将数据缩放为容易比较的新值。</li><li>标准化方法使用的公式：<code>z = (x - u) / s</code>，z是新值，x是原始值，u是平均值，s是标准差。</li></ul></li></ul><h4 id="1-比例特征缩放"><a href="#1-比例特征缩放" class="headerlink" title="(1) 比例特征缩放"></a>(1) 比例特征缩放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br>scale = StandardScaler()<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)  <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]      <span class="hljs-comment"># 列出独立值并调用X变量</span><br>scaledX = scale.fit_transform(X)  <span class="hljs-comment"># 缩放重量和体积列中的所有值</span><br><br><span class="hljs-built_in">print</span>(scaledX)<br></code></pre></td></tr></table></figure><h4 id="2-预测CO2的值"><a href="#2-预测CO2的值" class="headerlink" title="(2) 预测CO2的值"></a>(2) 预测CO2的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br>scale = StandardScaler()<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)            <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]<br><br>scaledX = scale.fit_transform(X.values)     <span class="hljs-comment"># 缩放重量和体积列中的所有值</span><br><br>regr = linear_model.LinearRegression()<br>regr.fit(scaledX, y.values)<br><br>scaled = scale.transform([[<span class="hljs-number">2300</span>, <span class="hljs-number">1.3</span>]])     <span class="hljs-comment"># 预测一辆重2300公斤的1.3升汽车的二氧化碳排放量</span><br><br>predictedCO2 = regr.predict([scaled[<span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(predictedCO2)<br></code></pre></td></tr></table></figure><h1 id="2-训练-x2F-测试"><a href="#2-训练-x2F-测试" class="headerlink" title="2 训练&#x2F;测试"></a>2 训练&#x2F;测试</h1><ul><li>训练&#x2F;测试<ul><li>一种衡量模型准确性的方法，将数据集分成两组：训练集(训练模型)、测试集(测试模型)。</li><li>80%用于训练(训练模型意味着创建模型)，20%用于测试(测试模型意味着测试模型的准确性)。</li></ul></li></ul><h2 id="2-1-数据集"><a href="#2-1-数据集" class="headerlink" title="2-1 数据集"></a>2-1 数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt               <span class="hljs-comment"># 展示了一家商店中的100位顾客，以及他们的购物习惯</span><br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)            <span class="hljs-comment"># x轴表示购买前的分钟数</span><br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x     <span class="hljs-comment"># y轴表示购买时花费的金额</span><br><br>plt.scatter(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-2-显示训练集"><a href="#2-2-显示训练集" class="headerlink" title="2-2 显示训练集"></a>2-2 显示训练集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                                <span class="hljs-comment"># 拆分成训练集，随机选择80%的原始数据</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                 <span class="hljs-comment"># 拆分成测试集，剩下的20%</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>plt.scatter(train_x, train_y)                   <span class="hljs-comment"># 显示训练集，看起来像原始数据集</span><br>plt.show()<br><br><span class="hljs-comment"># plt.scatter(test_x, test_y)                   # 显示测试集，看起来像原始数据集</span><br><span class="hljs-comment"># plt.show()</span><br></code></pre></td></tr></table></figure><h2 id="2-3-拟合数据集"><a href="#2-3-拟合数据集" class="headerlink" title="2-3 拟合数据集"></a>2-3 拟合数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                              <span class="hljs-comment"># 拆分成训练集，随机选择80%的原始数据</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                               <span class="hljs-comment"># 拆分成测试集，剩下的20%</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br>lines = numpy.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>)             <span class="hljs-comment"># 通过数据点画一条线</span><br><br>plt.scatter(train_x, train_y)                 <span class="hljs-comment"># 显示训练集</span><br>plt.plot(lines, model(lines))                 <span class="hljs-comment"># 这条线表示顾客在商店里花费6分钟可能购买价值200的商品</span><br>plt.show()                                    <span class="hljs-comment"># 有过度拟合的迹象</span><br></code></pre></td></tr></table></figure><h2 id="2-4-R平方分数"><a href="#2-4-R平方分数" class="headerlink" title="2-4 R平方分数"></a>2-4 R平方分数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                                <span class="hljs-comment"># 拆分成训练集</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                 <span class="hljs-comment"># 拆分成测试集</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br>r2 = r2_score(train_y, model(train_x))          <span class="hljs-comment"># 训练数据在多项式回归中的拟合程度</span><br><span class="hljs-built_in">print</span>(r2)                                       <span class="hljs-comment"># 结果0.799说明存在关系</span><br></code></pre></td></tr></table></figure><h2 id="2-5-引入测试集"><a href="#2-5-引入测试集" class="headerlink" title="2-5 引入测试集"></a>2-5 引入测试集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                     <span class="hljs-comment"># 拆分成训练集</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                      <span class="hljs-comment"># 拆分成测试集</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br>r2 = r2_score(test_y, model(test_x))<br><span class="hljs-built_in">print</span>(r2)                            <span class="hljs-comment"># 结果0.809说明该模型适合测试集</span><br></code></pre></td></tr></table></figure><h2 id="2-6-预测未来价值"><a href="#2-6-预测未来价值" class="headerlink" title="2-6 预测未来价值"></a>2-6 预测未来价值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                     <span class="hljs-comment"># 拆分成训练集</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                      <span class="hljs-comment"># 拆分成测试集</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(model(<span class="hljs-number">5</span>))                      <span class="hljs-comment"># 如果一位购物顾客在店里停留5分钟，预测花费22.88美元</span><br></code></pre></td></tr></table></figure><h1 id="3-常见分类算法"><a href="#3-常见分类算法" class="headerlink" title="3 常见分类算法"></a>3 常见分类算法</h1><ul><li>常见分类算法<ul><li>监督学习算法，Supervised Algorithms。<ul><li>在监督学习训练过程中，可以由训练数据集学到或建立一个模式(函数&#x2F;Learning model)，并依此模式推测新的实例。</li><li>要求特定的输入&#x2F;输出，首先需要决定使用哪种数据作为范例，包括神经网络、支持向量机、最近邻居法、决策树等。</li></ul></li><li>无监督学习算法，Unsupervised Algorithms：没有特定的目标输出，算法将数据集分为不同的组。</li><li>强化学习算法，Reinforcement Algorithms。<ul><li>主要基于决策进行训练，根据输出结果的成功或错误训练，通过大量经验训练优化后的算法将能够给出较好的预测。</li><li>在运筹学和控制论的语境下，强化学习被称作“近似动态规划”，即Approximate Dynamic Programming，简称ADP。</li></ul></li></ul></li></ul><h2 id="3-1-决策树"><a href="#3-1-决策树" class="headerlink" title="3-1 决策树"></a>3-1 决策树</h2><ul><li>决策树<ul><li>一个流程图，可根据以前的经验做出决策，决策树需满足所有数据都是数字。</li><li>运行决策树的次数足够多时，会看到它给出不同结果，即便提供了相同的数据。</li><li>决策树并未给定100%确定的答案，只是基于结果的概率，因而结果会有所不同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">AgeExperienceRankNationalityGo</span><br><span class="hljs-string">36  10          9    UK          NO</span><br><span class="hljs-string">42  12          4    USA         NO</span><br><span class="hljs-string">23  4           6    N           NO</span><br><span class="hljs-string">52  4           4    USA         NO</span><br><span class="hljs-string">43  21          8    USA         YES</span><br><span class="hljs-string">44  14          5    UK          NO</span><br><span class="hljs-string">66  3           7    N           YES</span><br><span class="hljs-string">35  14          9    UK          YES</span><br><span class="hljs-string">52  13          7    N           YES</span><br><span class="hljs-string">35  5           9    N           YES</span><br><span class="hljs-string">24  3           5    USA         NO</span><br><span class="hljs-string">18  3           7    UK          YES</span><br><span class="hljs-string">45  9           9    UK          YES</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)        <span class="hljs-comment"># 喜剧演员的信息，是否决定看节目</span><br><span class="hljs-built_in">print</span>(df)                               <span class="hljs-comment"># 读取并打印数据集</span><br></code></pre></td></tr></table></figure><h4 id="1-数值转换"><a href="#1-数值转换" class="headerlink" title="(1) 数值转换"></a>(1) 数值转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)<br>ds = &#123;<span class="hljs-string">&#x27;UK&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;USA&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">2</span>&#125;                <span class="hljs-comment"># 将非数字列转换为数字列</span><br>df[<span class="hljs-string">&#x27;Nationality&#x27;</span>] = df[<span class="hljs-string">&#x27;Nationality&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br>ds = &#123;<span class="hljs-string">&#x27;YES&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;NO&#x27;</span>: <span class="hljs-number">0</span>&#125;<br>df[<span class="hljs-string">&#x27;Go&#x27;</span>] = df[<span class="hljs-string">&#x27;Go&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br><br><span class="hljs-built_in">print</span>(df)                                       <span class="hljs-comment"># 读取并打印数据集</span><br></code></pre></td></tr></table></figure><h4 id="2-创建决策树"><a href="#2-创建决策树" class="headerlink" title="(2) 创建决策树"></a>(2) 创建决策树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">import</span> graphviz                                 <span class="hljs-comment"># 需要安装graphviz库和PlantUML插件</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)<br>ds = &#123;<span class="hljs-string">&#x27;UK&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;USA&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">2</span>&#125;                <span class="hljs-comment"># 将非数字列转换为数字列</span><br>df[<span class="hljs-string">&#x27;Nationality&#x27;</span>] = df[<span class="hljs-string">&#x27;Nationality&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br>ds = &#123;<span class="hljs-string">&#x27;YES&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;NO&#x27;</span>: <span class="hljs-number">0</span>&#125;<br>df[<span class="hljs-string">&#x27;Go&#x27;</span>] = df[<span class="hljs-string">&#x27;Go&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br><br>features = [<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Experience&#x27;</span>, <span class="hljs-string">&#x27;Rank&#x27;</span>, <span class="hljs-string">&#x27;Nationality&#x27;</span>]<br>X = df[features]                                <span class="hljs-comment"># 特征列，尝试从中预测的列</span><br>y = df[<span class="hljs-string">&#x27;Go&#x27;</span>]                                    <span class="hljs-comment"># 目标列，尝试预测值的列</span><br><br><span class="hljs-built_in">print</span>(X)<br><span class="hljs-built_in">print</span>(y)<br><br>dtree = DecisionTreeClassifier()                <span class="hljs-comment"># 分割样本的GINI方法：Gini=1-(x/n)2+(y/n)2</span><br>dtree = dtree.fit(X, y)<br><span class="hljs-comment"># tree.plot_tree(dtree, feature_names=features) # 违背了可视化的初衷，简单粗暴，不建议使用</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br><br>dot_data = tree.export_graphviz(dtree, feature_names=features)<br>graph = graphviz.Source(dot_data)<br>graph.render(<span class="hljs-string">&#x27;data&#x27;</span>)                            <span class="hljs-comment"># 生成data.pdf可视化决策树</span><br></code></pre></td></tr></table></figure><h4 id="3-预测未来价值"><a href="#3-预测未来价值" class="headerlink" title="(3) 预测未来价值"></a>(3) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)<br>ds = &#123;<span class="hljs-string">&#x27;UK&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;USA&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">2</span>&#125;        <span class="hljs-comment"># 将非数字列转换为数值</span><br>df[<span class="hljs-string">&#x27;Nationality&#x27;</span>] = df[<span class="hljs-string">&#x27;Nationality&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br>ds = &#123;<span class="hljs-string">&#x27;YES&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;NO&#x27;</span>: <span class="hljs-number">0</span>&#125;<br>df[<span class="hljs-string">&#x27;Go&#x27;</span>] = df[<span class="hljs-string">&#x27;Go&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br><br>features = [<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Experience&#x27;</span>, <span class="hljs-string">&#x27;Rank&#x27;</span>, <span class="hljs-string">&#x27;Nationality&#x27;</span>]<br>X = df[features]                        <span class="hljs-comment"># 特征列，尝试从中预测的列</span><br>y = df[<span class="hljs-string">&#x27;Go&#x27;</span>]                            <span class="hljs-comment"># 目标列，尝试预测值的列</span><br><br>dtree = DecisionTreeClassifier()<br>dtree = dtree.fit(X.values, y.values)<br><span class="hljs-built_in">print</span>(dtree.predict([[<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>]]))  <span class="hljs-comment"># 是否该看40岁10年经验喜剧排名为7的美国喜剧演员主演的节目</span><br></code></pre></td></tr></table></figure><h2 id="3-2-K-均值"><a href="#3-2-K-均值" class="headerlink" title="3-2 K-均值"></a>3-2 K-均值</h2><ul><li>K均值<ul><li>一种用于聚类数据点的无监督学习方法，该算法通过最小化每个簇中的方差将数据点迭代划分为K个簇。<ul><li>首先，每个数据点被随机分配到K个集群中的任意一个，然后，计算每个集群的质心(即功能上的中心)。</li><li>并将每个数据点重新分配给具有最接近质心的集群，重复该过程，直到每个数据点的集群分配不再变化。</li></ul></li><li>K均值聚类要求选择K，即要将数据分组到的聚类数。eblow方法绘制惯性(基于距离的度量)。</li><li>并可视化惯性开始线性下降的点，该点被称为eblow，是根据数据对K最佳值的一个很好估计。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>plt.scatter(x, y)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点</span><br></code></pre></td></tr></table></figure><h4 id="1-eblow法"><a href="#1-eblow法" class="headerlink" title="(1) eblow法"></a>(1) eblow法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                      <span class="hljs-comment"># 将数据转换为一组点</span><br><br>inertias = []                               <span class="hljs-comment"># 找到K的最佳值，需要对数据运行K均值以获得一系列可能的值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):                      <span class="hljs-comment"># 只有10个数据点，因此最大簇数为10</span><br>    kmeans = KMeans(n_clusters=i)<br>    <span class="hljs-keyword">with</span> warnings.catch_warnings():<br>        warnings.simplefilter(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>        kmeans.fit(data)<br>    inertias.append(kmeans.inertia_)<br><br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>), inertias, marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Elbow method&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Number of clusters&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Inertia&#x27;</span>)                       <span class="hljs-comment"># 利用eblow法可视化不同K值的惯量</span><br>plt.show()                                  <span class="hljs-comment"># 图中值2是K的一个很好的值</span><br></code></pre></td></tr></table></figure><h4 id="2-重新训练"><a href="#2-重新训练" class="headerlink" title="(2) 重新训练"></a>(2) 重新训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                          <span class="hljs-comment"># 将数据转换为一组点</span><br><br>kmeans = KMeans(n_clusters=<span class="hljs-number">2</span>)<br><span class="hljs-keyword">with</span> warnings.catch_warnings():<br>    warnings.simplefilter(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>    kmeans.fit(data)<br><br>plt.scatter(x, y, c=kmeans.labels_)<br>plt.show()                                      <span class="hljs-comment"># 可视化数据点</span><br></code></pre></td></tr></table></figure><h2 id="3-3-混淆矩阵"><a href="#3-3-混淆矩阵" class="headerlink" title="3-3 混淆矩阵"></a>3-3 混淆矩阵</h2><ul><li>混淆矩阵<ul><li>一个用于分类问题的表格，用于评估模型中出现错误的位置，行代表结果应该属于的实际类别，列代表所做的预测。</li><li>创建的混淆矩阵有4个象限：真阴性、假阳性、假阴性、真阳性，True表准确预测值，False表存在错误或错误预测。</li><li>该矩阵提供了许多指标，可评估分类模型，不同的衡量标准包括：准确度、精确度、灵敏度(召回率)、特异性和F-score。<ul><li>准确度：衡量模型正确的频率，计算方法为(真阳性+真阴性)&#x2F;总预测。</li><li>精确度：在预测的积极因素中，真正积极的百分比，计算方法为真阳性&#x2F;(真阳性+假阳性)。</li><li>灵敏度：在所有的阳性病例中，预测阳性的百分比，计算方法为真阳性&#x2F;(真阳性+假阴性)。</li><li>特异性：类似于灵敏度，但从阴性结果的角度来看，计算方法为真阴性&#x2F;(真阴性+假阳性)。</li><li>F-score：即精度和灵敏度的调和平均值，计算方法为2*((精度*灵敏度)&#x2F;(精度+灵敏度))。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy                                                <span class="hljs-comment"># 通过逻辑回归的预测来创建混淆矩阵</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)           <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)           <span class="hljs-comment"># 生成预测值</span><br><br>confusion_matrix = metrics.confusion_matrix(actual, predic) <span class="hljs-comment"># 对实际值和预测值使用混淆矩阵函数</span><br>cm_display = metrics.ConfusionMatrixDisplay(                <span class="hljs-comment"># 将表格转换为混淆矩阵显示</span><br>    confusion_matrix=confusion_matrix,<br>    display_labels=[<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>])<br><br>cm_display.plot()                                           <span class="hljs-comment"># 显示绘图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-准确度"><a href="#1-准确度" class="headerlink" title="(1) 准确度"></a>(1) 准确度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)   <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)   <span class="hljs-comment"># 生成预测值</span><br><br>Accuracy = metrics.accuracy_score(actual, predic)   <span class="hljs-comment"># 准确度，衡量模型正确的频率</span><br><span class="hljs-built_in">print</span>(Accuracy)<br></code></pre></td></tr></table></figure><h4 id="2-精确度"><a href="#2-精确度" class="headerlink" title="(2) 精确度"></a>(2) 精确度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)   <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)   <span class="hljs-comment"># 生成预测值</span><br><br>Precision = metrics.precision_score(actual, predic) <span class="hljs-comment"># 精确度，不评估正确预测的负面案例</span><br><span class="hljs-built_in">print</span>(Precision)<br></code></pre></td></tr></table></figure><h4 id="3-灵敏度"><a href="#3-灵敏度" class="headerlink" title="(3) 灵敏度"></a>(3) 灵敏度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)         <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)         <span class="hljs-comment"># 生成预测值</span><br><br>Sensitivity_recall = metrics.recall_score(actual, predic) <span class="hljs-comment"># 灵敏度，衡量模型预测阳性的好坏程度</span><br><span class="hljs-built_in">print</span>(Sensitivity_recall)<br></code></pre></td></tr></table></figure><h4 id="4-特异性"><a href="#4-特异性" class="headerlink" title="(4) 特异性"></a>(4) 特异性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>) <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>) <span class="hljs-comment"># 生成预测值</span><br><br>Specificity = metrics.recall_score(actual, predic, pos_label=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(Specificity)                                <span class="hljs-comment"># 特异性，类似于敏感性，但从阴性结果的角度来看</span><br></code></pre></td></tr></table></figure><h4 id="5-F-score"><a href="#5-F-score" class="headerlink" title="(5) F-score"></a>(5) F-score</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>) <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>) <span class="hljs-comment"># 生成预测值</span><br><br>F1_score = metrics.f1_score(actual, predic)<br><span class="hljs-built_in">print</span>(F1_score)                                   <span class="hljs-comment"># F-score，同时考虑了假阳性和假阴性情况，适用于不平衡的数据集</span><br></code></pre></td></tr></table></figure><h2 id="3-4-层次聚类"><a href="#3-4-层次聚类" class="headerlink" title="3-4 层次聚类"></a>3-4 层次聚类</h2><ul><li>层次聚类<ul><li>是一种用于聚类数据点的无监督学习方法，该算法通过测量数据之间的差异来构建集群。</li><li>无监督学习意味着模型不需要训练，可用于任何数据，以可视化和解释各个数据点之间的关系。<ul><li>首先将每个数据点视为其自己的集群，然后将它们之间距离最短的集群连接在一起，以创建更大的集群。</li><li>重复此步骤，直到形成一个包含所有数据点的大集群，凝聚聚类(即一种遵循自下而上方法的层次聚类)。</li></ul></li><li>在这里将使用层次聚类对数据点进行分组，并使用树状图和散点图可视化聚类。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span> , <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>plt.scatter(x, y)                                   <span class="hljs-comment"># 可视化一些数据点</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-树状图可视化"><a href="#1-树状图可视化" class="headerlink" title="(1) 树状图可视化"></a>(1) 树状图可视化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.cluster.hierarchy <span class="hljs-keyword">import</span> dendrogram, linkage<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))<br><br>linkage_data = linkage(data, method=<span class="hljs-string">&#x27;ward&#x27;</span>, metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>)<br>dendrogram(linkage_data)                            <span class="hljs-comment"># 使用欧几里得距离度量，并使用树状图将其可视化</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-散点图可视化"><a href="#2-散点图可视化" class="headerlink" title="(2) 散点图可视化"></a>(2) 散点图可视化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> AgglomerativeClustering<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))<br><br>hierarchical_cluster = AgglomerativeClustering(n_clusters=<span class="hljs-number">2</span>, affinity=<span class="hljs-string">&#x27;euclidean&#x27;</span>, linkage=<span class="hljs-string">&#x27;ward&#x27;</span>)<br>labels = hierarchical_cluster.fit_predict(data)     <span class="hljs-comment"># AgglomerativeClustering()使用了scikit-learn库</span><br><br>plt.scatter(x, y, c=labels)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-5-逻辑回归"><a href="#3-5-逻辑回归" class="headerlink" title="3-5 逻辑回归"></a>3-5 逻辑回归</h2><ul><li>逻辑回归<ul><li>旨在解决分类问题，通过预测分类结果来做到这一点，与预测连续结果的线性回归不同。<ul><li>最简单的情况有两个结果，称为二项式，例如：预测肿瘤是恶性肿瘤还是良性肿瘤。</li><li>两个以上结果的分类情况，称为多项式，例如：预测3种不同物种之间的鸢尾花类别。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>X = numpy.array([<span class="hljs-number">3.78</span>, <span class="hljs-number">2.44</span>, <span class="hljs-number">2.09</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">1.72</span>, <span class="hljs-number">1.65</span>, <span class="hljs-number">4.92</span>, <span class="hljs-number">4.37</span>, <span class="hljs-number">4.96</span>, <span class="hljs-number">4.52</span>, <span class="hljs-number">3.69</span>, <span class="hljs-number">5.88</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>y = numpy.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]) <span class="hljs-comment"># 将自变量存储在X中，将因变量存储在y中</span><br><br>logr = linear_model.LogisticRegression()              <span class="hljs-comment"># 创建逻辑回归对象</span><br>logr.fit(X, y)                                        <span class="hljs-comment"># 将独立值和相关值作为参数，并用描述关系的数据填充回归对象</span><br><br>predicted = logr.predict(numpy.array([<span class="hljs-number">3.46</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(predicted)                                      <span class="hljs-comment"># 结果为[0]，预测3.46mm的肿瘤不会癌变</span><br></code></pre></td></tr></table></figure><h4 id="1-系数-1"><a href="#1-系数-1" class="headerlink" title="(1) 系数"></a>(1) 系数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>X = numpy.array([<span class="hljs-number">3.78</span>, <span class="hljs-number">2.44</span>, <span class="hljs-number">2.09</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">1.72</span>, <span class="hljs-number">1.65</span>, <span class="hljs-number">4.92</span>, <span class="hljs-number">4.37</span>, <span class="hljs-number">4.96</span>, <span class="hljs-number">4.52</span>, <span class="hljs-number">3.69</span>, <span class="hljs-number">5.88</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>y = numpy.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]) <span class="hljs-comment"># 将自变量存储在X中，将因变量存储在y中</span><br><br>logr = linear_model.LogisticRegression()              <span class="hljs-comment"># 创建逻辑回归对象</span><br>logr.fit(X, y)                                        <span class="hljs-comment"># 将独立值和相关值作为参数，并用描述关系的数据填充回归对象</span><br><br>log_odds = logr.coef_                                 <span class="hljs-comment"># 逻辑回归中，系数是X中每单位变化的结果的对数几率的预期变化</span><br>odds = numpy.exp(log_odds)                            <span class="hljs-comment"># 赔率，随着肿瘤大小增加1毫米，成为肿瘤的几率增加4倍</span><br><br><span class="hljs-built_in">print</span>(odds)<br></code></pre></td></tr></table></figure><h4 id="2-概率"><a href="#2-概率" class="headerlink" title="(2) 概率"></a>(2) 概率</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>X = numpy.array([<span class="hljs-number">3.78</span>, <span class="hljs-number">2.44</span>, <span class="hljs-number">2.09</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">1.72</span>, <span class="hljs-number">1.65</span>, <span class="hljs-number">4.92</span>, <span class="hljs-number">4.37</span>, <span class="hljs-number">4.96</span>, <span class="hljs-number">4.52</span>, <span class="hljs-number">3.69</span>, <span class="hljs-number">5.88</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>y = numpy.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]) <span class="hljs-comment"># 将自变量存储在X中，将因变量存储在y中</span><br><br>logr = linear_model.LogisticRegression()              <span class="hljs-comment"># 创建逻辑回归对象</span><br>logr.fit(X, y)                                        <span class="hljs-comment"># 将独立值和相关值作为参数，并用描述关系的数据填充回归对象</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logit2prob</span>(<span class="hljs-params">logr, X</span>):<br>    log_odds = logr.coef_ * X + logr.intercept_       <span class="hljs-comment"># 创建一个看起来类似于线性回归的公式，提取系数和截距</span><br>    odds = numpy.exp(log_odds)                        <span class="hljs-comment"># 为了将对数赔率转换为赔率，必须对对数赔率取幂</span><br>    probability = odds / (<span class="hljs-number">1</span> + odds)                   <span class="hljs-comment"># 有了赔率，可以将其除以1加上赔率，将其转换为概率</span><br>    <span class="hljs-keyword">return</span> probability<br><br><br><span class="hljs-built_in">print</span>(logit2prob(logr, X))                            <span class="hljs-comment"># 找出每个肿瘤癌变的概率，3.78cm的肿瘤癌变的概率为61%</span><br></code></pre></td></tr></table></figure><h2 id="3-6-网格搜索"><a href="#3-6-网格搜索" class="headerlink" title="3-6 网格搜索"></a>3-6 网格搜索</h2><ul><li>网格搜索<ul><li>穷举搜索：在所有候选参数的选择中，通过循环遍历尝试每一种可能性，表现最好的参数就是最终的结果。</li><li>大多数机器学习模型都包含可以调整以改变模型学习方式的参数，例如：逻辑回归模型。<ul><li>有个C控制正则化参数，影响模型的复杂性，选择最佳值C取决于训练模型的数据。</li><li>一种方法是尝试不同的值，然后选择给出最佳分数的值，这种技术称为网格搜索。</li><li>若必须为两个及两个以上参数选择值，将评估值集的所有组合，从而形成值网格。</li></ul></li><li>使用训练数据对逻辑回归模型进行评分<ul><li>若模型与数据过于接近，可能无法很好地预测未知数据，这种统计误差被称为过度拟合。</li><li>为了避免被训练的数据过度拟合导致的误差，可以保留一部分数据，专门用于测试模型。</li></ul></li></ul></li></ul><h4 id="1-默认参数"><a href="#1-默认参数" class="headerlink" title="(1) 默认参数"></a>(1) 默认参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression <span class="hljs-comment"># 将加载用于对鸢尾花进行分类的逻辑模型</span><br><br>iris = datasets.load_iris()                         <span class="hljs-comment"># 加载将使用的数据集</span><br><br>X = iris[<span class="hljs-string">&#x27;data&#x27;</span>]                                    <span class="hljs-comment"># 创建一组自变量X和一个因变量y</span><br>y = iris[<span class="hljs-string">&#x27;target&#x27;</span>]<br><br>logit = LogisticRegression(max_iter=<span class="hljs-number">10000</span>)          <span class="hljs-comment"># 查看iris数据集并尝试在逻辑回归中训练具有不同值的模型</span><br><br><span class="hljs-built_in">print</span>(logit.fit(X, y))                              <span class="hljs-comment"># 使模型适合数据</span><br><span class="hljs-built_in">print</span>(logit.score(X, y))                            <span class="hljs-comment"># 运行评分方法，默认设置C为1，得分为0.973</span><br></code></pre></td></tr></table></figure><h4 id="2-设置范围"><a href="#2-设置范围" class="headerlink" title="(2) 设置范围"></a>(2) 设置范围</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression <span class="hljs-comment"># 将加载用于对鸢尾花进行分类的逻辑模型</span><br><br>iris = datasets.load_iris()                         <span class="hljs-comment"># 加载将使用的数据集</span><br><br>X = iris[<span class="hljs-string">&#x27;data&#x27;</span>]                                    <span class="hljs-comment"># 创建一组自变量X和一个因变量y</span><br>y = iris[<span class="hljs-string">&#x27;target&#x27;</span>]<br><br>logit = LogisticRegression(max_iter=<span class="hljs-number">10000</span>)          <span class="hljs-comment"># 查看iris数据集并尝试在逻辑回归中训练具有不同值的模型</span><br><br>C = [<span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.25</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.75</span>, <span class="hljs-number">2</span>]        <span class="hljs-comment"># 将C设置为一系列值</span><br>scores = []                                         <span class="hljs-comment"># 创建一个空列表来存储分数</span><br><br><span class="hljs-keyword">for</span> choice <span class="hljs-keyword">in</span> C:                                    <span class="hljs-comment"># for循环更改模型的C值并在每次更改时评估模型</span><br>    logit.set_params(C=choice)<br>    logit.fit(X, y)<br>    scores.append(logit.score(X, y))<br><br><span class="hljs-built_in">print</span>(scores)                                       <span class="hljs-comment"># 通过存储在列表中的分数，评估最佳C值1.75左右</span><br></code></pre></td></tr></table></figure><h2 id="3-7-分类数据"><a href="#3-7-分类数据" class="headerlink" title="3-7 分类数据"></a>3-7 分类数据</h2><ul><li>分类数据<ul><li>当数据由字符串表示类别时，很难使用它们来训练只接受数字数据的机器学习模型。</li><li>此时可以转换数据，以便在模型中使用，而不是忽略分类数据并从模型中排除信息。</li><li>热编码：用一列代表类别中的每个组，对于每一列，值将为1或0，1表示包含组，0表示排除组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>cars = pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)              <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><span class="hljs-built_in">print</span>(cars.to_string())                     <span class="hljs-comment"># 在&quot;多元线性回归&quot;中预测CO2的排放量，排除了汽车品牌和型号</span><br></code></pre></td></tr></table></figure><h4 id="1-热编码"><a href="#1-热编码" class="headerlink" title="(1) 热编码"></a>(1) 热编码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>cars = pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)              <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br>ohe_cars = pd.get_dummies(cars[[<span class="hljs-string">&#x27;Car&#x27;</span>]])    <span class="hljs-comment"># 执行一次热编码</span><br><br><span class="hljs-built_in">print</span>(ohe_cars.to_string())                 <span class="hljs-comment"># 为Car列中的每个汽车品牌创建了一个列</span><br></code></pre></td></tr></table></figure><h4 id="2-预测CO2"><a href="#2-预测CO2" class="headerlink" title="(2) 预测CO2"></a>(2) 预测CO2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model            <span class="hljs-comment"># 创建一个线性模型</span><br><br>cars = pd.read_csv(<span class="hljs-string">&#x27;data.csv&#x27;</span>)              <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br>ohe_cars = pd.get_dummies(cars[[<span class="hljs-string">&#x27;Car&#x27;</span>]])    <span class="hljs-comment"># 执行一次热编码，创建虚拟变量</span><br><br>X = pd.concat([cars[[<span class="hljs-string">&#x27;Volume&#x27;</span>, <span class="hljs-string">&#x27;Weight&#x27;</span>]], ohe_cars], axis=<span class="hljs-number">1</span>)<br>y = cars[<span class="hljs-string">&#x27;CO2&#x27;</span>]                             <span class="hljs-comment"># 选择自变量X并按列添加虚拟变量，将因变量存储在y中</span><br><br>regr = linear_model.LinearRegression()      <span class="hljs-comment"># 将数据拟合为线性回归</span><br>regr.fit(X.values, y.values)<br><br>predictedCO2 = regr.predict([[<span class="hljs-number">2300</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(predictedCO2)                         <span class="hljs-comment"># 根据汽车的重量、体积和制造商来预测CO2排放量</span><br></code></pre></td></tr></table></figure><h4 id="3-Dummifying"><a href="#3-Dummifying" class="headerlink" title="(3) Dummifying"></a>(3) Dummifying</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>colors1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;color&#x27;</span>: [<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(colors1)                  <span class="hljs-comment"># 有一个表示颜色的列，2个组</span><br>dummies = pd.get_dummies(colors1, drop_first=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(dummies)                  <span class="hljs-comment"># 使用用于一次热编码的函数，然后删除其中一列</span><br><br>colors2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;color&#x27;</span>: [<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;grey&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(colors2)                  <span class="hljs-comment"># 有一个表示颜色的列，3个组</span><br>dummies = pd.get_dummies(colors2, drop_first=<span class="hljs-literal">True</span>)<br>dummies[<span class="hljs-string">&#x27;color2&#x27;</span>] = colors2[<span class="hljs-string">&#x27;color&#x27;</span>]<br><span class="hljs-built_in">print</span>(dummies)                  <span class="hljs-comment"># 使用用于一次热编码的函数，然后删除其中一列</span><br></code></pre></td></tr></table></figure><h2 id="3-8-K-最近邻"><a href="#3-8-K-最近邻" class="headerlink" title="3-8 K-最近邻"></a>3-8 K-最近邻</h2><ul><li>K-最近邻<ul><li>K-Nearest Neighbor，KNN，即一种分类(Classification)算法，输入基于实例的学习，属于懒惰学习。</li><li>即没有训练阶段，数据集事先已有了分类和特征值，待收到新样本后直接进行处理，与急切学习相对应。</li><li>基本思想：如果一个样本在特征空间中的k个最邻近的样本中的大多数属于某一个类别，则该样本也划分为这个类别。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]         <span class="hljs-comment"># 两个输入特征x和y</span><br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br>classes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]        <span class="hljs-comment"># 一个目标类classes</span><br><br>plt.scatter(x, y, c=classes)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点</span><br></code></pre></td></tr></table></figure><h4 id="1-K-x3D-1拟合KNN"><a href="#1-K-x3D-1拟合KNN" class="headerlink" title="(1) K&#x3D;1拟合KNN"></a>(1) K&#x3D;1拟合KNN</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> warnings <span class="hljs-keyword">import</span> simplefilter               <span class="hljs-comment"># 忽视所有的警告消息</span><br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br>simplefilter(action=<span class="hljs-string">&#x27;ignore&#x27;</span>, category=FutureWarning)<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]         <span class="hljs-comment"># 两个输入特征x和y</span><br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br>classes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]        <span class="hljs-comment"># 一个目标类classes</span><br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                          <span class="hljs-comment"># 将输入特征转换为一组点</span><br>knn = KNeighborsClassifier(n_neighbors=<span class="hljs-number">1</span>)       <span class="hljs-comment"># K=1拟合KNN算法</span><br><br>knn.fit(data, classes)<br><br>new_x = <span class="hljs-number">8</span>                                       <span class="hljs-comment"># 创建新的x和y特征</span><br>new_y = <span class="hljs-number">21</span><br>new_point = [(new_x, new_y)]<br><br>prediction = knn.predict(new_point)             <span class="hljs-comment"># 调用knn.predict()分类一个新的数据点</span><br><br>plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[<span class="hljs-number">0</span>]])<br>plt.text(x=new_x - <span class="hljs-number">1.7</span>, y=new_y - <span class="hljs-number">0.7</span>, s=<span class="hljs-string">f&quot;new point, class: <span class="hljs-subst">&#123;prediction[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点，text()突出新点的位置</span><br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h4 id="2-K-x3D-5拟合KNN"><a href="#2-K-x3D-5拟合KNN" class="headerlink" title="(2) K&#x3D;5拟合KNN"></a>(2) K&#x3D;5拟合KNN</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> warnings <span class="hljs-keyword">import</span> simplefilter               <span class="hljs-comment"># 忽视所有的警告消息</span><br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br>simplefilter(action=<span class="hljs-string">&#x27;ignore&#x27;</span>, category=FutureWarning)<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]         <span class="hljs-comment"># 两个输入特征x和y</span><br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br>classes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]        <span class="hljs-comment"># 一个目标类classes</span><br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                          <span class="hljs-comment"># 将输入特征转换为一组点</span><br>knn = KNeighborsClassifier(n_neighbors=<span class="hljs-number">5</span>)       <span class="hljs-comment"># K=5拟合KNN算法，更高的K值来改变预测</span><br><br>knn.fit(data, classes)<br><br>new_x = <span class="hljs-number">8</span>                                       <span class="hljs-comment"># 创建新的x和y特征</span><br>new_y = <span class="hljs-number">21</span><br>new_point = [(new_x, new_y)]<br><br>prediction = knn.predict(new_point)             <span class="hljs-comment"># 调用knn.predict()分类一个新的数据点</span><br><br>plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[<span class="hljs-number">0</span>]])<br>plt.text(x=new_x - <span class="hljs-number">1.7</span>, y=new_y - <span class="hljs-number">0.7</span>, s=<span class="hljs-string">f&quot;new point, class: <span class="hljs-subst">&#123;prediction[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点，text()突出新点的位置</span><br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h1 id="4-Bootstrap聚合"><a href="#4-Bootstrap聚合" class="headerlink" title="4 Bootstrap聚合"></a>4 Bootstrap聚合</h1><ul><li>Bootstrap聚合<ul><li>也叫Bagging算法或引导聚集算法，又称装袋算法，试图解决分类或回归的过度拟合问题。<ul><li>主要想法是分别训练几个不同的模型，然后让所有的模型表决测试样例的输出。</li><li>是机器学习中常规策略的一个例子，被称为模型平均，该技术被称为集成方法。</li></ul></li><li>了解装袋提高模型性能的方法，必须先评估分类器在数据集上的表现，装袋是决策树概念的延续。</li></ul></li></ul><h2 id="4-1-分类器评估"><a href="#4-1-分类器评估" class="headerlink" title="4-1 分类器评估"></a>4-1 分类器评估</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets                <span class="hljs-comment"># 通过Sklearn的葡萄酒数据集发现不同类别的葡萄酒</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># as_frame设为True，在加载数据时不会丢失特征名称</span><br><br>X = data.data                               <span class="hljs-comment"># 将其存储到X(输入特征)和y(目标)中</span><br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>dtree = DecisionTreeClassifier(random_state=<span class="hljs-number">22</span>)<br>dtree.fit(X_train, y_train)                 <span class="hljs-comment"># 实例化一个基础分类器并将其拟合到训练数据中</span><br><br>y_pred = dtree.predict(X_test)              <span class="hljs-comment"># 预测未见过测试集的葡萄酒类别并评估模型性能</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Train data accuracy:&quot;</span>, accuracy_score(y_true=y_train, y_pred=dtree.predict(X_train)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Test data accuracy:&quot;</span>, accuracy_score(y_true=y_test, y_pred=y_pred))<br></code></pre></td></tr></table></figure><h2 id="4-2-装袋分类器"><a href="#4-2-装袋分类器" class="headerlink" title="4-2 装袋分类器"></a>4-2 装袋分类器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)<br><br>X = data.data<br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>estimator_range = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>]  <span class="hljs-comment"># 创建一个值范围，代表想要在每个集成中使用的估计数量</span><br><br>models = []<br>scores = []<br><br><span class="hljs-keyword">for</span> n_estimators <span class="hljs-keyword">in</span> estimator_range:            <span class="hljs-comment"># for循环将模型和分数存储在单独的列表中以供后续可视化</span><br>    <span class="hljs-comment"># Create bagging classifier</span><br>    clf = BaggingClassifier(n_estimators=n_estimators, random_state=<span class="hljs-number">22</span>)<br>    <span class="hljs-comment"># Fit the model</span><br>    clf.fit(X_train, y_train)<br><br>    <span class="hljs-comment"># Append the model and score to their respective list</span><br>    models.append(clf)<br>    scores.append(accuracy_score(y_true=y_test, y_pred=clf.predict(X_test)))<br><br><span class="hljs-comment"># Generate the plot of scores against number of estimators</span><br>plt.figure(figsize=(<span class="hljs-number">9</span>, <span class="hljs-number">6</span>))<br>plt.plot(estimator_range, scores)<br><br><span class="hljs-comment"># Adjust labels and font (to make visable)</span><br>plt.xlabel(<span class="hljs-string">&quot;n_estimators&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>plt.ylabel(<span class="hljs-string">&quot;score&quot;</span>, fontsize=<span class="hljs-number">18</span>)<br>plt.tick_params(labelsize=<span class="hljs-number">16</span>)<br><br><span class="hljs-comment"># Visualize plot                                # 通过迭代估计器数量的不同值，可看到模型性能从82.2%提高到95.5%</span><br>plt.show()                                      <span class="hljs-comment"># 14后精度开始下降，如果设置不同的random_state值，结果也会不同</span><br></code></pre></td></tr></table></figure><h2 id="4-3-另一种形式"><a href="#4-3-另一种形式" class="headerlink" title="4-3 另一种形式"></a>4-3 另一种形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)<br><br>X = data.data                       <span class="hljs-comment"># 袋外估计可能会高估二元分类问题中的错误，因此只能用作对其他指标的补充</span><br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>oob_model = BaggingClassifier(n_estimators=<span class="hljs-number">12</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">22</span>)<br>oob_model.fit(X_train, y_train)     <span class="hljs-comment"># 使用袋外指标创建模型，类似于测试集</span><br><br><span class="hljs-built_in">print</span>(oob_model.oob_score_)         <span class="hljs-comment"># 由于OOB和测试集使用的样本不同，而且数据集比较小，所以在准确率上存在差异</span><br></code></pre></td></tr></table></figure><h2 id="4-4-生成决策树"><a href="#4-4-生成决策树" class="headerlink" title="4-4 生成决策树"></a>4-4 生成决策树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> graphviz<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-comment"># from sklearn.tree import plot_tree</span><br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)<br><br>X = data.data<br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>oob_model = BaggingClassifier(n_estimators=<span class="hljs-number">12</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">22</span>)<br>oob_model.fit(X_train, y_train)<br><br>clf = BaggingClassifier(n_estimators=<span class="hljs-number">12</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">22</span>)<br>clf.fit(X_train, y_train)<br><br>plt.figure(figsize=(<span class="hljs-number">30</span>, <span class="hljs-number">20</span>))<br>dtree = clf.estimators_[<span class="hljs-number">0</span>]                      <span class="hljs-comment"># clf.estimators_是3个拟合决策树的列表</span><br><span class="hljs-built_in">print</span>(dtree)                                    <span class="hljs-comment"># 可以遍历列表访问每个树，这里取第一个</span><br><br><span class="hljs-comment"># plot_tree(clf.estimators_[0], feature_names = X.columns)</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br><br>dot_data = tree.export_graphviz(dtree, filled=<span class="hljs-literal">True</span>, rounded=<span class="hljs-literal">True</span>, special_characters=<span class="hljs-literal">True</span>)<br>graph = graphviz.Source(dot_data)<br>graph.render(<span class="hljs-string">&#x27;data&#x27;</span>)                            <span class="hljs-comment"># 生成data.pdf可视化决策树</span><br></code></pre></td></tr></table></figure><h1 id="5-交叉验证-建模"><a href="#5-交叉验证-建模" class="headerlink" title="5 交叉验证(建模)"></a>5 交叉验证(建模)</h1><ul><li>交叉验证(建模)<ul><li>在机器学习建立模型和验证模型参数时常用的办法，一般被用于评估一个机器学习模型的表现。</li><li>重复使用数据，切分得到的样本，组合为不同的训练集和测试集，训练及评估模型预测的好坏。</li><li>优化测试集的参数可能会导致信息泄漏，导致模型在看不见的数据上表现更差，为纠正该问题，执行交叉验证。</li><li>K-Fold<ul><li>首先，模型中使用的训练数据被分成了k个较小的集合，用于验证模型。</li><li>然后，在k-1倍的训练集上训练模型，剩余的集合用作验证集评估模型。</li></ul></li><li>分层K-Fold<ul><li>在类别不平衡的情况下，需要一种方法来解释训练集和验证集的不平衡。</li><li>对目标类别进行分层，意味着这两个集合在所有类别中所占的比例相等。</li></ul></li><li>留一法，Leave-One-Out，简称LOO。<ul><li>使k等于数据集中数据的个数，每次只使用一个作为测试集，剩下的全作为训练集。</li><li>这种方法得出的结果，与训练整个测试集的期望值最为接近，但是成本也十分庞大。</li></ul></li><li>留P法，Leave-P-Out，简称LPO。<ul><li>使用样本中的某几项当做测试集，再从样本中选取某几项的可能种类称为P值。</li><li>Leave-P-Out可迅速提高模型的精确度，准确的描摹大样本数据集的特征信息。</li></ul></li><li>蒙特卡罗交叉验证，也称为Shuffle Split交叉验证。<ul><li>一种非常灵活的交叉验证策略，在这种技术中，数据集被随机划分为训练集和验证集。</li><li>假设100个样本，60%的样本用作训练集，20%用作测试集，剩下的20%将不被使用。</li></ul></li></ul></li></ul><h2 id="5-1-K-Fold"><a href="#5-1-K-Fold" class="headerlink" title="5-1 K-Fold"></a>5-1 K-Fold</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> KFold, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>k_folds = KFold(n_splits=<span class="hljs-number">5</span>)                         <span class="hljs-comment"># 评估模型，看在每个k-fold上的表现</span><br><br>scores = cross_val_score(clf, X, y, cv=k_folds)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-2-分层K-Fold"><a href="#5-2-分层K-Fold" class="headerlink" title="5-2 分层K-Fold"></a>5-2 分层K-Fold</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedKFold, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)<br><br>sk_folds = StratifiedKFold(n_splits=<span class="hljs-number">5</span>)              <span class="hljs-comment"># 折叠数保持相同</span><br><br>scores = cross_val_score(clf, X, y, cv=sk_folds)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())          <span class="hljs-comment"># 在确保存在分层类别时，平均CV从基本k倍增加</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-3-留一法-LOO"><a href="#5-3-留一法-LOO" class="headerlink" title="5-3 留一法(LOO)"></a>5-3 留一法(LOO)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> LeaveOneOut, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>loo = LeaveOneOut()<br><br>scores = cross_val_score(clf, X, y, cv=loo)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)          <span class="hljs-comment"># 可观察到执行的交叉验证分数的数量等于数据集中观察的数量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())          <span class="hljs-comment"># 鸢尾花数据集中有150个观测值，平均CV得分为94%</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-4-留P验证-LPO"><a href="#5-4-留P验证-LPO" class="headerlink" title="5-4 留P验证(LPO)"></a>5-4 留P验证(LPO)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> LeavePOut, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>lpo = LeavePOut(p=<span class="hljs-number">2</span>)<br><br>scores = cross_val_score(clf, X, y, cv=lpo)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())          <span class="hljs-comment"># 观测值数量足够多，实现了大致相同的平均CV分数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-5-蒙特卡罗验证"><a href="#5-5-蒙特卡罗验证" class="headerlink" title="5-5 蒙特卡罗验证"></a>5-5 蒙特卡罗验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> ShuffleSplit, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>ss = ShuffleSplit(train_size=<span class="hljs-number">0.6</span>, test_size=<span class="hljs-number">0.3</span>, n_splits=<span class="hljs-number">5</span>)<br><br>scores = cross_val_score(clf, X, y, cv=ss)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h1 id="6-AUC-ROC曲线"><a href="#6-AUC-ROC曲线" class="headerlink" title="6 AUC-ROC曲线"></a>6 AUC-ROC曲线</h1><ul><li>AUC-ROC曲线<ul><li>在不同阈值设置的条件下，分类问题的性能度量，ROC指概率曲线，AUC指正负类可正确分类的程度。<ul><li>告诉模型能够在多大程度上区分类，AUC越高，模型越能预测0为0和1为1。</li><li>类比疾病诊断模型，若AUC越高，模型对有疾病和无疾病的区分就会越好。</li></ul></li><li>术语定义：真阳性(TP)、假阳性(FP)。<ul><li>特异度(Specificity)&#x3D;TN&#x2F;(TN+FP)</li><li>假阳率(FPR)&#x3D;1-Specificity&#x3D;FP&#x2F;(TN+FP)</li><li>真阳率(TPR)&#x2F;召回率(Recall)&#x2F;敏感度(Sensitivity)&#x3D;TP&#x2F;(TP+FN)</li></ul></li></ul></li></ul><h2 id="6-1-不平衡数据"><a href="#6-1-不平衡数据" class="headerlink" title="6-1 不平衡数据"></a>6-1 不平衡数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, confusion_matrix<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that always predicts the majority class</span><br><span class="hljs-comment"># probability of predicting class 1 is going to be 100%</span><br>y_proba = np.array([<span class="hljs-number">1</span>]*n)<br>y_pred = y_proba &gt; <span class="hljs-number">.5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_pred)&#125;</span>&#x27;</span>)<br>cf_mat = confusion_matrix(y, y_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Confusion matrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(cf_mat)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 0 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]/n_0&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 1 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]/n_1&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="6-2-准确性评估"><a href="#6-2-准确性评估" class="headerlink" title="6-2 准确性评估"></a>6-2 准确性评估</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, confusion_matrix<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that always predicts the majority class</span><br><span class="hljs-comment"># probability of predicting class 1 is going to be 100%</span><br>y_proba_1 = np.array([<span class="hljs-number">1</span>]*n)<br>y_pred_1 = y_proba_1 &gt; <span class="hljs-number">.5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_pred_1)&#125;</span>&#x27;</span>)<br>cf_mat = confusion_matrix(y, y_pred_1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Confusion matrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(cf_mat)                                   <span class="hljs-comment"># 虽然获得了非常高的准确性，但该模型没有提供有关数据的信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 0 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]/n_0&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 在100%的时间内准确地预测了1类，而在0%的时间内不准确地预测了0类</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 1 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]/n_1&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 以牺牲准确性为代价，拥有一个可在某程度上区分这两类的模型可能更好</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*****************************&#x27;</span>)<br><br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that doesn&#x27;t always predict the mode</span><br>y_proba_2 = np.array(np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.7</span>, n_0).tolist() + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">1</span>, n_1).tolist())<br>y_pred_2 = y_proba_2 &gt; <span class="hljs-number">.5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_pred_2)&#125;</span>&#x27;</span>)<br>cf_mat = confusion_matrix(y, y_pred_2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Confusion matrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(cf_mat)                                   <span class="hljs-comment"># 第二组预测准确度分数没有第一组高，但每个类别的准确度更加平衡</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 0 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]/n_0&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 使用准确性作为评估指标，会使第一个模型评分高于第二个模型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 1 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]/n_1&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 在这种情况下，最好使用其他评估指标，例如AUC</span><br></code></pre></td></tr></table></figure><h4 id="1-第一个模型"><a href="#1-第一个模型" class="headerlink" title="(1) 第一个模型"></a>(1) 第一个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score, roc_curve<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br><br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that always predicts the majority class</span><br><span class="hljs-comment"># probability of predicting class 1 is going to be 100%</span><br>y_proba_1 = np.array([<span class="hljs-number">1</span>] * n)<br>y_pred_1 = y_proba_1 &gt; <span class="hljs-number">.5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>    plt.show()                                  <span class="hljs-comment"># AUC分数约为0.5，意味着该模型无法区分两个类别</span><br><br><br>plot_roc_curve(y, y_proba_1)                    <span class="hljs-comment"># 曲线看起来像一条斜率为1的线</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 1 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_proba_1)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h4 id="2-第二个模型"><a href="#2-第二个模型" class="headerlink" title="(2) 第二个模型"></a>(2) 第二个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score, roc_curve<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br><br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that doesn&#x27;t always predict the mode</span><br>y_proba_2 = np.array(np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.7</span>, n_0).tolist() + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">1</span>, n_1).tolist())<br>y_pred_2 = y_proba_2 &gt; <span class="hljs-number">.5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>    plt.show()                                  <span class="hljs-comment"># AUC分数接近1，意味着该模型有能力将两个类分开</span><br><br><br>plot_roc_curve(y, y_proba_2)                    <span class="hljs-comment"># 曲线将更靠近图表的左上角</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 2 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_proba_2)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h2 id="6-3-类别预测概率"><a href="#6-3-类别预测概率" class="headerlink" title="6-3 类别预测概率"></a>6-3 类别预测概率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, roc_auc_score<br><br>n = <span class="hljs-number">10000</span><br>y = np.array([<span class="hljs-number">0</span>] * n + [<span class="hljs-number">1</span>] * n)<br><br>y_prob_1 = np.array(                                <span class="hljs-comment"># 有两组来自假设模型的概率</span><br>    np.random.uniform(<span class="hljs-number">.25</span>, <span class="hljs-number">.5</span>, n//<span class="hljs-number">2</span>).tolist() +     <span class="hljs-comment"># 第一个在预测两个类别时，概率接近.5</span><br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +         <span class="hljs-comment"># 第二个在预测两个类别时，概率接近0或1的极端值</span><br>    np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.75</span>, n//<span class="hljs-number">2</span>).tolist()<br>)<br>y_prob_2 = np.array(<br>    np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.4</span>, n//<span class="hljs-number">2</span>).tolist() +<br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +<br>    np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">1</span>, n//<span class="hljs-number">2</span>).tolist()<br>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 1 accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_prob_1&gt;<span class="hljs-number">.5</span>)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 2 accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_prob_2&gt;<span class="hljs-number">.5</span>)&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 1 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_prob_1)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 2 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_prob_2)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-第一个模型-1"><a href="#1-第一个模型-1" class="headerlink" title="(1) 第一个模型"></a>(1) 第一个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>n = <span class="hljs-number">10000</span><br>y = np.array([<span class="hljs-number">0</span>] * n + [<span class="hljs-number">1</span>] * n)<br><br>y_prob_1 = np.array(                                <span class="hljs-comment"># 有两组来自假设模型的概率</span><br>    np.random.uniform(<span class="hljs-number">.25</span>, <span class="hljs-number">.5</span>, n // <span class="hljs-number">2</span>).tolist() +   <span class="hljs-comment"># 第一个在预测两个类别时，概率接近.5</span><br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +         <span class="hljs-comment"># 第二个在预测两个类别时，概率接近0或1的极端值</span><br>    np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.75</span>, n // <span class="hljs-number">2</span>).tolist()<br>)<br>y_prob_2 = np.array(<br>    np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.4</span>, n // <span class="hljs-number">2</span>).tolist() +<br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +<br>    np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">1</span>, n // <span class="hljs-number">2</span>).tolist()<br>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>    plt.show()<br><br><br>plot_roc_curve(y, y_prob_1)<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h4 id="2-第二个模型-1"><a href="#2-第二个模型-1" class="headerlink" title="(2) 第二个模型"></a>(2) 第二个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>n = <span class="hljs-number">10000</span><br>y = np.array([<span class="hljs-number">0</span>] * n + [<span class="hljs-number">1</span>] * n)<br><br>y_prob_1 = np.array(                                <span class="hljs-comment"># 有两组来自假设模型的概率</span><br>    np.random.uniform(<span class="hljs-number">.25</span>, <span class="hljs-number">.5</span>, n // <span class="hljs-number">2</span>).tolist() +   <span class="hljs-comment"># 第一个在预测两个类别时，概率接近.5</span><br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +         <span class="hljs-comment"># 第二个在预测两个类别时，概率接近0或1的极端值</span><br>    np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.75</span>, n // <span class="hljs-number">2</span>).tolist()<br>)<br>y_prob_2 = np.array(<br>    np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.4</span>, n // <span class="hljs-number">2</span>).tolist() +<br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +<br>    np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">1</span>, n // <span class="hljs-number">2</span>).tolist()<br>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    <span class="hljs-comment"># plt.xlabel(&#x27;False Positive Rate&#x27;)</span><br>    <span class="hljs-comment"># plt.ylabel(&#x27;True Positive Rate&#x27;)</span><br><br><br>fpr, tpr, thresholds = roc_curve(y, y_prob_2)<br>plt.plot(fpr, tpr)<br>plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)                   <span class="hljs-comment"># 尽管两个模型的准确度相似，但AUC分数较高的模型将更可靠</span><br>plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)                    <span class="hljs-comment"># 它考虑了预测概率，在预测未来数据时更可能提供更高的准确性</span><br>plt.show()<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Matplotlib</title>
    <link href="/2021/05/11/python/python09-python-matplotlib/"/>
    <url>/2021/05/11/python/python09-python-matplotlib/</url>
    
    <content type="html"><![CDATA[<p>Matplotlib是Python的低级图形绘制库，由John D.Hunter创建，大部分用Python编写，开源免费，用作可视化实用程序。</p><span id="more"></span><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><ul><li>介绍<ul><li>命令窗口下使用<code>pip install Matplotlib</code>进行安装。</li><li>通过import关键字将其导入应用程序：<code>import matplotlib</code>。</li><li>检查Matplotlib版本，版本字符串存储在<code>__version__</code>属性下。</li><li>大多数实用程序位于Pyplot子模块下，通常使用别名plt导入：<code>import matplotlib.pyplot as plt</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt         <span class="hljs-comment"># Pyplot子模块</span><br><br><span class="hljs-built_in">print</span>(matplotlib.__version__)           <span class="hljs-comment"># 检查Matplotlib版本</span><br><br>xpoints = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">6</span>])<br>ypoints = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">250</span>])<br>plt.plot(xpoints, ypoints)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="2-绘图"><a href="#2-绘图" class="headerlink" title="2 绘图"></a>2 绘图</h1><ul><li>绘图<ul><li><code>plot()</code>函数用于在图表中绘制点，默认情况下，是从一点到另一点绘制一条线。</li><li>采用参数指定图中的点，参数一包含x轴上点的数组，参数二包含y轴上点的数组。</li><li>x轴是水平轴，y轴是垂直轴。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>xpoints = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">8</span>])              <span class="hljs-comment"># 在图中从位置(1, 3)到位置(8, 10)画一条线</span><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(xpoints, ypoints)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-1-无线绘图"><a href="#2-1-无线绘图" class="headerlink" title="2-1 无线绘图"></a>2-1 无线绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>xpoints = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">8</span>])              <span class="hljs-comment"># 在图中从位置(1, 3)到位置(8, 10)画一条线</span><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(xpoints, ypoints, <span class="hljs-string">&#x27;o&#x27;</span>)         <span class="hljs-comment"># 仅绘制标记，可以使用快捷字符串符号参数“o”</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-2-多点绘图"><a href="#2-2-多点绘图" class="headerlink" title="2-2 多点绘图"></a>2-2 多点绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>xpoints = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>])        <span class="hljs-comment"># 绘制任意多的点，确保两个轴上的点数相同</span><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])       <span class="hljs-comment"># 在图中画一条线，从位置(1, 3)到(2, 8)，(6, 1)，最后到(8, 10)</span><br><br>plt.plot(xpoints, ypoints)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-3-默认X轴点"><a href="#2-3-默认X轴点" class="headerlink" title="2-3 默认X轴点"></a>2-3 默认X轴点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br><br>plt.plot(ypoints)                       <span class="hljs-comment"># x轴上的点默认值取决于y点的长度</span><br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="3-标记"><a href="#3-标记" class="headerlink" title="3 标记"></a>3 标记</h1><ul><li>标记<ul><li>使用关键字参数marker来强调带有指定标记的每个点。</li><li>标记参考<ul><li><code>&#39;*&#39;</code>、<code>&#39;,&#39;</code>、<code>&#39;x&#39;</code>、<code>&#39;X&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;P&#39;</code>、<code>&#39;s&#39;</code>、<code>&#39;D&#39;</code>、<code>&#39;d&#39;</code>、<code>&#39;p&#39;</code>、<code>&#39;H&#39;</code></li><li><code>&#39;h&#39;</code>、<code>&#39;v&#39;</code>、<code>&#39;^&#39;</code>、<code>&#39;&lt;&#39;</code>、<code>&#39;&gt;&#39;</code>、<code>&#39;1&#39;</code>、<code>&#39;2&#39;</code>、<code>&#39;3&#39;</code>、<code>&#39;4&#39;</code>、<code>&#39;|&#39;</code>、<code>&#39;_&#39;</code></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>)                   <span class="hljs-comment"># 关键字参数marker来强调带有指定标记的每个点</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-1-fmt"><a href="#3-1-fmt" class="headerlink" title="3-1 fmt"></a>3-1 fmt</h2><ul><li>fmt<ul><li>快捷字符串表示法参数，<code>marker|line|color</code>。</li><li>画线参考：<code>&#39;-&#39;</code>即<code>solid</code>、<code>&#39;:&#39;</code>即<code>dotted</code>、<code>&#39;--&#39;</code>即<code>dashed</code>、<code>&#39;-.&#39;</code>即<code>dashdot</code>。</li><li>关键字参数linestyle或ls更改绘制线的样式，若在fmt中省略线值，则不会绘制任何线。</li><li>颜色参考：<code>&#39;r&#39;</code>、<code>&#39;g&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code>、<code>&#39;m&#39;</code>、<code>&#39;y&#39;</code>、<code>&#39;k&#39;</code>、<code>&#39;w&#39;</code>。</li><li>关键字参数color或c设置线条的颜色，支持使用十六进制颜色值和<a href="https://www.w3schools.com/colors/colors_names.asp">140种支持的颜色名</a>。</li><li>使用关键字参数linewidth或lw来更改设置线条的宽度，该值是一个浮点数，以点为单位。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, <span class="hljs-string">&#x27;o:r&#x27;</span>)                        <span class="hljs-comment"># 颜色标记</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-点虚线"><a href="#1-点虚线" class="headerlink" title="(1) 点虚线"></a>(1) 点虚线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, linestyle=<span class="hljs-string">&#x27;dotted&#x27;</span>)           <span class="hljs-comment"># 关键字参数linestyle或ls更改绘制线的样式</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-长虚线"><a href="#2-长虚线" class="headerlink" title="(2) 长虚线"></a>(2) 长虚线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, linestyle=<span class="hljs-string">&#x27;dashed&#x27;</span>)           <span class="hljs-comment"># 关键字参数linestyle或ls更改绘制线的样式</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-线条颜色"><a href="#3-线条颜色" class="headerlink" title="(3) 线条颜色"></a>(3) 线条颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, color=<span class="hljs-string">&#x27;g&#x27;</span>)                    <span class="hljs-comment"># 关键字参数color或c设置线条的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-十六进制颜色值"><a href="#4-十六进制颜色值" class="headerlink" title="(4) 十六进制颜色值"></a>(4) 十六进制颜色值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, c=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>)                  <span class="hljs-comment"># 十六进制颜色值</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-140种支持的颜色"><a href="#5-140种支持的颜色" class="headerlink" title="(5) 140种支持的颜色"></a>(5) 140种支持的颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, c=<span class="hljs-string">&#x27;hotpink&#x27;</span>)                  <span class="hljs-comment"># 140种支持的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-更改设置线条行宽"><a href="#6-更改设置线条行宽" class="headerlink" title="(6) 更改设置线条行宽"></a>(6) 更改设置线条行宽</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, linewidth=<span class="hljs-string">&#x27;20.5&#x27;</span>)             <span class="hljs-comment"># 关键字参数linewidth或lw更改设置线条的宽度</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-2-标记大小"><a href="#3-2-标记大小" class="headerlink" title="3-2 标记大小"></a>3-2 标记大小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>)            <span class="hljs-comment"># 关键字参数markersize或ms来设置标记的大小</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-3-标记颜色"><a href="#3-3-标记颜色" class="headerlink" title="3-3 标记颜色"></a>3-3 标记颜色</h2><ul><li>标记颜色<ul><li>使用关键字参数markeredgecolor或mec来设置标记的边缘外颜色。</li><li>使用关键字参数markerfacecolor或mfc来设置标记的边缘内颜色。</li><li>参见：<a href="https://www.w3schools.com/colors/colors_names.asp">140种支持的颜色名称</a>。</li></ul></li></ul><h4 id="1-边缘外颜色"><a href="#1-边缘外颜色" class="headerlink" title="(1) 边缘外颜色"></a>(1) 边缘外颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;r&#x27;</span>)   <span class="hljs-comment"># 关键字参数markeredgecolor或mec来设置标记的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-边缘内颜色"><a href="#2-边缘内颜色" class="headerlink" title="(2) 边缘内颜色"></a>(2) 边缘内颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mfc=<span class="hljs-string">&#x27;r&#x27;</span>)   <span class="hljs-comment"># 关键字参数markerfacecolor或mfc来设置标记的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-mec和mfc着色"><a href="#3-mec和mfc着色" class="headerlink" title="(3) mec和mfc着色"></a>(3) mec和mfc着色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;r&#x27;</span>, mfc=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-十六进制颜色值-1"><a href="#4-十六进制颜色值-1" class="headerlink" title="(4) 十六进制颜色值"></a>(4) 十六进制颜色值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>, mfc=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-140种支持的颜色-1"><a href="#5-140种支持的颜色-1" class="headerlink" title="(5) 140种支持的颜色"></a>(5) 140种支持的颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;hotpink&#x27;</span>, mfc=<span class="hljs-string">&#x27;hotpink&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-4-多线绘制"><a href="#3-4-多线绘制" class="headerlink" title="3-4 多线绘制"></a>3-4 多线绘制</h2><ul><li>多线绘制<ul><li>通过<code>plt.plot()</code>函数简单地绘制任意多条线。</li><li>通过同一函数中为每条线添加x和y轴的点绘制。</li></ul></li></ul><h4 id="1-指定绘制"><a href="#1-指定绘制" class="headerlink" title="(1) 指定绘制"></a>(1) 指定绘制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>y2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])<br><br>plt.plot(y1)                                    <span class="hljs-comment"># 为每条线指定一个函数进行绘制</span><br>plt.plot(y2)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-x和y轴点"><a href="#2-x和y轴点" class="headerlink" title="(2) x和y轴点"></a>(2) x和y轴点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x1 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])                     <span class="hljs-comment"># 指定两条线的x和y点值进行绘制</span><br>y1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>x2 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])<br><br>plt.plot(x1, y1, x2, y2)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="4-标签"><a href="#4-标签" class="headerlink" title="4 标签"></a>4 标签</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.plot(x, y)<br><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)                     <span class="hljs-comment"># 向x轴和y轴添加标签</span><br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4-1 标题"></a>4-1 标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.plot(x, y)<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)                  <span class="hljs-comment"># 为x轴和y轴添加标题</span><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)                     <span class="hljs-comment"># 向x轴和y轴添加标签</span><br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-2-字体属性"><a href="#4-2-字体属性" class="headerlink" title="4-2 字体属性"></a>4-2 字体属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>font1 = &#123;<span class="hljs-string">&#x27;family&#x27;</span>: <span class="hljs-string">&#x27;serif&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">20</span>&#125;<br>font2 = &#123;<span class="hljs-string">&#x27;family&#x27;</span>: <span class="hljs-string">&#x27;serif&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;darkred&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">15</span>&#125;<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>, fontdict=font1)  <span class="hljs-comment"># 设置标题和标签的字体属性</span><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>, fontdict=font2)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>, fontdict=font2)<br><br>plt.plot(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-3-定位标题"><a href="#4-3-定位标题" class="headerlink" title="4-3 定位标题"></a>4-3 定位标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>, loc=<span class="hljs-string">&#x27;left&#x27;</span>)      <span class="hljs-comment"># 合法值为left、right和center，默认值为center</span><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="5-网格"><a href="#5-网格" class="headerlink" title="5 网格"></a>5 网格</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid()                                      <span class="hljs-comment"># 添加网格线</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-1-x轴网格"><a href="#5-1-x轴网格" class="headerlink" title="5-1 x轴网格"></a>5-1 x轴网格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid(axis=<span class="hljs-string">&#x27;x&#x27;</span>)                              <span class="hljs-comment"># x轴网格线</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-2-y轴网格"><a href="#5-2-y轴网格" class="headerlink" title="5-2 y轴网格"></a>5-2 y轴网格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>)                              <span class="hljs-comment"># y轴网格线</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-3-网格线属性"><a href="#5-3-网格线属性" class="headerlink" title="5-3 网格线属性"></a>5-3 网格线属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid(color=<span class="hljs-string">&#x27;green&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, linewidth=<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="6-绘制子图"><a href="#6-绘制子图" class="headerlink" title="6 绘制子图"></a>6 绘制子图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># 绘制2个图，plot 1，布局按行和列组织</span><br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># 绘制2个图，plot 2，第三个参数指当前图的索引</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-1-彼此上绘制"><a href="#6-1-彼此上绘制" class="headerlink" title="6-1 彼此上绘制"></a>6-1 彼此上绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 1</span><br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 2</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-2-绘制6个图"><a href="#6-2-绘制6个图" class="headerlink" title="6-2 绘制6个图"></a>6-2 绘制6个图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br>plt.plot(x,y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br>plt.plot(x,y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>plt.plot(x,y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>plt.plot(x,y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>plt.plot(x,y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>)<br>plt.plot(x,y)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-3-每图添加标题"><a href="#6-3-每图添加标题" class="headerlink" title="6-3 每图添加标题"></a>6-3 每图添加标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 1</span><br>plt.title(<span class="hljs-string">&quot;SALES&quot;</span>)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 2</span><br>plt.title(<span class="hljs-string">&quot;INCOME&quot;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-4-添加超极标题"><a href="#6-4-添加超极标题" class="headerlink" title="6-4 添加超极标题"></a>6-4 添加超极标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 1</span><br>plt.title(<span class="hljs-string">&quot;SALES&quot;</span>)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 2</span><br>plt.title(<span class="hljs-string">&quot;INCOME&quot;</span>)<br><br>plt.suptitle(<span class="hljs-string">&quot;MY SHOP&quot;</span>)                         <span class="hljs-comment"># 超级标题</span><br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="7-绘制图形"><a href="#7-绘制图形" class="headerlink" title="7 绘制图形"></a>7 绘制图形</h1><ul><li>绘制图形<ul><li>散点图：<code>scatter()</code>函数，需要两个相同长度的数组，可用的颜色图如下。<ul><li>Accent、Accent_r、Blues、Blues_r、BrBG、BrBG_r、BuGn、BuGn_r、BuPu、BuPu_r、CMRmap、CMRmap_r</li><li>Dark2、Dark2_r、GnBu、GnBu_r、Greens、Greens_r、Greys、Greys_r、OrRd、OrRd_r、Oranges、Oranges_r</li><li>PRGn、PRGn_r、PiYG、PiYG_r、Pastel1、Pastel1_r、Pastel2、Pastel2_r、PuOr、PuOr_r、Paired、Paired_r</li><li>PuBuGn、PuBuGn_r、PuBu、PuBu_r、PuRd、PuRd_r、Purples、Purples_r、Set1、Set1_r、RdYlGn、RdYlGn_r</li><li>RdPu、RdPu_r、Set3、Set3_r、Wistia、Wistia_r、YlGnBu、YlGnBu_r、YlOrBr、YlOrBr_r、YlOrRd、YlOrRd_r</li><li>RdYlBu、RdYlBu_r、RdGy、RdGy_r、RdBu、RdBu_r、Spectral、Spectral_r、YlGn、YlGn_r、afmhot、afmhot_r</li><li>tab20、tab20_r、tab20b、tab20b_r、tab20c、tab20c_r、terrain、terrain_r、summer、summer_r</li><li>magma、magma_r、nipy_spectral、nipy_spectral_r、ocean、ocean_r、pink、pink_r、tab10、tab10_r</li><li>gist_ncar、gist_ncar_r、gist_rainbow、gist_rainbow_r、gist_stern、gist_stern_r、plasma、plasma_r</li><li>prism、prism_r、rainbow、rainbow_r、seismic、seismic_r、spring、spring_r、gist_yarg、gist_yarg_r</li><li>Set2、Set2_r、Reds、Reds_r、、autumn、autumn_r、binary、binary_r、bone、bone_r、brg、brg_r</li><li>bwr、bwr_r、flag、flag_r、gist_earth、gist_earth_r、gist_gray、gist_gray_r、gist_heat、gist_heat_r</li><li>cividis、cividis_r、cool、cool_r、coolwarm、coolwarm_r、copper、copper_r、cubehelix、cubehelix_r</li><li>jet、jet_r、gray、gray_r、twilight_shifted、twilight_shifted_r、viridis、viridis_r、gnuplot2、gnuplot2_r</li><li>gnuplot、gnuplot_r、hot、hot_r、hsv、hsv_r、inferno、inferno_r、twilight、twilight_r、winter、winter_r</li></ul></li><li>条形图：<code>bar()</code>函数，使用<code>width</code>和<code>height</code>设置垂直条和水平条的宽度，默认值为0.8。</li><li>直方图：<code>hist()</code>函数，使用一个数字数组来创建直方图，该数组作为参数发送到函数中。</li><li>饼状图：<code>pie()</code>函数，第一个楔形的绘制从x轴开始(即起始角为0°开始)，并逆时针移动。<ul><li>楔形颜色可以使用十六进制颜色值、也可以使用140种支持的颜色名称。</li><li>或<code>&#39;r&#39;</code>、<code>&#39;g&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code>、<code>&#39;m&#39;</code>、<code>&#39;y&#39;</code>、<code>&#39;k&#39;</code>、<code>&#39;w&#39;</code>等快捷方式。</li></ul></li></ul></li></ul><h2 id="7-1-散点图"><a href="#7-1-散点图" class="headerlink" title="7-1 散点图"></a>7-1 散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br><br>plt.scatter(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-比较图"><a href="#1-比较图" class="headerlink" title="(1) 比较图"></a>(1) 比较图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>plt.scatter(x, y)<br><br>x = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>])<br>y = np.array([<span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">84</span>, <span class="hljs-number">105</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">94</span>, <span class="hljs-number">100</span>, <span class="hljs-number">79</span>, <span class="hljs-number">112</span>, <span class="hljs-number">91</span>, <span class="hljs-number">80</span>, <span class="hljs-number">85</span>])<br>plt.scatter(x, y)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-设置颜色"><a href="#2-设置颜色" class="headerlink" title="(2) 设置颜色"></a>(2) 设置颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>plt.scatter(x, y, color=<span class="hljs-string">&#x27;hotpink&#x27;</span>)<br><br>x = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>])<br>y = np.array([<span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">84</span>, <span class="hljs-number">105</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">94</span>, <span class="hljs-number">100</span>, <span class="hljs-number">79</span>, <span class="hljs-number">112</span>, <span class="hljs-number">91</span>, <span class="hljs-number">80</span>, <span class="hljs-number">85</span>])<br>plt.scatter(x, y, color=<span class="hljs-string">&#x27;#88c999&#x27;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-给点上色"><a href="#3-给点上色" class="headerlink" title="(3) 给点上色"></a>(3) 给点上色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>colors = np.array(<br>    [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>,<br>     <span class="hljs-string">&quot;purple&quot;</span>, <span class="hljs-string">&quot;beige&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>, <span class="hljs-string">&quot;gray&quot;</span>, <span class="hljs-string">&quot;cyan&quot;</span>, <span class="hljs-string">&quot;magenta&quot;</span>])<br><br>plt.scatter(x, y, c=colors)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-使用颜色图"><a href="#4-使用颜色图" class="headerlink" title="(4) 使用颜色图"></a>(4) 使用颜色图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>colors = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>, <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>])<br><br>plt.scatter(x, y, c=colors, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-包含颜色图例"><a href="#5-包含颜色图例" class="headerlink" title="(5) 包含颜色图例"></a>(5) 包含颜色图例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>colors = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>, <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>])<br><br>plt.scatter(x, y, c=colors, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>plt.colorbar()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-更改点的大小"><a href="#6-更改点的大小" class="headerlink" title="(6) 更改点的大小"></a>(6) 更改点的大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>sizes = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">60</span>, <span class="hljs-number">90</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">800</span>, <span class="hljs-number">75</span>])<br><br>plt.scatter(x, y, s=sizes)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="7-调整点的透明度"><a href="#7-调整点的透明度" class="headerlink" title="(7) 调整点的透明度"></a>(7) 调整点的透明度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>sizes = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">60</span>, <span class="hljs-number">90</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">800</span>, <span class="hljs-number">75</span>])<br><br>plt.scatter(x, y, s=sizes, alpha=<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="8-颜色结合透明度"><a href="#8-颜色结合透明度" class="headerlink" title="(8) 颜色结合透明度"></a>(8) 颜色结合透明度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br>y = np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br>colors = np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br>sizes = <span class="hljs-number">10</span> * np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br><br>plt.scatter(x, y, c=colors, s=sizes, alpha=<span class="hljs-number">0.5</span>, cmap=<span class="hljs-string">&#x27;nipy_spectral&#x27;</span>)<br>plt.colorbar()<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="7-2-条形图"><a href="#7-2-条形图" class="headerlink" title="7-2 条形图"></a>7-2 条形图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-水平显示"><a href="#1-水平显示" class="headerlink" title="(1) 水平显示"></a>(1) 水平显示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.barh(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-条形颜色"><a href="#2-条形颜色" class="headerlink" title="(2) 条形颜色"></a>(2) 条形颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-十六进制颜色值"><a href="#3-十六进制颜色值" class="headerlink" title="(3) 十六进制颜色值"></a>(3) 十六进制颜色值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, color=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-140种支持的颜色"><a href="#4-140种支持的颜色" class="headerlink" title="(4) 140种支持的颜色"></a>(4) 140种支持的颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, color=<span class="hljs-string">&#x27;hotpink&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-设置垂直条的宽度"><a href="#5-设置垂直条的宽度" class="headerlink" title="(5) 设置垂直条的宽度"></a>(5) 设置垂直条的宽度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, width=<span class="hljs-number">0.1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-设置水平条的高度"><a href="#6-设置水平条的高度" class="headerlink" title="(6) 设置水平条的高度"></a>(6) 设置水平条的高度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.barh(x, y, height=<span class="hljs-number">0.1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="7-3-直方图"><a href="#7-3-直方图" class="headerlink" title="7-3 直方图"></a>7-3 直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.random.normal(<span class="hljs-number">170</span>, <span class="hljs-number">10</span>, <span class="hljs-number">250</span>)<br><br>plt.hist(x)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="7-4-饼状图"><a href="#7-4-饼状图" class="headerlink" title="7-4 饼状图"></a>7-4 饼状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br><br>plt.pie(y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-标签"><a href="#1-标签" class="headerlink" title="(1) 标签"></a>(1) 标签</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-起始角"><a href="#2-起始角" class="headerlink" title="(2) 起始角"></a>(2) 起始角</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels, startangle=<span class="hljs-number">90</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-楔形脱离"><a href="#3-楔形脱离" class="headerlink" title="(3) 楔形脱离"></a>(3) 楔形脱离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br>explode = [<span class="hljs-number">0.2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>plt.pie(y, labels=labels, explode=explode)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-饼图阴影"><a href="#4-饼图阴影" class="headerlink" title="(4) 饼图阴影"></a>(4) 饼图阴影</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br>explode = [<span class="hljs-number">0.2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>plt.pie(y, labels=labels, explode=explode, shadow=<span class="hljs-literal">True</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-楔形颜色"><a href="#5-楔形颜色" class="headerlink" title="(5) 楔形颜色"></a>(5) 楔形颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br>colors = [<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;hotpink&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;#4CAF50&#x27;</span>]<br><br>plt.pie(y, labels=labels, colors=colors)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-添加图例"><a href="#6-添加图例" class="headerlink" title="(6) 添加图例"></a>(6) 添加图例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels)<br>plt.legend()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="7-图例标题"><a href="#7-图例标题" class="headerlink" title="(7) 图例标题"></a>(7) 图例标题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels)<br>plt.legend(title=<span class="hljs-string">&#x27;Four Fruits:&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matplotlib</tag>
      
      <tag>图形绘制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python SciPy</title>
    <link href="/2021/04/15/python/python08-python-scipy/"/>
    <url>/2021/04/15/python/python08-python-scipy/</url>
    
    <content type="html"><![CDATA[<p>SciPy是一个在底层使用NumPy的科学计算库，为优化、统计和信号处理提供了实用功能，由NumPy的创建者Travis Olliphant创建。</p><span id="more"></span><h1 id="1-SciPy"><a href="#1-SciPy" class="headerlink" title="1 SciPy"></a>1 SciPy</h1><ul><li>SciPy<ul><li>命令窗口下使用<code>pip install scipy</code>进行安装。</li><li>通过import关键字将其导入应用程序：<code>import scipy</code>。</li><li>检查SciPy版本，版本字符串存在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> scipy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants         <span class="hljs-comment"># 导入</span><br><br><span class="hljs-built_in">print</span>(constants.liter)<br><span class="hljs-built_in">print</span>(scipy.__version__)            <span class="hljs-comment"># 检查SciPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-常量"><a href="#2-常量" class="headerlink" title="2 常量"></a>2 常量</h1><ul><li>常量<ul><li>PI是科学常数的一个例子，<code>dir()</code>函数可以看到常量模块下所有单元的列表。</li><li>单位类别<ul><li>质量：返回以kg为单位的指定单位。</li><li>时间：返回以秒为单位的指定单位。</li><li>长度：返回以米为单位的指定单位。</li><li>角度：返回以弧度为单位的指定单位。</li><li>能量：返回以焦耳为单位的指定单位。</li><li>功率：返回以瓦特为单位的指定单位。</li><li>力量：返回以牛顿为单位的指定单位。</li><li>压力：返回以帕斯卡为单位的指定单位。</li><li>区域：返回以平方米为单位的指定单位。</li><li>体积：返回以立方米为单位的指定单位。</li><li>速度：返回以米每秒为单位的指定单位。</li><li>温度：返回以开尔文为单位的指定单位。</li><li>二进制：返回以字节为单位的指定单位。</li><li>公制(SI)：返回以米为单位的指定单位。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.pi)                 <span class="hljs-comment"># 打印PI的常数值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(constants))               <span class="hljs-comment"># 列出所有常量</span><br><br><span class="hljs-built_in">print</span>(constants.gram)               <span class="hljs-comment"># 0.001，质量</span><br><span class="hljs-built_in">print</span>(constants.metric_ton)         <span class="hljs-comment"># 1000.0</span><br><span class="hljs-built_in">print</span>(constants.grain)              <span class="hljs-comment"># 6.479891e-05</span><br><span class="hljs-built_in">print</span>(constants.lb)                 <span class="hljs-comment"># 0.45359236999999997</span><br><span class="hljs-built_in">print</span>(constants.pound)              <span class="hljs-comment"># 0.45359236999999997</span><br><span class="hljs-built_in">print</span>(constants.oz)                 <span class="hljs-comment"># 0.028349523124999998</span><br><span class="hljs-built_in">print</span>(constants.ounce)              <span class="hljs-comment"># 0.028349523124999998</span><br><span class="hljs-built_in">print</span>(constants.stone)              <span class="hljs-comment"># 6.3502931799999995</span><br><span class="hljs-built_in">print</span>(constants.long_ton)           <span class="hljs-comment"># 1016.0469088</span><br><span class="hljs-built_in">print</span>(constants.short_ton)          <span class="hljs-comment"># 907.1847399999999</span><br><span class="hljs-built_in">print</span>(constants.troy_ounce)         <span class="hljs-comment"># 0.031103476799999998</span><br><span class="hljs-built_in">print</span>(constants.troy_pound)         <span class="hljs-comment"># 0.37324172159999996</span><br><span class="hljs-built_in">print</span>(constants.carat)              <span class="hljs-comment"># 0.0002</span><br><span class="hljs-built_in">print</span>(constants.atomic_mass)        <span class="hljs-comment"># 1.66053904e-27</span><br><span class="hljs-built_in">print</span>(constants.m_u)                <span class="hljs-comment"># 1.66053904e-27</span><br><span class="hljs-built_in">print</span>(constants.u)                  <span class="hljs-comment"># 1.66053904e-27</span><br><br><span class="hljs-built_in">print</span>(constants.minute)             <span class="hljs-comment"># 60.0，时间</span><br><span class="hljs-built_in">print</span>(constants.hour)               <span class="hljs-comment"># 3600.0</span><br><span class="hljs-built_in">print</span>(constants.day)                <span class="hljs-comment"># 86400.0</span><br><span class="hljs-built_in">print</span>(constants.week)               <span class="hljs-comment"># 604800.0</span><br><span class="hljs-built_in">print</span>(constants.year)               <span class="hljs-comment"># 31536000.0</span><br><span class="hljs-built_in">print</span>(constants.Julian_year)        <span class="hljs-comment"># 31557600.0</span><br><br><span class="hljs-built_in">print</span>(constants.inch)               <span class="hljs-comment"># 0.0254，长度</span><br><span class="hljs-built_in">print</span>(constants.foot)               <span class="hljs-comment"># 0.30479999999999996</span><br><span class="hljs-built_in">print</span>(constants.yard)               <span class="hljs-comment"># 0.9143999999999999</span><br><span class="hljs-built_in">print</span>(constants.mile)               <span class="hljs-comment"># 1609.3439999999998</span><br><span class="hljs-built_in">print</span>(constants.mil)                <span class="hljs-comment"># 2.5399999999999997e-05</span><br><span class="hljs-built_in">print</span>(constants.pt)                 <span class="hljs-comment"># 0.00035277777777777776</span><br><span class="hljs-built_in">print</span>(constants.point)              <span class="hljs-comment"># 0.00035277777777777776</span><br><span class="hljs-built_in">print</span>(constants.survey_foot)        <span class="hljs-comment"># 0.3048006096012192</span><br><span class="hljs-built_in">print</span>(constants.survey_mile)        <span class="hljs-comment"># 1609.3472186944373</span><br><span class="hljs-built_in">print</span>(constants.nautical_mile)      <span class="hljs-comment"># 1852.0</span><br><span class="hljs-built_in">print</span>(constants.fermi)              <span class="hljs-comment"># 1e-15</span><br><span class="hljs-built_in">print</span>(constants.angstrom)           <span class="hljs-comment"># 1e-10</span><br><span class="hljs-built_in">print</span>(constants.micron)             <span class="hljs-comment"># 1e-06</span><br><span class="hljs-built_in">print</span>(constants.au)                 <span class="hljs-comment"># 149597870691.0</span><br><span class="hljs-built_in">print</span>(constants.astronomical_unit)  <span class="hljs-comment"># 149597870691.0</span><br><span class="hljs-built_in">print</span>(constants.light_year)         <span class="hljs-comment"># 9460730472580800.0</span><br><span class="hljs-built_in">print</span>(constants.parsec)             <span class="hljs-comment"># 3.0856775813057292e+16</span><br><br><span class="hljs-built_in">print</span>(constants.degree)             <span class="hljs-comment"># 0.017453292519943295，角度</span><br><span class="hljs-built_in">print</span>(constants.arcmin)             <span class="hljs-comment"># 0.0002908882086657216</span><br><span class="hljs-built_in">print</span>(constants.arcminute)          <span class="hljs-comment"># 0.0002908882086657216</span><br><span class="hljs-built_in">print</span>(constants.arcsec)             <span class="hljs-comment"># 4.84813681109536e-06</span><br><span class="hljs-built_in">print</span>(constants.arcsecond)          <span class="hljs-comment"># 4.84813681109536e-06</span><br><br><span class="hljs-built_in">print</span>(constants.eV)                 <span class="hljs-comment"># 1.6021766208e-19，能量</span><br><span class="hljs-built_in">print</span>(constants.electron_volt)      <span class="hljs-comment"># 1.6021766208e-19</span><br><span class="hljs-built_in">print</span>(constants.calorie)            <span class="hljs-comment"># 4.184</span><br><span class="hljs-built_in">print</span>(constants.calorie_th)         <span class="hljs-comment"># 4.184</span><br><span class="hljs-built_in">print</span>(constants.calorie_IT)         <span class="hljs-comment"># 4.1868</span><br><span class="hljs-built_in">print</span>(constants.erg)                <span class="hljs-comment"># 1e-07</span><br><span class="hljs-built_in">print</span>(constants.Btu)                <span class="hljs-comment"># 1055.05585262</span><br><span class="hljs-built_in">print</span>(constants.Btu_IT)             <span class="hljs-comment"># 1055.05585262</span><br><span class="hljs-built_in">print</span>(constants.Btu_th)             <span class="hljs-comment"># 1054.3502644888888</span><br><span class="hljs-built_in">print</span>(constants.ton_TNT)            <span class="hljs-comment"># 4184000000.0</span><br><br><span class="hljs-built_in">print</span>(constants.hp)                 <span class="hljs-comment"># 745.6998715822701，功率</span><br><span class="hljs-built_in">print</span>(constants.horsepower)         <span class="hljs-comment"># 745.6998715822701</span><br><br><span class="hljs-built_in">print</span>(constants.dyn)                <span class="hljs-comment"># 1e-05，力量</span><br><span class="hljs-built_in">print</span>(constants.dyne)               <span class="hljs-comment"># 1e-05</span><br><span class="hljs-built_in">print</span>(constants.lbf)                <span class="hljs-comment"># 4.4482216152605</span><br><span class="hljs-built_in">print</span>(constants.pound_force)        <span class="hljs-comment"># 4.4482216152605</span><br><span class="hljs-built_in">print</span>(constants.kgf)                <span class="hljs-comment"># 9.80665</span><br><span class="hljs-built_in">print</span>(constants.kilogram_force)     <span class="hljs-comment"># 9.80665</span><br><br><span class="hljs-built_in">print</span>(constants.atm)                <span class="hljs-comment"># 101325.0，压力</span><br><span class="hljs-built_in">print</span>(constants.atmosphere)         <span class="hljs-comment"># 101325.0</span><br><span class="hljs-built_in">print</span>(constants.bar)                <span class="hljs-comment"># 100000.0</span><br><span class="hljs-built_in">print</span>(constants.torr)               <span class="hljs-comment"># 133.32236842105263</span><br><span class="hljs-built_in">print</span>(constants.mmHg)               <span class="hljs-comment"># 133.32236842105263</span><br><span class="hljs-built_in">print</span>(constants.psi)                <span class="hljs-comment"># 6894.757293168361</span><br><br><span class="hljs-built_in">print</span>(constants.hectare)            <span class="hljs-comment"># 10000.0，区域</span><br><span class="hljs-built_in">print</span>(constants.acre)               <span class="hljs-comment"># 4046.8564223999992</span><br><br><span class="hljs-built_in">print</span>(constants.liter)              <span class="hljs-comment"># 0.001，体积</span><br><span class="hljs-built_in">print</span>(constants.litre)              <span class="hljs-comment"># 0.001</span><br><span class="hljs-built_in">print</span>(constants.gallon)             <span class="hljs-comment"># 0.0037854117839999997</span><br><span class="hljs-built_in">print</span>(constants.gallon_US)          <span class="hljs-comment"># 0.0037854117839999997</span><br><span class="hljs-built_in">print</span>(constants.gallon_imp)         <span class="hljs-comment"># 0.00454609</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce)        <span class="hljs-comment"># 2.9573529562499998e-05</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce_US)     <span class="hljs-comment"># 2.9573529562499998e-05</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce_imp)    <span class="hljs-comment"># 2.84130625e-05</span><br><span class="hljs-built_in">print</span>(constants.barrel)             <span class="hljs-comment"># 0.15898729492799998</span><br><span class="hljs-built_in">print</span>(constants.bbl)                <span class="hljs-comment"># 0.15898729492799998</span><br><br><span class="hljs-built_in">print</span>(constants.kmh)                <span class="hljs-comment"># 0.2777777777777778，速度</span><br><span class="hljs-built_in">print</span>(constants.mph)                <span class="hljs-comment"># 0.44703999999999994</span><br><span class="hljs-built_in">print</span>(constants.mach)               <span class="hljs-comment"># 340.5</span><br><span class="hljs-built_in">print</span>(constants.speed_of_sound)     <span class="hljs-comment"># 340.5</span><br><span class="hljs-built_in">print</span>(constants.knot)               <span class="hljs-comment"># 0.5144444444444445</span><br><br><span class="hljs-built_in">print</span>(constants.zero_Celsius)       <span class="hljs-comment"># 273.15，温度</span><br><span class="hljs-built_in">print</span>(constants.degree_Fahrenheit)  <span class="hljs-comment"># 0.5555555555555556</span><br><br><span class="hljs-built_in">print</span>(constants.kibi)               <span class="hljs-comment"># 1024，二进制</span><br><span class="hljs-built_in">print</span>(constants.mebi)               <span class="hljs-comment"># 1048576</span><br><span class="hljs-built_in">print</span>(constants.gibi)               <span class="hljs-comment"># 1073741824</span><br><span class="hljs-built_in">print</span>(constants.tebi)               <span class="hljs-comment"># 1099511627776</span><br><span class="hljs-built_in">print</span>(constants.pebi)               <span class="hljs-comment"># 1125899906842624</span><br><span class="hljs-built_in">print</span>(constants.exbi)               <span class="hljs-comment"># 1152921504606846976</span><br><span class="hljs-built_in">print</span>(constants.zebi)               <span class="hljs-comment"># 1180591620717411303424</span><br><span class="hljs-built_in">print</span>(constants.yobi)               <span class="hljs-comment"># 1208925819614629174706176</span><br><br><span class="hljs-built_in">print</span>(constants.yotta)              <span class="hljs-comment"># 1e+24，公制</span><br><span class="hljs-built_in">print</span>(constants.zetta)              <span class="hljs-comment"># 1e+21</span><br><span class="hljs-built_in">print</span>(constants.exa)                <span class="hljs-comment"># 1e+18</span><br><span class="hljs-built_in">print</span>(constants.peta)               <span class="hljs-comment"># 1000000000000000.0</span><br><span class="hljs-built_in">print</span>(constants.tera)               <span class="hljs-comment"># 1000000000000.0</span><br><span class="hljs-built_in">print</span>(constants.giga)               <span class="hljs-comment"># 1000000000.0</span><br><span class="hljs-built_in">print</span>(constants.mega)               <span class="hljs-comment"># 1000000.0</span><br><span class="hljs-built_in">print</span>(constants.kilo)               <span class="hljs-comment"># 1000.0</span><br><span class="hljs-built_in">print</span>(constants.hecto)              <span class="hljs-comment"># 100.0</span><br><span class="hljs-built_in">print</span>(constants.deka)               <span class="hljs-comment"># 10.0</span><br><span class="hljs-built_in">print</span>(constants.deci)               <span class="hljs-comment"># 0.1</span><br><span class="hljs-built_in">print</span>(constants.centi)              <span class="hljs-comment"># 0.01</span><br><span class="hljs-built_in">print</span>(constants.milli)              <span class="hljs-comment"># 0.001</span><br><span class="hljs-built_in">print</span>(constants.micro)              <span class="hljs-comment"># 1e-06</span><br><span class="hljs-built_in">print</span>(constants.nano)               <span class="hljs-comment"># 1e-09</span><br><span class="hljs-built_in">print</span>(constants.pico)               <span class="hljs-comment"># 1e-12</span><br><span class="hljs-built_in">print</span>(constants.femto)              <span class="hljs-comment"># 1e-15</span><br><span class="hljs-built_in">print</span>(constants.atto)               <span class="hljs-comment"># 1e-18</span><br><span class="hljs-built_in">print</span>(constants.zepto)              <span class="hljs-comment"># 1e-21</span><br></code></pre></td></tr></table></figure><h1 id="3-优化器"><a href="#3-优化器" class="headerlink" title="3 优化器"></a>3 优化器</h1><ul><li>优化器<ul><li>在SciPy中定义的一组过程，找到函数的最小值，或找到方程的根。</li><li>NumPy能够为多项式和线性方程求根，但是不能为非线性方程求根。</li><li>例如：<code>x+cos(x)</code>，使用SciPy的optimize.root功能，接受两个必需的参数。<ul><li>x0，对根的初始猜测。</li><li>fun，表示方程的函数。</li></ul></li><li>optimze.root返回一个对象，其中包含有关解决方案的信息。</li><li>最小化函数<ul><li>非线性方程下一个函数代表一条曲线。</li><li>曲线有高点和低点，高点称为最大值，低点称为最小值。</li><li>整个曲线的最高点称为全局最大值，其余的称为局部最大值。</li><li>整个曲线的最低点称为全局最小值，其余的称为局部最小值。</li></ul></li><li>使用<code>scipy.optimize.minimize()</code>来最小化函数，接受以下参数。<ul><li>x0，对根的初始猜测。</li><li>fun，表示方程的函数。</li><li>options，定义额外参数的字典。</li><li>callback，每次优化迭代后调用的函数。</li><li>method，要使用的方法名称，<code>CG</code>、<code>BFGS</code>、<code>Newton-CG</code>、<code>L-BFGS-B</code>、<code>TNC</code>、<code>COBYLA</code>、<code>SLSQP</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> cos<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> root<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eqn</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + cos(x)<br>myroot = root(eqn, <span class="hljs-number">0</span>)               <span class="hljs-comment"># 求方程x + cos(x)的根</span><br><span class="hljs-built_in">print</span>(myroot)                       <span class="hljs-comment"># 打印有关解决方案的所有信息</span><br><span class="hljs-built_in">print</span>(myroot.x)                     <span class="hljs-comment"># 返回的对象包含有关解决方案的更多信息</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eqnr</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">return</span> y**<span class="hljs-number">2</span> + y + <span class="hljs-number">2</span><br>mymin = minimize(eqnr, <span class="hljs-number">0</span>, method=<span class="hljs-string">&#x27;BFGS&#x27;</span>)<br><span class="hljs-built_in">print</span>(mymin)                        <span class="hljs-comment"># 使用BFGS方法最小化y^2 + y + 2函数</span><br></code></pre></td></tr></table></figure><h1 id="4-稀疏数据"><a href="#4-稀疏数据" class="headerlink" title="4 稀疏数据"></a>4 稀疏数据</h1><ul><li>稀疏数据<ul><li>具有大部分未使用元素的数据，元素不携带任何信息。<ul><li>稀疏数据：表示大多数项目值为0的数据集。</li><li>密集数组：与稀疏数组相反，大多数值不为0。</li></ul></li><li>科学计算中处理线性代数的偏导数时会遇到稀疏数据。</li><li>SciPy有一个scipy.sparse模块，用于处理稀疏数据，主要使用两种类型的稀疏矩阵。<ul><li>CSC：压缩稀疏列。</li><li>CSR：压缩稀疏行，通过将数组传递给<code>scipy.sparse.csr_matrix()</code>函数来创建。</li></ul></li><li>还可以使用data属性，用于查看存储的数据，<code>count_nonzero()</code>方法可以计算非零数。</li><li><code>eliminate_zeros()</code>方法从矩阵中删除零条目，<code>sum_duplicates()</code>方法消除重复条目。</li><li><code>tocsc()</code>方法从CSR类型转换为CSC类型，稀疏矩阵同样还支持普通矩阵支持的所有操作。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix<br><br>arr1 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(csr_matrix(arr1))                       <span class="hljs-comment"># 从数组创建CSR矩阵</span><br><br>arr2 = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])<br><span class="hljs-built_in">print</span>(csr_matrix(arr2).data)                  <span class="hljs-comment"># 查看存储的数据，非零项</span><br><span class="hljs-built_in">print</span>(csr_matrix(arr2).count_nonzero())       <span class="hljs-comment"># 计算非零数</span><br><br>mat1 = csr_matrix(arr2)<br>mat1.eliminate_zeros()                        <span class="hljs-comment"># 删除零条目</span><br><span class="hljs-built_in">print</span>(mat1)<br><br>mat2 = csr_matrix(arr2)<br>mat2.sum_duplicates()                         <span class="hljs-comment"># 消除重复项</span><br><span class="hljs-built_in">print</span>(mat2)<br><br>arr3 = csr_matrix(arr2).tocsc()               <span class="hljs-comment"># 从CSR类型转换为CSC类型</span><br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure><h1 id="5-图表数据"><a href="#5-图表数据" class="headerlink" title="5 图表数据"></a>5 图表数据</h1><ul><li>图表数据<ul><li>使用scipy.sparse.csgraph模块处理图表数据结构。</li><li>邻接矩阵：Adjacency Matrix，表示顶点之间相邻关系的矩阵。<ul><li>通过<code>connected_components()</code>方法查找所有连接的组件。</li><li>迪杰斯特拉：通过<code>dijkstra()</code>方法在图中找到从一个元素到另一个元素的最短路径。<ul><li>limit：路径的最大权重。</li><li>indices：元素的索引，仅返回该元素的所有路径。</li><li>return_predecessors：布尔值，True将返回整个遍历路径，否则为False。</li></ul></li><li>弗洛伊德·沃歇尔：<code>floyd_warshall()</code>方法找到所有元素对之间的最短路径。</li><li>贝尔曼福特：<code>bellman_ford()</code>方法找到所有元素对之间的最短路径，也可处理负权重。</li><li>深度一阶<ul><li><code>depth_first_order()</code>方法从节点返回深度优先遍历。</li><li>这一方法采用了两个参数，即图表和遍历图的起始元素。</li></ul></li><li>广度优先顺序<ul><li><code>breadth_first_order()</code>方法从节点返回广度优先遍历。</li><li>这一方法采用了两个参数，包括图表和遍历图的起始元素。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> dijkstra<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> bellman_ford<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> floyd_warshall<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> depth_first_order<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> breadth_first_order<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> connected_components<br><br>arr1 = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br>arr2 = csr_matrix(arr1)<br><span class="hljs-built_in">print</span>(connected_components(arr2))             <span class="hljs-comment"># 查找所有连接的组件</span><br><br>arr3 = csr_matrix(arr1)                       <span class="hljs-comment"># 元素1到元素2的最短路径</span><br><span class="hljs-built_in">print</span>(dijkstra(arr3, return_predecessors=<span class="hljs-literal">True</span>, indices=<span class="hljs-number">0</span>))<br><br>arr4 = csr_matrix(arr1)                       <span class="hljs-comment"># 所有元素对之间的最短路径</span><br><span class="hljs-built_in">print</span>(floyd_warshall(arr4, return_predecessors=<span class="hljs-literal">True</span>))<br><br>arr5 = csr_matrix(arr1)                       <span class="hljs-comment"># 用给定的负权重找到元素1到元素2的最短路径</span><br><span class="hljs-built_in">print</span>(bellman_ford(arr5, return_predecessors=<span class="hljs-literal">True</span>, indices=<span class="hljs-number">0</span>))<br><br>arr6 = np.array([<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], <br>    [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>])<br>arr7 = csr_matrix(arr6)<br><span class="hljs-built_in">print</span>(depth_first_order(arr7, <span class="hljs-number">1</span>))             <span class="hljs-comment"># 对于给定的邻接矩阵，首先遍历图深度</span><br><br>arr8 = csr_matrix(arr6)<br><span class="hljs-built_in">print</span>(breadth_first_order(arr8, <span class="hljs-number">1</span>))           <span class="hljs-comment"># 对于给定的邻接矩阵，首先遍历图宽度</span><br></code></pre></td></tr></table></figure><h1 id="6-空间数据"><a href="#6-空间数据" class="headerlink" title="6 空间数据"></a>6 空间数据</h1><ul><li>空间数据<ul><li>指在几何空间中表示的数据，例如坐标系上的点，SciPy提供了scipy.spatial模块。</li><li>三角测量：利用三角形计算多边形的面积，通过点生成三角部分的方法用<code>Delaunay()</code>。</li><li>凸包：覆盖了所有给定点的最小多边形，可以使用<code>ConvexHull()</code>方法进行凸包的创建。</li><li>KDTrees：指针对最近邻查询优化的数据结构，有效地询问了哪些点最接近某个给定点。<ul><li><code>KDTree()</code>：返回一个KDTree对象。</li><li><code>query()</code>：返回最近邻点的距离和邻点的位置。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> KDTree<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> Delaunay<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> ConvexHull<br><br>points1 = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>]])<br>simplices = Delaunay(points1).simplices                 <span class="hljs-comment"># simplices属性创建了三角形符号的一般化</span><br>plt.triplot(points1[:, <span class="hljs-number">0</span>], points1[:, <span class="hljs-number">1</span>], simplices)<br>plt.scatter(points1[:, <span class="hljs-number">0</span>], points1[:, <span class="hljs-number">1</span>], color=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show()                                              <span class="hljs-comment"># 为points1矩阵创建三角部分</span><br><br>points2 = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>],<br>                    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])<br>hull = ConvexHull(points2)<br>hull_points = hull.simplices<br>plt.scatter(points2[ : , <span class="hljs-number">0</span>], points2[ : , <span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> simplex <span class="hljs-keyword">in</span> hull_points:<br>    plt.plot(points2[simplex,<span class="hljs-number">0</span>], points2[simplex,<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;k-&#x27;</span>)<br>plt.show()                                              <span class="hljs-comment"># 为points2矩阵创建凸包</span><br><br>points3 = [(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (-<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>)]<br>kdtree = KDTree(points3)<br>res = kdtree.query((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(res)                                              <span class="hljs-comment"># 找到点(1, 1)的最近邻点</span><br></code></pre></td></tr></table></figure><ul><li>距离矩阵<ul><li>两个向量之间的距离不仅可以是直线长度，还可以是它们与原点的夹角，或所需的单位步数等。</li><li>欧几里得距离：<code>euclidean()</code>。</li><li>余弦距离：是A和B两点之间的余弦角值，<code>cosine()</code>。</li><li>城市街区距离(曼哈顿距离)：采用四方向移动计算的距离，<code>cityblock()</code>。</li><li>汉明距离：两位不同的位比例，测量二进制序列距离的方法，<code>hamming()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cosine<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> hamming<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> euclidean<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cityblock<br><br>p1 = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>p2 = (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>res1 = euclidean(p1, p2)<br><span class="hljs-built_in">print</span>(res1)                                     <span class="hljs-comment"># 给定点之间的欧几里得距离</span><br><br>res2 = cosine(p1, p2)<br><span class="hljs-built_in">print</span>(res2)                                     <span class="hljs-comment"># 给定点之间的余弦距离</span><br><br>res3 = cityblock(p1, p2)<br><span class="hljs-built_in">print</span>(res3)                                     <span class="hljs-comment"># 给定点之间的街区距离</span><br><br>p3 = (<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>)<br>p4 = (<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>)<br>res4 = hamming(p3, p4)<br><span class="hljs-built_in">print</span>(res4)                                     <span class="hljs-comment"># 给定点之间的汉明距离</span><br></code></pre></td></tr></table></figure><h1 id="7-Matlab数组"><a href="#7-Matlab数组" class="headerlink" title="7 Matlab数组"></a>7 Matlab数组</h1><ul><li>Matlab数组<ul><li>SciPy提供了模块scipy.io，具有处理Matlab数组的功能。</li><li><code>savemat()</code>：以Matlab格式导出数据。<ul><li>mdict：包含数据的字典。</li><li>filename：保存数据的文件名。</li><li>do_compression：布尔值，指定是否压缩结果，默认为假。</li></ul></li><li><code>loadmat()</code>：从Matlab文件中导入数据，filename是必须参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> io<br><br>arr1 = np.arange(<span class="hljs-number">10</span>)<br>io.savemat(<span class="hljs-string">&#x27;arr1.mat&#x27;</span>, &#123;<span class="hljs-string">&quot;vec&quot;</span>: arr1&#125;)   <span class="hljs-comment"># 将arr1数组作为变量名vec导出到arr1.mat文件</span><br><br>arr2 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>,])<br>io.savemat(<span class="hljs-string">&#x27;arr2.mat&#x27;</span>, &#123;<span class="hljs-string">&quot;vec&quot;</span>: arr2&#125;)   <span class="hljs-comment"># Export</span><br>mydata = io.loadmat(<span class="hljs-string">&#x27;arr2.mat&#x27;</span>)         <span class="hljs-comment"># Import</span><br><span class="hljs-built_in">print</span>(mydata)                           <span class="hljs-comment"># 从arr2.mat文件导入数组，返回一个结构化数组</span><br><span class="hljs-built_in">print</span>(mydata[<span class="hljs-string">&#x27;vec&#x27;</span>])                    <span class="hljs-comment"># 仅显示来自matlab数据的数组</span><br><br>mydata = io.loadmat(<span class="hljs-string">&#x27;arr2.mat&#x27;</span>, squeeze_me=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(mydata[<span class="hljs-string">&#x27;vec&#x27;</span>])                    <span class="hljs-comment"># 参数去除额外增加的一维[]</span><br></code></pre></td></tr></table></figure><h1 id="8-插值"><a href="#8-插值" class="headerlink" title="8 插值"></a>8 插值</h1><ul><li>插值<ul><li>在给定点之间生成点的方法，例如点1和2，插值并找到点1.33和1.66。</li><li>机器学习中经常处理数据集中的缺失数据，插值通常用于替换这些值。</li><li>SciPy的scipy.interpolate模块具有许多处理插值的函数。<ul><li>一维插值：<code>interp1d()</code>，用于对具有1个变量的分布进行插值，点被拟合为曲线。</li><li>样条插值：<code>UnivariateSpline()</code>，点被拟合为一个叫样条多项式定义的分段函数。</li><li>径向基函数插值：使用<code>Rbf()</code>函数，径向基函数是对应于固定参考点定义的函数。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> Rbf<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> interp1d<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> UnivariateSpline<br><br>xs1 = np.arange(<span class="hljs-number">10</span>)<br>ys1 = <span class="hljs-number">2</span>*xs1 + <span class="hljs-number">1</span><br>interp_func = interp1d(xs1, ys1)<br>newarr1 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr1)                                  <span class="hljs-comment"># 对于给定的xs1和ys1插值从2.1、2.2...到2.9</span><br><br>xs2 = np.arange(<span class="hljs-number">10</span>)<br>ys2 = xs2**<span class="hljs-number">2</span> + np.sin(xs2) + <span class="hljs-number">1</span><br>interp_func = UnivariateSpline(xs2, ys2)<br>newarr2 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr2)                                  <span class="hljs-comment"># 为非线性点找到2.1、2.2...2.9的单变量样条插值</span><br><br>xs3 = np.arange(<span class="hljs-number">10</span>)<br>ys3 = xs3**<span class="hljs-number">2</span> + np.sin(xs3) + <span class="hljs-number">1</span><br>interp_func = Rbf(xs3, ys3)<br>newarr3 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr3)                                  <span class="hljs-comment"># 插入xs3和ys3并找到2.1、2.2...2.9的值</span><br></code></pre></td></tr></table></figure><h1 id="9-显著性测试"><a href="#9-显著性测试" class="headerlink" title="9 显著性测试"></a>9 显著性测试</h1><ul><li>显著性测试<ul><li>SciPy提供的scipy.stats模块，具有执行统计显著性检验的功能。</li><li>技术及关键字<ul><li>统计学假设：关于总体参数的假设。</li><li>零假设：假设观察结果在统计上不显著。</li><li>替代假设：假设观察结果是由于某种原因，零假设的替代品。</li><li>一尾测试：当假设仅测试值的一侧时，称为单尾检验。</li><li>二尾测试：当假设正在测试值的两侧时，称二尾测试。</li><li>阿尔法值：Alpha值是显著性水平。</li><li>P值：数据实际与极端的接近程度。</li><li>如果P值&lt;&#x3D;Alpha值，拒绝原假设并说数据具有统计显著性，否则接受原假设。</li></ul></li><li>T检验(双尾测试)<ul><li>用于确定两个变量的平均值之间是否存在显著差异，是否属于同一分布。</li><li><code>ttest_ind()</code>：用两个相同大小的样本，生成一个t统计量和p值的元组。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> ttest_ind<br><br>v1 = np.random.normal(size=<span class="hljs-number">100</span>)<br>v2 = np.random.normal(size=<span class="hljs-number">100</span>)<br><br>res = ttest_ind(v1, v2)                         <span class="hljs-comment"># 查找给定值v1和v2是否来自同一分布</span><br>pes = ttest_ind(v1, v2).pvalue                  <span class="hljs-comment"># 只返回p值</span><br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(pes)<br></code></pre></td></tr></table></figure><h2 id="9-1-KS测试"><a href="#9-1-KS测试" class="headerlink" title="9-1 KS测试"></a>9-1 KS测试</h2><ul><li>KS测试<ul><li>用于检查给定值是否服从分布，可以用作一尾或二尾测试，默认情况下是两个尾的。</li><li><code>kstest()</code>将要测试的值和CDF作为两个参数，CDF可以是字符串或返回概率的可调用函数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> kstest<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br>res = kstest(v, <span class="hljs-string">&#x27;norm&#x27;</span>)                         <span class="hljs-comment"># 查找给定值是否服从正态分布</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="9-2-统计描述"><a href="#9-2-统计描述" class="headerlink" title="9-2 统计描述"></a>9-2 统计描述</h2><ul><li>统计描述<ul><li>使用<code>describe()</code>函数，查看数组中值的摘要。</li><li>返回参数：观察次数、最小值和最大值、平均值、方差、偏度、峰度。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> describe<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br>res = describe(v)                               <span class="hljs-comment"># 显示数组中值的统计描述</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="9-3-正态性检验"><a href="#9-3-正态性检验" class="headerlink" title="9-3 正态性检验"></a>9-3 正态性检验</h2><ul><li>正态性检验<ul><li>基于偏度和峰度，使用<code>normaltest()</code>函数返回原假设的p值。</li><li>偏度：数据对称性的度量，正态分布时是0，负数数据向左倾斜，正数数据向右倾斜。</li><li>峰度：衡量数据是重尾还是轻尾正态分布的度量，正峰度是重尾，负峰度则轻微拖尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> normaltest<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> skew, kurtosis<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(skew(v))                                  <span class="hljs-comment"># 偏度</span><br><span class="hljs-built_in">print</span>(kurtosis(v))                              <span class="hljs-comment"># 峰度</span><br><span class="hljs-built_in">print</span>(normaltest(v))                            <span class="hljs-comment"># 查找数据是否来自正态分布</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SciPy</tag>
      
      <tag>科学计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Pandas</title>
    <link href="/2021/03/24/python/python07-python-pandas/"/>
    <url>/2021/03/24/python/python07-python-pandas/</url>
    
    <content type="html"><![CDATA[<p>Pandas既指Panel Data，又指Data Analysis，用于处理数据集，具有分析、清理、探索和操作数据的功能，由Wes McKinney于2008年创建。</p><span id="more"></span><h1 id="1-Pandas"><a href="#1-Pandas" class="headerlink" title="1 Pandas"></a>1 Pandas</h1><ul><li>Pandas<ul><li>命令窗口下使用<code>pip install pandas</code>进行安装。</li><li>通过import关键字将其导入应用程序，通常以<code>pd</code>别名替代。</li><li>检查Pandas版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd             <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>dataset = &#123;<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>],<br>    <span class="hljs-string">&quot;passings&quot;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>]<br>&#125;<br>var = pd.DataFrame(dataset)<br><span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-built_in">print</span>(pd.__version__)           <span class="hljs-comment"># 检查Pandas版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建系列"><a href="#2-创建系列" class="headerlink" title="2 创建系列"></a>2 创建系列</h1><ul><li>创建系列<ul><li>Pandas Series就像表格中的一列，是一个保存任何类型数据的一维数组。</li><li>若未指定其他内容，使用索引号标记值，第一个值索引为0，第二个为1，以此类推。</li><li>index参数创建自定义标签，创建系列时还可用键值对象，同理index参数指定标签。</li><li>Pandas中的数据集通常是多维表，即DataFrames，Series是列，DataFrame就是表。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-built_in">set</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br>var = pd.Series(<span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">print</span>(var)<br><span class="hljs-built_in">print</span>(var[<span class="hljs-number">0</span>])                   <span class="hljs-comment"># 返回Series的第一个值</span><br><br>var = pd.Series(<span class="hljs-built_in">set</span>, index = [<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>])<br><span class="hljs-built_in">print</span>(var)                      <span class="hljs-comment"># 创建自定义标签</span><br><span class="hljs-built_in">print</span>(var[<span class="hljs-string">&quot;y&quot;</span>])                 <span class="hljs-comment"># 返回标签为y的值</span><br><br>dic = &#123;<span class="hljs-string">&quot;day1&quot;</span>: <span class="hljs-number">420</span>, <span class="hljs-string">&quot;day2&quot;</span>: <span class="hljs-number">260</span>, <span class="hljs-string">&quot;day3&quot;</span>: <span class="hljs-number">300</span>&#125;<br>var = pd.Series(dic)            <span class="hljs-comment"># 从字典创建一个简单的Pandas系列</span><br><span class="hljs-built_in">print</span>(var)                      <span class="hljs-comment"># 字典的键成为标签</span><br>var = pd.Series(dic, index = [<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>])<br><span class="hljs-built_in">print</span>(var)<br><br>dat = &#123;<br>  <span class="hljs-string">&quot;cal&quot;</span>: [<span class="hljs-number">210</span>, <span class="hljs-number">260</span>, <span class="hljs-number">300</span>],<br>  <span class="hljs-string">&quot;dur&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>]<br>&#125;<br>var = pd.DataFrame(dat)         <span class="hljs-comment"># 从两个系列创建一个数据框DataFrame</span><br><span class="hljs-built_in">print</span>(var)<br></code></pre></td></tr></table></figure><h1 id="3-DataFrame"><a href="#3-DataFrame" class="headerlink" title="3 DataFrame"></a>3 DataFrame</h1><ul><li>DataFrame<ul><li>一种二维数据结构，例如二维数组或具有行和列的表。</li><li>使用loc属性返回一个或多个指定行，index参数自定义索引。</li><li>若数据集存储在文件中，Pandas可将其加载到DataFrame中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>dat = &#123;<br>  <span class="hljs-string">&quot;cal&quot;</span>: [<span class="hljs-number">210</span>, <span class="hljs-number">260</span>, <span class="hljs-number">300</span>],<br>  <span class="hljs-string">&quot;dur&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>]<br>&#125;<br>var = pd.DataFrame(dat)         <span class="hljs-comment"># 从两个系列创建一个数据框DataFrame</span><br><span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-built_in">print</span>(var.loc[<span class="hljs-number">0</span>])               <span class="hljs-comment"># 返回第0行，返回Pandas Series</span><br><span class="hljs-built_in">print</span>(var.loc[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])          <span class="hljs-comment"># 返回第0行和第1行，返回Pandas DataFrame</span><br><br>var = pd.DataFrame(dat, index = [<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>, <span class="hljs-string">&quot;day3&quot;</span>])<br><span class="hljs-built_in">print</span>(var)                      <span class="hljs-comment"># 添加名称列表给每行命令</span><br><span class="hljs-built_in">print</span>(var.loc[<span class="hljs-string">&quot;day2&quot;</span>])          <span class="hljs-comment"># 索引返回指定的行</span><br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">  Language  Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">      Java     120</span><br><span class="hljs-string">    Golang     112</span><br><span class="hljs-string">       C++     155</span><br><span class="hljs-string">        C#     110</span><br><span class="hljs-string">         C      78</span><br><span class="hljs-string">JavaScript      99</span><br><span class="hljs-string">      HTML      35</span><br><span class="hljs-string">       CSS      45</span><br><span class="hljs-string">       PHP      75</span><br><span class="hljs-string">     React      15</span><br><span class="hljs-string">         R      25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)   <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h2 id="3-1-读取CSV"><a href="#3-1-读取CSV" class="headerlink" title="3-1 读取CSV"></a>3-1 读取CSV</h2><ul><li>读取CSV<ul><li><code>to_string()</code>：用于打印整个DataFrame。</li><li>若包含多行的大型DataFrame，Pandas将只返回前5行和最后5行。</li><li>可使用<code>pd.options.display.max_rows</code>语句检查系统的最大行数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">  Language  Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">      Java     120</span><br><span class="hljs-string">    Golang     112</span><br><span class="hljs-string">       C++     155</span><br><span class="hljs-string">        C#     110</span><br><span class="hljs-string">         C      78</span><br><span class="hljs-string">JavaScript      99</span><br><span class="hljs-string">      HTML      35</span><br><span class="hljs-string">       CSS      45</span><br><span class="hljs-string">       PHP      75</span><br><span class="hljs-string">     React      15</span><br><span class="hljs-string">         R      25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)       <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><span class="hljs-built_in">print</span>(pd.options.display.max_rows)  <span class="hljs-comment"># 检查返回的最大行数</span><br><br>pd.options.display.max_rows = <span class="hljs-number">5</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)       <span class="hljs-comment"># 更改最大行数，只显示五行</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h2 id="3-2-读取JSON"><a href="#3-2-读取JSON" class="headerlink" title="3-2 读取JSON"></a>3-2 读取JSON</h2><ul><li>读取JSON<ul><li><code>to_string()</code>：用于打印整个DataFrame，JSON对象具有与字典相同的格式。</li><li>若JSON代码不在文件中，在Python字典里，则可直接将其加载到DataFrame中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;Duration&quot;: &#123; &quot;0&quot;: 60, &quot;1&quot;: 60, &quot;2&quot;: 60, &quot;3&quot;: 45, &quot;4&quot;: 45, &quot;5&quot;: 60 &#125;,</span><br><span class="hljs-string">    &quot;Pulse&quot;: &#123; &quot;0&quot;: 110, &quot;1&quot;: 117, &quot;2&quot;: 103, &quot;3&quot;: 109, &quot;4&quot;: 117, &quot;5&quot;: 102 &#125;,</span><br><span class="hljs-string">    &quot;Maxpulse&quot;: &#123; &quot;0&quot;: 130, &quot;1&quot;: 145, &quot;2&quot;: 135, &quot;3&quot;: 175, &quot;4&quot;: 148, &quot;5&quot;: 127 &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_json(<span class="hljs-string">r&quot;data.json&quot;</span>)   <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>data = &#123;<br><span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">71</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">73</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">75</span>&#125;, <br><span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">35</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">37</span>&#125;, <br><span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">57</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">59</span>&#125;<br>&#125;<br>df = pd.DataFrame(data)           <span class="hljs-comment"># Python字典加载到DataFrame中</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h1 id="4-分析数据"><a href="#4-分析数据" class="headerlink" title="4 分析数据"></a>4 分析数据</h1><ul><li>分析数据<ul><li><code>head()</code>：从顶部开始返回标题和指定数量的行，不指定行数时默认返回前5行。</li><li><code>tail()</code>：从底部开始返回标题和指定数量的行，不指定行数时默认返回后5行。</li><li><code>info()</code>：打印有关数据的信息，返回RangeIndex行数和Columns列数、每列名称和数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">  Language  Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">      Java     120</span><br><span class="hljs-string">    Golang     112</span><br><span class="hljs-string">       C++     155</span><br><span class="hljs-string">        C#     110</span><br><span class="hljs-string">         C      78</span><br><span class="hljs-string">JavaScript      99</span><br><span class="hljs-string">      HTML      35</span><br><span class="hljs-string">       CSS      45</span><br><span class="hljs-string">       PHP      75</span><br><span class="hljs-string">     React      15</span><br><span class="hljs-string">         R      25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)   <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df.head())                <span class="hljs-comment"># 打印前5行</span><br><span class="hljs-built_in">print</span>(df.head(<span class="hljs-number">3</span>))               <span class="hljs-comment"># 打印前3行</span><br><br><span class="hljs-built_in">print</span>(df.tail())                <span class="hljs-comment"># 打印后5行</span><br><span class="hljs-built_in">print</span>(df.tail(<span class="hljs-number">3</span>))               <span class="hljs-comment"># 打印后3行</span><br><br><span class="hljs-built_in">print</span>(df.info())                <span class="hljs-comment"># 打印有关数据的信息</span><br></code></pre></td></tr></table></figure><h1 id="5-清理数据"><a href="#5-清理数据" class="headerlink" title="5 清理数据"></a>5 清理数据</h1><ul><li>清理数据<ul><li>清理意味着修复数据集中的不良数据，可能是空单元格、数据格式错误、错误数据或重复数据。</li><li><code>dropna()</code>：删除包含空单元格的行，返回新DataFrame且不改变原来的，inplace参数可以改变。</li><li><code>fillna()</code>：允许用一个值替换空单元格，通过指定DataFrame的列名，可以替换指定列的空值。</li><li>平均值<code>mean()</code>、中位数<code>median()</code>和众数<code>mode()</code>方法计算指定列的相应值，用于替换空单元格。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data1 = data2 = data3 = data4 = data5 = data6 = &#123;<br><span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">60</span>&#125;, <br><span class="hljs-string">&quot;Date&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-string">&quot;2020/12/21&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>: np.NaN, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;2020/12/18&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;2020/12/28&quot;</span>&#125;,  <br><span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">103</span>&#125;, <br><span class="hljs-string">&quot;Maxpulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">131</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">112</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">132</span>&#125;,  <br><span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">364.2</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">282.0</span>, <span class="hljs-string">&quot;2&quot;</span>: np.NaN, <span class="hljs-string">&quot;3&quot;</span>: np.NaN&#125;<br>&#125;<br>df = pd.DataFrame(data1)            <span class="hljs-comment"># Python字典加载到DataFrame中</span><br>new_df = df.dropna()                <span class="hljs-comment"># 返回没有空单元格的DataFrame</span><br><span class="hljs-built_in">print</span>(new_df.to_string())<br><br><span class="hljs-built_in">print</span>(df.to_string())<br>df.dropna(inplace = <span class="hljs-literal">True</span>)           <span class="hljs-comment"># 改变原始DataFrame</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data2)<br>df.fillna(<span class="hljs-number">120</span>, inplace = <span class="hljs-literal">True</span>)      <span class="hljs-comment"># 数字120替换NULL值</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data3)<br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(<span class="hljs-number">150</span>, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 替换指定列的NULL值</span><br><br>df = pd.DataFrame(data4)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].mean()          <span class="hljs-comment"># 计算平均值，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data5)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].median()        <span class="hljs-comment"># 计算中位数，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data6)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].mode()[<span class="hljs-number">0</span>]       <span class="hljs-comment"># 计算众数，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><ul><li>错误格式<ul><li>删除相应行，或将列中的所有单元格转换为相同格式。</li><li><code>to_datetime()</code>：将列中的日期元素转换为日期格式。</li><li><code>dropna()</code>：NaT值即空日期，可将其处理为NULL值，删除对应行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data1 = data2 = &#123;<br><span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">60</span>&#125;, <br><span class="hljs-string">&quot;Date&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: np.NaN, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;2020/12/23&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;2020/12/24&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">20201226</span>&#125;,  <br><span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">130</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">100</span>&#125;, <br><span class="hljs-string">&quot;Maxpulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">132</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">120</span>&#125;,  <br><span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">282.0</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">300.0</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">246.0</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">250.0</span>&#125;<br>&#125;<br>df = pd.DataFrame(data1)            <span class="hljs-comment"># Python字典加载到DataFrame中</span><br>df[<span class="hljs-string">&quot;Date&quot;</span>] = pd.to_datetime(df[<span class="hljs-string">&quot;Date&quot;</span>])<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 转换为日期</span><br><br>df = pd.DataFrame(data2)<br>df.dropna(subset=[<span class="hljs-string">&quot;Date&quot;</span>], inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 删除日期为NULL值的行</span><br></code></pre></td></tr></table></figure><ul><li>错误数据<ul><li>错误数据不一定是空单元格或错误格式，也可能只是错误的。</li><li>错误数据可能是拼写错误，可以在对应行插入数据进行替换。</li><li>另一种处理方法就是使用<code>drop()</code>方法删除包含错误数据的行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; errorData.csv</span><br><span class="hljs-string">Duration          Date  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      60    2020/12/01    110       130     409.1</span><br><span class="hljs-string">      60    2020/12/02    117       145     479.0</span><br><span class="hljs-string">     600    2020/12/03    103       135     340.0</span><br><span class="hljs-string">      45    2020/12/04    109       175     282.4</span><br><span class="hljs-string">     450    2020/12/05    117       148     406.0</span><br><span class="hljs-string">      60    2020/12/06    102       127     300.0</span><br><span class="hljs-string">      60    2020/12/07    110       136     374.0</span><br><span class="hljs-string">      30    2020/12/09    109       133     195.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">&quot;errorData.csv&quot;</span>)<br>df.loc[<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Duration&quot;</span>] = <span class="hljs-number">50</span>          <span class="hljs-comment"># 第2行Duration设置为50</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.read_csv(<span class="hljs-string">&quot;errorData.csv&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.index:                  <span class="hljs-comment"># 若是大数据集替换，可创建一些规则</span><br>    <span class="hljs-keyword">if</span> df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] &gt; <span class="hljs-number">100</span>:<br>        df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.read_csv(<span class="hljs-string">&quot;errorData.csv&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.index:                  <span class="hljs-comment"># 创建规则，删除行</span><br>    <span class="hljs-keyword">if</span> df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] &gt; <span class="hljs-number">50</span>:<br>        df.drop(x, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><ul><li>重复数据<ul><li><code>duplicated()</code>：为每一行返回一个布尔值，重复将返回True，否则为False。</li><li><code>drop_duplicates()</code>：删除重复项，inplace参数会从原始DataFrame中删除。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; repetData.csv</span><br><span class="hljs-string">Duration          Date  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      65    2020/12/01    110       130     409.1</span><br><span class="hljs-string">      60    2020/12/02    117       145     479.0</span><br><span class="hljs-string">      60    2020/12/02    117       145     479.0</span><br><span class="hljs-string">      45    2020/12/04    109       175     282.4</span><br><span class="hljs-string">      45    2020/12/05    117       148     406.0</span><br><span class="hljs-string">      60    2020/12/06    102       127     300.0</span><br><span class="hljs-string">      60    2020/12/07    110       136     374.0</span><br><span class="hljs-string">      30    2020/12/09    109       133     195.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;repetData.csv&quot;</span>)  <span class="hljs-comment"># 重复的行将返回True，否则为False</span><br><span class="hljs-built_in">print</span>(df.duplicated())<br><br>df.drop_duplicates(inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><h1 id="6-数据相关性"><a href="#6-数据相关性" class="headerlink" title="6 数据相关性"></a>6 数据相关性</h1><ul><li>数据相关性<ul><li><code>corr()</code>：计算数据集中每一列之间的关系，该方法将忽略非数字列。</li><li>返回结果是一个包含大量数字的表格，这些数字表示两列之间的关系。</li><li>数字从-1到1不等。<ul><li>1表示完全相关，数据集中，每次第一列中的值上升，另一个值也会上升。</li><li>0.9表示良好相关，增加一个值，另一个可能也增加。</li><li>-0.9也是良好相关，增加一个值，另一个可能会下降。</li><li>0.2表示不良相关，意味着如果一个值上升，另一个值不一定上升。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; relatData.csv</span><br><span class="hljs-string">Duration  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      60    110       130     409.1</span><br><span class="hljs-string">      60    117       145     479.0</span><br><span class="hljs-string">      60    103       135     340.0</span><br><span class="hljs-string">      45    109       175     282.4</span><br><span class="hljs-string">      45    117       148     406.0</span><br><span class="hljs-string">      60    102       127     300.0</span><br><span class="hljs-string">      60    110       136     374.0</span><br><span class="hljs-string">      45    104       134     253.3</span><br><span class="hljs-string">      30    109       133     195.1</span><br><span class="hljs-string">      60     98       124     269.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;relatData.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><span class="hljs-built_in">print</span>(df.corr())                    <span class="hljs-comment"># 显示列之间的关系</span><br></code></pre></td></tr></table></figure><h1 id="7-可视化图表"><a href="#7-可视化图表" class="headerlink" title="7 可视化图表"></a>7 可视化图表</h1><ul><li>可视化图表<ul><li><code>plot()</code>方法创建图表，也可以使用Matplotlib库的子模块Pyplot创建。</li><li>直方图：指定参数<code>kind=&quot;hist&quot;</code>，并且只需要一列。</li><li>散点图：指定参数<code>kind=&quot;scatter&quot;</code>，并且需要x轴和y轴。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt     <span class="hljs-comment"># 从Matplotlib导入pyplot</span><br><br><span class="hljs-string">&quot;&quot;&quot; relatData.csv</span><br><span class="hljs-string">Duration  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      60    110       130     409.1</span><br><span class="hljs-string">      60    117       145     479.0</span><br><span class="hljs-string">      60    103       135     340.0</span><br><span class="hljs-string">      45    109       175     282.4</span><br><span class="hljs-string">      45    117       148     406.0</span><br><span class="hljs-string">      60    102       127     300.0</span><br><span class="hljs-string">      60    110       136     374.0</span><br><span class="hljs-string">      45    104       134     253.3</span><br><span class="hljs-string">      30    109       133     195.1</span><br><span class="hljs-string">      60     98       124     269.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;relatData.csv&quot;</span>)<br>df.plot()<br>plt.show()<br><br>df[<span class="hljs-string">&quot;Duration&quot;</span>].plot(kind = <span class="hljs-string">&quot;hist&quot;</span>)<br>plt.show()                          <span class="hljs-comment"># 直方图</span><br><br>df.plot(kind = <span class="hljs-string">&quot;scatter&quot;</span>, x = <span class="hljs-string">&quot;Duration&quot;</span>, y = <span class="hljs-string">&quot;Calories&quot;</span>)<br>plt.show()                          <span class="hljs-comment"># 散点图</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 函数</title>
    <link href="/2021/03/05/python/python06-python-numpy-han-shu/"/>
    <url>/2021/03/05/python/python06-python-numpy-han-shu/</url>
    
    <content type="html"><![CDATA[<p>NumPy数组存储在内存中的一个连续位置，因此进程可以非常有效地访问和操作，此行为在计算机科学中被称为局部性。</p><span id="more"></span><h1 id="1-Ufunc"><a href="#1-Ufunc" class="headerlink" title="1 Ufunc"></a>1 Ufunc</h1><ul><li>Ufunc<ul><li>即通用函数，指对ndarray对象进行操作的NumPy函数，用于实现矢量化。</li><li>ufunc提供了广播和其他方法，对计算非常有帮助，也提供了额外的参数。<ul><li>out：复制返回值的输出数组。</li><li>dtype：定义元素的返回类型。</li><li>where：布尔数组或条件定义操作应在哪里发生。</li></ul></li><li>矢量化：将迭代语句转换为基于向量的操作，现代CPU优化了此类操作，速度更快。</li><li>例如：添加两个列表<code>[1、2、3、4]</code>和<code>[4、5、6、7]</code>的元素。<ul><li>方法一：先遍历两个列表，然后再对列表的每个元素求和。</li><li>方法二：ufunc提供了<code>add(x, y)</code>函数，会产生相同的结果。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>y = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>z = []<br><span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, y):          <span class="hljs-comment"># 使用Python的内置zip()</span><br>    z.append(i + j)<br><span class="hljs-built_in">print</span>(z)<br><br>k = np.add(x, y)                <span class="hljs-comment"># 使用ufunc的add()函数</span><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><ul><li>创建Ufunc<ul><li>创建ufunc，必须定义一个函数，类似Python中使用普通函数。</li><li>用<code>frompyfunc()</code>将其添加到NumPy ufunc库中，有以下参数。<ul><li>function：函数名称。</li><li>inputs：输入参数(数组)的数量。</li><li>outputs：输出参数(数组)的数量。</li></ul></li><li>检查是否为ufunc函数，应返回<code>&lt;class &#39;numpy.ufunc&#39;&gt;</code>。</li><li>if语句中测试函数是否为ufunc，需要使用<code>numpy.ufunc</code>值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x+y<br>myadd = np.frompyfunc(myadd, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)          <span class="hljs-comment"># 创建ufunc函数</span><br><span class="hljs-built_in">print</span>(myadd([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myadd))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.add))                         <span class="hljs-comment"># 检查函数是否为ufunc</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.concatenate))<br><span class="hljs-comment"># print(type(np.blahblah))                  # 函数无法识别，返回错误</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(np.add) == np.ufunc:                <span class="hljs-comment"># numpy.ufunc</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Add is ufunc.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Add is not ufunc.&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-简单算术"><a href="#2-简单算术" class="headerlink" title="2 简单算术"></a>2 简单算术</h1><ul><li>简单算术<ul><li>加：<code>add()</code>函数将两个数组的内容相加，并在一个新数组中返回结果。</li><li>减：<code>subtract()</code>函数将两个数组的内容相减，并在一个新数组中返回结果。</li><li>乘：<code>multiply()</code>函数将两个数组的内容相乘，并在一个新数组中返回结果。</li><li>除：<code>divide()</code>函数将两个数组的内容相除，并且在一个新数组中返回结果。</li><li>幂：<code>power()</code>函数将一个数组的值乘以另一个数组值的幂并在新数组中返回结果。</li><li>余：<code>mod()</code>和<code>remainder()</code>函数都会在一个新数组中返回两个数组值相除的余数。</li><li>商和模：<code>divmod()</code>函数，返回值是两个数组，第一个数组包含商，第二个数组包含模。</li><li>绝对值：<code>absolute()</code>和<code>abs()</code>函数，尽量用<code>absolute()</code>，避免与<code>math.abs()</code>混淆。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>])<br>arr2 = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>])<br>arr3 = np.add(arr1, arr2)                   <span class="hljs-comment"># 将arr1的值添加到arr2中</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.subtract(arr1, arr2)              <span class="hljs-comment"># 将arr1的值减去arr2的值</span><br><span class="hljs-built_in">print</span>(arr4)<br>arr4 = np.absolute(arr4)                    <span class="hljs-comment"># 返回arr4值的绝对值</span><br><span class="hljs-built_in">print</span>(arr4)<br><br>arr5 = np.divide(arr1, arr2)                <span class="hljs-comment"># 将arr1的值除以arr2的值</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>arr6 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br>arr7 = np.power(arr1, arr6)                 <span class="hljs-comment"># 将arr1的值提高到arr6值的幂</span><br><span class="hljs-built_in">print</span>(arr7)<br><br>arr8 = np.mod(arr1, arr6)                   <span class="hljs-comment"># 返回arr1除以arr6值的余数</span><br><span class="hljs-built_in">print</span>(arr8)<br>arr8 = np.remainder(arr1, arr6)<br><span class="hljs-built_in">print</span>(arr8)<br><br>arr9 = np.<span class="hljs-built_in">divmod</span>(arr1, arr6)                <span class="hljs-comment"># 返回arr1除以arr6的商和模</span><br><span class="hljs-built_in">print</span>(arr9)<br></code></pre></td></tr></table></figure><h2 id="2-1-四舍五入"><a href="#2-1-四舍五入" class="headerlink" title="2-1 四舍五入"></a>2-1 四舍五入</h2><ul><li>四舍五入<ul><li>NumPy中主要有如下五种对小数进行四舍五入的方法。</li><li>通过<code>around()</code>函数将元素四舍五入到小数点后指定位。</li><li><code>trunc()</code>和<code>fix()</code>函数删除小数并返回最接近零的浮点数。</li><li>使用<code>ceil()</code>函数将小数四舍五入到最接近的较高整数(向上取整)。</li><li>使用<code>floor()</code>函数将小数四舍五入到最接近的较低整数(向下取整)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.around(<span class="hljs-number">3.1666</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(arr1)                     <span class="hljs-comment"># 将3.1666四舍五入到小数点后2位</span><br><br>arr2 = np.trunc([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr2)                     <span class="hljs-comment"># 截断数组元素</span><br><br>arr3 = np.fix([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.ceil([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr4)                     <span class="hljs-comment"># 向上取整</span><br><br>arr5 = np.floor([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr5)                     <span class="hljs-comment"># 返回一个浮点数，向下取整，与trunc()函数返回的不同</span><br></code></pre></td></tr></table></figure><h2 id="2-2-对数函数"><a href="#2-2-对数函数" class="headerlink" title="2-2 对数函数"></a>2-2 对数函数</h2><ul><li>对数函数<ul><li>NumPy提供了以e、2和10为底的log函数，不提供指定底数的log函数。</li><li>若无法计算log函数，那么所有的log函数都将在元素中放置-inf或inf。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><br>arr = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)          <span class="hljs-comment"># 返回一个从1-10的整数数组</span><br><span class="hljs-built_in">print</span>(np.log(arr))              <span class="hljs-comment"># 自然对数</span><br><span class="hljs-built_in">print</span>(np.log2(arr))<br><span class="hljs-built_in">print</span>(np.log10(arr))<br><br>nplog = np.frompyfunc(log, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(nplog(<span class="hljs-number">100</span>, <span class="hljs-number">15</span>))           <span class="hljs-comment"># 指定底数为15的log函数</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数组求和"><a href="#2-3-数组求和" class="headerlink" title="2-3 数组求和"></a>2-3 数组求和</h2><ul><li>数组求和<ul><li>加法是在两个参数之间完成的，而求和则是在n个元素之间进行的。</li><li>轴上求和：指定<code>axis=1</code>，NumPy将对每个数组中的数字进行求和。</li><li>部分求和：使用<code>cumsum()</code>函数，例如<code>[1, 2, 3]</code>部分求和为<code>[1, 1+2, 1+2+3]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr3 = np.add(arr1, arr2)       <span class="hljs-comment"># 将arr1的值添加到arr2的值，加法</span><br><span class="hljs-built_in">print</span>(arr3)<br>arr3 = np.<span class="hljs-built_in">sum</span>([arr1, arr2])     <span class="hljs-comment"># 将arr1的值与arr2的值相加，求和</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.<span class="hljs-built_in">sum</span>([arr1, arr2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr4)                     <span class="hljs-comment"># 在arr1的轴上求和</span><br><br>arr5 = np.cumsum(arr1)          <span class="hljs-comment"># 累计求和(部分求和)</span><br><span class="hljs-built_in">print</span>(arr5)<br></code></pre></td></tr></table></figure><h2 id="2-4-数组乘积"><a href="#2-4-数组乘积" class="headerlink" title="2-4 数组乘积"></a>2-4 数组乘积</h2><ul><li>数组乘积<ul><li>查找数组中元素的乘积，可以使用<code>prod()</code>函数。</li><li>轴上乘积：指定<code>axis=1</code>，NumPy将返回每个数组的乘积。</li><li>部分乘积：使用<code>cumprod()</code>函数，例如<code>[1, 2, 3]</code>部分乘积为<code>[1, 1*2, 1*2*3]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>arr2 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br>arr3 = np.prod(arr1)            <span class="hljs-comment"># arr1数组元素的乘积，1*2*3*4</span><br><span class="hljs-built_in">print</span>(arr3)<br>arr3 = np.prod([arr1, arr2])    <span class="hljs-comment"># arr1和arr2元素的乘积，1*2*3*4*5*6*7*8</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.prod([arr1, arr2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr4)                     <span class="hljs-comment"># 在arr1的轴上乘积</span><br><br>arr5 = np.cumprod(arr2)         <span class="hljs-comment"># 累计乘积(部分乘积)</span><br><span class="hljs-built_in">print</span>(arr5)<br></code></pre></td></tr></table></figure><h2 id="2-5-数组差集"><a href="#2-5-数组差集" class="headerlink" title="2-5 数组差集"></a>2-5 数组差集</h2><ul><li>数组差集<ul><li>使用<code>diff()</code>函数，例如<code>[1, 2, 3]</code>差集是<code>[2-1, 3-2]</code>。</li><li>通过给定参数n重复执行操作，例如n&#x3D;2，<code>[1, 2, 3]</code>差集再差集是<code>[1-1]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>])<br>arr2 = np.diff(arr1)            <span class="hljs-comment"># arr1数组元素的差集，[15-10, 25-15, 5-25]</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.diff(arr1, n=<span class="hljs-number">2</span>)       <span class="hljs-comment"># arr1数组元素的差集再差集，[10-5, -20-10]</span><br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure><h1 id="3-三角函数"><a href="#3-三角函数" class="headerlink" title="3 三角函数"></a>3 三角函数</h1><ul><li>三角函数<ul><li>NumPy提供正弦函数<code>sin()</code>、余弦函数<code>cos()</code>和正切函数<code>tan()</code>。</li><li>三角函数默认将弧度作为参数<ul><li>通过<code>deg2rad()</code>函数，可以将数组中的所有值转换为弧度。</li><li>使用<code>rad2deg()</code>函数，可以将数组中的所有值转换为度数。</li></ul></li><li>还提供了反正弦<code>arcsin()</code>、反余弦<code>arccos()</code>和反正切<code>arctan()</code>，生成弧度值(角度)。</li><li>NumPy提供<code>hypot()</code>函数，基于毕达哥拉斯定理(即勾股定理)获取基值和垂直值并产生斜边。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.sin(np.pi/<span class="hljs-number">2</span>)             <span class="hljs-comment"># PI/2的正弦值</span><br><span class="hljs-built_in">print</span>(x)<br>arr1 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi/<span class="hljs-number">3</span>, np.pi/<span class="hljs-number">4</span>, np.pi/<span class="hljs-number">5</span>])<br>arr2 = np.sin(arr1)             <span class="hljs-comment"># 数组arr1所有值的正弦值</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.array([<span class="hljs-number">90</span>, <span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">360</span>])<br>arr4 = np.deg2rad(arr3)         <span class="hljs-comment"># 将数组arr3所有值转换为弧度</span><br><span class="hljs-built_in">print</span>(arr4)<br>arr5 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi, <span class="hljs-number">1.5</span>*np.pi, <span class="hljs-number">2</span>*np.pi])<br>arr6 = np.rad2deg(arr5)         <span class="hljs-comment"># 将数组arr5所有值转换为度数</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>y = np.arcsin(<span class="hljs-number">1.0</span>)              <span class="hljs-comment"># 1.0的角度</span><br><span class="hljs-built_in">print</span>(y)<br>arr7 = np.array([<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>])<br>arr8 = np.arcsin(arr7)          <span class="hljs-comment"># 数组arr7中所有正弦值的角度</span><br><span class="hljs-built_in">print</span>(arr8)<br><br>base = <span class="hljs-number">3</span><br>perp = <span class="hljs-number">4</span><br>z = np.hypot(base, perp)        <span class="hljs-comment"># 勾股定理求斜边</span><br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h1 id="4-双曲函数"><a href="#4-双曲函数" class="headerlink" title="4 双曲函数"></a>4 双曲函数</h1><ul><li>双曲函数<ul><li>NumPy提供双曲正弦函数<code>sinh()</code>、双曲余弦函数<code>cosh()</code>和双曲正切函数<code>tanh()</code>。</li><li>还提供了反双曲正弦<code>arcsinh()</code>、反双曲余弦<code>arccosh()</code>和反双曲正切<code>arctanh()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.sinh(np.pi/<span class="hljs-number">2</span>)            <span class="hljs-comment"># PI/2的双曲正弦值</span><br><span class="hljs-built_in">print</span>(x)<br>arr1 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi/<span class="hljs-number">3</span>, np.pi/<span class="hljs-number">4</span>, np.pi/<span class="hljs-number">5</span>])<br>arr2 = np.cosh(arr1)            <span class="hljs-comment"># 数组arr1所有值的双曲余弦值</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>y = np.arcsinh(<span class="hljs-number">1.0</span>)             <span class="hljs-comment"># 1.0的角度</span><br><span class="hljs-built_in">print</span>(y)<br>arr3 = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>])<br>arr4 = np.arctanh(arr3)         <span class="hljs-comment"># 数组arr3所有tanh值的角度</span><br><span class="hljs-built_in">print</span>(arr4)<br></code></pre></td></tr></table></figure><h1 id="5-集合操作"><a href="#5-集合操作" class="headerlink" title="5 集合操作"></a>5 集合操作</h1><ul><li>集合操作<ul><li>创建一个集合数组，集合数组只能是一维数组。</li><li><code>unique()</code>：可以从数组中查找唯一元素(集合)。</li><li><code>union1d()</code>：可以查找两个数组的唯一值(并集)。</li><li><code>intersect1d()</code>：仅查找两个数组都存在的值(交集)。<ul><li>可选参数assume_unique为True时加快计算速度。</li><li>在处理集合时，assume_unique应始终设置为True。</li></ul></li><li><code>setdiff1d()</code>：仅查找一个数组中不存在于另一个数组中的值(差集)，参数assume_unique同上。</li><li><code>setxor1d()</code>：只属于一个集合不属于另一个集合的元素集合(对称差集)，参数assume_unique同上。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br>arr2 = np.unique(arr1)          <span class="hljs-comment"># 将具有重复元素的数组转换为集合</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>arr4 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr5 = np.union1d(arr3, arr4)   <span class="hljs-comment"># arr3和arr4的并集</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>arr6 = np.intersect1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr6)                     <span class="hljs-comment"># arr3和arr4的交集</span><br><br>arr7 = np.setdiff1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr7)                     <span class="hljs-comment"># arr3和arr4的差集</span><br><br>arr8 = np.setxor1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr8)                     <span class="hljs-comment"># arr3和arr4的对称差集</span><br></code></pre></td></tr></table></figure><h1 id="6-最小公倍数"><a href="#6-最小公倍数" class="headerlink" title="6 最小公倍数"></a>6 最小公倍数</h1><ul><li>最小公倍数<ul><li>使用<code>lcm()</code>函数，可以查找两个数的最小公倍数。</li><li>查找数组中所有值的最小公倍数用<code>reduce()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>num1 = <span class="hljs-number">4</span><br>num2 = <span class="hljs-number">6</span><br>x = np.lcm(num1, num2)          <span class="hljs-comment"># num1和num2的最小公倍数</span><br><span class="hljs-built_in">print</span>(x)<br><br>arr1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>])<br>y = np.lcm.reduce(arr1)         <span class="hljs-comment"># 数组arr1所有元素的最小公倍数</span><br><span class="hljs-built_in">print</span>(y)<br><br>arr2 = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)         <span class="hljs-comment"># 包含1-10所有整数的数组最小公倍数</span><br>z = np.lcm.reduce(arr2)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h1 id="7-最大公约数"><a href="#7-最大公约数" class="headerlink" title="7 最大公约数"></a>7 最大公约数</h1><ul><li>最大公约数<ul><li>使用<code>gcd()</code>函数，可以查找两个数的最大公约数。</li><li>查找数组中所有值的最大公约数用<code>reduce()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>num1 = <span class="hljs-number">6</span><br>num2 = <span class="hljs-number">9</span><br>x = np.gcd(num1, num2)          <span class="hljs-comment"># num1和num2的最大公约数</span><br><span class="hljs-built_in">print</span>(x)<br><br>arr = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>, <span class="hljs-number">36</span>, <span class="hljs-number">16</span>])<br>y = np.gcd.reduce(arr)          <span class="hljs-comment"># 数组arr所有元素的最大公约数</span><br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 随机</title>
    <link href="/2021/02/21/python/python05-python-numpy-sui-ji/"/>
    <url>/2021/02/21/python/python05-python-numpy-sui-ji/</url>
    
    <content type="html"><![CDATA[<p>NumPy库部分由Python编写，多数需快速计算的部分由C或C++编写，旨在提供一个比传统Python列表快50倍的数组对象，即ndarray。</p><span id="more"></span><h1 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1 随机数"></a>1 随机数</h1><ul><li>随机数<ul><li>伪随机数：通过一些算法生成的随机数。<ul><li>通过random处理随机数，<code>randint()</code>返回随机整数，<code>rand()</code>返回0-1之间的随机浮点数。</li><li><code>randint()</code>使用size参数来制作随机数组，<code>randint()</code>和<code>rand()</code>都允许指定数组的形状。</li><li><code>choice()</code>允许根据数组值生成随机值，添加一个size参数来指定数组的形状。</li></ul></li><li>真随机数：没有规律，不能预见的数，使用物理现象产生，例如投硬币猜测正反面。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>x = random.randint(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 0-100的随机整数</span><br>y = random.rand()<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 0-1的随机浮点数</span><br><br>x = random.randint(<span class="hljs-number">100</span>, size=(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成一个一维数组，包含5个从0-100的随机整数</span><br>y = random.randint(<span class="hljs-number">100</span>, size=(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个3行的二维数组，每行包含5个从0-100的随机整数</span><br><br>x = random.rand(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成一个一维数组，包含5个0-1之间的随机浮点数</span><br>y = random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个3行的二维数组，每行包含5个0-1之间的随机浮点数</span><br><br>x = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 返回数组中的一个值</span><br>y = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], size=(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个由数组参数3、5、7和9中的值组成的二维数组</span><br></code></pre></td></tr></table></figure><h1 id="2-数据分布"><a href="#2-数据分布" class="headerlink" title="2 数据分布"></a>2 数据分布</h1><ul><li>数据分布<ul><li>指在分布式环境中通过合理分布数据，提高数据操作自然并行度，以达到最优执行效率的目的。</li><li>主要内容是数据位置的存放和高效的数据划分问题，是所有可能值的列表及每个值出现的频率。</li><li>随机分布：一组遵循一定概率密度函数的随机数。<ul><li>概率密度函数：描述连续概率的函数，即数组中所有值的概率。</li><li><code>choice()</code>方法依据定义的概率生成随机数，允许指定每个值的概率。</li><li>概率由0-1之间的数字设置，0表示该值永远不会出现，1表示始终出现。</li><li>所有的概率数之和为1，还可以通过size参数指定数组的形状来返回数组。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 生成一个包含100个值的一维数组，其中生成3的概率为0.1，5概率0.3，7概率0.6，9概率0</span><br>x = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], p=[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>], size=(<span class="hljs-number">100</span>))<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="3-随机排列"><a href="#3-随机排列" class="headerlink" title="3 随机排列"></a>3 随机排列</h1><ul><li>随机排列<ul><li><code>shuffle()</code>：就地改变数组元素的排序，即对原始数组进行的更改。</li><li><code>permutation()</code>：返回一个重新排列的数组，并保持原始数组不变。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>random.shuffle(arr1)                <span class="hljs-comment"># 随机打乱数组元素</span><br><span class="hljs-built_in">print</span>(arr1)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(random.permutation(arr2))     <span class="hljs-comment"># 生成数组元素的随机排列</span><br></code></pre></td></tr></table></figure><h1 id="4-Seaborn"><a href="#4-Seaborn" class="headerlink" title="4 Seaborn"></a>4 Seaborn</h1><ul><li>Seaborn<ul><li>一个在底层使用Matplotlib绘制图形的库，用于可视化随机分布。</li><li>打开系统上的命令窗口，输入命令进行安装：<code>pip install seaborn</code>。</li><li>使用前需要先导入Matplotlib模块的pyplot对象，以及安装好的第三方库seaborn模块。</li><li>Distplot代表分布图，将一个数组作为输入，并绘制一条与数组中点的分布相对应的曲线。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>sns.distplot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])                <span class="hljs-comment"># FutureWarning警告，distplot已弃用</span><br>plt.show()                                      <span class="hljs-comment"># 绘制分布图</span><br><br>sns.distplot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], hist=<span class="hljs-literal">False</span>)<br>plt.show()                                      <span class="hljs-comment"># 绘制没有直方图的分布图</span><br></code></pre></td></tr></table></figure><h1 id="5-连续分布"><a href="#5-连续分布" class="headerlink" title="5 连续分布"></a>5 连续分布</h1><ul><li>连续分布<ul><li>Continuous Distribution，一个随机变量在其区间内能够取任何数值时所具有的分布。</li><li>常用分类<ul><li>正态分布：最常用，特点是密度函数以均值为中心对称分布，适用于描述一般经济变量的概率分布。</li><li>均匀分布：概率论和统计学中叫矩形分布，是对称概率分布，相同长度间隔的分布概率是等可能的。</li><li>指数分布：用来表示独立随机事件发生的时间间隔，重要特征是无记忆性，又称遗失记忆性。</li><li>贝塔分布：特点是密度函数为最大值两边的不对称分布，适用于描述工期等不对称分布的变量。</li><li>经验分布：对产生样本点累积分布函数的估计，统计学中是与样本的经验测度相关的分布函数。</li><li>三角型分布：密度数由最大值、最可能值和最小值构成的对称或不对称的三角型。</li></ul></li></ul></li></ul><h2 id="5-1-正态分布"><a href="#5-1-正态分布" class="headerlink" title="5-1 正态分布"></a>5-1 正态分布</h2><ul><li>正态分布<ul><li>Normal Distribution，又叫常态分布或高斯分布，Gaussian Distribution。</li><li>重要分布之一，适合许多事件的概率分布，正态曲线呈钟型，也叫钟形曲线。</li><li>使用<code>random.normal()</code>方法获取正态分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>loc：平均值，钟型峰值所在的位置。</li><li>scale：标准偏差，偏差越小，值偏离算术平均值就越少，反之亦然。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.normal(size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成大小为2x3的随机正态分布</span><br><br>y = random.normal(loc=<span class="hljs-number">1</span>, scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成大小为2x3的随机正态分布，平均值为1，标准差为2</span><br><br>sns.distplot(random.normal(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 正态分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-2-均匀分布"><a href="#5-2-均匀分布" class="headerlink" title="5-2 均匀分布"></a>5-2 均匀分布</h2><ul><li>均匀分布<ul><li>Uniform Distribution，用于描述每个事件发生机会均等的概率。</li><li>用<code>random.uniform()</code>方法获取均匀分布数据，有以下3个参数。<ul><li>a：下限，默认0.0。</li><li>b：上限，默认1.0。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.uniform(size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 创建一个2x3均匀分布样本</span><br><br>sns.distplot(random.uniform(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 均匀分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-3-增长分布"><a href="#5-3-增长分布" class="headerlink" title="5-3 增长分布"></a>5-3 增长分布</h2><ul><li>增长分布<ul><li>Logistic Distribution，又叫逻辑斯谛分布，用于描述增长。</li><li>广泛用于逻辑回归、神经网络等机器学习，连续型概率分布的一种。</li><li>使用<code>random.logistic()</code>方法获取增长分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>loc：峰值的位置，默认为0。</li><li>scale：标准偏差，默认为1。</li></ul></li><li>增长分布与正态分布的区别<ul><li>增长分布的尾部下方面积更大，意味着代表了更远离均值的事件发生可能性。</li><li>对于较高的尺度值(标准偏差)，除峰值外，正态分布和增长分布几乎是相同。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.logistic(loc=<span class="hljs-number">1</span>, scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 从均值为1且标准差为2的增长分布中抽取2x3个样本</span><br><br>sns.distplot(random.logistic(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 增长分布的可视化</span><br><br>sns.distplot(random.normal(scale=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.logistic(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;logistic&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-4-指数分布"><a href="#5-4-指数分布" class="headerlink" title="5-4 指数分布"></a>5-4 指数分布</h2><ul><li>指数分布<ul><li>Exponential Distribution，也叫负指数分布。</li><li>用于描述直到下一个事件的时间，例如失败或成功等。</li><li>使用<code>random.exponential()</code>方法获取指数分布数据。<ul><li>size：返回数组的形状。</li><li>scale：速率的倒数，默认为1.0。</li></ul></li><li>泊松分布处理事件在一段时间内发生的次数，而指数分布处理这些事件之间的时间。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.exponential(scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 以2x3大小绘制一个2.0比例的指数分布样本</span><br><br>sns.distplot(random.exponential(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 指数分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-5-卡方分布"><a href="#5-5-卡方分布" class="headerlink" title="5-5 卡方分布"></a>5-5 卡方分布</h2><ul><li>卡方分布<ul><li>Chi-Square Distribution，又叫西格玛分布，用于验证假设的基础。</li><li>用<code>random.chisquare()</code>方法获取卡方分布数据，有以下两个参数。<ul><li>df：自由度。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.chisquare(df=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽取一个自由度为2，大小为2x3的卡方分布样本</span><br><br>sns.distplot(random.chisquare(df=<span class="hljs-number">1</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 卡方分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-6-瑞利分布"><a href="#5-6-瑞利分布" class="headerlink" title="5-6 瑞利分布"></a>5-6 瑞利分布</h2><ul><li>瑞利分布<ul><li>Rayleigh Distribution，用于信号处理。</li><li>使用<code>random.rayleigh()</code>方法获取瑞利分布数据，有以下两个参数。<ul><li>size：返回数组的形状。</li><li>scale：标准偏差，默认为1.0。</li></ul></li><li>在单位StdDev(标准偏差)中，自由度为2的瑞利分布和卡方分布相同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.rayleigh(scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 绘制一个尺度为2且大小为2x3的瑞利分布样本</span><br><br>sns.distplot(random.rayleigh(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 瑞利分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-7-帕累托分布"><a href="#5-7-帕累托分布" class="headerlink" title="5-7 帕累托分布"></a>5-7 帕累托分布</h2><ul><li>帕累托分布<ul><li>Pareto Distribution，经济学以外又被叫布拉德福分布。</li><li>帕累托分布即80-20分布，指的是20%的因素导致80%的结果。</li><li>用<code>random.pareto()</code>方法获取帕累托分布数据，有以下2个参数。<ul><li>a：形状参数。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.pareto(a=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 绘制一个形状为2且大小为2x3的帕累托分布样本</span><br><br>sns.distplot(random.pareto(a=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 帕累托分布的可视化</span><br></code></pre></td></tr></table></figure><h1 id="6-离散分布"><a href="#6-离散分布" class="headerlink" title="6 离散分布"></a>6 离散分布</h1><ul><li>离散分布<ul><li>Discrete Distribution，随机变量只能取有限或可数无限数量的值的概率分布。</li><li>常用分类<ul><li>二项分布：在概率论和统计学中，n个独立的成功或失败试验里成功次数的离散概率分布。</li><li>泊松分布：统计与概率学里常见的离散概率分布，法国数学家西莫恩·德尼·泊松在1838年时发表。</li><li>几何分布：n次伯努利试验中试验k次才得到首次成功的机率，即前k-1次失败，第k次成功的概率。</li><li>负二项分布：Negative Binomial Distribution，统计学上一种离散概率分布。</li></ul></li></ul></li></ul><h2 id="6-1-二项分布"><a href="#6-1-二项分布" class="headerlink" title="6-1 二项分布"></a>6-1 二项分布</h2><ul><li>二项分布<ul><li>Binomial Distribution，又叫伯努利分布，离散概率分布的一种。</li><li>二项分布描述二项式场景的结果，例如抛硬币，要么正面要么反面。</li><li>使用<code>random.binomial()</code>方法获取二项分布数据，有以下三个参数。<ul><li>n：试验次数。</li><li>size：返回数组的形状。</li><li>p：每次试验的发生概率，例如每次抛硬币正反面概率都是0.5。</li></ul></li><li>如果二项分布有足够的数据点，将与具有一定位置和尺度的正态分布相似。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.binomial(n=<span class="hljs-number">10</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 给定10次抛硬币试验，生成10个数据点</span><br><br>sns.distplot(random.binomial(n=<span class="hljs-number">10</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">True</span>, kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 二项分布的可视化</span><br><br>sns.distplot(random.normal(loc=<span class="hljs-number">50</span>, scale=<span class="hljs-number">5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.binomial(n=<span class="hljs-number">100</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;binomial&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-2-多项分布"><a href="#6-2-多项分布" class="headerlink" title="6-2 多项分布"></a>6-2 多项分布</h2><ul><li>多项分布<ul><li>Multinomial Distribution，是二项分布的推广。</li><li>描述了多项式场景的结果，例如人群血型，掷骰结果等。</li><li>使用<code>random.multinomial()</code>方法可获取多项分布数据。<ul><li>size：返回数组的形状。</li><li>n：可能结果的数量，例如掷骰子有6个结果。</li><li>pvals：结果概率列表，例如掷骰子的概率为6个1&#x2F;6。</li></ul></li><li>返回的多项样本不会只产生单个值，结果会生成pvals中的对应值。</li><li>由于是二项分布的推广，视觉效果和正态分布的相似性与二项分布的相同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>x = random.multinomial(n=<span class="hljs-number">6</span>, pvals=[<span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽出一个掷骰子的样本</span><br></code></pre></td></tr></table></figure><h2 id="6-3-泊松分布"><a href="#6-3-泊松分布" class="headerlink" title="6-3 泊松分布"></a>6-3 泊松分布</h2><ul><li>泊松分布<ul><li>Poisson Distribution，离散概率分布的一种。</li><li>泊松分布估计事件在指定时间内可以发生的次数。</li><li>使用<code>random.poisson()</code>方法获取泊松分布数据。<ul><li>size：返回数组的形状。</li><li>lam：发生率或已知次数。</li></ul></li><li>足够大的泊松分布，类似于二项分布和具有特定标准偏差和均值的正态分布。</li><li>泊松分布与二项分布的区别<ul><li>二项分布适用于离散试验，泊松分布适用于连续试验。</li><li>n非常大且p接近于0的二项分布，几乎与泊松分布相同，n*p约等于lam。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.poisson(lam=<span class="hljs-number">2</span>, size=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成随机1x10发生次数为2的分布</span><br><br>sns.distplot(random.poisson(lam=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 泊松分布的可视化</span><br><br>sns.distplot(random.normal(loc=<span class="hljs-number">50</span>, scale=<span class="hljs-number">7</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.poisson(lam=<span class="hljs-number">50</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;poisson&quot;</span>)<br>plt.show()<br><br>sns.distplot(random.binomial(n=<span class="hljs-number">1000</span>, p=<span class="hljs-number">0.01</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;binomial&quot;</span>)<br>sns.distplot(random.poisson(lam=<span class="hljs-number">10</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;poisson&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-4-齐普夫分布"><a href="#6-4-齐普夫分布" class="headerlink" title="6-4 齐普夫分布"></a>6-4 齐普夫分布</h2><ul><li>齐普夫分布<ul><li>Zipf Distribution，又叫Zeta分布，用于根据Zipf定律对数据进行采样。</li><li>齐夫定律(Zipf)：实验定律，一集合中第n个常用项是最常用项的1&#x2F;n倍。</li><li>使用<code>random.zipf()</code>方法可以获取齐普夫分布数据，有以下两个参数。<ul><li>a：分布参数。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.zipf(a=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽取一个分布参数为2且大小为2x3的齐普夫分布样本</span><br><br>y = random.zipf(a=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>)<br>sns.distplot(y[y&lt;<span class="hljs-number">10</span>], kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 齐普夫分布的可视化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 基础</title>
    <link href="/2021/02/07/python/python04-python-numpy-ji-chu/"/>
    <url>/2021/02/07/python/python04-python-numpy-ji-chu/</url>
    
    <content type="html"><![CDATA[<p>NumPy是一个用于处理数组的Python库，具有在线性代数、傅里叶变换和矩阵领域工作的功能，由Travis Oliphant于2005年创建。</p><span id="more"></span><h1 id="1-NumPy"><a href="#1-NumPy" class="headerlink" title="1 NumPy"></a>1 NumPy</h1><ul><li>Numpy<ul><li>通过import关键字将其导入应用程序，通常以np别名替代。</li><li>检查NumPy版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np          <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><br><span class="hljs-built_in">print</span>(np.__version__)       <span class="hljs-comment"># 检查NumPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2 创建数组"></a>2 创建数组</h1><ul><li>创建数组<ul><li>NumPy中的数组对象称为ndarray，使用数组对象的<code>array()</code>函数创建NumPy对象。</li><li><code>type()</code>用于显示数组类型numpy.ndarray，数组中的维度是一级数组深度(嵌套数组)。<ul><li>0-D数组：零维数组，又叫标量，数组中的每个值都是一个0-D数组。</li><li>1-D数组：一维数组，以零维数组作为元素的数组，是最基本的数组。</li><li>2-D数组：二维数组，以一维数组作为元素的数组，用于表示二阶张量。</li><li>3-D数组：三维数组，以二维数组作为元素的数组，用于表示三阶张量。</li><li>高维数组：数组可有任意数量的维度，创建时使用ndmin参数定义维数。</li></ul></li><li>二阶张量又叫矩阵，使用ndim检查数组的维数，返回整数的属性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(arr))                        <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>arr0 = np.array(<span class="hljs-number">30</span>)                     <span class="hljs-comment"># 0-D</span><br><span class="hljs-built_in">print</span>(arr0)<br>arr1 = np.array((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))              <span class="hljs-comment"># 1-D</span><br><span class="hljs-built_in">print</span>(arr1)<br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])       <span class="hljs-comment"># 2-D</span><br><span class="hljs-built_in">print</span>(arr2)<br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-built_in">print</span>(arr3)                             <span class="hljs-comment"># 3-D</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                             <span class="hljs-comment"># 5-D</span><br><br><span class="hljs-built_in">print</span>(arr0.ndim)                        <span class="hljs-comment"># 检查数组的维数</span><br><span class="hljs-built_in">print</span>(arr1.ndim)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><h2 id="2-1-数组索引"><a href="#2-1-数组索引" class="headerlink" title="2-1 数组索引"></a>2-1 数组索引</h2><ul><li>数组索引<ul><li>数组索引与访问数组元素相同，通过引用索引号访问数组元素。</li><li>索引从0开始，第一个元素索引为0，第二个元素索引为1，以此类推。</li><li>二维数组和三维数组都使用逗号分隔的整数来表示元素的维度和索引。</li><li>二维数组索引可以想象为具有行和列的表，行表示维度，索引表示列。</li><li>可以使用负索引从末尾访问数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 访问一维数组元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">3</span>])<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])           <span class="hljs-comment"># 访问二维数组元素，第一行第二列的元素</span><br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-built_in">print</span>(arr3[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 访问三维数组元素，第一个数组的第二个数组的第三个元素</span><br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>])          <span class="hljs-comment"># 访问二维数组元素，第二行的最后一个元素</span><br></code></pre></td></tr></table></figure><h2 id="2-2-数组切片"><a href="#2-2-数组切片" class="headerlink" title="2-2 数组切片"></a>2-2 数组切片</h2><ul><li>数组切片<ul><li>格式：<code>[start: end]</code>或<code>[start: end: step]</code>，结果包括开始索引，不包括结束索引。</li><li>start默认为0，end在维度中考虑数组的长度，step默认为1，使用负号可从末尾引用索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])           <span class="hljs-comment"># 索引1到5的元素，不包括5</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">4</span>:  ])           <span class="hljs-comment"># 索引4到数组末尾的元素切片</span><br><span class="hljs-built_in">print</span>(arr1[ : <span class="hljs-number">4</span>])           <span class="hljs-comment"># 索引开始到4的切片元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])         <span class="hljs-comment"># 负索引从-1开始，索引末尾-1到-3的元素，不包括-1</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引1到5的所有元素，其中步长为2</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引整个数组中步长为2的所有元素</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])        <span class="hljs-comment"># 第二个元素开始，索引1到4的元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 两个元素中返回索引2</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])     <span class="hljs-comment"># 两个元素中，返回索引1到4的元素，不包括4，返回一个二维数组</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2-3 数据类型"></a>2-3 数据类型</h2><ul><li>数据类型<ul><li>Python中的数据类型：float、integer、boolean、complex、strings。</li><li>NumPy模块也有一些额外的数据类型，并且是指代具有一个字符的数据类型。<ul><li>i(整数)、b(布尔值)、u(无符号整数)、f(浮点数)、c(复数)、m(时间增量)。</li><li>M(日期时间)、O(对象)、S(字符串)、U(Unicode字符串)、V(其他类型的固定内存块void)。</li></ul></li><li>NumPy数组对象有个dtype属性，用于返回数组的数据类型。</li><li><code>array()</code>创建具有已定义数据类型的数组，带可选参数dtype，允许定义数组元素的预期数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr1.dtype)           <span class="hljs-comment"># 获取数组对象的数据类型</span><br>arr2 = np.array([<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>])<br><span class="hljs-built_in">print</span>(arr2.dtype)           <span class="hljs-comment"># 获取包含字符串数组的数据类型</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;S&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 创建一个数据类型为字符串的数组</span><br><span class="hljs-built_in">print</span>(arr3.dtype)<br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;i4&quot;</span>)<br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 创建一个数据类型为4字节整数的数组</span><br><span class="hljs-built_in">print</span>(arr4.dtype)<br></code></pre></td></tr></table></figure><ul><li>类型转换<ul><li>若给定类型无法转换元素，NumPy将引发ValueError(传递给函数的参数类型意外或不正确时显示)。</li><li>使用<code>astype()</code>方法制作数组的副本，允许将数据类型指定为参数，可以更改现有数组的数据类型。</li><li>可用字符串指定数据类型，例如f(浮点数)、i(整数)等，或直接使用数据类型，例如float、int等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 像a这样的非整数字符串不能转换为整数，会引发错误</span><br><span class="hljs-comment"># arr1 = np.array([&quot;a&quot;, &quot;2&quot;], dtype=&quot;i&quot;)</span><br><br><span class="hljs-comment"># 通过使用i作为参数值将数据类型从浮点数更改为整数</span><br>arr2 = np.array([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">3.1</span>])<br>arr3 = arr2.astype(<span class="hljs-string">&quot;i&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.dtype)<br><br><span class="hljs-comment"># 通过使用int作为参数值将数据类型从浮点数更改为整数</span><br>arr4 = arr2.astype(<span class="hljs-built_in">int</span>)<br><span class="hljs-built_in">print</span>(arr4)<br><span class="hljs-built_in">print</span>(arr4.dtype)<br><br><span class="hljs-comment"># 将数据类型从整数更改为布尔值</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br>arr6 = arr5.astype(<span class="hljs-built_in">bool</span>)<br><span class="hljs-built_in">print</span>(arr6)<br><span class="hljs-built_in">print</span>(arr6.dtype)<br></code></pre></td></tr></table></figure><h1 id="3-副本与视图"><a href="#3-副本与视图" class="headerlink" title="3 副本与视图"></a>3 副本与视图</h1><ul><li>副本与视图<ul><li>副本是一个新数组，而视图只是原始数组的视图。<ul><li>副本拥有数据，对副本所做的更改不会影响原始数组，对原始数组所做的更改不会影响副本。</li><li>视图没有数据，对视图所做的更改将会影响原始数组，对原始数组所做的更改也会影响视图。</li></ul></li><li>每个NumPy数组都有base属性，如果数组拥有数据，那么返回None，否则base属性引用原始对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>arr2 = arr1.copy()          <span class="hljs-comment"># 创建一个副本</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>                 <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr2)                 <span class="hljs-comment"># 副本不应受到对原始数组所做更改的影响</span><br><br>arr3 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">30</span>                <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 视图应该受到对原始数组所做更改的影响</span><br><br>arr4 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr4[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>                 <span class="hljs-comment"># 更改视图</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 原始数组应该受到对视图所做更改的影响</span><br><br>arr5 = arr1.copy()          <span class="hljs-comment"># 打印base属性的值，检查数组是否拥有数据</span><br>arr6 = arr1.view()<br><span class="hljs-built_in">print</span>(arr5.base)            <span class="hljs-comment"># 副本返回None</span><br><span class="hljs-built_in">print</span>(arr6.base)            <span class="hljs-comment"># 视图返回原始数组</span><br></code></pre></td></tr></table></figure><h1 id="4-形状与重塑"><a href="#4-形状与重塑" class="headerlink" title="4 形状与重塑"></a>4 形状与重塑</h1><ul><li>形状<ul><li>数组形状是每个维度中元素的数量，NumPy数组有shape属性。</li><li>shape属性返回一个元组，每个索引都有与之对应元素的数量。</li><li>形状元组：每个索引处的整数都表示相应维度具有的元素数量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-built_in">print</span>(arr1.shape)     <span class="hljs-comment"># 二维数组的形状(2, 4)，2个维度，维度一有2个元素，维度二有4个元素</span><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr2)           <span class="hljs-comment"># 使用值为1、2、3、4的ndmin向量创建一个5维数组，并打印最后一维的值</span><br><span class="hljs-built_in">print</span>(arr2.shape)<br></code></pre></td></tr></table></figure><ul><li>重塑<ul><li>数组重塑意味着改变数组形状，可添加或删除维度，或更改每个维度元素的数量。</li><li>只要数组重塑所需要的元素在两种形状中都相同，就可以将数组重塑成任何形状。</li><li>不必为reshape方法的其中一个维度指定确切的数字，拥有未知维度，作为-1值传递。</li><li>扁平化数组意味着将多维数组转换为一维数组，可使用<code>reshape(-1)</code>来做到这一点。</li><li>改变数组形状还有flatten、revel函数，rot90、flip、fliplr和flipud等则可重新排列元素。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br>arr2 = arr1.reshape(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)     <span class="hljs-comment"># 从一维重塑到二维</span><br><span class="hljs-built_in">print</span>(arr2)                   <span class="hljs-comment"># 最外层维度有4个数组，每个数组包含3个元素</span><br><br>arr3 = arr1.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 从一维重塑到三维</span><br><span class="hljs-built_in">print</span>(arr3)                   <span class="hljs-comment"># 最外层维度有2个数组，其中包含3个数组，每个数组有2个元素</span><br><br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-comment"># arr5 = arr4.reshape(3, 3)</span><br><span class="hljs-comment"># print(arr5)                 # 8个元素的1-D数组转换为每个维度具有3个元素的2-D数组，会引发错误</span><br><br><span class="hljs-built_in">print</span>(arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>).base)<span class="hljs-comment"># 检查返回的数组是副本或视图，返回原始数组，是视图</span><br>arr6 = arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment"># 8个元素的1-D数组转换为2x2元素的3-D数组，不能传递-1值到多个维度</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br>arr8 = arr7.reshape(-<span class="hljs-number">1</span>)       <span class="hljs-comment"># 将数组转换为一维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br></code></pre></td></tr></table></figure><h1 id="5-连接与拆分"><a href="#5-连接与拆分" class="headerlink" title="5 连接与拆分"></a>5 连接与拆分</h1><ul><li>连接<ul><li>SQL中基于键连接表，NumPy中通过轴连接数组。</li><li>通过<code>concatenate()</code>函数将数组与轴一起进行传递连接，参数axis默认为0。</li><li>使用堆栈函数<code>stack()</code>连接数组(堆叠，一个轴在另一个轴上)，参数axis默认为0。<ul><li><code>hstack()</code>：沿行堆叠。</li><li><code>vstack()</code>：沿列堆叠。</li><li><code>dstack()</code>：沿高度或深度堆叠。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr3 = np.concatenate((arr1, arr2))         <span class="hljs-comment"># 连接两个一维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>arr5 = np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>arr6 = np.concatenate((arr4, arr5), axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 连接两个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.stack((arr1, arr2), axis=<span class="hljs-number">1</span>)       <span class="hljs-comment"># 堆叠</span><br><span class="hljs-built_in">print</span>(arr7)<br>arrh = np.hstack((arr1, arr2))              <span class="hljs-comment"># 沿行堆叠</span><br><span class="hljs-built_in">print</span>(arrh)<br>arrv = np.vstack((arr1, arr2))              <span class="hljs-comment"># 沿列堆叠</span><br><span class="hljs-built_in">print</span>(arrv)<br>arrd = np.dstack((arr1, arr2))              <span class="hljs-comment"># 沿高度或深度堆叠</span><br><span class="hljs-built_in">print</span>(arrd)<br></code></pre></td></tr></table></figure><ul><li>拆分<ul><li>拆分是连接的逆操作，<code>array_split()</code>方法用于拆分数组。<ul><li>如果数组的元素少于所需要的元素，那么将相应地从末尾进行自动调整。</li><li>也可以使用<code>split()</code>方法，但若元素较少，不会自动调整，将返回错误。</li></ul></li><li><code>array_split()</code>方法的返回值是一个数组，其中包含每个数组拆分为一个数组。<ul><li>若将一个数组拆分为3个数组，可以像访问任何数组元素一样从结果中进行访问。</li><li>可指定要围绕哪个轴进行拆分，使用axis参数进行拆分，或使用<code>hsplit()</code>替代。</li><li><code>vstack()</code>和<code>dstack()</code>函数对应沿列拆分<code>vsplit()</code>以及沿高度拆分<code>dsplit()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr2 = np.array_split(arr1, <span class="hljs-number">3</span>)              <span class="hljs-comment"># 将一维数组拆分为3部分</span><br><span class="hljs-built_in">print</span>(arr2)                                 <span class="hljs-comment"># 返回一个包含3个数组的数组</span><br><br>arr3 = np.array_split(arr1, <span class="hljs-number">4</span>)              <span class="hljs-comment"># 将一维数组拆分为4部分</span><br><span class="hljs-built_in">print</span>(arr3)                                 <span class="hljs-comment"># 数组元素少于所需的元素</span><br>arr4 = np.split(arr1, <span class="hljs-number">3</span>)                    <span class="hljs-comment"># 将一维数组拆分为3部分</span><br><span class="hljs-built_in">print</span>(arr4)<br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>])                              <span class="hljs-comment"># 打印拆分后的数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">2</span>])<br><br>arr5 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<br>arr6 = np.array_split(arr5, <span class="hljs-number">3</span>)              <span class="hljs-comment"># 将二维数组拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])<br>arr8 = np.array_split(arr7, <span class="hljs-number">3</span>)              <span class="hljs-comment"># 将二维数组拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br><br>arr9 = np.array_split(arr7, <span class="hljs-number">3</span>, axis=<span class="hljs-number">1</span>)      <span class="hljs-comment"># 将二维数组沿行拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr9)<br>arrh = np.hsplit(arr7, <span class="hljs-number">3</span>)                   <span class="hljs-comment"># 将二维数组沿行拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arrh)<br></code></pre></td></tr></table></figure><h1 id="6-数组迭代"><a href="#6-数组迭代" class="headerlink" title="6 数组迭代"></a>6 数组迭代</h1><ul><li>数组迭代<ul><li>迭代意味着一个一个地遍历元素，在NumPy中处理多维数组时，使用for循环可以进行迭代。</li><li>若迭代一个n-D数组，将遍历n-1维，要返回实际值，即标量，必须在每个维度中迭代数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr1:              <span class="hljs-comment"># 迭代一维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> arr2:              <span class="hljs-comment"># 迭代二维数组的元素</span><br>    <span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr2:              <span class="hljs-comment"># 迭代二维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-built_in">print</span>(y)<br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:              <span class="hljs-comment"># 迭代三维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:              <span class="hljs-comment"># 迭代三维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> y:<br>            <span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>迭代方法<ul><li><code>nditer()</code>是一个帮助函数，可以解决迭代中的一些基本问题。<ul><li>使用op_dtypes参数并将预期的数据类型传递给它，可以在迭代时更改元素的数据类型。</li><li>元素在数组中时，NumPy不会就地更改元素的数据类型，需一些其他空间来执行此操作。</li><li>其他空间即缓冲区，为启用额外空间，还需要使用<code>nditer()</code>函数的<code>flags=[&quot;buffered&quot;]</code>。</li></ul></li><li>使用过滤可以以不同的步长进行迭代，若需元素的相应索引，可用<code>ndenumerate()</code>进行枚举迭代。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr1):           <span class="hljs-comment"># 遍历3-D数组</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])          <span class="hljs-comment"># 作为字符串遍历数组</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr2, flags=[<span class="hljs-string">&quot;buffered&quot;</span>], op_dtypes=[<span class="hljs-string">&quot;S&quot;</span>]):<br>    <span class="hljs-built_in">print</span>(x)<br><br>arr3 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr3[:, ::<span class="hljs-number">2</span>]):   <span class="hljs-comment"># 每跳过1个元素，遍历2-D数组的每个标量元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr2): <span class="hljs-comment"># 枚举一维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr3): <span class="hljs-comment"># 枚举二维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br></code></pre></td></tr></table></figure><h1 id="7-数组搜索"><a href="#7-数组搜索" class="headerlink" title="7 数组搜索"></a>7 数组搜索</h1><ul><li>数组搜索<ul><li><code>where()</code>方法可以进行数组搜索。</li><li><code>searchsorted()</code>方法：考虑先插入，再排序，最后索引。<ul><li>数组中执行二进制搜索，并返回将插入指定值的索引以保持搜索顺序。</li><li>默认情况下返回左侧索引，使用<code>side=&quot;right&quot;</code>可以改为返回右侧索引。</li><li>如果需要搜索多个值，那么可以使用具有指定值的数组进行数组的搜索。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br>val4 = np.where(arr1 == <span class="hljs-number">4</span>)      <span class="hljs-comment"># 查找值为4的索引</span><br><span class="hljs-built_in">print</span>(val4)                     <span class="hljs-comment"># 返回元组(array([3, 5, 6], ))，值4出现在索引的3、5和6位置处</span><br>even = np.where(arr1 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)  <span class="hljs-comment"># 查找值为偶数的索引</span><br><span class="hljs-built_in">print</span>(even)<br><br>arr2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br>insl = np.searchsorted(arr2, <span class="hljs-number">7</span>) <span class="hljs-comment"># 查找应插入值7的索引</span><br><span class="hljs-built_in">print</span>(insl)                     <span class="hljs-comment"># 索引从左侧开始，并返回第一个索引</span><br>insr = np.searchsorted(arr2, <span class="hljs-number">7</span>, side=<span class="hljs-string">&quot;right&quot;</span>)<br><span class="hljs-built_in">print</span>(insr)                     <span class="hljs-comment"># 索引从右侧开始，并返回第一个索引</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br>ins1 = np.searchsorted(arr3, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(ins1)                     <span class="hljs-comment"># 返回0</span><br>ins2 = np.searchsorted(arr3, [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(ins2)                     <span class="hljs-comment"># 返回数组[4 4]</span><br>ins3 = np.searchsorted(arr3, [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(ins3)                     <span class="hljs-comment"># 查找应插入值2、4和6的索引，返回数组[1 2 3]</span><br></code></pre></td></tr></table></figure><h1 id="8-数组排序"><a href="#8-数组排序" class="headerlink" title="8 数组排序"></a>8 数组排序</h1><ul><li>数组排序<ul><li>NumPy的ndarray对象有一个<code>sort()</code>函数，可以对指定的数组进行排序。</li><li><code>sort()</code>函数可以对字符串数组、布尔数组或任何其他数据类型进行排序。</li><li>若对二维数组使用<code>sort()</code>函数，那么二维数组中的两个数组都将被排序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])   <span class="hljs-comment"># 对数组排序</span><br><span class="hljs-built_in">print</span>(np.sort(arr1))            <span class="hljs-comment"># 返回数组arr1的副本，保持原始数组不变</span><br><br>arr2 = np.array([<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>])<br><span class="hljs-built_in">print</span>(np.sort(arr2))            <span class="hljs-comment"># 按字母顺序对数组排序</span><br><br>arr3 = np.array([<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>])<br><span class="hljs-built_in">print</span>(np.sort(arr3))            <span class="hljs-comment"># 对布尔数组排序</span><br><br>arr4 = np.array([[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(np.sort(arr4))<br></code></pre></td></tr></table></figure><h1 id="9-数组过滤器"><a href="#9-数组过滤器" class="headerlink" title="9 数组过滤器"></a>9 数组过滤器</h1><ul><li>数组过滤器<ul><li>从现有数组中取出一些元素，并从中创建一个新数组，称为数组过滤。</li><li>布尔索引列表过滤数组<ul><li>如果索引处的值是True，则该元素包含在过滤后的数组中。</li><li>如果索引处的值是False，则该元素从过滤后的数组中排除。</li></ul></li><li>根据条件创建过滤器数组，可以在条件中直接替换数组而不是可迭代变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>])<br>boo1 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>]<br>new1 = arr1[boo1]         <span class="hljs-comment"># 对True和False值进行了硬编码</span><br><span class="hljs-built_in">print</span>(new1)               <span class="hljs-comment"># 返回[30 32]，新过滤器仅包含过滤器数组具有value的True值</span><br><br>filter_arr1 = []          <span class="hljs-comment"># 创建空列表</span><br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> arr1:      <span class="hljs-comment"># 遍历数组arr1中的每个元素</span><br>    <span class="hljs-keyword">if</span> element &gt; <span class="hljs-number">31</span>:      <span class="hljs-comment"># 元素大于31，将值设为True，否则为False</span><br>        filter_arr1.append(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">else</span>:<br>        filter_arr1.append(<span class="hljs-literal">False</span>)<br>arr2 = arr1[filter_arr1]<br><span class="hljs-built_in">print</span>(filter_arr1)        <span class="hljs-comment"># [False, False, True, True]</span><br><span class="hljs-built_in">print</span>(arr2)               <span class="hljs-comment"># 返回[32 33]</span><br><br>filter_arr2 = arr1 &gt; <span class="hljs-number">31</span>   <span class="hljs-comment"># 在条件中直接替换数组</span><br>arr3 = arr1[filter_arr2]<br><span class="hljs-built_in">print</span>(filter_arr2)<br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 文件处理</title>
    <link href="/2021/02/03/python/python03-python-wen-jian-chu-li/"/>
    <url>/2021/02/03/python/python03-python-wen-jian-chu-li/</url>
    
    <content type="html"><![CDATA[<p>文件就是操作系统提供给用户或应用程序操作硬盘的一种功能，任何语言都离不开对文件的操作，Python语言更不例外。</p><span id="more"></span><h1 id="1-文件处理"><a href="#1-文件处理" class="headerlink" title="1 文件处理"></a>1 文件处理</h1><ul><li>文件处理<ul><li><code>open()</code>函数，文件处理的关键函数，有filename和mode两个参数。</li><li>打开文件的模式<ul><li><code>x</code>：创建指定文件，如果文件存在则返回错误。</li><li><code>r</code>：默认值，打开文件进行读取，如果文件不存在则出错。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li><li>指定文件的形式<ul><li><code>t</code>：默认值，文本模式。</li><li><code>b</code>：二进制模式，例如图像。</li></ul></li><li>打开文件进行读取，指定文件名就可以了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)              <span class="hljs-comment"># 确保文件存在，否则报错</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;rt&quot;</span>)        <span class="hljs-comment"># rt即read和text，默认值，所以不需要指定(代码同上)</span><br></code></pre></td></tr></table></figure><h2 id="1-1-读取文件"><a href="#1-1-读取文件" class="headerlink" title="1-1 读取文件"></a>1-1 读取文件</h2><ul><li>读取文件<ul><li><code>read()</code>方法<ul><li><code>open()</code>函数返回一个文件对象，该对象的<code>read()</code>方法可以读取文件内容。</li><li>若文件位于其他位置，须指定文件路径，<code>read()</code>方法可指定要返回的字符数。</li></ul></li><li><code>readline()</code>方法<ul><li>使用该方法将返回文件的一行内容，调用两次则可以获取前两行。</li><li>通过遍历文件的行，可以逐行读取整个文件，完成操作后将文件关闭是个好习惯。</li><li>在某些情况下，由于缓冲，对文件所做的更改可能在关闭文件之前不会显示出来。</li></ul></li></ul></li></ul><h4 id="1-read"><a href="#1-read" class="headerlink" title="(1) read()"></a>(1) read()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())                       <span class="hljs-comment"># 获取文件内容</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read(<span class="hljs-number">5</span>))                      <span class="hljs-comment"># 返回文件的前5个字符</span><br><br><span class="hljs-comment"># f = open(&quot;D:\\demofile.txt&quot;, &quot;r&quot;)   # 指定文件路径</span><br><span class="hljs-comment"># print(f.read())</span><br></code></pre></td></tr></table></figure><h4 id="2-readline"><a href="#2-readline" class="headerlink" title="(2) readline()"></a>(2) readline()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的一行</span><br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的前两行</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> y:                           <span class="hljs-comment"># 逐行循环文件</span><br>    <span class="hljs-built_in">print</span>(i)<br><br>x.close()                             <span class="hljs-comment"># 完成后关闭文件</span><br>y.close()<br></code></pre></td></tr></table></figure><h2 id="1-2-文件操作"><a href="#1-2-文件操作" class="headerlink" title="1-2 文件操作"></a>1-2 文件操作</h2><ul><li>文件操作<ul><li>写入现有文件，必须向<code>open()</code>函数添加参数。<ul><li><code>a</code>：将内容追加到文件的末尾。</li><li><code>w</code>：将内容覆盖任何现有内容。</li></ul></li><li>创建新文件，使用<code>open()</code>函数带以下参数之一的方法。<ul><li><code>x</code>：创建一个文件，如果文件存在，则将返回错误。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)       <span class="hljs-comment"># 打开文件并将内容附加到文件中，如果文件不存在则创建文件</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())<br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)       <span class="hljs-comment"># 打开文件并覆盖整个文件的内容，如果文件不存在则创建文件</span><br>y.write(<span class="hljs-string">&quot;Woops! I have deleted the content!&quot;</span>)<br>y.close()<br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read())<br></code></pre></td></tr></table></figure><h2 id="1-3-删除文件"><a href="#1-3-删除文件" class="headerlink" title="1-3 删除文件"></a>1-3 删除文件</h2><ul><li>删除文件<ul><li>os模块：删除整个文件夹，需要使用<code>os.rmdir()</code>方法。</li><li>导入模块并运行<code>os.remove()</code>方法对文件进行删除操作。</li><li>为避免出现错误，需要在尝试删除文件之前检查文件是否存在。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br>os.rmdir(<span class="hljs-string">&quot;myfolder&quot;</span>)                  <span class="hljs-comment"># 删除文件夹</span><br>os.remove(<span class="hljs-string">&quot;demofile.txt&quot;</span>)             <span class="hljs-comment"># 删除一个文件</span><br><br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)         <span class="hljs-comment"># 打开文件并将内容附加到文件中</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;demofile.txt&quot;</span>):    <span class="hljs-comment"># 检查文件是否存在，然后将其删除</span><br>    os.remove(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The file does not exist.&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-Excel操作"><a href="#2-Excel操作" class="headerlink" title="2 Excel操作"></a>2 Excel操作</h1><ul><li>Excel操作<ul><li>xlwt库用于将数据写入Excel中，不支持xlsx格式，仅支持xls格式的Excel，命令<code>pip install xlwt</code>进行安装。</li><li>xlrd库用于读取Excel中的数据，新版不支持xlsx格式，若要支持，命令<code>pip install xlrd==1.2.0</code>进行安装。<ul><li>Python3.9新版中，xlrd库更新删除了<code>getiterator()</code>方法，xlrd版本1.2.0在读取xlsx格式文档时会报错。</li><li>执行时的报错信息：<code>AttributeError: &#39;ElementTree&#39; object has no attribute &#39;getiterator&#39;</code>。</li><li>到Python目录的\Lib\site-packages\xlrd\xlsx.py文件中，将两个<code>getiterator()</code>都改为<code>iter()</code>即可。</li></ul></li><li>常用单元格中的数据类型：empty(空的)、string(文本)、number、date、boolean、error、blank(空白表格)。</li><li>Excel中三大对象：Cell(单元格对象)、Sheet(工作表对象)、WorkBook(工作簿对象)。<ul><li><code>style_compression=0</code>：表示是否压缩。</li><li><code>cell_overwrite_ok=True</code>：是否可以覆盖单元格(覆写)，默认为False。</li><li><code>worksheet.write(行, 列, 值)</code>：向Sheet页的第一行第一列写入数据值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                         <span class="hljs-comment"># excel.py</span><br><span class="hljs-keyword">import</span> xlrd<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, style_compression=<span class="hljs-number">0</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;tabname&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;xlwt&#x27;</span>)                           <span class="hljs-comment"># 第1行第1列写入xlwt</span><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                             <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;write.xls&#x27;</span>)              <span class="hljs-comment"># 读取write.xls中的数据</span><br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><h2 id="2-1-写入样式"><a href="#2-1-写入样式" class="headerlink" title="2-1 写入样式"></a>2-1 写入样式</h2><ul><li>写入样式<ul><li>xlwt中设置单元格样式主要通过XFStyle这个类来完成。</li><li><code>font</code>：字体，Font类实例。</li><li><code>pattern</code>：填充，Pattern类实例。</li><li><code>borders</code>：边框，Borders类实例。</li><li><code>alignment</code>：对齐，Alignment类实例。</li><li><code>protection</code>：保护，Protection类实例。</li><li><code>num_format_str</code>(属性名)：数据格式(属性)，str(值类型)。</li></ul></li></ul><h4 id="1-字体"><a href="#1-字体" class="headerlink" title="(1) 字体"></a>(1) 字体</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                         <span class="hljs-comment"># font.py</span><br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;font&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                              <span class="hljs-comment"># 初始化样式</span><br>fonts = xlwt.Font()                                 <span class="hljs-comment"># 为样式创建字体</span><br><br>fonts.name = <span class="hljs-string">&quot;Arial&quot;</span>                                <span class="hljs-comment"># 指定字体</span><br>fonts.height = <span class="hljs-number">200</span>                                  <span class="hljs-comment"># 与Excel字体大小比例是1:20，200/20=10号字体</span><br>fonts.bold = <span class="hljs-literal">True</span>                                   <span class="hljs-comment"># 加粗</span><br>fonts.underline = <span class="hljs-literal">True</span>                              <span class="hljs-comment"># 加下划线</span><br>fonts.struck_out = <span class="hljs-literal">True</span>                             <span class="hljs-comment"># 加横线</span><br>fonts.italic = <span class="hljs-literal">True</span>                                 <span class="hljs-comment"># 斜体字</span><br>fonts.colour_index = <span class="hljs-number">4</span>                              <span class="hljs-comment"># 字体颜色</span><br><br>style.font = fonts                                  <span class="hljs-comment"># 设定字体样式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                       <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;font&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                             <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h4 id="2-背景颜色"><a href="#2-背景颜色" class="headerlink" title="(2) 背景颜色"></a>(2) 背景颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                         <span class="hljs-comment"># pattern.py</span><br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;pattern&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                              <span class="hljs-comment"># 初始化样式</span><br>pattern = xlwt.Pattern()                            <span class="hljs-comment"># 为样式创建背景图案</span><br><br>pattern.pattern = xlwt.Pattern.SOLID_PATTERN        <span class="hljs-comment"># 设置背景颜色模式</span><br>pattern.pattern_fore_colour = <span class="hljs-number">3</span>                     <span class="hljs-comment"># 不同值代表不同背景色</span><br><br>style.pattern = pattern                             <span class="hljs-comment"># 设定背景图案样式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                       <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;pattern&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                             <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h4 id="3-边框设置"><a href="#3-边框设置" class="headerlink" title="(3) 边框设置"></a>(3) 边框设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                         <span class="hljs-comment"># borders.py</span><br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;borders&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                              <span class="hljs-comment"># 初始化样式</span><br>borders = xlwt.Borders()                            <span class="hljs-comment"># 为样式创建边框设置</span><br><br>borders.left = xlwt.Borders.THIN                    <span class="hljs-comment"># 设定边框属性</span><br>borders.right = xlwt.Borders.THIN<br>borders.top = xlwt.Borders.THIN<br>borders.bottom = xlwt.Borders.THIN<br><br>style.borders = borders                             <span class="hljs-comment"># 设定边框样式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                       <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;borders&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                             <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h4 id="4-对齐方式"><a href="#4-对齐方式" class="headerlink" title="(4) 对齐方式"></a>(4) 对齐方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                         <span class="hljs-comment"># alignment.py</span><br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;alignment&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                              <span class="hljs-comment"># 初始化样式</span><br>alignment = xlwt.Alignment()                        <span class="hljs-comment"># 为样式创建对齐方式设置</span><br><br>alignment.vert = <span class="hljs-number">0x01</span>                               <span class="hljs-comment"># vert垂直对齐：0x00上、0x01中、0x02下</span><br>alignment.horz = <span class="hljs-number">0x03</span>                               <span class="hljs-comment"># horz水平对齐：0x01左、0x02中、0x03右</span><br>alignment.wrap = <span class="hljs-number">1</span>                                  <span class="hljs-comment"># 设定自动换行</span><br><br>style.alignment = alignment                         <span class="hljs-comment"># 设定对齐方式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                       <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;alignment\nalignment\nalignment&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                             <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h4 id="5-单元格格式"><a href="#5-单元格格式" class="headerlink" title="(5) 单元格格式"></a>(5) 单元格格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                     <span class="hljs-comment"># format.py</span><br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;format&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>data = <span class="hljs-string">&#x27;2022-02-02&#x27;</span><br>style = xlwt.XFStyle()                          <span class="hljs-comment"># 初始化样式</span><br>num_format_str = <span class="hljs-string">&#x27;YYYY\/MM\/DD&#x27;</span>                 <span class="hljs-comment"># ..\site-packages\xlwt\Style.py文件中可查</span><br>style.num_format_str = num_format_str<br><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data)                         <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, datetime.strptime(data, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>).date(), style)<br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h4 id="6-列宽与行高"><a href="#6-列宽与行高" class="headerlink" title="(6) 列宽与行高"></a>(6) 列宽与行高</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                             <span class="hljs-comment"># col.py</span><br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;col&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                           <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;col&#x27;</span>)<br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;col&#x27;</span>)<br>sheet.col(<span class="hljs-number">1</span>).width = <span class="hljs-number">256</span>*<span class="hljs-number">30</span>                             <span class="hljs-comment"># 设定第1列列宽，约为30个字符</span><br>sheet.row(<span class="hljs-number">1</span>).set_style(xlwt.easyxf(<span class="hljs-string">&#x27;font: height 720&#x27;</span>)) <span class="hljs-comment"># 44.25磅，怎么换算的？？？</span><br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                                 <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h4 id="7-行与列合并"><a href="#7-行与列合并" class="headerlink" title="(7) 行与列合并"></a>(7) 行与列合并</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt                                             <span class="hljs-comment"># merge.py</span><br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;merge&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                           <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write_merge(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;merge&#x27;</span>)                  <span class="hljs-comment"># 1-4行，2-5列，合并单元格</span><br><br>wbook.save(<span class="hljs-string">&#x27;write.xls&#x27;</span>)                                 <span class="hljs-comment"># 保存到当前路径的write.xls中</span><br></code></pre></td></tr></table></figure><h2 id="2-2-读取数据"><a href="#2-2-读取数据" class="headerlink" title="2-2 读取数据"></a>2-2 读取数据</h2><figure class="highlight xlsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Xlsx"># write.xlsx<br>Name  Age Language  Registration <span class="hljs-built_in">date</span><br>Sims  <span class="hljs-number">30</span>  C         <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">20</span><br>Peck  <span class="hljs-number">29</span>  C#        <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">21</span><br>Lane  <span class="hljs-number">28</span>  C++       <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">22</span><br>Fred  <span class="hljs-number">27</span>  Java      <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">23</span><br>Miya  <span class="hljs-number">26</span>  Python    <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h4 id="1-获取Sheet"><a href="#1-获取Sheet" class="headerlink" title="(1) 获取Sheet"></a>(1) 获取Sheet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd                              <span class="hljs-comment"># sheet.py</span><br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;write.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取文件中的数据，write.xlsx与当前代码同个目录</span><br><br>sheet1 = data.sheets()[<span class="hljs-number">0</span>]                <span class="hljs-comment"># 索引顺序获取首个sheet</span><br>sheet2 = data.sheet_by_index(<span class="hljs-number">0</span>)          <span class="hljs-comment"># 索引顺序获取首个sheet</span><br>sheet3 = data.sheet_by_name(<span class="hljs-string">&#x27;write&#x27;</span>)     <span class="hljs-comment"># 通过sheet名称获取，上述方式若不存在sheet会报错</span><br>sheetNames = data.sheet_names()          <span class="hljs-comment"># 获取文件中的所有sheet页面名称</span><br><span class="hljs-built_in">print</span>(sheet1)<br><span class="hljs-built_in">print</span>(sheet2)<br><span class="hljs-built_in">print</span>(sheet3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All sheet page names: &quot;</span> + <span class="hljs-built_in">str</span>(sheetNames))<br></code></pre></td></tr></table></figure><h4 id="2-获取行操作"><a href="#2-获取行操作" class="headerlink" title="(2) 获取行操作"></a>(2) 获取行操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd                              <span class="hljs-comment"># nrows.py</span><br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;write.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取文件中的数据，write.xlsx与当前代码同个目录</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)           <span class="hljs-comment"># 获取首个sheet页数据</span><br><br>nrows = sheet.nrows                      <span class="hljs-comment"># 获取该sheet中的有效行数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of valid nrows: &quot;</span> + <span class="hljs-built_in">str</span>(nrows))<br><br>cells = sheet.row_len(<span class="hljs-number">0</span>)                 <span class="hljs-comment"># 获取第一行中有效单元格数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of valid cells: &quot;</span> + <span class="hljs-built_in">str</span>(cells))<br><br>firstLine = sheet.row_values(<span class="hljs-number">0</span>)          <span class="hljs-comment"># 获取第一行内容</span><br><span class="hljs-built_in">print</span>(firstLine)<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows):                   <span class="hljs-comment"># 获取所有行数据</span><br>    <span class="hljs-built_in">print</span>(sheet.row_values(r))<br><br><span class="hljs-built_in">print</span>(sheet.row_slice(<span class="hljs-number">0</span>))                <span class="hljs-comment"># 返回由该行中所有的单元格对象组成的列表</span><br></code></pre></td></tr></table></figure><h4 id="3-获取列操作"><a href="#3-获取列操作" class="headerlink" title="(3) 获取列操作"></a>(3) 获取列操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd                              <span class="hljs-comment"># ncols.py</span><br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;write.xlsx&#x27;</span>)  <span class="hljs-comment"># 读取文件中的数据，write.xlsx与当前代码同个目录</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)           <span class="hljs-comment"># 获取首个sheet页数据</span><br><br>ncols = sheet.ncols                      <span class="hljs-comment"># 获取该sheet中的有效列数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of valid ncols: &quot;</span> + <span class="hljs-built_in">str</span>(ncols))<br><span class="hljs-built_in">print</span>(sheet.col(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))                <span class="hljs-comment"># 返回第一行和第二行的单元格对象组成的列表</span><br><span class="hljs-built_in">print</span>(sheet.col_slice(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))          <span class="hljs-comment"># 返回第一行和第二行的单元格对象组成的列表</span><br><span class="hljs-built_in">print</span>(sheet.col_values(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))         <span class="hljs-comment"># 返回第一行和第二行的单元格数据组成的列表</span><br></code></pre></td></tr></table></figure><h4 id="4-获取单元格"><a href="#4-获取单元格" class="headerlink" title="(4) 获取单元格"></a>(4) 获取单元格</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd                                    <span class="hljs-comment"># cell.py</span><br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;write.xlsx&#x27;</span>)        <span class="hljs-comment"># 读取文件中的数据，write.xlsx与当前代码同个目录</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)                 <span class="hljs-comment"># 获取首个sheet页数据</span><br><br><span class="hljs-built_in">print</span>(sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))                        <span class="hljs-comment"># 返回第一行第一列的单元格对象</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data: &quot;</span> + <span class="hljs-built_in">str</span>(sheet.cell_value(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)))  <span class="hljs-comment"># 返回第一行第一列的单元格数据</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xlwt</tag>
      
      <tag>Xlrd</tag>
      
      <tag>文件处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(二)</title>
    <link href="/2021/01/15/python/python02-python-ji-chu-er/"/>
    <url>/2021/01/15/python/python02-python-ji-chu-er/</url>
    
    <content type="html"><![CDATA[<p>Python面向对象，易于阅读和维护，丰富的库可用于Web开发、爬虫、自动化运维、自动化测试和数据分析等，功能十分强大。</p><span id="more"></span><h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a>1 函数</h1><ul><li>函数<ul><li>只有在被调用时才会运行，可将参数传递给函数，函数返回数据作为结果。</li><li>通过<code>def</code>关键字定义函数，调用函数时，需要使用函数名称，后跟括号<code>()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():               <span class="hljs-comment"># def定义函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Function&quot;</span>)<br>myfunc()                    <span class="hljs-comment"># 调用函数</span><br></code></pre></td></tr></table></figure><ul><li>参数<ul><li>信息可作为参数传递给函数，缩写为<code>args</code>，任意参数缩写为<code>*args</code>。</li><li>参数在函数名之后的括号内指定，可以添加任意数量的参数，用逗号分隔。</li><li>默认情况下须使用正确数量的参数调用函数，函数需几个参数就必须使用几个参数调用该函数。</li><li>若不知道传递给函数的参数数量，则在函数定义的参数名称前使用星号<code>*</code>，接收一个参数元组。</li><li>函数定义不能为空，若函数内部没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">fname</span>):          <span class="hljs-comment"># 带有一个参数fname的函数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; Refsnes.&quot;</span>)<br>myfunc(<span class="hljs-string">&quot;Emil&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">fname, lname</span>):   <span class="hljs-comment"># 该函数带有两个参数，调用时就使用两个参数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; &quot;</span> + lname + <span class="hljs-string">&quot;.&quot;</span>)<br>myFunc(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Refsnes&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">*kids</span>):         <span class="hljs-comment"># 任意参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + kids[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br>my_func(<span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_Func</span>():<br>    <span class="hljs-keyword">pass</span>                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>关键字参数<ul><li>使用<code>key = value</code>语法发送参数，这样就不用考虑参数的顺序了。</li><li>关键字参数通常缩写为<code>kwargs</code>，任意关键字参数则缩写为<code>**kwargs</code>。</li><li>若不知道传递给函数的关键字参数数量，则在函数定义的参数名称前使用两个星号<code>**</code>，接收参数字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">child3, child2, child1</span>):       <span class="hljs-comment"># key = value</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + child3 +<span class="hljs-string">&quot;.&quot;</span>)<br>myfunc(child1 = <span class="hljs-string">&quot;Emil&quot;</span>, child2 = <span class="hljs-string">&quot;Lily&quot;</span>, child3 = <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">**kid</span>):                       <span class="hljs-comment"># 任意关键字参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child&#x27;s last name is &quot;</span> + kid[<span class="hljs-string">&quot;lname&quot;</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br>my_func(fname = <span class="hljs-string">&quot;Lily&quot;</span>, lname = <span class="hljs-string">&quot;Refsnes&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>函数调用<ul><li>调用不带参数的函数，使用默认值参数，<code>return</code>语句可让函数返回值。</li><li>将任何数据类型的参数发送给函数，会在函数内部被视为相同的数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">country = <span class="hljs-string">&quot;Xiamen&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am from &quot;</span> + country + <span class="hljs-string">&quot;.&quot;</span>)<br>myfunc()                      <span class="hljs-comment"># 使用默认值参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x              <span class="hljs-comment"># 让函数返回值</span><br><span class="hljs-built_in">print</span>(myFunc(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">food</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> food:<br>        <span class="hljs-built_in">print</span>(y)<br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>my_func(fruits)               <span class="hljs-comment"># 使用列表作为参数</span><br></code></pre></td></tr></table></figure><h2 id="1-1-递归"><a href="#1-1-递归" class="headerlink" title="1-1 递归"></a>1-1 递归</h2><ul><li>递归函数<ul><li>函数递归意味着自定义的函数可以调用自身，递归是一个常见的数学和编程概念。</li><li>编写时易陷入一个永无止境或使用过多内存的函数中，递归也是有效的编程方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myRecursion</span>(<span class="hljs-params">i</span>):                         <span class="hljs-comment"># 自定义myRecursion函数，使用变量i作为参数</span><br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>):<br>        result = i + myRecursion(i - <span class="hljs-number">1</span>)     <span class="hljs-comment"># 每次递归时递减1</span><br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">else</span>:                                   <span class="hljs-comment"># 当条件小于等于0时，递归结束</span><br>        result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recursion Example Results.&quot;</span>)<br>myRecursion(<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h2 id="1-2-lambda"><a href="#1-2-lambda" class="headerlink" title="1-2 lambda"></a>1-2 lambda</h2><ul><li>lambda函数<ul><li>匿名函数，可以接受任意数量的参数，但只能有一个表达式。</li><li>在另一函数中将一个函数用作匿名函数时，可以很好地展示<code>lambda</code>的作用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-keyword">lambda</span> i: i+<span class="hljs-number">10</span>            <span class="hljs-comment"># 将10添加到参数i中，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b: a*b          <span class="hljs-comment"># 将参数a与参数b相乘，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b, c: a+b+c     <span class="hljs-comment"># 汇总参数a、b、c，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">y</span>):                <span class="hljs-comment"># 定义一个带有一个参数的函数，并将该参数乘以一个未知数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> i: i*y<br>mydoubler = myfunc(<span class="hljs-number">2</span>)         <span class="hljs-comment"># 创建一个始终发送数字加倍的函数</span><br><span class="hljs-built_in">print</span>(mydoubler(<span class="hljs-number">11</span>))<br>mytripler = myfunc(<span class="hljs-number">3</span>)         <span class="hljs-comment"># 创建一个始终发送数字三倍的函数</span><br><span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<br></code></pre></td></tr></table></figure><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2 类和对象"></a>2 类和对象</h1><ul><li>类和对象<ul><li>Python是一种面向对象的编程语言，Python中一切皆对象，都有其属性和方法。</li><li>使用<code>class</code>关键字创建一个类，一个类就如同一个对象构造器，用于创建对象。</li><li>所有类都有一个名为<code>__init()</code>的函数，<code>__init__()</code>函数总是在类启动时执行。</li><li><code>class</code>定义不能为空，若<code>class</code>没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:                <span class="hljs-comment"># 创建一个名为MyClass的类，并带有一个名为x的属性</span><br>    x = <span class="hljs-number">5</span><br>p = MyClass()                 <span class="hljs-comment"># 创建一个名为p的对象，并打印x的值</span><br><span class="hljs-built_in">print</span>(p.x)                    <span class="hljs-comment"># 这是最为简单的类和对象，但在实际应用中没有真正用处</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                 <span class="hljs-comment"># 创建名为Person的类，__init__()函数为name和age赋值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(q.name)<br><span class="hljs-built_in">print</span>(q.age)<br><br>q.age = <span class="hljs-number">25</span>                    <span class="hljs-comment"># 修改对象属性</span><br><span class="hljs-built_in">print</span>(q.age)<br><span class="hljs-keyword">del</span> q.age                     <span class="hljs-comment"># 删除q对象中的age属性</span><br><span class="hljs-keyword">del</span> q                         <span class="hljs-comment"># 删除q对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">pass</span>                      <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>对象方法<ul><li>对象也可以包含方法，对象中的方法属于该对象的函数。</li><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>    <span class="hljs-comment"># 创建对象方法，插入一个打印函数，并在q对象上执行</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + self.name + <span class="hljs-string">&quot;.&quot;</span>)<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><ul><li>self参数<ul><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li><li>不必命名为<code>self</code>，可随意调用，但必须是类中任何函数的第一个参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, name, age</span>):<br>        <span class="hljs-built_in">object</span>.name = name<br>        <span class="hljs-built_in">object</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">abc</span>):          <span class="hljs-comment"># object和abc代替self</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + abc.name + <span class="hljs-string">&quot;.&quot;</span>)<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><h1 id="3-继承"><a href="#3-继承" class="headerlink" title="3 继承"></a>3 继承</h1><ul><li>继承<ul><li>让类与类之间产生父子关系，即获取另一个类的静态属性或方法。</li><li>父类也叫基类或超类，子类是从另一个类继承的类，也叫派生类。</li><li>任何类都可以是父类，语法与创建类相同，创建子类时需将父类作为参数发送。</li><li><code>__init__()</code>函数每次使用类创建新对象时都会自动调用该函数，将其添加到子类中。<ul><li>子类不再继承父类的<code>__init__()</code>函数，会覆盖父类<code>__init__()</code>函数的继承。</li><li>为保持父类的<code>__init__()</code>函数继承，需添加对父类<code>__init__()</code>函数的调用。</li></ul></li><li>还可以使用<code>super()</code>函数，让子类继承父类的所有方法和属性。</li><li>若在子类中添加与父类中函数同名的方法，会覆盖父方法的继承。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                                   <span class="hljs-comment"># 创建Person父类，具有fname和lname属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        self.fname = fname<br>        self.lname = lname<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printName</span>(<span class="hljs-params">self</span>):                        <span class="hljs-comment"># 创建printName方法</span><br>        <span class="hljs-built_in">print</span>(self.fname, self.lname)<br>x = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>x.printName()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student1</span>(<span class="hljs-title class_ inherited__">Person</span>):                         <span class="hljs-comment"># 创建Student1子类，继承Person类的属性和方法</span><br>    <span class="hljs-comment"># pass                                      # 将__init__()函数添加到Student1子类中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        Person.__init__(self, fname, lname)     <span class="hljs-comment"># 添加对父类函数的调用，保留父类的继承</span><br>y = Student1(<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>y.printName()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)          <span class="hljs-comment"># super函数不必使用父类名称，自动继承</span><br>        self.graduation = year                  <span class="hljs-comment"># 添加一个Student2子类的graduation属性</span><br>z = Student2(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br><span class="hljs-built_in">print</span>(z.fname, z.lname, z.graduation)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)<br>        self.graduation = year<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">self</span>):                          <span class="hljs-comment"># 添加一个调用类welcome方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome&quot;</span>, self.fname, self.lname, <span class="hljs-string">&quot;to the class of&quot;</span>, self.graduation, <span class="hljs-string">&quot;.&quot;</span>)<br>x = Student3(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br>x.Welcome()<br></code></pre></td></tr></table></figure><h1 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4 迭代器"></a>4 迭代器</h1><ul><li>迭代器<ul><li>一个实现迭代器协议的对象，由方法<code>__iter__()</code>和<code>__next__()</code>组成。</li><li>列表、元组、字典和集合等都是可迭代对象，都有<code>iter()</code>属性，用于获取迭代器。</li><li>使用for循环遍历可迭代对象，实际for循环即创建一个迭代器并循环执行<code>next()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>myfruit = <span class="hljs-built_in">iter</span>(mytuple)       <span class="hljs-comment"># 元组返回一个迭代器，并打印每个值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><br>mystring = <span class="hljs-string">&quot;apple&quot;</span>            <span class="hljs-comment"># 字符串也是可迭代对象</span><br>alphabet = <span class="hljs-built_in">iter</span>(mystring)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(alphabet))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:             <span class="hljs-comment"># for循环即一个迭代器</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>类和对象迭代器<ul><li>要将类和对象创建为一个迭代器，必须使用<code>__iter__()</code>和<code>__next__()</code>方法。<ul><li><code>__iter__()</code>方法进行初始化等操作，始终返回迭代器对象本身。</li><li><code>__next__()</code>方法允许执行操作，并且必须返回序列中的下一项。</li><li>如果有足够的<code>next()</code>语句或在for循环中使用，迭代将永远进行。</li></ul></li><li><code>__next__()</code>中添加StopIteration终止条件，以在迭代完成指定次数时引发错误，防止迭代永远进行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum1</span>:                 <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>            <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>           <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br>myclass = MyNum1()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum2</span>:                 <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>            <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>           <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br>myclass = MyNum2()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum3</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.a &lt;= <span class="hljs-number">20</span>:      <span class="hljs-comment"># 20次迭代后停止</span><br>            x = self.a<br>            self.a += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> x<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br>myclass = MyNum3()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myiters:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="5-范围"><a href="#5-范围" class="headerlink" title="5 范围"></a>5 范围</h1><ul><li>局部范围<ul><li>在函数内部创建的变量属于该函数的局部范围，并且只能在该函数内部使用。</li><li>函数内部创建的局部变量，对函数内部的任何函数都可用(嵌套函数都可用)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    x = <span class="hljs-number">30</span>                    <span class="hljs-comment"># 在myfunc函数内部创建的变量，在该函数内部可用</span><br>    <span class="hljs-built_in">print</span>(x)<br>myfunc()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">innerFunc</span>():<br>        <span class="hljs-built_in">print</span>(y)              <span class="hljs-comment"># 可以从函数内的函数访问局部变量y</span><br>    innerFunc()<br>myFunc()<br></code></pre></td></tr></table></figure><ul><li>全局范围<ul><li>在代码主体中创建的变量是全局变量，属于全局范围，可以在任何范围内使用。</li><li>若函数内外都使用相同变量名，将视为两个单独的变量，分别作用于函数内外部。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-built_in">print</span>(x)                  <span class="hljs-comment"># 可以在函数内部使用</span><br>myfunc()<br><span class="hljs-built_in">print</span>(x)                      <span class="hljs-comment"># 也可以在主体代码中使用</span><br><br>y = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-built_in">print</span>(y)                  <span class="hljs-comment"># 局部变量作用于函数内部</span><br>myFunc()<br><span class="hljs-built_in">print</span>(y)                      <span class="hljs-comment"># 全局变量作用于函数外部</span><br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>使用global关键字，在函数内部创建全局变量。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-keyword">global</span> x                  <span class="hljs-comment"># global关键字创建全局变量</span><br>    x = <span class="hljs-number">30</span><br>myfunction()<br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    <span class="hljs-keyword">global</span> y                  <span class="hljs-comment"># 修改函数内的全局变量y</span><br>    y = <span class="hljs-number">26</span><br>myFunc()<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h1 id="6-模块"><a href="#6-模块" class="headerlink" title="6 模块"></a>6 模块</h1><ul><li>模块<ul><li>模块可看成代码库，包含一组要包含在应用程序中的函数文件。</li><li>创建一个模块，只需要将所需的代码保存在文件扩展名为.py的文件中。</li><li>使用模块则通过import语句导入，语法：<code>module_name.function_name</code>。</li><li>模块中可包含函数，也可包含所有类型的变量，例如数组、字典、对象等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greeting</span>(<span class="hljs-params">name</span>):         <span class="hljs-comment"># 将该函数保存在名为Greeting.py文件中</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;.&quot;</span>)<br><br>person = &#123;                  <span class="hljs-comment"># 该字典也存在于Greeting.py文件中</span><br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;30&quot;</span>, <br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;China&quot;</span><br>&#125;<br><br><span class="hljs-keyword">import</span> Greeting             <span class="hljs-comment"># 在另一个文件中使用import语句导入创建的模块</span><br>Greeting.greeting(<span class="hljs-string">&quot;Lily&quot;</span>)<br><br>x = Greeting.person[<span class="hljs-string">&quot;age&quot;</span>]  <span class="hljs-comment"># 访问person字典</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>内置模块<ul><li>导入模块时可以使用as关键字创建别名，<code>dir()</code>函数可以列出模块中的所有函数名。</li><li>使用from关键字从模块中导入部分元素，导入时引用模块中的元素不要使用模块名称。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> Greeting <span class="hljs-keyword">as</span> x        <span class="hljs-comment"># 将Greeting模块重命名为x</span><br>y = x.person[<span class="hljs-string">&quot;age&quot;</span>]<br><span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">import</span> platform<br>z = <span class="hljs-built_in">dir</span>(platform)           <span class="hljs-comment"># dir()函数可用于所有模块，包括自定义模块</span><br><span class="hljs-built_in">print</span>(z)<br><br><span class="hljs-keyword">from</span> Greeting <span class="hljs-keyword">import</span> person <span class="hljs-comment"># 仅从模块中导入person字典</span><br><span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;name&quot;</span>])       <span class="hljs-comment"># 不使用模块名称，例如Greeting.person[&quot;name&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="6-1-Math"><a href="#6-1-Math" class="headerlink" title="6-1 Math"></a>6-1 Math</h2><ul><li>math模块<ul><li>内置函数<ul><li><code>min()</code>和<code>max()</code>可用于查找可迭代对象中的最小值和最大值。</li><li><code>abs()</code>返回指定数字的绝对值，<code>pow(x, y)</code>则返回x的y次幂。</li></ul></li><li>使用时需要导入math模块，导入后就可以使用模块的方法和常量了。<ul><li><code>math.sqrt()</code>：返回一个数字的平方根。</li><li><code>math.ceil()</code>：将一个数字向上舍入取整。</li><li><code>math.floor()</code>：将一个数字向下舍入取整。</li><li><code>math.pi</code>：常数，返回PI，即圆周率3.14159265…的值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">min</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)          <span class="hljs-comment"># 5</span><br>b = <span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)          <span class="hljs-comment"># 25</span><br>c = <span class="hljs-built_in">abs</span>(-<span class="hljs-number">2.75</span>)              <span class="hljs-comment"># 2.75</span><br>d = <span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)               <span class="hljs-comment"># 4*4*4</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-keyword">import</span> math<br>x = math.sqrt(<span class="hljs-number">64</span>)           <span class="hljs-comment"># 返回一个数字的平方根</span><br>y = math.ceil(<span class="hljs-number">1.45</span>)         <span class="hljs-comment"># 向上取整，返回2</span><br>z = math.floor(<span class="hljs-number">1.45</span>)        <span class="hljs-comment"># 向下取整，返回1</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(math.pi)              <span class="hljs-comment"># 返回圆周率PI</span><br></code></pre></td></tr></table></figure><h2 id="6-2-Json"><a href="#6-2-Json" class="headerlink" title="6-2 Json"></a>6-2 Json</h2><ul><li>json模块<ul><li>一种用于存储和交换数据的语法，是文本，使用JavaScript对象表示法编写。</li><li>Python中有内置包json，用于处理json数据，使用前需要import导入json模块。</li><li><code>json.loads()</code>方法可以用来解析json字符串，结果将会返回一个Python字典。</li><li><code>json.dumps()</code>方法可以将Python对象转换为json字符串。<ul><li><code>json.dumps()</code>方法具有参数，用indent参数定义缩进数。</li><li>使用separators参数定义分隔符，默认值为<code>(&quot;, &quot;, &quot;: &quot;)</code>。</li><li>即使用逗号和空格分隔每个对象，使用冒号和空格分隔键和值。</li><li>该方法还可以用于对结果中的键进行排序，使用sort_keys参数来指定。</li></ul></li><li>Python对象与等效的json(JavaScript)，转换如下。<table><thead><tr><th align="left">对象</th><th align="left">dict</th><th align="left">list</th><th align="left">tuple</th><th align="left">string</th><th align="left">int</th><th align="left">float</th><th align="left">True</th><th align="left">False</th><th align="left">None</th></tr></thead><tbody><tr><td align="left">json</td><td align="left">Object</td><td align="left">Array</td><td align="left">Array</td><td align="left">String</td><td align="left">Number</td><td align="left">Number</td><td align="left">true</td><td align="left">false</td><td align="left">null</td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><br>x = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Lily&quot;, &quot;age&quot;: &quot;26&quot;, &quot;city&quot;: &quot;XiaMen&quot;&#125;&#x27;</span><br>y = json.loads(x)           <span class="hljs-comment"># 从json字符串转换为python字典</span><br><span class="hljs-built_in">print</span>(y[<span class="hljs-string">&quot;name&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>x = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;26&quot;</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;XiaMen&quot;</span>&#125;<br>y = json.dumps(x)           <span class="hljs-comment"># 从Python字典转换为json字符串</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br><span class="hljs-built_in">print</span>(json.dumps(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;))<br><span class="hljs-built_in">print</span>(json.dumps([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>]))<br><span class="hljs-built_in">print</span>(json.dumps((<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-string">&quot;hello&quot;</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">42</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">31.76</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">None</span>))     <span class="hljs-comment"># 将Python对象转换为json字符串并打印</span><br><br>z = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <br>    <span class="hljs-string">&quot;married&quot;</span>: <span class="hljs-literal">True</span>, <br>    <span class="hljs-string">&quot;divorced&quot;</span>: <span class="hljs-literal">False</span>, <br>    <span class="hljs-string">&quot;children&quot;</span>: (<span class="hljs-string">&quot;Ann&quot;</span>, <span class="hljs-string">&quot;Billy&quot;</span>), <br>    <span class="hljs-string">&quot;pets&quot;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;BMW 230&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">27.5</span>&#125;, <br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Ford Edge&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">24.1</span>&#125;<br>    ]<br>&#125;<br><span class="hljs-built_in">print</span>(json.dumps(z))        <span class="hljs-comment"># 转换一个包含所有合法数据类型的Python对象</span><br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, separators=(<span class="hljs-string">&quot;. &quot;</span>, <span class="hljs-string">&quot; = &quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, sort_keys=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h2 id="6-3-Datetime"><a href="#6-3-Datetime" class="headerlink" title="6-3 Datetime"></a>6-3 Datetime</h2><ul><li>datetime模块<ul><li>导入该模块可以显示当前日期，包含年、月、日、时、分、秒和微秒。</li><li>创建日期使用模块的构造函数<code>datetime()</code>，需年、月、日这三个参数。<ul><li>该函数还接受时间和时区参数(时、分、秒、微秒、tzone)。</li><li>该函数的时间和时区参数都是可选的，且具有默认值0，时区默认值为None。</li></ul></li><li><code>strftime()</code>方法将日期对象格式化为可读字符串，接受参数，使用format指定返回字符串的格式。</li><li>时间日期格式化符号，示例如下。<table><thead><tr><th align="left"><code>%a</code>：<code>Wed(简化星期)</code></th><th align="left"><code>%b</code>：<code>Dec(简化月份)</code></th></tr></thead><tbody><tr><td align="left"><code>%A</code>：<code>Wednesday(完整星期)</code></td><td align="left"><code>%B</code>：<code>December(完整月份)</code></td></tr><tr><td align="left"><code>%c</code>：<code>Mon Dec 29 17:17:00 2019</code></td><td align="left"><code>%d</code>：<code>31(日，0-31)</code></td></tr><tr><td align="left"><code>%C</code>：<code>20(世纪)</code></td><td align="left"><code>%f</code>：<code>548513(微秒)</code></td></tr><tr><td align="left"><code>%G</code>：<code>2019(年份，ISO 8601)</code></td><td align="left"><code>%H</code>：<code>20(时，00-23，24小时制)</code></td></tr><tr><td align="left"><code>%I</code>：<code>07(时，01-12，12小时制)</code></td><td align="left"><code>%j</code>：<code>365(年中的第n天，001-366)</code></td></tr><tr><td align="left"><code>%m</code>：<code>06(月份，01-12)</code></td><td align="left"><code>%u</code>：<code>1(星期，1-7，ISO 8601)</code></td></tr><tr><td align="left"><code>%M</code>：<code>15(分钟，00-59)</code></td><td align="left"><code>%U</code>：<code>52(一年中的星期数，00-53，星期天开始)</code></td></tr><tr><td align="left"><code>%p</code>：<code>A.M.或P.M.</code></td><td align="left"><code>%V</code>：<code>01(一年中的星期数，01-53，ISO 8601)</code></td></tr><tr><td align="left"><code>%S</code>：<code>15(秒，00-59)</code></td><td align="left"><code>%%</code>：<code>%(本身)</code></td></tr><tr><td align="left"><code>%w</code>：<code>0(星期，0-6，星期天开始)</code></td><td align="left"><code>%x</code>：<code>01/01/19</code></td></tr><tr><td align="left"><code>%W</code>：<code>52(一年中的星期数，00-53，星期一开始)</code></td><td align="left"><code>%X</code>：<code>17:15:00</code></td></tr><tr><td align="left"><code>%y</code>：<code>19(年份，00-99)</code></td><td align="left"><code>%z</code>：<code>+0100(UTC offset，标准时间偏移)</code></td></tr><tr><td align="left"><code>%Y</code>：<code>2019(年份，0000-9999)</code></td><td align="left"><code>%Z</code>：<code>CST(当前时区的名称)</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br><br>x = datetime.datetime.now()         <span class="hljs-comment"># 显示当前日期</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(x.year)                       <span class="hljs-comment"># 显示年份</span><br><span class="hljs-built_in">print</span>(x.strftime(<span class="hljs-string">&quot;%A&quot;</span>))             <span class="hljs-comment"># 显示英文星期</span><br><br>y = datetime.datetime(<span class="hljs-number">2019</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment"># 创建一个日期对象</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(y.strftime(<span class="hljs-string">&quot;%B&quot;</span>))             <span class="hljs-comment"># 显示英文月份</span><br></code></pre></td></tr></table></figure><h2 id="6-4-正则表达式"><a href="#6-4-正则表达式" class="headerlink" title="6-4 正则表达式"></a>6-4 正则表达式</h2><ul><li>RegEx正则<ul><li>形成搜索模式的字符序列，用于检查字符串是否包含指定的搜索模式。</li><li>Python有一个re内置包，用于处理正则表达式，使用前需导入re模块。<ul><li><code>findall()</code>：返回一个包含所有匹配项的列表。</li><li><code>search()</code>：在字符串中搜索匹配项，若有，返回一个Match对象，若多个，返回匹配项的第一个。</li><li><code>split()</code>：返回一个列表，其中字符串在每次匹配时都被拆分，可通过maxsplit参数控制出现次数。</li><li><code>sub()</code>：将匹配项替换为选择的文本，可以通过count参数来控制替换次数。</li></ul></li><li>元字符：指在正则表达式中具有特殊意义的专用字符，用来规定其前导字符在目标对象中的出现模式。<table><thead><tr><th align="left">元字符</th><th align="left">说明</th><th align="left">示例<img width=180></th></tr></thead><tbody><tr><td align="left"><code>[]</code></td><td align="left">一组字符</td><td align="left"><code>&quot;[a-m]&quot;</code></td></tr><tr><td align="left"><code>\</code></td><td align="left">表示特殊序列，也可用于转义特殊字符</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">除换行符之外的任何字符</td><td align="left"><code>&quot;he..o&quot;</code></td></tr><tr><td align="left"><code>^</code></td><td align="left">以“hello”开头</td><td align="left"><code>&quot;^hello&quot;</code></td></tr><tr><td align="left"><code>$</code></td><td align="left">以“planet”结尾</td><td align="left"><code>&quot;planet$&quot;</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">零次或多次出现</td><td align="left"><code>&quot;he.*o&quot;</code></td></tr><tr><td align="left"><code>+</code></td><td align="left">一次或多次出现</td><td align="left"><code>&quot;he.+o&quot;</code></td></tr><tr><td align="left"><code>?</code></td><td align="left">零次或一次出现</td><td align="left"><code>&quot;he.?o&quot;</code></td></tr><tr><td align="left"><code>&#123;&#125;</code></td><td align="left">指定出现的次数</td><td align="left"><code>&quot;he.&#123;2&#125;o&quot;</code></td></tr><tr><td align="left"><code>|</code></td><td align="left">或</td><td align="left"><code>&quot;falls | stays&quot;</code></td></tr><tr><td align="left"><code>()</code></td><td align="left">捕获和分组</td><td align="left"></td></tr></tbody></table></li><li>集合类特殊字符<table><thead><tr><th align="left">集合字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>[arn]</code></td><td align="left">返回指定字符“a、r或n”之一的任意匹配项</td></tr><tr><td align="left"><code>[a-n]</code></td><td align="left">返回任意小写字符的匹配项</td></tr><tr><td align="left"><code>[^arn]</code></td><td align="left">返回除“a、r和n”之外的任意字符匹配项</td></tr><tr><td align="left"><code>[0123]</code></td><td align="left">返回指定数字“0、1、2或3”之一的任意匹配项</td></tr><tr><td align="left"><code>[0-9]</code></td><td align="left">返回0到9之间任意数字的匹配项</td></tr><tr><td align="left"><code>[0-5][0-9]</code></td><td align="left">返回从00到59之间任意两位数字的匹配项</td></tr><tr><td align="left"><code>[a-zA-Z]</code></td><td align="left">返回a到z、A到Z之间任意字母的匹配项</td></tr><tr><td align="left"><code>[+]</code></td><td align="left">集合中“+*.|()${} ”都无特殊含义，返回匹配字符串中任意“+”字符</td></tr></tbody></table></li><li>特殊序列类字符<table><thead><tr><th align="left">特殊字符</th><th align="left">说明</th><th align="left">示例<img width=55></th></tr></thead><tbody><tr><td align="left"><code>\A</code></td><td align="left">如果指定字符位于字符串“The”的开头，则返回匹配项</td><td align="left"><code>&quot;\AThe&quot;</code></td></tr><tr><td align="left"><code>\b</code></td><td align="left">返回位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;\bain&quot;</code></td></tr><tr><td align="left"><code>\B</code></td><td align="left">返回不位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;ain\B&quot;</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">返回字符串包含0到9数字的匹配项</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>\D</code></td><td align="left">返回字符串不包含数字0到9的匹配项</td><td align="left"><code>&quot;\D&quot;</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">用于匹配单个空格符，包括tab键和换行符</td><td align="left"><code>&quot;\s&quot;</code></td></tr><tr><td align="left"><code>\S</code></td><td align="left">用于匹配除单个空格符之外的所有字符</td><td align="left"><code>&quot;\S&quot;</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">用于匹配a到z的字符、0到9的数字和下划线(_)字符</td><td align="left"><code>&quot;\w&quot;</code></td></tr><tr><td align="left"><code>\W</code></td><td align="left">用于匹配所有与\w不匹配的字符</td><td align="left"><code>&quot;\W&quot;</code></td></tr><tr><td align="left"><code>\Z</code></td><td align="left">如果指定字符位于字符串“Spain”的末尾，则返回匹配项</td><td align="left"><code>&quot;Spain\Z&quot;</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>x = re.search(<span class="hljs-string">&quot;^The.*Spain.$&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 查看是否以The开头，并以Spain.结尾</span><br><br>x = re.findall(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 按找到的顺序包含匹配项</span><br>y = re.findall(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 没找到匹配项，返回一个空列表</span><br><br>x = re.search(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x.start())        <span class="hljs-comment"># 搜索字符串中的第一个空格字符的位置</span><br>y = re.search(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 没找到匹配项，返回None</span><br><br>x = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 在每个空白字符处进行拆分</span><br>y = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 仅在第一次出现时拆分字符串</span><br><br>x = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 用9替换每个空白字符</span><br>y = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 替换前两次出现的空白字符</span><br></code></pre></td></tr></table></figure><ul><li>匹配对象<ul><li>指包含有关搜索和结果信息的对象，若无匹配，将返回None。</li><li>Match对象具有用于检索有关搜索的信息和结果的属性与方法。<ul><li><code>span()</code>：返回一个包含匹配“开始和结束位置”的元组。</li><li><code>string</code>：返回传递给函数的字符串。</li><li><code>group()</code>：返回字符串中匹配的部分。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>a = re.search(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 执行将返回匹配对象的搜索</span><br><br>b = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(b.span())         <span class="hljs-comment"># 查找以大写S开头的任何单词，并打印第一个匹配项的位置</span><br><br>c = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(c.string)         <span class="hljs-comment"># 打印传入函数的字符串</span><br><br>d = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(d.group())        <span class="hljs-comment"># 打印匹配的字符串部分</span><br></code></pre></td></tr></table></figure><h1 id="7-用户输入"><a href="#7-用户输入" class="headerlink" title="7 用户输入"></a>7 用户输入</h1><ul><li>用户输入<ul><li>Python3.6版本使用<code>input()</code>方法进行用户输入。</li><li>Python2.7版本则使用<code>raw_input()</code>方法进行用户输入。</li><li>涉及到<code>input()</code>函数时停止执行，并在用户给出输入后继续执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">userName = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter username: &quot;</span>)          <span class="hljs-comment"># Python3.6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Username is &quot;</span> + userName + <span class="hljs-string">&quot;.&quot;</span>)<br><br><span class="hljs-comment"># userName = raw_input(&quot;Enter username: &quot;)    # Python2.7，已停止维护</span><br><span class="hljs-comment"># print(&quot;Username is &quot; + userName + &quot;.&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="8-异常处理"><a href="#8-异常处理" class="headerlink" title="8 异常处理"></a>8 异常处理</h1><ul><li>异常处理<ul><li>try代码块允许测试代码块的错误。</li><li>except代码块允许处理代码块的错误。</li><li>else代码块允许在没有错误时执行代码。</li><li>finally代码块不管try和except代码块的结果如何，都允许执行代码，可用于关闭对象和清理资源。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 发生错误或异常时，会停止并生成错误信息，使用try语句处理异常</span><br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">except</span>:             <span class="hljs-comment"># try代码块引发异常，执行except语句，若无try代码块，则程序崩溃</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;An exception occurred.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(b)<br><span class="hljs-keyword">except</span> NameError:   <span class="hljs-comment"># try语句异常，若为NameError异常，打印该条信息，否则打印except代码块语句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variable x is not defined.&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi~&quot;</span>)<br><span class="hljs-keyword">except</span>:             <span class="hljs-comment"># try代码块若异常，只执行except代码块中的内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">else</span>:               <span class="hljs-comment"># try代码块若没有异常，使用else定义要执行的代码块将被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nothing went wrong.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">finally</span>:            <span class="hljs-comment"># 指定了finally代码块，无论try代码块是否异常，都将执行该代码块</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The &#x27;try except&#x27; is finished.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 尝试打开并写入一个不可写的文件</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        f.write(<span class="hljs-string">&quot;Open file test.&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when writing to the file.&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()   <span class="hljs-comment"># 用于关闭对象和清理资源</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when opening the file.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>引发异常<ul><li>使用raise关键字可以选择在条件发生时抛出异常。</li><li>可以定义要引发的错误类型，以及抛出异常时要打印给用户查看到的文本内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:                   <span class="hljs-comment"># 如果x小于0，引发异常并停止程序</span><br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Sorry, no numbers below zero.&quot;</span>)<br><br>y = <span class="hljs-string">&quot;Hi~&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">type</span>(y) <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>:      <span class="hljs-comment"># 如果y不是整数，引发TypeError异常</span><br>    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Only integers are allowed.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(一)</title>
    <link href="/2021/01/01/python/python01-python-ji-chu-yi/"/>
    <url>/2021/01/01/python/python01-python-ji-chu-yi/</url>
    
    <content type="html"><![CDATA[<p>Python由荷兰数学和计算机科学研究学会的Guido van Rossum于1990年代初设计，并于1991年发布，是跨平台解释型脚本语言。</p><span id="more"></span><h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a>1 语法</h1><ul><li>缩进<ul><li>指代码行开头的空格，便于阅读，非常重要。</li><li>使用缩进表示代码块，如果跳过缩进，运行将会返回一个错误。</li><li>空格数量由程序员决定，最常见的是Tab四个，或Tab两个空格。</li><li>同个代码块中必须使用相同数量的空格缩进，否则返回一个错误。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">if</span> <span class="hljs-number">7</span> &gt; <span class="hljs-number">3</span>:<br>    <span class="hljs-comment"># 使用tab四个空格的缩进</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seven is greater than three!&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>注释<ul><li>单行注释：以<code>#</code>开头。</li><li>多行注释：以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>开头，以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>结尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a comment.&quot;</span>)         <br><span class="hljs-comment">### 单行注释</span><br><span class="hljs-string">&quot;&quot;&quot; 多行注释</span><br><span class="hljs-string">《劝学》· 孟郊</span><br><span class="hljs-string">击石乃有火，不击元无烟。</span><br><span class="hljs-string">人学始知道，不学非自然。</span><br><span class="hljs-string">万事须己运，他得非我贤。</span><br><span class="hljs-string">青春须早为，岂能长少年。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><ul><li>变量<ul><li>存储数据值的容器，赋值时创建，Python没有用于声明变量的命令。</li><li>变量不需要以任何特定的类型进行声明，甚至可以在设置后更改类型。</li><li>指定变量的数据类型，通过强制转换完成。</li><li>使用函数<code>type()</code>可以获取变量的数据类型。</li><li>使用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>声明字符串变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span>               <span class="hljs-comment"># 变量x设为int类型</span><br>x = <span class="hljs-string">&quot;Lily&quot;</span>          <span class="hljs-comment"># 变量x更改为str类型</span><br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>)          <span class="hljs-comment"># 强制转换变量y为int类型</span><br><span class="hljs-built_in">print</span>(y)        <br><br>z = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))      <span class="hljs-comment"># 获取变量z的数据类型</span><br></code></pre></td></tr></table></figure><ul><li>变量名<ul><li>命名规则<ul><li>区分大小写(age、Age和AGE是不同的变量)。</li><li>必须以字母或下划线开头，不能以数字开头。</li><li>只能包含字母数字字符和下划线(Az、0-9和_)。</li></ul></li><li>命名方法<ul><li>蛇形命名法，每个单词都以下划线字符(_)分隔。</li><li>小驼峰命名法，除首单词字母小写，其余单词都以大写字母开头。</li><li>大驼峰命名法，又叫帕斯卡命名法，每个单词都以大写字母开头。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">myvar__ = <span class="hljs-string">&quot;Lily&quot;</span><br>my_var_ = <span class="hljs-string">&quot;Lily&quot;</span><br>_my_var = <span class="hljs-string">&quot;Lily&quot;</span><br>my__Var = <span class="hljs-string">&quot;Lily&quot;</span><br>__MyVar = <span class="hljs-string">&quot;Lily&quot;</span><br>variable_name = <span class="hljs-string">&quot;Lily&quot;</span>      <span class="hljs-comment"># 蛇形命名</span><br>myVariableName = <span class="hljs-string">&quot;Lily&quot;</span>     <span class="hljs-comment"># 小驼峰命名</span><br>MyVariableName = <span class="hljs-string">&quot;Lily&quot;</span>     <span class="hljs-comment"># 大驼峰命名</span><br></code></pre></td></tr></table></figure><ul><li>多值分配<ul><li>允许在一行中为多个变量赋值。</li><li>可以在一行中为多个变量分配相同值。</li><li>若有一组列表或元组，允许将值提取到变量中，该方法称为拆包。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">x, y, z = <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>   <span class="hljs-comment"># 多个变量赋值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>x = y = z = <span class="hljs-string">&quot;Orange&quot;</span>                    <span class="hljs-comment"># 多个变量分配相同值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>x, y, z = fruits                        <span class="hljs-comment"># 拆包</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>输出变量<ul><li>使用函数<code>print()</code>输出多个变量，逗号分隔，支持不同数据类型。</li><li>使用<code>+</code>运算符输出多个变量，对于数字，该字符用于数学运算符。</li><li>如果尝试使用<code>+</code>操作符组合字符串和数字，那么将TypeError报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;C&quot;</span><br>y = <span class="hljs-string">&quot;Java&quot;</span><br>z = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(x, y, z)<br><span class="hljs-built_in">print</span>(x + <span class="hljs-string">&quot; &quot;</span> + y + <span class="hljs-string">&quot; &quot;</span> + z)<br><br>x = <span class="hljs-number">2</span>             <span class="hljs-comment"># int类型</span><br>y = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(x + y)      <span class="hljs-comment"># 2 + 1 = 3</span><br>x = <span class="hljs-string">&quot;2&quot;</span>           <span class="hljs-comment"># str类型</span><br>y = <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-built_in">print</span>(x + y)      <span class="hljs-comment"># str(2) + str(1) = 21</span><br><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-comment"># print(x + y)    # TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;.</span><br></code></pre></td></tr></table></figure><ul><li>全局变量<ul><li>函数外创建的变量，每个人都可用，无论是函数内部或外部。</li><li>函数内创建的同名变量，是局部变量，只能在函数内部使用。</li><li>若函数内外创建同名变量，全局变量将保持原样，全局并具有原始值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 在函数外部创建变量x，并在函数内部使用</span><br>x = <span class="hljs-string">&quot;scripting language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br>func_one()<br><br><span class="hljs-comment"># 在函数内部创建变量y，与全局变量y同名</span><br>y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():  <br>    y = <span class="hljs-string">&quot;scripting language.&quot;</span>                   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>在函数内部创建全局变量，使用global关键字。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 使用global关键字，则变量x属于全局范围</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():<br>    <span class="hljs-keyword">global</span> x<br>    x = <span class="hljs-string">&quot;scripting language.&quot;</span><br>func_one()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br><br><span class="hljs-comment"># 更改函数内的全局变量值，使用global引用该变量</span><br>y = <span class="hljs-string">&quot;scripting language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():<br>    <span class="hljs-keyword">global</span> y<br>    y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><ul><li>运算符<ul><li>算术：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>**</code>、<code>//</code>。</li><li>赋值：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>**=</code>、<code>//=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code>。</li><li>比较：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>。</li><li>逻辑：<code>and</code>、<code>or</code>、<code>not</code>。</li><li>身份：<code>is</code>、<code>is not</code>。</li><li>成员：<code>in</code>、<code>not in</code>。</li><li>位：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">9</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a // b)           <span class="hljs-comment"># 算术运算，向下取整除</span><br><span class="hljs-built_in">print</span>(-a // b)<br><br>b *= a                  <span class="hljs-comment"># 赋值运算，b = b * a</span><br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-keyword">if</span> a &gt; b:               <span class="hljs-comment"># 比较运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a <span class="hljs-keyword">and</span> b:             <span class="hljs-comment"># 逻辑运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a和b都为True.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a和b有一个不为True.&quot;</span>)<br><br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">is</span> b):            <span class="hljs-comment"># 身份运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b有相同的标识.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b没有相同标识.&quot;</span>)<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>):         <span class="hljs-comment"># 成员运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a在给定的列表list中.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a不在给定的列表list中.&quot;</span>)<br><br>c = a &gt;&gt; <span class="hljs-number">2</span>              <span class="hljs-comment"># 位运算，9=0000 1001</span><br><span class="hljs-built_in">print</span>(c)                <span class="hljs-comment"># 右移两位，0000 0010=2</span><br></code></pre></td></tr></table></figure><h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h1><ul><li>数据类型<ul><li>无类型：<code>NoneType</code>。</li><li>数字类型：<code>int</code>、<code>float</code>、<code>complex</code>。</li><li>文本类型：<code>str</code>。</li><li>布尔类型：<code>bool</code>。</li><li>序列类型：<code>list</code>、<code>tuple</code>、<code>range</code>。</li><li>映射类型：<code>dict</code>。</li><li>集合类型：<code>set</code>、<code>frozenset</code>。</li><li>二进制类型：<code>bytes</code>、<code>bytearray</code>、<code>memoryview</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))                      <span class="hljs-comment"># 打印变量x的数据类型</span><br><br>y = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]   <span class="hljs-comment"># 设置数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>z = <span class="hljs-built_in">dict</span>(name = <span class="hljs-string">&quot;Lily&quot;</span>, age = <span class="hljs-number">26</span>)   <span class="hljs-comment"># 使用构造函数设置特定的数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br></code></pre></td></tr></table></figure><h2 id="4-1-数字"><a href="#4-1-数字" class="headerlink" title="4-1 数字"></a>4-1 数字</h2><ul><li>数字<ul><li><code>int</code>：整数，正数或负数，没有小数，长度不受限制。</li><li><code>float</code>：浮点数，包含一个或多个小数的正数或负数，可有带e的科学数字，表10的幂。</li><li><code>complex</code>：复数，使用j作为虚部，可以用<code>complex(a, b)</code>表示，也可以用<code>a + bj</code>表示。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span>           <span class="hljs-comment"># int</span><br>y = <span class="hljs-number">12E4</span>         <span class="hljs-comment"># float，12*10000</span><br>z = <span class="hljs-number">3</span> + <span class="hljs-number">5j</span>       <span class="hljs-comment"># complex，也可表示为complex(3, 5)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br><br><span class="hljs-keyword">import</span> random    <span class="hljs-comment"># 使用random内置模块，用于生成随机数</span><br><span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><ul><li>构造：类型转换就是使用构造函数完成的。<ul><li><code>int()</code>：整数、浮点数或字符串构造整数。</li><li><code>str()</code>：各种数据类型都可以构造字符串。</li><li><code>float()</code>：整数、浮点数或字符串构造浮点数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">float</span>(x)     <span class="hljs-comment"># int转float</span><br>b = <span class="hljs-built_in">int</span>(y)       <span class="hljs-comment"># float转int</span><br>c = <span class="hljs-built_in">complex</span>(x)   <span class="hljs-comment"># int转complex</span><br><span class="hljs-built_in">print</span>(a)         <span class="hljs-comment"># 注意，这里不能将复数转换成其他数字类型，否则报错</span><br><span class="hljs-built_in">print</span>(b)         <span class="hljs-comment"># TypeError: can&#x27;t convert complex to float(int).</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-2-字符串"><a href="#4-2-字符串" class="headerlink" title="4-2 字符串"></a>4-2 字符串</h2><ul><li>字符串<ul><li>Python中的字符串用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>括起来。</li><li>可以使用三个引号<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>将多行字符串分配给变量。</li><li>字符串是表示Unicode字符的字节数组，没有<code>char</code>字符数据类型，单个字符只是长度为1的字符串。</li><li>方括号可以用来访问字符串中的元素，由于字符串是数组，可以通过<code>for</code>循环遍历字符串中的字符。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">s = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">人，得自个儿成全自个儿。</span><br><span class="hljs-string">要想人前显贵，必得人后受罪！</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s)                          <span class="hljs-comment"># 换行符插入到与代码相同的位置</span><br><br>a = <span class="hljs-string">&quot;Test&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])                       <span class="hljs-comment"># 获取位置0的字符，即第一个字符的位置</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;banana&quot;</span>:  <br>    <span class="hljs-built_in">print</span>(b)                      <span class="hljs-comment"># for循环遍历单词banana中的字母</span><br><br>c = <span class="hljs-string">&quot;Hi!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(c))                     <span class="hljs-comment"># 使用len()函数获取字符串的长度</span><br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt)              <span class="hljs-comment"># 关键字in，检查txt文本中是否存在单词free</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;free&#x27; is present.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt)     <span class="hljs-comment"># 关键字not in，检查txt文本中是否不存在单词expensive</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No, &#x27;expensive&#x27; in not present.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>切片字符串<ul><li>使用切片语法返回一系列字符。</li><li>指定以冒号<code>:</code>分隔的开始和结束索引，返回字符串的一部分。</li><li>通过省略开始索引，切片范围会从第一个字符开始，即位置0。</li><li>通过省略结束索引，切片范围将到达末尾，也可以使用负索引从字符串末尾开始切片。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot;Hello, World!&quot;</span>         <span class="hljs-comment"># 第1个字符H的索引位置是0</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])              <span class="hljs-comment"># 获取位置2到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[ : <span class="hljs-number">5</span>])              <span class="hljs-comment"># 获取位置0到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>:  ])              <span class="hljs-comment"># 获取位置2到最后的字符，包括2</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">5</span>: -<span class="hljs-number">2</span>])            <span class="hljs-comment"># 负索引：末尾字符!的索引位置是0，往左依次是-1，-2...</span><br></code></pre></td></tr></table></figure><ul><li>字符串内置方法<ul><li><code>upper()</code>：以大写形式返回字符串。</li><li><code>lower()</code>：以小写形式返回字符串。</li><li><code>strip()</code>：删除开头或结尾的任何空格。</li><li><code>replace()</code>：用另一个字符串替换当前字符串。</li><li><code>split()</code>：返回一个列表，其中指定分隔符之间的文本成为列表项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot; Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(a.upper())            <span class="hljs-comment"># 大写形式</span><br><span class="hljs-built_in">print</span>(a.lower())            <span class="hljs-comment"># 小写形式</span><br><span class="hljs-built_in">print</span>(a.strip())            <span class="hljs-comment"># 删除空格</span><br><span class="hljs-built_in">print</span>(a.replace(<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>))  <span class="hljs-comment"># 用J替换H</span><br><span class="hljs-built_in">print</span>(a.split(<span class="hljs-string">&quot;,&quot;</span>))         <span class="hljs-comment"># 使用逗号分隔符拆分字符串</span><br></code></pre></td></tr></table></figure><ul><li>格式化字符串<ul><li>使用<code>+</code>运算符连接或组合两个字符串，如果用于连接字符串和数字，将报错。</li><li><code>format()</code>方法接受传递的参数，格式化字符串，可以用来组合字符串和数字。<ul><li>该方法接受无限数量的参数，并放置在相应的占位符中。</li><li>可通过索引号<code>&#123;num&#125;</code>确保将参数放置在正确的占位符中。</li><li>使用命名索引<code>&#123;name&#125;</code>，传递参数值时必须使用相应的变量名<code>name</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;Hello &quot;</span><br>y = <span class="hljs-string">&quot;World.&quot;</span><br>z = x + y                   <span class="hljs-comment"># 使用+运算符连接</span><br><span class="hljs-built_in">print</span>(z)<br><br>age = <span class="hljs-number">26</span><br>txt = <span class="hljs-string">&quot;My name is Lily, and I am &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(age))      <span class="hljs-comment"># 使用format()格式化方法</span><br><br>quantity = <span class="hljs-number">3</span><br>items_no = <span class="hljs-number">567</span><br>price_li = <span class="hljs-number">49.95</span><br>order = <span class="hljs-string">&quot;I want to pay &#123;&#125; dollars for &#123;&#125; pieces of item &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br>order = <span class="hljs-string">&quot;I want to pay &#123;2&#125; dollars for &#123;0&#125; pieces of item &#123;1&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br><br>price = <span class="hljs-number">49</span><br>txt = <span class="hljs-string">&quot;The price is &#123;:.2f&#125; dollars.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(price))    <span class="hljs-comment"># 将价格格式化为带两位小数的数字</span><br><br>order = <span class="hljs-string">&quot;I have a &#123;carname&#125;, it is a &#123;model&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(carname = <span class="hljs-string">&quot;Ford&quot;</span>, model = <span class="hljs-string">&quot;Mustang&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>转义字符<ul><li>想在字符串中插入非法字符，可以使用转义字符<code>\</code>，后跟插入的非法字符即可。</li><li>常见的转义字符<ul><li><code>\&#39;</code>：单引号。</li><li><code>\\</code>：反斜杠。</li><li><code>\a</code>：响铃。</li><li><code>\n</code>：换行。</li><li><code>\r</code>：回车。</li><li><code>\v</code>：纵向制表符。</li><li><code>\t</code>：横向制表符。</li><li><code>\b</code>：退格符。</li><li><code>\f</code>：换页符。</li><li><code>\ooo</code>：八进制。</li><li><code>\xhh</code>：十六进制。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">txt = <span class="hljs-string">&quot;We are the so-called \&quot;Vikings\&quot; from the north.&quot;</span><br><span class="hljs-built_in">print</span>(txt)                  <span class="hljs-comment"># 转义双引号</span><br></code></pre></td></tr></table></figure><h2 id="4-3-布尔值"><a href="#4-3-布尔值" class="headerlink" title="4-3 布尔值"></a>4-3 布尔值</h2><ul><li>布尔值<ul><li>只表示为<code>True</code>或<code>False</code>，这两个值其中的一个。</li><li>函数<code>bool()</code>允许评估任何值，并返回<code>True</code>或<code>False</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">26</span><br>b = <span class="hljs-number">30</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b大于a.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b小于a.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))             <span class="hljs-comment"># 评估一个数字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;Lily&quot;</span>))         <span class="hljs-comment"># 评估一个字符串</span><br></code></pre></td></tr></table></figure><ul><li>True值<ul><li>任何数字都是True，0除外。</li><li>任何字符串都是True，空字符串除外。</li><li>任何列表、元组、集合和字典都是True，空值除外。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;abc&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><ul><li>False值<ul><li>空值，例如<code>[]</code>、<code>()</code>、<code>&#123;&#125;</code>、<code>&quot;&quot;</code>、数字<code>0</code>和<code>None</code>，还有<code>False</code>本身。</li><li>用户自定义类型的对象<ul><li>如果类定义了<code>__len__()</code>方法，并返回0或False，则输出False值。</li><li>如果类同时定义<code>__len__()</code>和<code>__bool__()</code>方法，则输出参考<code>__bool__()</code>的返回值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">False</span>))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myclass</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>myobj = myclass()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(myobj))          <span class="hljs-comment"># 定义了__len__()方法，并返回0       </span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__len__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__bool__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A is True.&quot;</span> <span class="hljs-keyword">if</span> A() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;A is not True.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(A()))        <span class="hljs-comment"># 同时定义了__len__()和__bool__()方法</span><br></code></pre></td></tr></table></figure><ul><li>返回布尔值情况<ul><li>创建返回布尔值的函数，可返回布尔值。</li><li>返回布尔值的内置函数：<code>isinstance()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFun</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(myFun())              <span class="hljs-comment"># 创建返回布尔值的函数</span><br><br>x = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>))   <span class="hljs-comment"># 检查对象是否为int整数</span><br></code></pre></td></tr></table></figure><h2 id="4-4-列表"><a href="#4-4-列表" class="headerlink" title="4-4 列表"></a>4-4 列表</h2><ul><li>列表<ul><li>用于将多个项目存储在单个变量中，使用方括号<code>[]</code>创建。</li><li>列表项是有序可变的，且允许重复值，索引时第一项为[0]。</li><li>列表长度使用<code>len()</code>函数计算，列表项可以是任何数据类型。</li><li>列表的数据类型为<code>&lt;class &#39;list&#39;&gt;</code>，使用<code>list()</code>构造函数创建新列表。</li><li>四种集合数据类型<ul><li>list：列表，有序且可变的集合，允许重复成员。</li><li>tuple：元组，有序且不可变的集合，允许重复成员。</li><li>set：集合，无序且不可变的集合(可删除或添加元素)，无索引，不允许重复成员。</li><li>dict：字典，有序且可变的集合(3.7版本开始有序，之前无序)，不允许重复成员。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mylist))          <span class="hljs-comment"># 获取列表长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mylist))         <span class="hljs-comment"># 查看列表的数据类型</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]     <span class="hljs-comment"># 列表项可以是整数、布尔数据等类型</span><br>list2 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]<br>list3 = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;male&quot;</span>]<br>list4 = <span class="hljs-built_in">list</span>((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>))    <span class="hljs-comment"># list()函数创建新列表</span><br><span class="hljs-built_in">print</span>(list4)<br></code></pre></td></tr></table></figure><ul><li>访问列表项<ul><li>通过索引号来访问列表项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是包含指定项目的新列表。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从列表末尾开始索引需指定负索引，使用<code>in</code>关键字确定列表中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>])            <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负索引最后一项Cherry</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>])         <span class="hljs-comment"># 范围从0开始，到2结束，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[ : <span class="hljs-number">2</span>])         <span class="hljs-comment"># 省略起始值，范围从0到2，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>:  ])         <span class="hljs-comment"># 省略结束值，范围从1到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">2</span>: -<span class="hljs-number">1</span>])       <span class="hljs-comment"># 范围从-1到-2，不包括-1，即Banana</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mylist:       <span class="hljs-comment"># 确定mylist列表中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits list.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改列表项<ul><li>更改特定项目的值，需要参考索引号。</li><li>更改特定范围内项目的值<ul><li>使用新值定义一个列表，并参考要插入新值的索引号范围。</li><li>插入的项目多于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>插入的项目少于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>当插入的项目数和替换的项目数不匹配时，列表的长度会发生改变。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Orange&quot;</span>        <span class="hljs-comment"># 更改项目值</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">2</span>] = [<span class="hljs-string">&quot;Blackcurrant&quot;</span>, <span class="hljs-string">&quot;Watermelon&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 更改项目值范围，插入的项目多于替换的项目</span><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">3</span>] = [<span class="hljs-string">&quot;Cherry&quot;</span>]   <span class="hljs-comment"># 插入的项目少于替换的项目，将第2和第3个值替换为1个值</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>添加列表项<ul><li><code>append()</code>：将项目添加到列表的末尾。</li><li><code>insert()</code>：在指定索引处插入列表项。</li><li><code>extend()</code><ul><li>将另一个列表中的元素附加到当前列表，元素会被添加到列表的末尾。</li><li>附加列表非必须，还可添加任何可迭代对象，例如元组、集合或字典。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist.append(<span class="hljs-string">&quot;Orange&quot;</span>)     <span class="hljs-comment"># 将Orange添加到列表末尾</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Blackcurrant&quot;</span>)<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 插入Blackcurrant作为第二项</span><br><br>tropical = [<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>mylist.extend(tropical)     <span class="hljs-comment"># 添加tropical元素到mylist列表</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mytuple = (<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>)<br>mylist.extend(mytuple)      <span class="hljs-comment"># 添加元组的元素到mylist列表中</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>删除列表项<ul><li><code>remove()</code>：删除指定的项目。</li><li><code>pop()</code>：删除指定的索引，若不指定索引，则删除最后一项。</li><li>使用<code>del</code>关键字可以删除指定的索引，也可以完全删除列表。</li><li><code>clear()</code>：清空列表，该列表仍然存在，但列表中没有内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Cherry&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Mango&#x27;</span>, <span class="hljs-string">&#x27;Kiwi&#x27;</span>, <span class="hljs-string">&#x27;Papaya&#x27;</span>]<br>mylist.remove(<span class="hljs-string">&quot;Banana&quot;</span>)     <span class="hljs-comment"># 删除Banana</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.pop(<span class="hljs-number">1</span>)               <span class="hljs-comment"># 删除第二项</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.pop()                <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">del</span> mylist[<span class="hljs-number">0</span>]               <span class="hljs-comment"># 删除第一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-keyword">del</span> mylist                  <span class="hljs-comment"># 删除整个列表，mylist此时不存在了</span><br><br>mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.clear()              <span class="hljs-comment"># 清除列表内容</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表循环<ul><li>使用for循环可以遍历列表项。</li><li>还可以通过引用索引号遍历列表项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历列表项，<code>len()</code>函数确定列表的长度，从0开始通过索引循环遍历。</li><li>还可以使用列表推导式(List Comprehension)进行循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mylist:            <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mylist)):<br>    <span class="hljs-built_in">print</span>(mylist[y])        <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mylist):      <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mylist[z])<br>    z = z + <span class="hljs-number">1</span><br><br>[<span class="hljs-built_in">print</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist]  <span class="hljs-comment"># 列表推导式循环遍历</span><br></code></pre></td></tr></table></figure><ul><li>列表推导式<ul><li>语法：<code>newlist = [expression for item in iterable if condition == True]</code>。</li><li>返回值是一个新列表，保持旧列表不变。</li><li><code>condition</code>：条件是过滤器，只接受条件为True的项，可选项，可省略。</li><li><code>iterable</code>：迭代对象可以是任何可迭代对象，例如列表、元组或集合等。</li><li><code>expression</code>：表达式是迭代中的当前项，但也是结果，可作为操纵结果的方式包含条件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 只接受条件不是Apple的物品</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 条件可选</span><br><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># range()函数创建一个可迭代对象</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 加了“只接受小于5”的判断条件</span><br><br>mylist = [x.upper() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 将新列表中的值设置为大写</span><br><br>mylist = [x <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Cherry&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 将Banana替换为Cherry</span><br></code></pre></td></tr></table></figure><ul><li>列表排序<ul><li><code>sort()</code><ul><li>按字母数字顺序对列表进行排序，默认情况下升序。</li><li>如果是降序排序，使用关键字参数<code>reverse = True</code>。</li><li>还可以使用关键字参数<code>key = function</code>自定义函数。</li><li>默认情况下该方法区分大小写，所有大写字母排在小写字母之前。</li><li>如果想要一个不区分大小写的排序，使用<code>str.lower</code>作为键函数。</li></ul></li><li><code>reverse()</code>：反转元素的当前排序顺序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.sort()               <span class="hljs-comment"># 升序，从小到大</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(reverse = <span class="hljs-literal">True</span>) <span class="hljs-comment"># 降序，从大到小</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(n - <span class="hljs-number">50</span>)      <span class="hljs-comment"># 根据数字与50的接近程度对列表进行排序</span><br>mylist = [<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">65</span>, <span class="hljs-number">82</span>, <span class="hljs-number">23</span>]<br>mylist.sort(key = func)     <span class="hljs-comment"># 返回一个用于对列表进行升序排序的数字</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.sort()               <span class="hljs-comment"># 区分大小写，大写在前，小写在后</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(key = <span class="hljs-built_in">str</span>.lower)<span class="hljs-comment"># 不区分大小写的排序</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.reverse()            <span class="hljs-comment"># 颠倒列表项的顺序</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表复制<ul><li><code>copy()</code>：制作列表副本。</li><li><code>list()</code>：制作列表副本的另一种方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>cplist1 = mylist.copy()     <span class="hljs-comment"># 使用copy()方法复制</span><br><span class="hljs-built_in">print</span>(cplist1)<br><br>cplist2 = <span class="hljs-built_in">list</span>(mylist)      <span class="hljs-comment"># 使用list()方法复制</span><br><span class="hljs-built_in">print</span>(cplist2)<br></code></pre></td></tr></table></figure><ul><li>列表添加<ul><li>使用<code>+</code>运算符可以连接两个或多个列表。</li><li>将另一个列表中的所有项目逐个附加到一个列表中。</li><li>通过<code>extend()</code>方法将一个列表中的元素添加到另一个列表中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list3 = list1 + list2       <span class="hljs-comment"># +运算符</span><br><span class="hljs-built_in">print</span>(list3)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list2:<br>    list1.append(x)         <span class="hljs-comment"># 逐个符加到list1列表中</span><br><span class="hljs-built_in">print</span>(list1)<br><br>list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list1.extend(list2)         <span class="hljs-comment"># extend()方法在list1列表末尾添加list2元素</span><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>列表内置方法<ul><li><code>count()</code>：统计列表元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist.count(<span class="hljs-string">&quot;Apple&quot;</span>))      <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mylist.index(<span class="hljs-string">&quot;Banana&quot;</span>))     <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4-5 元组"></a>4-5 元组</h2><ul><li>元组<ul><li>用在单个变量中存储多个项目，用圆括号<code>()</code>书写。</li><li>元组项是有序不可更改的，并且允许重复值，被索引时第一项索引为<code>[0]</code>。</li><li><code>len()</code>函数确定元组长度，创建一个只有一项的元组，须在项目后添加一个逗号。</li><li>元组项可以是任何数据类型，例如字符串、整数或布尔类型等，可以包含不同类型。</li><li>元组的数据类型为<code>&lt;class &#39;tuple&#39;&gt;</code>，使用<code>tuple()</code>构造函数创建一个新的元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># 圆括号书写</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># 允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mytuple))         <span class="hljs-comment"># 打印元组中的项目数</span><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, )       <span class="hljs-comment"># 一项元组，必须在项目后添加一个逗号</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mytuple))        <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><br>tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)    <span class="hljs-comment"># 字符串类型</span><br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>)    <span class="hljs-comment"># 整数类型</span><br>tuple3 = (<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>)    <span class="hljs-comment"># 包含不同类型</span><br><br>mytuple = <span class="hljs-built_in">tuple</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># tuple()函数创建新元组</span><br></code></pre></td></tr></table></figure><ul><li>访问元组项<ul><li>通过引用方括号内的索引号来访问元组项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是具有指定项目的新元组。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从元组末尾开始索引需指定负索引，使用<code>in</code>关键字确定元组中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">1</span>])           <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">1</span>])          <span class="hljs-comment"># 打印元组的最后一项Cherry</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Melon&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])        <span class="hljs-comment"># 返回第三、四、五项</span><br><span class="hljs-built_in">print</span>(mytuple[ : <span class="hljs-number">4</span>])        <span class="hljs-comment"># 省略起始值，范围从0到4，不包括4</span><br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>:  ])        <span class="hljs-comment"># 省略结束值，范围从2到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])       <span class="hljs-comment"># 返回从索引-4到索引-1，不包括-4的项目</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mytuple:      <span class="hljs-comment"># 确定mytuple元组中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits typle.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更新元组值<ul><li>元组一旦创建就不可更改，可将其转换为列表，更改列表再转换回元组。</li><li>若要添加一个或多个项目，使用这些项目创建一个新元组，并将其添加到现有元组中。</li><li>删除元组中的项目同样需要先转换为列表进行操作，<code>del</code>关键字则可以完全删除元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mylists = <span class="hljs-built_in">list</span>(mytuple)     <span class="hljs-comment"># 将元组转换为列表</span><br>mylists[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Kiwi&quot;</span>         <span class="hljs-comment"># 更改列表</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)    <span class="hljs-comment"># 再将列表转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>newtuple = (<span class="hljs-string">&quot;Orange&quot;</span>, )     <span class="hljs-comment"># 创建新元组</span><br>mytuple += newtuple         <span class="hljs-comment"># 添加该元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>mylists = <span class="hljs-built_in">list</span>(mytuple)     <span class="hljs-comment"># 转换为列表</span><br>mylists.remove(<span class="hljs-string">&quot;Apple&quot;</span>)     <span class="hljs-comment"># 删除列表项</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)    <span class="hljs-comment"># 转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br><span class="hljs-keyword">del</span> mytuple                 <span class="hljs-comment"># 完全删除元组</span><br><span class="hljs-comment"># print(mytuple)            # NameError: name &#x27;mytuple&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>元组拆包<ul><li>创建元组并赋值称为元组打包，将值提取回变量中称为拆包。</li><li>拆包时变量数必须与元组值的数量匹配，若不匹配则使用星号<code>*</code>将剩余值收集为列表。</li><li>若星号被添加到另一个变量而非最后一个，Python将为变量分配值，直至剩余值数量与剩余变量数匹配。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>(green, yellow, red) = mytuple<br><span class="hljs-built_in">print</span>(green)                <span class="hljs-comment"># 拆包</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Strawberry&quot;</span>, <span class="hljs-string">&quot;Raspberry&quot;</span>)<br>(green, yellow, *red) = mytuple<br><span class="hljs-built_in">print</span>(red)                  <span class="hljs-comment"># 使用星号*将剩余值收集为列表</span><br><br>(green, *tropic, red) = mytuple<br><span class="hljs-built_in">print</span>(tropic)               <span class="hljs-comment"># 添加tropic变量值列表</span><br></code></pre></td></tr></table></figure><ul><li>元组循环<ul><li>使用for循环可以遍历元组项。</li><li>还可以通过引用索引号遍历元组项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历元组项，<code>len()</code>函数确定元组的长度，从0开始通过索引循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:           <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mytuple)):<br>    <span class="hljs-built_in">print</span>(mytuple[y])       <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mytuple):     <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mytuple[z])<br>    z = z + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>元组添加<ul><li>使用<code>+</code>运算符可以连接两个或多个元组。</li><li>使用<code>*</code>运算符将元组内容乘以给定次数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>tuple3 = tuple1 + tuple2<br><span class="hljs-built_in">print</span>(tuple3)               <span class="hljs-comment"># +运算符</span><br><br>fruits = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mytuple = fruits * <span class="hljs-number">2</span>        <span class="hljs-comment"># *运算符</span><br><span class="hljs-built_in">print</span>(mytuple)<br></code></pre></td></tr></table></figure><ul><li>元组内置方法<ul><li><code>count()</code>：统计元组元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple.count(<span class="hljs-string">&quot;Apple&quot;</span>))     <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mytuple.index(<span class="hljs-string">&quot;Banana&quot;</span>))    <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-6-集合"><a href="#4-6-集合" class="headerlink" title="4-6 集合"></a>4-6 集合</h2><ul><li>集合<ul><li>用于将多个项目存储在单个变量中，用大括号<code>&#123;&#125;</code>书写。</li><li>集合项是无序不可更改的，且无索引，也不允许重复值。</li><li><code>len()</code>函数确定集合长度，集合项可以是任何数据类型。</li><li>例如字符串、整数或布尔类型等，可以包含不同数据类型。</li><li>集合的数据类型为<code>&lt;class &#39;set&#39;&gt;</code>，使用<code>set()</code>构造函数创建一个新集合，for循环遍历集合项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># 大括号书写</span><br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># 不允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(myset))           <span class="hljs-comment"># 获取集合中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myset))          <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;      <span class="hljs-comment"># 字符串类型</span><br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;      <span class="hljs-comment"># 整数类型</span><br>set3 = &#123;<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>&#125;      <span class="hljs-comment"># 包含不同类型</span><br><br>myset = <span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># set()函数创建新集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>访问集合项<ul><li>不能通过索引访问集合项，使用<code>for</code>循环遍历。</li><li>或者使用<code>in</code>关键字确定集合中是否存在指定值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">in</span> myset)    <span class="hljs-comment"># in关键字确定</span><br></code></pre></td></tr></table></figure><ul><li>添加集合项<ul><li>创建集合后无法更改集合项，但<code>add()</code>方法可添加新项目。</li><li>使用<code>update()</code>方法可以将另一个集合项添加到当前集合中。</li><li><code>update()</code>方法中的对象，可以是任何可迭代的对象，例如元组、列表或字典等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.add(<span class="hljs-string">&quot;Orange&quot;</span>)         <span class="hljs-comment"># add()方法添加集合项</span><br><span class="hljs-built_in">print</span>(myset)<br><br>tropical = &#123;<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>&#125;<br>myset.update(tropical)      <span class="hljs-comment"># 添加tropical集合项到myset</span><br><span class="hljs-built_in">print</span>(myset)<br><br>mylist = [<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>myset.update(mylist)        <span class="hljs-comment"># 添加列表元素到myset集合中</span><br><span class="hljs-built_in">print</span>(myset)<br></code></pre></td></tr></table></figure><ul><li>删除集合项<ul><li>使用<code>remove()</code>或<code>discard()</code>方法删除集合中的项目。<ul><li>如果要删除的集合项不存在，使用<code>remove()</code>将会报错。</li><li>如果要删除的集合项不存在，使用<code>discard()</code>不会报错。</li></ul></li><li><code>pop()</code>方法删除最后一项，集合无序，不确定删除的具体项。</li><li><code>clear()</code>方法清空集合，该集合仍在，<code>del</code>关键字则完全删除集合。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.remove(<span class="hljs-string">&quot;Banana&quot;</span>)      <span class="hljs-comment"># remove()方法删除Banana</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-comment"># myset.remove(&quot;Banana&quot;)    # 不存在集合项，报错KeyError: &#x27;Banana&#x27;.</span><br>myset.discard(<span class="hljs-string">&quot;Banana&quot;</span>)     <span class="hljs-comment"># 不存在集合项，使用discard()方法不会报错</span><br><span class="hljs-built_in">print</span>(myset)<br><br>thisset = myset.pop()       <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(myset)<br><span class="hljs-built_in">print</span>(thisset)<br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.clear()               <span class="hljs-comment"># 清空集合</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-keyword">del</span> myset                   <span class="hljs-comment"># 完全删除集合</span><br><span class="hljs-comment"># print(myset)              # NameError: name &#x27;myset&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>集合添加<ul><li><code>union()</code>：返回一个包含两个集合中所有项目的新集合，会排除重复项。</li><li><code>update()</code>：将一个集合的所有项目插入到另一个集合中，会排除重复项。</li><li><code>intersection()</code>：仅包含存在于两个集合中的相同项。</li><li><code>intersection_update()</code>：仅保留两个集合中存在的相同项。</li><li><code>symmetric_difference()</code>：仅包含存在于两个集合中的不同项。</li><li><code>symmetric_difference_update()</code>：仅保留两个集合中存在的不同项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.union(set2)     <span class="hljs-comment"># 返回一个新集合set3</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set1.update(set2)           <span class="hljs-comment"># 将set2中的所有项目插入到set1中</span><br><span class="hljs-built_in">print</span>(set1)<br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.intersection(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 仅包含存在于set1和set2中的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set1.intersection_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 仅保留set1和set2中存在的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.symmetric_difference(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 仅包含存在于set1和set2中的不同项</span><br><br>set1.symmetric_difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 仅保留set1和set2中存在的不同项</span><br></code></pre></td></tr></table></figure><ul><li>集合内置方法<ul><li><code>copy()</code>：复制一个集合。</li><li><code>difference()</code>：返回集合的差集。</li><li><code>difference_update()</code>：移除指定集合中包含与另一个集合相同项的元素。</li><li><code>isdisjoint()</code>：判断两个集合是否相交，不相交返回True，否则返回False。</li><li><code>issubset()</code>：判断集合是否被其他集合包含，是则返回True，否则返回False。</li><li><code>issuperset()</code>：判断集合是否包含其他集合，是则返回True，否则返回False。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.copy()          <span class="hljs-comment"># 复制set1</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set3 = set1.difference(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 差集</span><br>set1.difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 移除set1中与set2相同的元素，返回set1中剩余的元素</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>result = set1.isdisjoint(set2)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断是否相交，不相交为True</span><br>result = set1.issubset(set3)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断set1是否被set3包含</span><br>result = set1.issuperset(set2)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断set1是否包含set2</span><br></code></pre></td></tr></table></figure><h2 id="4-7-字典"><a href="#4-7-字典" class="headerlink" title="4-7 字典"></a>4-7 字典</h2><ul><li>字典<ul><li>用于将数据值存储在键值对中，使用大括号<code>&#123;&#125;</code>进行书写，带有键和值。</li><li>字典项目是有序可更改且不允许重复的，键值对形式呈现，用键名引用。</li><li>使用<code>len()</code>函数获取字典长度，字典的数据类型为<code>&lt;class &#39;dict&#39;&gt;</code>。</li><li>字典的值可以是任何数据类型，例如字符串、整数、布尔值或列表等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,           <span class="hljs-comment"># 字符串</span><br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,                 <span class="hljs-comment"># 整数</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>],    <span class="hljs-comment"># 列表</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(mydict)                     <span class="hljs-comment"># 不允许重复，重复值将覆盖现有值</span><br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;brand&quot;</span>])            <span class="hljs-comment"># 使用键名引用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mydict))                <span class="hljs-comment"># 打印字典中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mydict))               <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问字典项<ul><li>通过引用方括号内的键名来访问字典的项目，还可以使用<code>get()</code>方法获取。</li><li>修改原字典对象，视图对象的值也会发生改变，视图对象包括以下三个方法。<ul><li><code>keys()</code>方法返回字典中所有的键列表。</li><li><code>values()</code>方法返回字典中所有的值列表。</li><li><code>items()</code>方法以列表返回可遍历的元组数组。</li></ul></li><li>使用<code>in</code>关键字确定字典中是否存在指定的键。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;model&quot;</span>])      <span class="hljs-comment"># 引用键名访问</span><br><span class="hljs-built_in">print</span>(mydict.get(<span class="hljs-string">&quot;model&quot;</span>))  <span class="hljs-comment"># get()方法获取</span><br><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 获取键列表</span><br>mydict[<span class="hljs-string">&quot;colors&quot;</span>] = <span class="hljs-string">&quot;white&quot;</span>  <span class="hljs-comment"># 修改原字典mydict的colors对象</span><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 获取的键列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.values())      <span class="hljs-comment"># 获取值列表</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2022</span>       <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.values())      <span class="hljs-comment"># 获取的值列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.items())       <span class="hljs-comment"># 返回字典中的每个项目作为列表的元组</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2020</span>       <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.items())       <span class="hljs-comment"># 获取的元组数组也得到更新</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;model&quot;</span> <span class="hljs-keyword">in</span> mydict:       <span class="hljs-comment"># 检查mydict字典中是否存在model对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;model&#x27; is one of the keys in mydict dictionary.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改字典项<ul><li>通过引用键名来更改特定字典项的值。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2019</span>             <span class="hljs-comment"># 引用键名更改</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2021</span>&#125;)     <span class="hljs-comment"># update()方法更新</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>添加字典项<ul><li>通过使用新的索引键并为其分配值来完成向字典添加项目。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;color&quot;</span>] = <span class="hljs-string">&quot;red&quot;</span>           <span class="hljs-comment"># 使用新的索引键并为其分配值</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">2000000</span>&#125;) <span class="hljs-comment"># update()方法将price添加到字典中</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>删除字典项<ul><li><code>pop()</code>：删除具有指定键名的项目。</li><li><code>popitem()</code>：删除最后插入的项目，3.7之前的版本会删除随机项目。</li><li>使用<code>del</code>关键字删除具有指定键名的项目，也可以完全删除整个字典。</li><li><code>clear()</code>：清空字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,<br>    <span class="hljs-string">&quot;colors&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">20000000</span><br>&#125;<br>mydict.pop(<span class="hljs-string">&quot;model&quot;</span>)         <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)  <br>mydict.popitem()            <span class="hljs-comment"># 删除最后插入的项目</span><br><span class="hljs-built_in">print</span>(mydict)     <br><span class="hljs-keyword">del</span> mydict[<span class="hljs-string">&quot;brand&quot;</span>]         <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.clear()              <span class="hljs-comment"># 清空字典</span><br><span class="hljs-built_in">print</span>(mydict)       <br><span class="hljs-keyword">del</span> mydict                  <span class="hljs-comment"># 完全删除整个字典</span><br><span class="hljs-comment"># print(mydict)             # NameError: name &#x27;mydict&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>字典循环<ul><li>for循环可以遍历字典项，返回值可以是字典的键，也可以是字典的值。</li><li>可以使用for循环配合<code>keys()</code>和<code>values()</code>方法分别返回字典的键和值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 打印字典中的所有键</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(mydict[y])        <span class="hljs-comment"># 打印字典中的所有值</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> mydict.keys():<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># keys()方法返回键</span><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> mydict.values():<br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># values()方法返回值</span><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> mydict.items():<br>    <span class="hljs-built_in">print</span>(x, y)             <span class="hljs-comment"># items()方法遍历keys和values</span><br></code></pre></td></tr></table></figure><ul><li>字典复制<ul><li><code>copy()</code>：复制副本。</li><li><code>dict()</code>：制作副本。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>dict1 = mydict.copy()       <span class="hljs-comment"># 复制副本</span><br><span class="hljs-built_in">print</span>(dict1)<br>dict2 = <span class="hljs-built_in">dict</span>(mydict)        <span class="hljs-comment"># 制作副本</span><br><span class="hljs-built_in">print</span>(dict2)<br></code></pre></td></tr></table></figure><ul><li>字典嵌套<ul><li>指字典可以包含字典。</li><li>可以将其他字典添加到一个新字典中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建一个包含两个字典的字典</span><br>myfamily = &#123;<br>    <span class="hljs-string">&quot;child1&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;,<br>    <span class="hljs-string">&quot;child2&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br><span class="hljs-comment"># 创建一个包含两个字典的新字典</span><br>child1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;<br>child2 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>myfamily = &#123;<br>    <span class="hljs-string">&quot;child1&quot;</span>: child1,<br>    <span class="hljs-string">&quot;child2&quot;</span>: child2<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br></code></pre></td></tr></table></figure><ul><li>字典内置方法<ul><li><code>fromkeys()</code>：创建新字典，以序列中的元素作为字典的键，value为字典所有键对应的初始值。</li><li><code>setdefault()</code>：与<code>get()</code>方法类似，如果键不存在于字典中，就会添加键并将值设为默认值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">seq = (<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Sougou&quot;</span>)<br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq)                 <span class="hljs-comment"># 不指定默认的键值，默认为None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                          <span class="hljs-comment"># &#123;&#x27;Google&#x27;: None, &#x27;Baidu&#x27;: None, &#x27;Sougou&#x27;: None&#125;</span><br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq, <span class="hljs-number">10</span>)             <span class="hljs-comment"># 指定默认的键值为10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                          <span class="hljs-comment"># &#123;&#x27;Google&#x27;: 10, &#x27;Baidu&#x27;: 10, &#x27;Sougou&#x27;: 10&#125;</span><br><br>mydict = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">26</span>&#125;<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>))             <span class="hljs-comment"># 与get()方法类似</span><br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Sex&quot;</span>))             <span class="hljs-comment"># 添加键并将值设为默认值None   </span><br><span class="hljs-comment"># print(mydict.setdefault(&quot;Sex&quot;, &quot;female&quot;)) # 默认为None后再设置无效</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><ul><li>数组<ul><li>Python没有数组类型，只有列表类型，数组可用列表替代。</li><li>数组用于在一个变量中存储多个值，通过索引号来访问这些值。</li><li>Python没有对数组的内置支持，列表代替时内置方法与之相通。<ul><li><code>append()</code>、<code>clear()</code>、<code>copy()</code>、<code>count()</code>、<code>extend()</code>。</li><li><code>index()</code>、<code>insert()</code>、<code>pop()</code>、<code>remove()</code>、<code>reverse()</code>、<code>sort()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">cars = [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>]<br><span class="hljs-built_in">print</span>(cars[<span class="hljs-number">0</span>])                <span class="hljs-comment"># 获取第一个数组项的值</span><br><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span>            <span class="hljs-comment"># 修改第一个数组项的值</span><br><span class="hljs-built_in">print</span>(cars)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cars))              <span class="hljs-comment"># 返回该数组的长度，长度总比最高数组索引数大1</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cars:                <span class="hljs-comment"># 使用for循环遍历数组的所有元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>cars.append(<span class="hljs-string">&quot;Honda&quot;</span>)          <span class="hljs-comment"># append()方法添加元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.pop(<span class="hljs-number">1</span>)                   <span class="hljs-comment"># pop()方法从数组删除第二个元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.remove(<span class="hljs-string">&quot;Volvo&quot;</span>)          <span class="hljs-comment"># remove()方法从数组删除Volvo元素，只删除第一次出现的指定值</span><br><span class="hljs-built_in">print</span>(cars)<br></code></pre></td></tr></table></figure><ul><li>numpy库定义的数组<ul><li>数组在numpy库中定义，若要使用需事先导入库，数组类型为<code>&lt;class &#39;numpy.ndarray&#39;&gt;</code>。</li><li>numpy中的数组对象称为ndarray，通过使用<code>array()</code>函数可以创建一个numpy的ndarray对象。</li><li>将列表、元组或任何类似数组的对象传递给<code>array()</code>方法，<code>array()</code>方法将其转换为ndarray。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>myArray = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(myArray)                <span class="hljs-comment"># 列表创建数组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myArray))          <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>myArray = np.array(((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(myArray)                <span class="hljs-comment"># 元组创建数组</span><br></code></pre></td></tr></table></figure><ul><li>数组维度<ul><li>数组维度是嵌套数组的一个级别，嵌套数组即数组中有数组。</li><li>零维数组，也叫标量，数组值只有一个。</li><li>一维数组，指由多个元素值构成的数组。</li><li>二维数组<ul><li>是一维数组的数组，通常用于表示矩阵或二阶张量。</li><li>numpy库中有专门用于矩阵运算的完整子模块<code>numpy.mat</code>。</li></ul></li><li>三维数组，是二维数组的数组。</li><li>数组可以拥有任意数量的维度，创建数组时使用ndmin参数定义维数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = <span class="hljs-number">1</span><br>arr0 = np.array(a)            <span class="hljs-comment"># 零维数组</span><br><span class="hljs-built_in">print</span>(arr0)<br><span class="hljs-built_in">print</span>(arr0.shape)             <span class="hljs-comment"># 返回元组，获取数组各个维度的维数</span><br><span class="hljs-built_in">print</span>(arr0.ndim)              <span class="hljs-comment"># ndim属性返回一个整数，检查数组维度</span><br><br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr1 = np.array(b)            <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1)<br><span class="hljs-built_in">print</span>(arr1.shape)<br><span class="hljs-built_in">print</span>(arr1.ndim)<br><br>c = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>arr2 = np.array(c)            <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2)<br><span class="hljs-built_in">print</span>(arr2.shape)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><br>d = [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]<br>arr3 = np.array([c, d])       <span class="hljs-comment"># 三维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.shape)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                   <span class="hljs-comment"># 五维数组</span><br><span class="hljs-built_in">print</span>(arr5.shape)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><ul><li>数组的裁切<ul><li>类似列表和元组的切片，<code>[start: end]</code>或<code>[start: end: step]</code>。</li><li>将元素从一个给定的索引切到另一个给定的索引，包含开始索引，不包含结束索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1.ndim)              <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])             <span class="hljs-comment"># 裁切索引1到5的元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])          <span class="hljs-comment"># 设置裁切步长</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])          <span class="hljs-comment"># 返回数组中相隔的元素</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负裁切，索引从-1开始</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2.ndim)              <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])          <span class="hljs-comment"># 第二个元素[6, 7, 8, 9, 10]，索引号从1到4的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])          <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号为2的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])       <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号从1到4的元素，返回数组</span><br></code></pre></td></tr></table></figure><h1 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6 if语句"></a>6 if语句</h1><ul><li>if语句<ul><li>使用<code>if</code>关键字编写。</li><li>支持<code>if...</code>、<code>if...elif...</code>、<code>if...elif...else...</code>和<code>if...else...</code>格式。</li><li><code>if...</code>格式，如果只有一条语句要执行，可以将该条执行语句与if语句放在同一行上。</li><li><code>if...else...</code>格式，如果只有一条语句要执行，可以将执行语句与if语句放在同一行。</li><li>如果if语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)                      <span class="hljs-comment"># 注意缩进，若没有缩进，会报错</span><br><span class="hljs-keyword">elif</span> a == b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a等于b.&quot;</span>)                      <span class="hljs-comment"># 如果if条件不成立，则执行elif</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)                      <span class="hljs-comment"># else关键字捕获任何未被上述条件捕获的内容</span><br><br><span class="hljs-keyword">if</span> a &lt; b: <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)                <span class="hljs-comment"># 只有一条语句要执行，将执行语句与if语句放在同一行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>) <span class="hljs-keyword">if</span> a &lt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>)       <span class="hljs-comment"># 又叫三元运算符或条件表达式，还可同一行上多个else语句</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>) <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>) <span class="hljs-keyword">if</span> a==b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>)<br><br>x = <span class="hljs-number">23</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">10</span>:                                <span class="hljs-comment"># if嵌套</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于10.&quot;</span>)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">20</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于20.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小于20.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a == b:<br>    <span class="hljs-keyword">pass</span>                                  <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><h1 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7 for循环"></a>7 for循环</h1><ul><li>for循环<ul><li>用于迭代序列，例如列表、元组、集合或字符串等，不需要预先设置索引变量。</li><li>在循环遍历所有项目前停止循环，可以使用<code>break</code>关键字。</li><li><code>continue</code>关键字，停止循环的当前迭代并继续下一个循环。</li><li>如果for循环语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 遍历列表</span><br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Banana&quot;</span>:<br>    <span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 遍历字符串</span><br><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(z)                <span class="hljs-comment"># Apple, Banana</span><br>    <span class="hljs-keyword">if</span> z == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span>               <span class="hljs-comment"># 遍历到Banana时break停止，跳出循环</span><br><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># Apple</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># 遍历到Banana时continue跳过，继续下一个循环</span><br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># Apple, Cherry</span><br><br>obj = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;big&quot;</span>, <span class="hljs-string">&quot;delicious&quot;</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> obj:               <span class="hljs-comment"># for循环嵌套</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>        <span class="hljs-built_in">print</span>(a, b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">pass</span>                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>range()函数<ul><li>循环一组代码指定的次数，可以使用<code>range()</code>函数。</li><li>返回一个数字序列，默认从0开始，递增1，并以指定的数字结束。</li><li><code>range()</code>函数默认是以0作为起始值的，可通过添加参数来指定。</li><li><code>range()</code>函数默认序列递增1，可以通过添加第三个参数来指定。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 打印0到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># 打印3到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(c)                <span class="hljs-comment"># 打印3到30的值，序列递增3</span><br></code></pre></td></tr></table></figure><ul><li>else<ul><li>for循环中的<code>else</code>关键字指定循环结束时要执行的代码块。</li><li>如果循环语句被<code>break</code>停止，则else语句的代码块不会被执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 打印从0到5的所有数字，并在循环结束时打印一条信息</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">if</span> y == <span class="hljs-number">3</span>: <span class="hljs-keyword">break</span>        <span class="hljs-comment"># 当循环到y为3时，break停止并跳出循环，else语句不执行</span><br>    <span class="hljs-built_in">print</span>(y)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8 while循环"></a>8 while循环</h1><ul><li>while循环<ul><li>只要条件为真，就可以执行一组语句。</li><li>使用<code>break</code>关键字，即使while条件为真，也可以停止循环。</li><li>使用<code>continue</code>关键字，停止当前迭代，并继续下一个循环。</li><li>当条件不再为真时运行一段代码，可以使用else语句。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 打印小于6的数</span><br>    a += <span class="hljs-number">1</span>                  <span class="hljs-comment"># 注意递增，否则循环永远继续</span><br><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> b &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(b)<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">break</span>               <span class="hljs-comment"># 当b为3时break停止，跳出循环</span><br>    b += <span class="hljs-number">1</span><br><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> c &lt; <span class="hljs-number">6</span>:<br>    c += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> c == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># 当c为3时，继续下一次迭代</span><br>    <span class="hljs-built_in">print</span>(c)<br><br>x = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> x &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(x)<br>    x += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:                       <span class="hljs-comment"># 条件不再为真时运行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is no longer less than 6.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
