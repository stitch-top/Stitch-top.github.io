<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>TestNG测试框架</title>
    <link href="/2020/07/23/ce-shi-za-tan/java/ce-shi-za-tan.java.testng-ce-shi-kuang-jia/"/>
    <url>/2020/07/23/ce-shi-za-tan/java/ce-shi-za-tan.java.testng-ce-shi-kuang-jia/</url>
    
    <content type="html"><![CDATA[<p>TestNG，Next Generation，是一个开源自动化测试框架，灵感来自JUnit和NUnit，引入了一些新的功能，使用更加方便，旨在涵盖所有类别的测试，例如，单元测试、功能测试、端到端测试、集成测试等。<span id="more"></span></p><h2 id="1、首个测试用例"><a href="#1、首个测试用例" class="headerlink" title="1、首个测试用例"></a>1、首个测试用例</h2><ul><li>IntelliJ IDEA的src中新建一个TestNG包，包中创建一个FirstTest.java文件。</li></ul><h2 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h2><h2 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h2>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>TestNG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUnit4测试框架</title>
    <link href="/2020/06/30/ce-shi-za-tan/java/ce-shi-za-tan.java.junit4-ce-shi-kuang-jia/"/>
    <url>/2020/06/30/ce-shi-za-tan/java/ce-shi-za-tan.java.junit4-ce-shi-kuang-jia/</url>
    
    <content type="html"><![CDATA[<p>JUnit是一个编写可重复测试的Java单元测试框架，继承TestCase类，是xUnit架构的一个实例，在测试驱动开发中发挥着至关重要的作用，提出了“首先测试然后编码”的概念，强调为一段可以先测试然后实现的代码设置测试数据。<span id="more"></span></p><h2 id="1、安装与简介"><a href="#1、安装与简介" class="headerlink" title="1、安装与简介"></a>1、安装与简介</h2><ul><li>单元测试框架，主要完成以下任务。<ul><li>提供用例组织与执行：用例多时容易产生扩展性与维护性等问题，需要考虑用例的规范与组织问题。</li><li>提供丰富的断言方法：用例执行完成后，需要实际与预期结果比较(即断言)，从而断定用例是否通过。</li><li>提供丰富的日志：用例执行失败时可以抛出清晰的失败原因，当所有用例执行完成后能提供丰富的执行结果。</li></ul></li><li>IntelliJ IDEA安装：File-&gt;Settings-&gt;左侧Plugins-&gt;右上Marketplace-&gt;分别搜索JUnit和TestNG进行Install-&gt;重启即可。</li></ul><h2 id="2、单元用例测试"><a href="#2、单元用例测试" class="headerlink" title="2、单元用例测试"></a>2、单元用例测试</h2><ul><li>IntelliJ IDEA的src中新建一个UnitTest包，包中创建一个JunitDemo.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JunitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> &#123;                        <span class="hljs-comment">// 创建被测试类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;          <span class="hljs-comment">// 计算并返回两个参数的和</span><br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test</span>                                       <span class="hljs-comment">// 用于注释一个普通的方法为一条测试用例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myFirstTest</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-number">2</span> + <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);                 <span class="hljs-comment">// 断言两个值是否相关</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd</span><span class="hljs-params">()</span> &#123;<br>        JunitDemo.<span class="hljs-type">Count</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>();    <span class="hljs-comment">// new出Count类</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> count.add(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);           <span class="hljs-comment">// 调用add()方法并传参</span><br>        assertEquals(result, <span class="hljs-number">4</span>);                <span class="hljs-comment">// 断言返回结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/001.jpg" srcset="/img/load.gif" lazyload alt="单元测试用例"></p><h2 id="3、注解"><a href="#3、注解" class="headerlink" title="3、注解"></a>3、注解</h2><ul><li>说明<ul><li>@Test：标识一条测试用例。</li><li>@Ignore：忽略的测试用例。</li><li>@Before：每一个测试方法之前运行。</li><li>@After：每一个测试方法之后运行。</li><li>@BeforeClass：所有测试开始之前运行。</li><li>@AfterClass：所有测试结果之后运行。</li></ul></li><li>修改IntelliJ IDEA中的JunitDemo.java文件内容。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.Ignore;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JunitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> &#123;                        <span class="hljs-comment">// 创建被测试类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;          <span class="hljs-comment">// 计算并返回两个参数的和</span><br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">division</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;     <span class="hljs-comment">// 计算并返回两个数相除的结果</span><br>            <span class="hljs-keyword">return</span> a / b;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test(timeout = 100)</span>                        <span class="hljs-comment">// 验证超时</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        Thread.sleep(<span class="hljs-number">101</span>);<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().add(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test(expected = ArithmeticException.class)</span> <span class="hljs-comment">// 验证抛出异常</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDivision</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().division(<span class="hljs-number">8</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-meta">@Ignore</span>                                     <span class="hljs-comment">// 跳过该条用例</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Count</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> count.add(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>        assertEquals(result, <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/002.jpg" srcset="/img/load.gif" lazyload alt="注解"></p><ul><li>testAdd1()用例中设置timeout&#x3D;100，该用例运行时间不超过100毫秒，用例中添加sleep()休眠101毫秒，因此用例执行失败。</li><li>Java中被除数不能为0，所以8&#x2F;0会报ArithmeticException异常，用例中设置验证该异常，说明抛出该异常符合预期。</li></ul><h3 id="3-1、Fixture"><a href="#3-1、Fixture" class="headerlink" title="3.1、Fixture"></a>3.1、Fixture</h3><ul><li>Fixture指一个测试运行所需的固定环境。<ul><li>通常要把环境设置成已知状态来创建测试，每次测试开始时都处于一个固定的初始状态。</li><li>测试结束后需要把测试状态还原，因此测试执行所需要的固定环境称之为Test Fixture。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个TestFixture.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFixture</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Count</span> &#123;                        <span class="hljs-comment">// 创建被测试类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;          <span class="hljs-comment">// 计算并返回两个参数的和</span><br>            <span class="hljs-keyword">return</span> x + y;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">division</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;     <span class="hljs-comment">// 计算并返回两个数相除的结果</span><br>            <span class="hljs-keyword">return</span> a / b;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@BeforeClass</span>                                <span class="hljs-comment">// 在当前测试类开始时运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeClass</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==============beforeClass.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@AfterClass</span>                                 <span class="hljs-comment">// 在当前测试类结束后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterClass</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;==============afterClass.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Before</span>                                     <span class="hljs-comment">// 每个测试方法运行之前运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;******Before.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@After</span>                                      <span class="hljs-comment">// 每个测试方法运行之后运行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;******After.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd1</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().add(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>);<br>        assertEquals(<span class="hljs-number">7</span>, result);<br>        System.out.println(<span class="hljs-string">&quot;Test run testadd1.&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAdd2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Count</span>().add(<span class="hljs-number">15</span>, <span class="hljs-number">12</span>);<br>        assertEquals(<span class="hljs-number">27</span>, result);<br>        System.out.println(<span class="hljs-string">&quot;Test run testadd2.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/003.jpg" srcset="/img/load.gif" lazyload alt="注解-Fixture"></p><ul><li>若是Web UI自动化测试，可将浏览器驱动的定义放到@Before中，浏览器的关闭放到@After中。</li></ul><h3 id="3-2、Rule"><a href="#3-2、Rule" class="headerlink" title="3.2、Rule"></a>3.2、Rule</h3><ul><li>一个JUnit Rule即一个实现了TestRule的类，类似于@Before和@After等注解，用在每个测试方法的执行前后。</li><li>@Before和@After等注解都只能作用于一个类，而JUnit Rule可以动态获取将要运行的测试类和测试方法的信息。</li><li>如果一个setup需在两个类中同时使用，就要在两个测试类中定义相同的@Before和@After等注解，会造成代码重复。</li></ul><h4 id="3-2-1、框架自带"><a href="#3-2-1、框架自带" class="headerlink" title="3.2.1、框架自带"></a>3.2.1、框架自带</h4><ul><li>JUnit4添加了很多核心Rule，包括Rule特性。<ul><li>Timeout：为类中的所有测试应用相同的超时时间。</li><li>ExpectedException：在测试中指定期望的异常类型与消息。</li><li>TemporaryFolder：测试可创建文件与目录，并在测试运行结束后将其删除，对于与文件系统打交道，且独立运行的测试而言很有用。</li><li>ExternalResource：一种资源使用模式，提前建好资源并在测试结束后将其销毁，对于使用socket、嵌入式服务器等资源的测试而言很有用。</li><li>ErrorCollector：让测试在失败后继续运行，并在测试结束时报告所有错误，对于需验证大量独立条件的测试而言很有用。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个RuleTimeoutDemo.java文件，来看Timeout这个Rule的使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Rule;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.rules.Timeout;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleTimeoutDemo</span> &#123;<br>    <span class="hljs-comment">// 使用Timeout这个Rule</span><br>    <span class="hljs-meta">@Rule</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">Timeout</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timeout</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">1010</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">990</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/008.jpg" srcset="/img/load.gif" lazyload alt="注解-Rule-框架自带"></p><ul><li>JUnit所提供的Timeout类用于控制测试用例的执行超时时间，已弃用，难怪用例运行结果总失效😅。</li><li>设置时长1秒，用例执行超过则失败，testMethod1和testMethod2中，前者超过1秒，所以运行失败。</li><li>新版JUnit5早在2017年就已发布，具体内容可参考【<a href="https://zhuanlan.zhihu.com/p/366142877">五年了，你还在用Junit4吗？</a>】。</li></ul><h4 id="3-2-2、自定义的"><a href="#3-2-2、自定义的" class="headerlink" title="3.2.2、自定义的"></a>3.2.2、自定义的</h4><ul><li>自定义一个Rule即implement一个TestRule接口，并实现apply()方法，该方法需返回一个Statement对象。</li><li>IntelliJ IDEA的UnitTest中，创建一个MethodNameRule.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.rules.TestRule;<br><span class="hljs-keyword">import</span> org.junit.runner.Description;<br><span class="hljs-keyword">import</span> org.junit.runners.model.Statement;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodNameRule</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestRule</span> &#123;<br>    <span class="hljs-keyword">public</span> Statement <span class="hljs-title function_">apply</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Statement base, <span class="hljs-keyword">final</span> Description description)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Statement</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evaluate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>                <span class="hljs-comment">// 在测试方法运行之前做一些事情，在base.evaluate()之前</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> description.getClassName();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> description.getMethodName();<br>                base.evaluate();            <span class="hljs-comment">//运行测试方法</span><br>                <span class="hljs-comment">// 在测试方法运行之后做一些事情，在base.evaluate()之后</span><br>                System.out.println(<span class="hljs-string">&quot;Class Name: &quot;</span> + className + <span class="hljs-string">&quot;\nMethod Name: &quot;</span> + methodName);<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实现的功能：每次运行测试用例后，打印当前测试用例的类名和方法名。</li><li>IntelliJ IDEA的UnitTest中，创建一个RuleTestDemo.java文件，添加定义的MethodNameRule。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Rule;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.rules.Timeout;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RuleTestDemo</span> &#123;<br>    <span class="hljs-comment">// 使用Timeout这个Rule</span><br>    <span class="hljs-meta">@Rule</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">Timeout</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timeout</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-comment">// 使用自定义的Rule</span><br>    <span class="hljs-meta">@Rule</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">MethodNameRule</span> <span class="hljs-variable">methodNameRule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodNameRule</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">1010</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Thread.sleep(<span class="hljs-number">990</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/009.jpg" srcset="/img/load.gif" lazyload alt="注解-Rule-自定义的"></p><h2 id="4、用例执行顺序"><a href="#4、用例执行顺序" class="headerlink" title="4、用例执行顺序"></a>4、用例执行顺序</h2><ul><li>JUnit通过@FixMethodOrder注解来控制测试方法的执行顺序。</li><li>注解参数是org.junit.runners.MethodSorters对象，该枚举类定义了三种顺序类型。<ul><li>MethodSorters.JVM：JVM方法顺序，即代码中定义的方法顺序。</li><li>MethodSorters.DEFAULT：默认顺序，即以确定但不可预期的顺序。</li><li>MethodSorters.NAME_ASCENDING：按照方法名字母顺序。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个TestRunSequence.java文件。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.FixMethodOrder;<br><span class="hljs-keyword">import</span> org.junit.runners.MethodSorters;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertEquals;<br><br><span class="hljs-meta">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</span>   <span class="hljs-comment">// 按照方法名字母顺序执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRunSequence</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestCase1</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-number">2</span>+<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestCase2</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-number">2</span>+<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">TestAisa</span><span class="hljs-params">()</span> &#123;<br>        assertEquals(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;Hi&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/004.jpg" srcset="/img/load.gif" lazyload alt="用例执行顺序"></p><ul><li>MethodSorters.NAME_ASCENDING设置按照方法名字母顺序执行，所以TestAisa()先被执行了。</li></ul><h2 id="5、断言方法"><a href="#5、断言方法" class="headerlink" title="5、断言方法"></a>5、断言方法</h2><ul><li>JUnit所提供的断言方法与说明，如下所示。<ul><li>assertArrayEquals(expecteds, actuals)：查看两个数组是否相等。</li><li>assertEquals(expected, actual)：查看两个对象是否相等，类似于字符串比较使用的equals()方法。</li><li>assertNotEquals(first, second)：查看两个对象是否不相等。</li><li>assertNull(object)：查看对象是否为空。</li><li>assertNotNull(object)：查看对象是否不为空。</li><li>assertSame(expected, actual)：查看两个对象的引用是否相等，类似于使用“&#x3D;&#x3D;”比较两个对象。</li><li>assertNotSame(unexpected, actual)：查看两个对象的引用是否不相等，类似于使用“!&#x3D;”比较两个对象。</li><li>assertTrue(condition)：查看运行结果是否为True。</li><li>assertFalse(condition)：查看运行结果是否为False。</li><li>assertThat(actual, matcher)：查看实际值是否满足指定的条件。</li><li>fail()：让测试失败。</li></ul></li><li>其中assertEquals()用得最多，IntelliJ IDEA的UnitTest中，创建一个AssertTest.java文件，来看下assertTrue()的使用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertTrue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssertTest</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断一个数是否为素数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Boolean <span class="hljs-title function_">Prime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;Math.sqrt(n); i++) &#123;<br>            <span class="hljs-keyword">if</span>(n%i==<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPrime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br>        assertTrue(AssertTest.Prime(n));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/005.jpg" srcset="/img/load.gif" lazyload alt="断言方法"></p><ul><li>Prime()方法用于判断一个数是否为素数，并返回True或False，在测试用例中通过assertTrue断言结果。</li></ul><h2 id="6、用例批量运行"><a href="#6、用例批量运行" class="headerlink" title="6、用例批量运行"></a>6、用例批量运行</h2><ul><li>以上测试用例的运行主要针对单个测试类进行，如果想运行所有用例，有两种方法。</li></ul><h3 id="6-1、IntelliJ-IDEA目录运行"><a href="#6-1、IntelliJ-IDEA目录运行" class="headerlink" title="6.1、IntelliJ IDEA目录运行"></a>6.1、IntelliJ IDEA目录运行</h3><ul><li>选中要运行的所有用例所在目录，鼠标右键Run ‘Tests in ‘UnitTest’ ‘。</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/006.jpg" srcset="/img/load.gif" lazyload alt="用例批量运行-IntelliJ IDEA目录运行"></p><h3 id="6-2、测试套件运行"><a href="#6-2、测试套件运行" class="headerlink" title="6.2、测试套件运行"></a>6.2、测试套件运行</h3><ul><li>JUnit提供了一种批量运行测试类的方法，叫测试套件。</li><li>遵循原则<ul><li>创建一个空类作为测试套件的入口。</li><li>使用注解org.junit.runner.RunWith和org.junit.runners.Suite.SuitClasses修饰空类。</li><li>将org.junit.runners.Suite作为参数传给注解RunWith，提示为此类测试使用套件运行器执行。</li><li>把需要放入此测试套件的测试类组成数组，作为注解SuitClasses的参数。</li><li>保证创建的空类使用public修饰，并且存在公开的不带任何参数的构造函数。</li></ul></li><li>IntelliJ IDEA的UnitTest中，创建一个RunAllTest.java文件，测试类即RunAllTest。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> UnitTest;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.junit.runners.Suite;<br><span class="hljs-keyword">import</span> org.junit.runners.Suite.SuiteClasses;<br><br><span class="hljs-meta">@RunWith(Suite.class)</span><br><span class="hljs-meta">@SuiteClasses(&#123;</span><br><span class="hljs-meta">        JunitDemo.class,</span><br><span class="hljs-meta">        TestFixture.class,</span><br><span class="hljs-meta">        AssertTest.class,</span><br><span class="hljs-meta">        TestRunSequence.class,</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunAllTest</span> &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Java.JUnit4%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/007.jpg" srcset="/img/load.gif" lazyload alt="用例批量运行-测试套件运行"></p><ul><li>将需要运行的测试类放到SuiteClasses中，运行RunAllTest测试类即可批量运行测试用例。</li></ul><blockquote><p><a href="http://class.itest.info/junit">Java Junit测试框架-重定向科技</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JUnit4自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python爬虫</title>
    <link href="/2020/02/18/ce-shi-za-tan/python/ce-shi-za-tan.python.python-pa-chong/"/>
    <url>/2020/02/18/ce-shi-za-tan/python/ce-shi-za-tan.python.python-pa-chong/</url>
    
    <content type="html"><![CDATA[<p>网络爬虫，即网页蜘蛛，互联网时代下的一种网络信息搜集技术，按照一定规则自动抓取万维网信息的程序或脚本，使用该技术获取站点数据，对数据进行加工后就可以拿来当测试数据使用。<span id="more"></span></p><h2 id="1、获取课程信息"><a href="#1、获取课程信息" class="headerlink" title="1、获取课程信息"></a>1、获取课程信息</h2><ul><li>爬虫套路<ul><li>访问一个站点，获取该站点的HTML代码。</li><li>解析代码，将感兴趣的数据从代码中分离出来。</li><li>将数据打印出来，并存储数据到本地。</li></ul></li><li>实例分析<ul><li>假设需要抓取<a href="https://www.imooc.com/">慕课网</a>的所有自动化测试课程。</li><li>先访问<a href="https://coding.imooc.com/?c=zdhtest">自动化测试</a>课程页面，拿到对应的HTML代码。</li><li>解析HTML代码，打印并保存所有课程的名称和地址。</li></ul></li><li>使用环境<ul><li>Requests库用于发起HTTP请求，并获取目标站点的HTML代码。</li><li>BeautifulSoup库用于解析HTML代码，从中提取课程的名称和地址等内容。</li></ul></li><li>HTML代码分析</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;course-card&quot;</span> <span class="hljs-attr">data-end-time</span>=<span class="hljs-string">&quot;1649347199&quot;</span> <span class="hljs-attr">data-cid</span>=<span class="hljs-string">&quot;558&quot;</span> <span class="hljs-attr">data-typestr</span>=<span class="hljs-string">&quot;实战&quot;</span> <span class="hljs-attr">data-name</span>=<span class="hljs-string">&quot;测试高薪必学-大厂全链路质量保障体系落地实战&quot;</span> <span class="hljs-attr">data-position</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/class/558.html&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-image: url(//img.mukewang.com/szimg/6226b94e0958682505400304.jpg)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title ellipsis2&quot;</span>&gt;</span>测试高薪必学-大厂全链路质量保障体系落地实战<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--实战--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>进阶 · 76人报名<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--拼团相关--&gt;</span><br>        <span class="hljs-comment">&lt;!--无优惠--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;two clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;price l red bold&quot;</span>&gt;</span>￥488.00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;add-shop-cart r&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon imv2-shopping-cart&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>加购物车<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--学习进度--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>课程名称的HTML标签是<code>&lt;p class=&quot;title ellipsis2&quot;&gt;</code>，只要获取页面上的所有该标签文本，就能把课程名称解析出来。</li><li>新建名为getCourses.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 定义被抓取页面的url</span><br>url = <span class="hljs-string">&quot;https://coding.imooc.com/?c=zdhtest&quot;</span><br><span class="hljs-comment"># 获取被抓取页面的HTML代码，并使用html.parser实例化BeautifulSoup</span><br>soup = BeautifulSoup(requests.get(url).text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br><span class="hljs-comment"># 遍历页面上所有的&lt;p class=&quot;title ellipsis2&quot;&gt;</span><br><span class="hljs-keyword">for</span> course <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&quot;p&quot;</span>, attrs=&#123;<span class="hljs-string">&quot;class&quot;</span>: <span class="hljs-string">&quot;title ellipsis2&quot;</span>&#125;):<br>    <span class="hljs-comment"># 打印出&lt;p class=&quot;title ellipsis2&quot;&gt;的text属性</span><br>    <span class="hljs-built_in">print</span>(course.text)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Text">测试高薪必学-大厂全链路质量保障体系落地实战<br>Python自动化测试开发实战  搞定分布式并发场景<br>深度解锁SpringCloud主流组件 一战解决微服务诸多难题<br>Java Web自动化测试 Selenium基础到企业实际应用（全新上线）<br>测试面试全方位讲解   百度资深工程师亲授   兼具广度与深度<br>Python Web自动化测试系统入门   在测试行业更抢手<br>Selenium3与Python3实战Web自动化测试框架<br>Selenium3.0平台级自动化测试框架综合实战<br>Python移动自动化测试面试-面试分析+知识理论+面试技巧<br></code></pre></td></tr></table></figure><h2 id="2、图片爬虫"><a href="#2、图片爬虫" class="headerlink" title="2、图片爬虫"></a>2、图片爬虫</h2><ul><li>图片爬虫套路与文本爬虫类似，区别在于前者会下载需要的文件，后者可能做一些持久化的工作。</li><li>实例分析<ul><li>访问<a href="http://jandan.net/drawings">煎蛋画廊</a>主页，获取HTML代码。</li><li>分析代码，找出所有图片的HTML特征。</li><li>解析代码，拿到所有图片的src，图片的HTML标签默认img，只需拿到页面上所有的img标签的src即可。</li><li>通过src下载图片。</li></ul></li><li>新建名为getImages.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><span class="hljs-comment"># 网站做了反爬处理，会拒绝类似爬虫的请求，后台发现请求的User-Agent异常，即返回403错误</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">downloadFile</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Downding %s&quot;</span> %url)<br>    local_Filename = url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>    r = requests.get(url, stream=<span class="hljs-literal">True</span>, headers=headers)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(local_Filename, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> r.iter_content(chunk_size=<span class="hljs-number">1024</span>):<br>            <span class="hljs-keyword">if</span> chunk:<br>                f.write(chunk)<br>                f.flush()<br>    <span class="hljs-keyword">return</span> local_Filename<br><br>url = <span class="hljs-string">&#x27;http://jandan.net/drawings&#x27;</span><br>soup = BeautifulSoup(requests.get(url, headers=headers).text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment"># 使用bs的过滤器功能</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validImg</span>(<span class="hljs-params">src</span>):<br>    <span class="hljs-keyword">return</span> src.endswith(<span class="hljs-string">&#x27;jpg&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;tva4.sinaimg.cn&#x27;</span> <span class="hljs-keyword">in</span> src<br><br><span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;img&#x27;</span>, src=validImg):<br>    src = img[<span class="hljs-string">&#x27;src&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> src.startswith(<span class="hljs-string">&#x27;http&#x27;</span>):<br>        src = <span class="hljs-string">&#x27;http:&#x27;</span> + src<br>    downloadFile(src)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Text">Downding http://tva4.sinaimg.cn/mw600/9ca31f66ly1g9jqalor18j21650u0acq.jpg<br>Downding http://tva4.sinaimg.cn/mw600/9ca31f66ly1g9jqan3sn1j21650u0ade.jpg<br></code></pre></td></tr></table></figure><h2 id="3、知乎最热问题"><a href="#3、知乎最热问题" class="headerlink" title="3、知乎最热问题"></a>3、知乎最热问题</h2><ul><li>实例分析<ul><li>获取<a href="https://www.zhihu.com/explore">知乎近期热点</a>功能，访问页面获取HTML代码。</li><li>分析代码，找出近期最热的HTML特征。</li><li>解析代码，拿到所有满足条件的链接。</li><li>打印链接。</li></ul></li><li>分析代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">as</span>=<span class="hljs-string">&quot;[object Object]&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;css-1nd7dqm&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.zhihu.com/question/531937490&quot;</span>&gt;</span><br>    5 月 9 日俄罗斯在莫斯科红场举行纪念卫国战争胜利 77 周年阅兵式，红场阅兵有哪些看点值得关注?<br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>只需要拿到所有的class&#x3D;”css-1nd7dqm”的a标签即可。</li><li>新建名为getZhihu.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>url = <span class="hljs-string">&#x27;https://www.zhihu.com/explore&#x27;</span><br>headers = &#123;<br>    <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0&#x27;</span><br>&#125;<br><br>soup = BeautifulSoup(requests.get(url, headers=headers).text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>, class_=<span class="hljs-string">&#x27;css-1nd7dqm&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(link.text)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Text">5 月 9 日俄罗斯在莫斯科红场举行纪念卫国战争胜利 77 周年阅兵式，红场阅兵有哪些看点值得关注?<br>5 月 7 日晚浙江舟山出现血红天空，气象局称「是光的折射现象，光源尚不清楚」，你拍到这一景象了吗？<br>5 月 8 日香港特别行政区第六任行政长官选举投票结束，李家超当选，有哪些信息值得关注？<br>5 月 8 日上海新增本土「322+3625」，新增死亡 11 例，目前疫情情况如何？<br></code></pre></td></tr></table></figure><h2 id="4、爬虫对抗"><a href="#4、爬虫对抗" class="headerlink" title="4、爬虫对抗"></a>4、爬虫对抗</h2><ul><li>爬虫爬取的一些资源，一般都是服务提供商重点保护资产，许多站点都会启用反爬虫策略。</li><li>常用手段<ul><li>监控后台日志和流量模式，发现异常活动就限制访问。<ul><li>可以通过以下措施进行访问限制。<ul><li>访问速率限制</li><li>检测异常活动</li><li>不只通过IP地址监控和限制访问速率，也可以使用表单提交速度、User-Agent等指标。</li><li>使用验证码替代临时阻止访问的方案。</li></ul></li><li>反爬建议：可以使用IP池，降低访问频率或浏览器自动化工具爬虫来进行对抗。</li></ul></li><li>要求注册和登录<ul><li>为避免自动化创建许多帐户的脚本，应该做以下事情。<ul><li>注册需电子邮箱，并且用户必须通过链接验证邮箱才能激活帐户，每个邮箱只允许一个账户。</li><li>需要在注册帐户期间显示验证码，防止自动化脚本创建帐户。</li></ul></li><li>反爬建议：爬虫模拟登录，降低访问频率，以免暴露真实意图。</li></ul></li><li>阻止来自云托管主机和爬虫服务的IP地址的访问。<ul><li>爬虫有时会从网络托管服务(例如Amazon Web Services或Google App Engine)或VPSes运行。</li><li>限制(或显示验证码)来源于此类云主机服务使用的IP地址请求访问网站，可以阻止从爬虫服务使用的IP地址的访问。</li><li>还可以限制代理或VPN提供商使用的IP地址的访问，爬虫可能使用此类代理服务器来避免单个IP发出许多请求。</li><li>反爬建议：使用代理和IP池。</li></ul></li><li>如果采取阻止访问的做法，将错误消息进行调整，确保不让爬虫了解出错的实际原因。<ul><li>对用户友好的显示内容，例如“抱歉，网站出了一些问题，请联系xxx进行维护。”</li><li>反爬建议：使用浏览器自动化工具，伪装成真实的用户。</li></ul></li><li>如果网站被爬虫访问，则使用验证码。<ul><li>验证码可以有效地阻止爬虫，但对用户也会产生负面影响。</li><li>使用验证码注意事项。<ul><li>不要自己实现验证码，应使用类似Google的reCaptcha的东西，可以更好的解决问题。</li><li>不要在HTML标记中包含验证码的解决方案。</li><li>验证码可以批量验证。</li></ul></li><li>反爬建议：使用人肉打码服务。</li></ul></li><li>将文本内容转成图片<ul><li>服务器端将文本转换成图像，然后在客户端显示，可以阻碍简单的爬虫提取文本。</li><li>不过这种方法对于屏幕阅读器，搜索引擎，性能等是不利的，也容易被一些OCR技术绕过。</li><li>反爬建议：使用OCR图片识别技术。</li></ul></li><li>不要公开完整数据集<ul><li>如果是以下情况，那么该方法将无效。<ul><li>爬虫机器人或脚本并不想或需完整的数据集。</li><li>文章的URL类似example.com&#x2F;article.php?articleId&#x3D;12345格式，爬虫可简单迭代并请求到所有文章。</li><li>编写脚本跟踪文章内容的链接，或搜索一些特殊字符会显示出所有内容，或需搜索引擎查找内容。</li></ul></li><li>反爬建议：便利数字型id，基本可以拿到所有内容。</li></ul></li></ul></li><li>内容出处<ul><li><a href="https://zhuanlan.zhihu.com/p/31334372">Web 网页爬虫对抗指南 Part.1</a></li><li><a href="https://zhuanlan.zhihu.com/p/31486597">Web 网页爬虫对抗指南 Part.2</a></li></ul></li></ul><h2 id="5、Selenium爬虫"><a href="#5、Selenium爬虫" class="headerlink" title="5、Selenium爬虫"></a>5、Selenium爬虫</h2><ul><li>Selenium是通过真实的浏览器进行操作，因此反爬虫策略较难察觉到，不过缺点在于效率低下。</li><li>开发环境需要用到selenium库和Chrome driver或Firefox driver驱动，这里不赘述。</li><li>仍以<a href="https://www.zhihu.com/explore">知乎近期热点</a>为例，新建名为getZhihuSel.py的文件，代码如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>url = <span class="hljs-string">&#x27;https://www.zhihu.com/explore&#x27;</span><br>driver = webdriver.Firefox()<br>driver.get(url)<br><br><span class="hljs-keyword">for</span> link <span class="hljs-keyword">in</span> driver.find_elements_by_css_selector(<span class="hljs-string">&#x27;a[class=&quot;css-1nd7dqm&quot;]&#x27;</span>):<br>    <span class="hljs-built_in">print</span>(link.text)<br><br>driver.quit()<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Text">5 月 9 日俄罗斯在莫斯科红场举行纪念卫国战争胜利 77 周年阅兵式，红场阅兵有哪些看点值得关注?<br>5 月 7 日晚浙江舟山出现血红天空，气象局称「是光的折射现象，光源尚不清楚」，你拍到这一景象了吗？<br>5 月 8 日香港特别行政区第六任行政长官选举投票结束，李家超当选，有哪些信息值得关注？<br>5 月 8 日上海新增本土「322+3625」，新增死亡 11 例，目前疫情情况如何？<br></code></pre></td></tr></table></figure><ul><li>鉴于Selenium的爬虫效率低，可以使用headless无界面浏览模式来提升。</li><li>如果对于Selenium的API不熟悉，可以直接使用Puppeteer来做爬虫。</li></ul><blockquote><p><a href="http://class.itest.info/crawler">Python爬虫-重定向科技</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Requests</tag>
      
      <tag>BautifulSoup</tag>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python接口测试</title>
    <link href="/2020/01/27/ce-shi-za-tan/python/ce-shi-za-tan.python.python-jie-kou-ce-shi/"/>
    <url>/2020/01/27/ce-shi-za-tan/python/ce-shi-za-tan.python.python-jie-kou-ce-shi/</url>
    
    <content type="html"><![CDATA[<p>接口测试是测试系统组件间接口的一种测试，主要用于检测外部系统与系统之间，以及内部各个子系统之间的交互点，测试重点是要检查数据的交换，传递和控制管理过程，以及系统间的相互逻辑依赖关系等。<span id="more"></span></p><h2 id="1、简单的接口"><a href="#1、简单的接口" class="headerlink" title="1、简单的接口"></a>1、简单的接口</h2><ul><li>获取资源的接口，例如：<a href="https://www.v2ex.com/p/7v9TEc53">V2EX API 接口</a>。</li><li>接口的具体描述，即接口文档如下。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Text">获得指定节点的名字，简介，URL 及头像图片的地址。<br>https://www.v2ex.com/api/nodes/show.json<br><br>Method: GET<br>Authentication: None<br>接受参数：<br>    name: 节点名（V2EX的节点名全是半角英文或者数字）<br>    例如：https://www.v2ex.com/api/nodes/show.json?name=python<br></code></pre></td></tr></table></figure><ul><li>接口分析<ul><li>协议：采用https协议。</li><li>请求方法：GET方法。</li><li>鉴权方式：None不需要登录。</li><li>请求参数：name参数，指定资源的名称。</li></ul></li></ul><h2 id="2、Postman接口测试"><a href="#2、Postman接口测试" class="headerlink" title="2、Postman接口测试"></a>2、Postman接口测试</h2><ul><li>常见的接口测试工具：postman、jmeter、soapui、insomnia、paw。</li></ul><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%9D%82%E8%B0%88.Python.Python%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/001.jpg" srcset="/img/load.gif" lazyload alt="Postman接口测试"></p><ul><li>服务器响应的重要信息<ul><li>Body：返回的主体。</li><li>Headers：键值对数据，补充请求的主体内容。</li><li>Status：状态码，显示200说明响应是正常的。</li><li>Time：响应时间。</li><li>Size：响应的大小。</li></ul></li></ul><h2 id="3、Json简介"><a href="#3、Json简介" class="headerlink" title="3、Json简介"></a>3、Json简介</h2><ul><li>Json，JavaScript Object Notation，一种轻量级的数据交换格式。</li><li>Json可理解为一种规定了格式的字符串，通过这种格式可在不同的编程语言之间互相传递信息。</li><li>例如将JavaScript的对象转换成Json传递给Java，这样Java可以反解析出Java语言自身的对象。</li><li>同理把Java对象转换成Json，通过解析Json，Python可将其转换成自身的dict(字典)或list(列表)。</li><li>将Json字符串转换成Python的dict，操作如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># coding: utf-8</span><br><span class="hljs-keyword">import</span> json<br>json_str = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;avatar_large&quot;: &quot;https://cdn.v2ex.com/navatar/8613/985e/90_large.png?m=1648339948&quot;,</span><br><span class="hljs-string">    &quot;name&quot;: &quot;python&quot;,</span><br><span class="hljs-string">    &quot;avatar_normal&quot;: &quot;https://cdn.v2ex.com/navatar/8613/985e/90_normal.png?m=1648339948&quot;,</span><br><span class="hljs-string">    &quot;title&quot;: &quot;Python&quot;,</span><br><span class="hljs-string">    &quot;url&quot;: &quot;https://www.v2ex.com/go/python&quot;,</span><br><span class="hljs-string">    &quot;topics&quot;: 14915,</span><br><span class="hljs-string">    &quot;footer&quot;: &quot;&quot;,</span><br><span class="hljs-string">    &quot;header&quot;: &quot;这里讨论各种 Python 语言编程话题，也包括 Django，Tornado 等框架的讨论。这里是一个能够帮助你解决实际问题的地方。&quot;,</span><br><span class="hljs-string">    &quot;title_alternative&quot;: &quot;Python&quot;,</span><br><span class="hljs-string">    &quot;avatar_mini&quot;: &quot;https://cdn.v2ex.com/navatar/8613/985e/90_mini.png?m=1648339948&quot;,</span><br><span class="hljs-string">    &quot;stars&quot;: 9919,</span><br><span class="hljs-string">    &quot;aliases&quot;: [],</span><br><span class="hljs-string">    &quot;root&quot;: false,</span><br><span class="hljs-string">    &quot;id&quot;: 90,</span><br><span class="hljs-string">    &quot;parent_node_name&quot;: &quot;programming&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>res = json.loads(json_str)<br><span class="hljs-built_in">print</span>(res[<span class="hljs-string">&#x27;id&#x27;</span>])                            <span class="hljs-comment"># 90</span><br><span class="hljs-built_in">print</span>(res[<span class="hljs-string">&#x27;name&#x27;</span>])                          <span class="hljs-comment"># python</span><br><span class="hljs-built_in">print</span>(res[<span class="hljs-string">&#x27;url&#x27;</span>])                           <span class="hljs-comment"># http://www.v2ex.com/go/python</span><br></code></pre></td></tr></table></figure><h2 id="4、3A原则"><a href="#4、3A原则" class="headerlink" title="4、3A原则"></a>4、3A原则</h2><ul><li>3A原则是单元测试用例编写时应遵循的原则，将其扩展到接口自动化测试的用例编写中。</li><li>单元测试用例<ul><li>arrange：初始化测试对象或准备测试数据。</li><li>act：调用被测方法。</li><li>assert：进行断言。</li></ul></li><li>服务级接口测试实际上是黑盒测试，3A原则适用于这种测试用例的编写。</li><li>接口测试用例<ul><li>arrange：初始化测试数据，输入的数据和目标接口所涉及的资源数据。</li><li>act：调用接口，传入输入的数据。</li><li>assert：对返回的资源信息进行断言。</li></ul></li><li>手工测试用例<ul><li>arrange：准备被测功能相关的测试数据。</li><li>act：调用被测的功能。</li><li>assert：进行断言。</li></ul></li><li>接口自动化测试用例总结<ul><li>arrange：测试用例执行之前，需要准备测试数据，包括输入数据和存量数据。</li><li>act：通过不同的参数来调用接口，拿到数据并返回。</li><li>assert：必须进行断言，否则测试用例就没有任何意义。</li></ul></li></ul><h2 id="5、UnitTest框架"><a href="#5、UnitTest框架" class="headerlink" title="5、UnitTest框架"></a>5、UnitTest框架</h2><ul><li>UnitTest是Python自带的单元测试框架，也可以用来做接口的自动化测试。<ul><li>拥有一套固定套路，定义测试用例时可以更加简单和统一。</li><li>提供了一系列的断言。</li><li>通过test suit或扩展方式，可以自定义用例执行的策略。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> unittest                                             <span class="hljs-comment"># 导入库</span><br><span class="hljs-comment"># 定义测试类，类名自定义，所有测试类须直接或间接继承自unittest.TestCase类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTestCase</span>(unittest.TestCase):<br>    <span class="hljs-comment"># setUp(self)是钩子方法，每个测试用例执行前都会执行一次，做数据初始化</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># arrange，为每个测试方法定义被测对象，这里则是self.test_string</span><br>        self.test_string = <span class="hljs-string">&quot;This is a tring.&quot;</span>     <br>    <span class="hljs-comment"># 该方法是一个测试用例，只有方法名以test开头的方法才是测试用例</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">testUpper</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 如果断言失败，则在测试报告中打印出错误原因</span><br>        self.asserEqual(<span class="hljs-string">&quot;THIS IS A STRING.&quot;</span>, self.test_string.upper())<br><br><span class="hljs-comment"># 直接执行该文件，运行所有的测试类中的测试用例，即以test开头的方法</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><ul><li>使用unittest需记住：<ul><li>导入unittest库，定义继承自unittest.TestCase的测试类。</li><li>定义以test开头的测试方法，即测试用例，可以在一个类中定义n个。</li><li>进行断言，unittest.main()是执行测试用例最简单的方式。</li></ul></li></ul><h2 id="6、Requests库"><a href="#6、Requests库" class="headerlink" title="6、Requests库"></a>6、Requests库</h2><ul><li>Requests库可以简化发送HTTP请求及获取响应的代码。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-comment"># 发请求，传参数</span><br>r = requests.get(<span class="hljs-string">&quot;https://p.3.cn/prices/mgets&quot;</span>, auth=(<span class="hljs-string">&quot;skuIds&quot;</span>, <span class="hljs-string">&quot;100026761926&quot;</span>))<br><span class="hljs-built_in">print</span>(r.status_code)                        <span class="hljs-comment"># 获取响应</span><br><span class="hljs-built_in">print</span>(r.headers[<span class="hljs-string">&#x27;content-type&#x27;</span>])            <span class="hljs-comment"># 获取响应headers</span><br><span class="hljs-built_in">print</span>(r.encoding)                           <span class="hljs-comment"># 获取响应编码</span><br><span class="hljs-built_in">print</span>(r.text)                               <span class="hljs-comment"># 获取响应文本</span><br><span class="hljs-built_in">print</span>(r.json)                               <span class="hljs-comment"># 获取响应Json</span><br></code></pre></td></tr></table></figure><h2 id="7、接口测试用例"><a href="#7、接口测试用例" class="headerlink" title="7、接口测试用例"></a>7、接口测试用例</h2><ul><li>测试数据：节点名称为python。</li><li>接口地址：<a href="https://www.v2ex.com/api/nodes/show.json">https://www.v2ex.com/api/nodes/show.json</a>。</li><li>断言：返回的结果中，id必须是90，name必须是python。</li><li>先前已经用Postman测过接口，点击右边栏的Code&lt;&#x2F;&gt;图标。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;https://www.v2ex.com/api/nodes/show.json?name=python&quot;</span><br>payload=&#123;&#125;<br>files=&#123;&#125;<br>headers = &#123;&#125;<br>response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url, headers=headers, data=payload, files=files)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><ul><li>使用unittest重构代码，Python-Requests中的代码只是3A原则中的arrange和act。</li><li>新建名为v2exAPICase.py的文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">V2exAPITestCase</span>(unittest.TestCase):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_node_api</span>(<span class="hljs-params">self</span>):<br>        url = <span class="hljs-string">&quot;https://www.v2ex.com/api/nodes/show.json&quot;</span><br>        querystring = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;python&quot;</span>&#125;<br>        response = requests.request(<span class="hljs-string">&quot;GET&quot;</span>, url, params=querystring).json()<br>        self.assertEqual(response[<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;python&quot;</span>)<br>        self.assertEqual(response[<span class="hljs-string">&quot;id&quot;</span>], <span class="hljs-number">90</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><ul><li>执行v2exAPICase.py文件，运行结果如下。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python">.<br>----------------------------------------------------------------------<br>Ran <span class="hljs-number">1</span> test <span class="hljs-keyword">in</span> <span class="hljs-number">0.142</span>s<br>OK<br></code></pre></td></tr></table></figure><ul><li>Postman可以帮助完成一半的工作，例如调试接口、导出部分代码等。</li><li>使用UnitTest框架重构用例可以帮助添加断言，提供在命令行执行的能力，易与CI工具进行集成。</li></ul><h2 id="8、Mock-Server"><a href="#8、Mock-Server" class="headerlink" title="8、Mock Server"></a>8、Mock Server</h2><ul><li>使用场景<ul><li>前端客户端与后端服务端开发节奏往往不一致。</li><li>前端多数情况下都需要等后台的API开发完成后才能进行开发联调和测试。</li><li>开发节奏不一致，容易造成整个项目或产品交付延期。</li><li>一种解决方案思路是前后端事先约定好后端提供的API接口的细节。</li><li>前端人员自行模拟出这些后端的实现，调用假实现拿到返回数据。</li><li>不过由前端实现的假API没办法迅速反映出后端的变化。</li><li>若后端对约定好的API接口做出修改且未知会前端，这样假API没有相应更新，正式联调时就会出错。</li><li>像这种不管是前后端的假API实现，都可以称为Mock Server。<ul><li>Mock表示这个API返回的数据是假的，仅作为测试用。</li><li>Server表示需要启动服务，简单来说就是一个服务程序。</li></ul></li></ul></li><li>契约测试<ul><li>前后端导致信息不对称，约定的API在前后端可能都会变化，保证一致性就成为挑战。</li><li>这时契约测试出现，即前后端共用一份契约，约定API的细节。</li><li>前后端的任何变化都需要先修改契约，通过它通知前后端，统一更新实现。</li></ul></li><li>如果为契约测试设置一种测试工具，需要规划如下特性。<ul><li>契约的描述工具：用什么工具去定义才能让前后端团队秒懂。</li><li>通过契约自动生成Mock Server实现，这样前端就可以拿来即用，若契约修改了也容易感知。</li><li>通过契约自动生成接口测试用例，持续运行这些接口测试用例，后端就可以在第一时间发现契约的修改。</li></ul></li></ul><h2 id="9、Flask实现Mock-Server"><a href="#9、Flask实现Mock-Server" class="headerlink" title="9、Flask实现Mock Server"></a>9、Flask实现Mock Server</h2><ul><li>Flask<ul><li>Python实现的简单Web框架，与Django互补。</li><li>路由 -&gt; &#x2F;request&#x2F;uri。</li><li>handler -&gt; 路由进来之后处理request并返回response的逻辑。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)                             </span><span class="hljs-comment"># 路由</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():                                <span class="hljs-comment"># handler                    </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World.&quot;</span><br></code></pre></td></tr></table></figure><ul><li>新建名为smileTaskMockServer.py的文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, jsonify, g<br><span class="hljs-keyword">import</span> copy<br>app = Flask(__name__)<br><span class="hljs-meta">@app.before_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_up_data</span>():<br>    g.data = [<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 1&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 1&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 2&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 2&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 3&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 3&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 4&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 4&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;task 5&#x27;</span>, <span class="hljs-string">&#x27;desc&#x27;</span>: <span class="hljs-string">&#x27;this is task 5&#x27;</span>&#125;<br>    ]<br>    g.task_does_not_exist = &#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;Task does not exist.&quot;</span>&#125;<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/tasks&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_all_tasks</span>():                        <span class="hljs-comment"># 获取所有的任务</span><br>    <span class="hljs-keyword">return</span> jsonify(g.data)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/tasks/&lt;int:task_id&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_task</span>(<span class="hljs-params">task_id</span>):                      <span class="hljs-comment"># 查看一个任务的详情</span><br>    <span class="hljs-keyword">if</span> task_id &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> task_id &lt;= <span class="hljs-built_in">len</span>(g.data):<br>        <span class="hljs-keyword">return</span> jsonify(g.data[task_id-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(g.task_does_not_exist)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/tasks/&lt;int:task_id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;PUT&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">complete_task</span>(<span class="hljs-params">task_id</span>):                 <span class="hljs-comment"># 完成一个任务</span><br>    <span class="hljs-keyword">if</span> task_id &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> task_id &lt;= <span class="hljs-built_in">len</span>(g.data):<br>        tmp = copy.deepcopy(g.data[task_id-<span class="hljs-number">1</span>])<br>        tmp[<span class="hljs-string">&#x27;done&#x27;</span>] = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> jsonify(tmp)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(g.task_does_not_exist)<br></code></pre></td></tr></table></figure><ul><li>命令窗口进入到smileTaskMockServer.py文件所在的目录。</li><li>设置FLASK_APP：Set FLASK_APP&#x3D;smileTaskMockServer.py。</li><li>flask run回车，打开浏览器输入<a href="http://127.0.0.1:5000/api/tasks/1">http://127.0.0.1:5000/api/tasks/1</a>进行查看。</li></ul><blockquote><p><a href="http://class.itest.info/interface">Python接口测试-重定向科技</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>测试杂谈</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>UnitTest框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 基础</title>
    <link href="/2019/02/07/python/python04-python-numpy-ji-chu/"/>
    <url>/2019/02/07/python/python04-python-numpy-ji-chu/</url>
    
    <content type="html"><![CDATA[<p>NumPy是一个用于处理数组的Python库，具有在线性代数、傅里叶变换和矩阵领域工作的功能，由Travis Oliphant于2005年创建。</p><span id="more"></span><h1 id="1-NumPy"><a href="#1-NumPy" class="headerlink" title="1 NumPy"></a>1 NumPy</h1><ul><li>使用<ul><li>通过import关键字将其导入应用程序，通常以np别名替代。</li><li>检查NumPy版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np          <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><br><span class="hljs-built_in">print</span>(np.__version__)       <span class="hljs-comment"># 检查NumPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2 创建数组"></a>2 创建数组</h1><ul><li>ndarray对象<ul><li>NumPy中的数组对象称为ndarray，使用数组对象的<code>array()</code>函数创建NumPy对象。</li><li><code>type()</code>用于显示数组类型numpy.ndarray，数组中的维度是一级数组深度(嵌套数组)。<ul><li>0-D数组：零维数组，又叫标量，数组中的每个值都是一个0-D数组。</li><li>1-D数组：一维数组，以零维数组作为元素的数组，是最基本的数组。</li><li>2-D数组：二维数组，以一维数组作为元素的数组，用于表示矩阵或二阶张量。</li><li>3-D数组：三维数组，以二维数组作为元素的数组，用于表示三阶张量。</li><li>高维数组：数组可有任意数量的维度，创建时使用ndmin参数定义维数。</li></ul></li><li>使用ndim检查数组的维数，返回整数的属性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(arr))                        <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>arr0 = np.array(<span class="hljs-number">30</span>)                     <span class="hljs-comment"># 0-D</span><br><span class="hljs-built_in">print</span>(arr0)<br>arr1 = np.array((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))              <span class="hljs-comment"># 1-D</span><br><span class="hljs-built_in">print</span>(arr1)<br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])       <span class="hljs-comment"># 2-D</span><br><span class="hljs-built_in">print</span>(arr2)<br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-built_in">print</span>(arr3)                             <span class="hljs-comment"># 3-D</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                             <span class="hljs-comment"># 5-D</span><br><br><span class="hljs-built_in">print</span>(arr0.ndim)                        <span class="hljs-comment"># 检查数组的维数</span><br><span class="hljs-built_in">print</span>(arr1.ndim)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><h2 id="2-1-数组索引"><a href="#2-1-数组索引" class="headerlink" title="2-1 数组索引"></a>2-1 数组索引</h2><ul><li>访问数组元素<ul><li>数组索引与访问数组元素相同，通过引用索引号访问数组元素。</li><li>索引从0开始，第一个元素索引为0，第二个元素索引为1，以此类推。</li><li>二维数组和三维数组都使用逗号分隔的整数来表示元素的维度和索引。</li><li>二维数组索引可以想象为具有行和列的表，行表示维度，索引表示列。</li><li>可以使用负索引从末尾访问数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 访问一维数组元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">3</span>])<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])           <span class="hljs-comment"># 访问二维数组元素，第一行第二列的元素</span><br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-built_in">print</span>(arr3[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 访问三维数组元素，第一个数组的第二个数组的第三个元素</span><br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>])          <span class="hljs-comment"># 访问二维数组元素，第二行的最后一个元素</span><br></code></pre></td></tr></table></figure><h2 id="2-2-数组切片"><a href="#2-2-数组切片" class="headerlink" title="2-2 数组切片"></a>2-2 数组切片</h2><ul><li>数组切片<ul><li>格式：<code>[start: end]</code>或<code>[start: end: step]</code>，结果包括开始索引，不包括结束索引。</li><li>start默认为0，end在维度中考虑数组的长度，step默认为1，使用负号可从末尾引用索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])           <span class="hljs-comment"># 索引1到5的元素，不包括5</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">4</span>:  ])           <span class="hljs-comment"># 索引4到数组末尾的元素切片</span><br><span class="hljs-built_in">print</span>(arr1[ : <span class="hljs-number">4</span>])           <span class="hljs-comment"># 索引开始到4的切片元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])         <span class="hljs-comment"># 负索引从-1开始，索引末尾-1到-3的元素，不包括-1</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引1到5的所有元素，其中步长为2</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引整个数组中步长为2的所有元素</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])        <span class="hljs-comment"># 第二个元素开始，索引1到4的元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 两个元素中返回索引2</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])     <span class="hljs-comment"># 两个元素中，返回索引1到4的元素，不包括4，返回一个二维数组</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2-3 数据类型"></a>2-3 数据类型</h2><ul><li>数据类型<ul><li>Python中的数据类型：float、integer、boolean、complex、strings。</li><li>NumPy模块也有一些额外的数据类型，并且是指代具有一个字符的数据类型。<ul><li>i(整数)、b(布尔值)、u(无符号整数)、f(浮点数)、c(复数)、m(时间增量)。</li><li>M(日期时间)、O(对象)、S(字符串)、U(Unicode字符串)、V(其他类型的固定内存块void)。</li></ul></li><li>NumPy数组对象有个dtype属性，用于返回数组的数据类型。</li><li><code>array()</code>创建具有已定义数据类型的数组，带可选参数dtype，允许定义数组元素的预期数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr1.dtype)           <span class="hljs-comment"># 获取数组对象的数据类型</span><br>arr2 = np.array([<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>])<br><span class="hljs-built_in">print</span>(arr2.dtype)           <span class="hljs-comment"># 获取包含字符串数组的数据类型</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;S&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 创建一个数据类型为字符串的数组</span><br><span class="hljs-built_in">print</span>(arr3.dtype)<br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;i4&quot;</span>)<br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 创建一个数据类型为4字节整数的数组</span><br><span class="hljs-built_in">print</span>(arr4.dtype)<br></code></pre></td></tr></table></figure><ul><li>转换类型<ul><li>若给定类型无法转换元素，NumPy将引发ValueError(传递给函数的参数类型意外或不正确时显示)。</li><li>使用<code>astype()</code>方法制作数组的副本，允许将数据类型指定为参数，可以更改现有数组的数据类型。</li><li>可用字符串指定数据类型，例如f(浮点数)、i(整数)等，或直接使用数据类型，例如float、int等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 像a这样的非整数字符串不能转换为整数，会引发错误</span><br><span class="hljs-comment"># arr1 = np.array([&quot;a&quot;, &quot;2&quot;], dtype=&quot;i&quot;)</span><br><br><span class="hljs-comment"># 通过使用i作为参数值将数据类型从浮点数更改为整数</span><br>arr2 = np.array([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">3.1</span>])<br>arr3 = arr2.astype(<span class="hljs-string">&quot;i&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.dtype)<br><br><span class="hljs-comment"># 通过使用int作为参数值将数据类型从浮点数更改为整数</span><br>arr4 = arr2.astype(<span class="hljs-built_in">int</span>)<br><span class="hljs-built_in">print</span>(arr4)<br><span class="hljs-built_in">print</span>(arr4.dtype)<br><br><span class="hljs-comment"># 将数据类型从整数更改为布尔值</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br>arr6 = arr5.astype(<span class="hljs-built_in">bool</span>)<br><span class="hljs-built_in">print</span>(arr6)<br><span class="hljs-built_in">print</span>(arr6.dtype)<br></code></pre></td></tr></table></figure><h1 id="3-副本与视图"><a href="#3-副本与视图" class="headerlink" title="3 副本与视图"></a>3 副本与视图</h1><ul><li>副本与视图<ul><li>副本是一个新数组，而视图只是原始数组的视图。<ul><li>副本拥有数据，对副本所做的更改不会影响原始数组，对原始数组所做的更改不会影响副本。</li><li>视图没有数据，对视图所做的更改将会影响原始数组，对原始数组所做的更改也会影响视图。</li></ul></li><li>每个NumPy数组都有base属性，如果数组拥有数据，则返回None，否则base属性引用原始对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>arr2 = arr1.copy()          <span class="hljs-comment"># 创建一个副本</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>                 <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr2)                 <span class="hljs-comment"># 副本不应受到对原始数组所做更改的影响</span><br><br>arr3 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">30</span>                <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 视图应该受到对原始数组所做更改的影响</span><br><br>arr4 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr4[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>                 <span class="hljs-comment"># 更改视图</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 原始数组应该受到对视图所做更改的影响</span><br><br>arr5 = arr1.copy()          <span class="hljs-comment"># 打印base属性的值，检查数组是否拥有数据</span><br>arr6 = arr1.view()<br><span class="hljs-built_in">print</span>(arr5.base)            <span class="hljs-comment"># 副本返回None</span><br><span class="hljs-built_in">print</span>(arr6.base)            <span class="hljs-comment"># 视图返回原始数组</span><br></code></pre></td></tr></table></figure><h1 id="4-形状与重塑"><a href="#4-形状与重塑" class="headerlink" title="4 形状与重塑"></a>4 形状与重塑</h1><ul><li>形状<ul><li>数组形状是每个维度中元素的数量，NumPy数组有shape属性。</li><li>shape属性返回一个元组，每个索引都有与之对应元素的数量。</li><li>形状元组：每个索引处的整数都表示相应维度具有的元素数量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-built_in">print</span>(arr1.shape)     <span class="hljs-comment"># 二维数组的形状(2, 4)，2个维度，维度一有2个元素，维度二有4个元素</span><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr2)           <span class="hljs-comment"># 使用值为1、2、3、4的ndmin向量创建一个5维数组，并打印最后一维的值</span><br><span class="hljs-built_in">print</span>(arr2.shape)<br></code></pre></td></tr></table></figure><ul><li>重塑<ul><li>数组重塑意味着改变数组形状，可添加或删除维度，或更改每个维度元素的数量。</li><li>只要数组重塑所需要的元素在两种形状中都相同，就可以将数组重塑成任何形状。</li><li>不必为reshape方法的其中一个维度指定确切的数字，拥有未知维度，作为-1值传递。</li><li>扁平化数组意味着将多维数组转换为一维数组，可以使用reshape(-1)来做到这一点。</li><li>改变数组形状还有flatten、revel函数，rot90、flip、fliplr和flipud等可重新排列元素。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br>arr2 = arr1.reshape(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)     <span class="hljs-comment"># 从一维重塑到二维</span><br><span class="hljs-built_in">print</span>(arr2)                   <span class="hljs-comment"># 最外层维度有4个数组，每个数组包含3个元素</span><br><br>arr3 = arr1.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 从一维重塑到三维</span><br><span class="hljs-built_in">print</span>(arr3)                   <span class="hljs-comment"># 最外层维度有2个数组，其中包含3个数组，每个数组有2个元素</span><br><br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-comment"># arr5 = arr4.reshape(3, 3)</span><br><span class="hljs-comment"># print(arr5)                 # 8个元素的1-D数组转换为每个维度具有3个元素的2-D数组，会引发错误</span><br><br><span class="hljs-built_in">print</span>(arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>).base)<span class="hljs-comment"># 检查返回的数组是副本或视图，返回原始数组，是视图</span><br>arr6 = arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment"># 8个元素的1-D数组转换为2x2元素的3-D数组，不能传递-1值到多个维度</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br>arr8 = arr7.reshape(-<span class="hljs-number">1</span>)       <span class="hljs-comment"># 将数组转换为一维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br></code></pre></td></tr></table></figure><h1 id="5-连接与拆分"><a href="#5-连接与拆分" class="headerlink" title="5 连接与拆分"></a>5 连接与拆分</h1><ul><li>连接<ul><li>SQL中基于键连接表，NumPy中通过轴连接数组。</li><li>通过<code>concatenate()</code>函数将数组与轴一起进行传递连接，参数axis默认为0。</li><li>使用堆栈函数<code>stack()</code>连接数组(堆叠，一个轴在另一个轴上)，参数axis默认为0。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr3 = np.concatenate(arr1, arr2)         <span class="hljs-comment"># 连接两个一维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>arr5 = np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>arr6 = np.concatenate(arr4, arr5, axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 连接两个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.stack((arr1, arr2), axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr7)<br></code></pre></td></tr></table></figure><ul><li>拆分</li></ul><h1 id="6-数组迭代"><a href="#6-数组迭代" class="headerlink" title="6 数组迭代"></a>6 数组迭代</h1><ul><li>数组迭代<ul><li>迭代意味着一个一个地遍历元素，在NumPy中处理多维数组时，使用for循环可进行迭代。</li><li>如果迭代一个n-D数组，将遍历n-1维，要返回实际值，即标量，必须在每个维度中迭代数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr1:              <span class="hljs-comment"># 迭代一维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> arr2:              <span class="hljs-comment"># 迭代二维数组的元素</span><br>    <span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr2:              <span class="hljs-comment"># 迭代二维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-built_in">print</span>(y)<br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:              <span class="hljs-comment"># 迭代三维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:              <span class="hljs-comment"># 迭代三维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> y:<br>            <span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>方法迭代<ul><li><code>nditer()</code>是一个帮助函数，可以解决迭代中的一些基本问题。<ul><li>使用op_dtypes参数并将预期的数据类型传递给它，可以在迭代时更改元素的数据类型。</li><li>元素在数组中时，NumPy不会就地更改元素的数据类型，需要一些其他空间来执行此操作。</li><li>其他空间即缓冲区，为启用额外空间，还需使用<code>nditer()</code>函数的<code>flags=[&#39;buffered&#39;]</code>。</li></ul></li><li>使用过滤，可以以不同的步长进行迭代。</li><li>如果迭代时需要元素的相应索引，则可以用<code>ndenumerate()</code>进行枚举迭代。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr1):           <span class="hljs-comment"># 遍历3-D数组</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])          <span class="hljs-comment"># 作为字符串遍历数组</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr2, flags=[<span class="hljs-string">&#x27;buffered&#x27;</span>], op_dtypes=[<span class="hljs-string">&#x27;S&#x27;</span>]):<br>    <span class="hljs-built_in">print</span>(x)<br><br>arr3 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr3[:, ::<span class="hljs-number">2</span>]):   <span class="hljs-comment"># 每跳过1个元素，遍历2-D数组的每个标量元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr2): <span class="hljs-comment"># 枚举一维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr3): <span class="hljs-comment"># 枚举二维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br></code></pre></td></tr></table></figure><h1 id="7-数组搜索"><a href="#7-数组搜索" class="headerlink" title="7 数组搜索"></a>7 数组搜索</h1><h1 id="8-数组排序"><a href="#8-数组排序" class="headerlink" title="8 数组排序"></a>8 数组排序</h1><h1 id="9-数组过滤器"><a href="#9-数组过滤器" class="headerlink" title="9 数组过滤器"></a>9 数组过滤器</h1>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open函数</tag>
      
      <tag>read方法</tag>
      
      <tag>readline方法</tag>
      
      <tag>close方法</tag>
      
      <tag>remove方法</tag>
      
      <tag>rmdir方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 文件处理</title>
    <link href="/2019/02/03/python/python03-python-wen-jian-chu-li/"/>
    <url>/2019/02/03/python/python03-python-wen-jian-chu-li/</url>
    
    <content type="html"><![CDATA[<p>文件就是操作系统提供给用户或应用程序操作硬盘的一种功能，任何语言都离不开对文件的操作，Python语言更不例外。</p><span id="more"></span><h1 id="1-文件处理"><a href="#1-文件处理" class="headerlink" title="1 文件处理"></a>1 文件处理</h1><ul><li>open()函数<ul><li>文件处理的关键函数，有filename和mode两个参数。</li><li>打开文件的模式<ul><li><code>x</code>：创建指定文件，如果文件存在则返回错误。</li><li><code>r</code>：默认值，打开文件进行读取，如果文件不存在则出错。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li><li>指定文件的形式<ul><li><code>t</code>：默认值，文本模式。</li><li><code>b</code>：二进制模式，例如图像。</li></ul></li><li>打开文件进行读取，指定文件名就可以了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)              <span class="hljs-comment"># 确保文件存在，否则报错</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;rt&quot;</span>)        <span class="hljs-comment"># rt即read和text，默认值，所以不需要指定(代码同上)</span><br></code></pre></td></tr></table></figure><h1 id="2-读取文件"><a href="#2-读取文件" class="headerlink" title="2 读取文件"></a>2 读取文件</h1><ul><li>read()方法<ul><li><code>open()</code>函数返回一个文件对象，该对象的<code>read()</code>方法可以读取文件内容。</li><li>若文件位于其他位置，须指定文件路径，<code>read()</code>方法可指定要返回的字符数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())                       <span class="hljs-comment"># 获取文件内容</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read(<span class="hljs-number">5</span>))                      <span class="hljs-comment"># 返回文件的前5个字符</span><br><br><span class="hljs-comment"># f = open(&quot;D:\\demofile.txt&quot;, &quot;r&quot;)   # 指定文件路径</span><br><span class="hljs-comment"># print(f.read())</span><br></code></pre></td></tr></table></figure><ul><li>readline()方法<ul><li>使用该方法将返回文件的一行内容，调用两次则可以获取前两行。</li><li>通过遍历文件的行，可以逐行读取整个文件，完成操作后将文件关闭是个好习惯。</li><li>在某些情况下，由于缓冲，对文件所做的更改可能在关闭文件之前不会显示出来。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的一行</span><br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的前两行</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> y:                           <span class="hljs-comment"># 逐行循环文件</span><br>    <span class="hljs-built_in">print</span>(i)<br><br>x.close()                             <span class="hljs-comment"># 完成后关闭文件</span><br>y.close()<br></code></pre></td></tr></table></figure><h1 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3 文件操作"></a>3 文件操作</h1><ul><li>文件操作<ul><li>写入现有文件，必须向<code>open()</code>函数添加参数。<ul><li><code>a</code>：将内容追加到文件的末尾。</li><li><code>w</code>：将内容覆盖任何现有内容。</li></ul></li><li>创建新文件，使用<code>open()</code>函数带以下参数之一的方法。<ul><li><code>x</code>：创建一个文件，如果文件存在则返回错误。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)       <span class="hljs-comment"># 打开文件并将内容附加到文件中，如果文件不存在则创建文件</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())<br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)       <span class="hljs-comment"># 打开文件并覆盖整个文件的内容，如果文件不存在则创建文件</span><br>y.write(<span class="hljs-string">&quot;Woops! I have deleted the content!&quot;</span>)<br>y.close()<br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read())<br></code></pre></td></tr></table></figure><h1 id="4-删除文件"><a href="#4-删除文件" class="headerlink" title="4 删除文件"></a>4 删除文件</h1><ul><li>os模块<ul><li>删除整个文件夹，需要使用<code>os.rmdir()</code>方法。</li><li>导入模块并运行<code>os.remove()</code>方法对文件进行删除操作。</li><li>为避免出现错误，需要在尝试删除文件之前检查文件是否存在。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br>os.rmdir(<span class="hljs-string">&quot;myfolder&quot;</span>)                  <span class="hljs-comment"># 删除文件夹</span><br>os.remove(<span class="hljs-string">&quot;demofile.txt&quot;</span>)             <span class="hljs-comment"># 删除一个文件</span><br><br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)         <span class="hljs-comment"># 打开文件并将内容附加到文件中</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;demofile.txt&quot;</span>):    <span class="hljs-comment"># 检查文件是否存在，然后将其删除</span><br>    os.remove(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The file does not exist.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>open函数</tag>
      
      <tag>read方法</tag>
      
      <tag>readline方法</tag>
      
      <tag>close方法</tag>
      
      <tag>remove方法</tag>
      
      <tag>rmdir方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(二)</title>
    <link href="/2019/01/15/python/python02-python-ji-chu-er/"/>
    <url>/2019/01/15/python/python02-python-ji-chu-er/</url>
    
    <content type="html"><![CDATA[<p>Python面向对象，易于阅读和维护，丰富的库可用于Web开发、爬虫、自动化运维、自动化测试和数据分析等，功能十分强大。</p><span id="more"></span><h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a>1 函数</h1><ul><li>函数<ul><li>只有在被调用时才会运行，可将参数传递给函数，函数返回数据作为结果。</li><li>通过<code>def</code>关键字定义函数，调用函数时，需要使用函数名称，后跟括号<code>()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():               <span class="hljs-comment"># def定义函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Function&quot;</span>)<br>myfunc()                    <span class="hljs-comment"># 调用函数</span><br></code></pre></td></tr></table></figure><ul><li>参数<ul><li>信息可作为参数传递给函数，缩写为<code>args</code>，任意参数缩写为<code>*args</code>。</li><li>参数在函数名之后的括号内指定，可以添加任意数量的参数，用逗号分隔。</li><li>默认情况下须使用正确数量的参数调用函数，函数需几个参数就必须使用几个参数调用该函数。</li><li>若不知道传递给函数的参数数量，则在函数定义的参数名称前使用星号<code>*</code>，接收一个参数元组。</li><li>函数定义不能为空，若函数内部没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">fname</span>):          <span class="hljs-comment"># 带有一个参数fname的函数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; Refsnes.&quot;</span>)<br>myfunc(<span class="hljs-string">&quot;Emil&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">fname, lname</span>):   <span class="hljs-comment"># 该函数带有两个参数，调用时就使用两个参数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; &quot;</span> + lname + <span class="hljs-string">&quot;.&quot;</span>)<br>myFunc(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Refsnes&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">*kids</span>):         <span class="hljs-comment"># 任意参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + kids[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br>my_func(<span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_Func</span>():<br>    <span class="hljs-keyword">pass</span>                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>关键字参数<ul><li>使用<code>key = value</code>语法发送参数，这样就不用考虑参数的顺序了。</li><li>关键字参数通常缩写为<code>kwargs</code>，任意关键字参数则缩写为<code>**kwargs</code>。</li><li>若不知道传递给函数的关键字参数数量，则在函数定义的参数名称前使用两个星号<code>**</code>，接收参数字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">child3, child2, child1</span>):       <span class="hljs-comment"># key = value</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + child3 +<span class="hljs-string">&quot;.&quot;</span>)<br>myfunc(child1 = <span class="hljs-string">&quot;Emil&quot;</span>, child2 = <span class="hljs-string">&quot;Lily&quot;</span>, child3 = <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">**kid</span>):                       <span class="hljs-comment"># 任意关键字参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child&#x27;s last name is &quot;</span> + kid[<span class="hljs-string">&quot;lname&quot;</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br>my_func(fname = <span class="hljs-string">&quot;Lily&quot;</span>, lname = <span class="hljs-string">&quot;Refsnes&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>函数调用<ul><li>调用不带参数的函数，使用默认值参数，<code>return</code>语句可让函数返回值。</li><li>将任何数据类型的参数发送给函数，会在函数内部被视为相同的数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">country = <span class="hljs-string">&quot;Xiamen&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am from &quot;</span> + country + <span class="hljs-string">&quot;.&quot;</span>)<br>myfunc()                      <span class="hljs-comment"># 使用默认值参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x              <span class="hljs-comment"># 让函数返回值</span><br><span class="hljs-built_in">print</span>(myFunc(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">food</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> food:<br>        <span class="hljs-built_in">print</span>(y)<br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>my_func(fruits)               <span class="hljs-comment"># 使用列表作为参数</span><br></code></pre></td></tr></table></figure><h2 id="1-1-递归"><a href="#1-1-递归" class="headerlink" title="1-1 递归"></a>1-1 递归</h2><ul><li>递归函数<ul><li>函数递归意味着自定义的函数可以调用自身，递归是一个常见的数学和编程概念。</li><li>编写时易陷入一个永无止境或使用过多内存的函数中，递归也是有效的编程方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myRecursion</span>(<span class="hljs-params">i</span>):                         <span class="hljs-comment"># 自定义myRecursion函数，使用变量i作为参数</span><br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>):<br>        result = i + myRecursion(i - <span class="hljs-number">1</span>)     <span class="hljs-comment"># 每次递归时递减1</span><br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">else</span>:                                   <span class="hljs-comment"># 当条件小于等于0时，递归结束</span><br>        result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recursion Example Results.&quot;</span>)<br>myRecursion(<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h2 id="1-2-lambda"><a href="#1-2-lambda" class="headerlink" title="1-2 lambda"></a>1-2 lambda</h2><ul><li>lambda函数<ul><li>匿名函数，可以接受任意数量的参数，但只能有一个表达式。</li><li>在另一函数中将一个函数用作匿名函数时，可以很好地展示<code>lambda</code>的作用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-keyword">lambda</span> i: i+<span class="hljs-number">10</span>            <span class="hljs-comment"># 将10添加到参数i中，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b: a*b          <span class="hljs-comment"># 将参数a与参数b相乘，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b, c: a+b+c     <span class="hljs-comment"># 汇总参数a、b、c，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">y</span>):                <span class="hljs-comment"># 定义一个带有一个参数的函数，并将该参数乘以一个未知数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> i: i*y<br>mydoubler = myfunc(<span class="hljs-number">2</span>)         <span class="hljs-comment"># 创建一个始终发送数字加倍的函数</span><br><span class="hljs-built_in">print</span>(mydoubler(<span class="hljs-number">11</span>))<br>mytripler = myfunc(<span class="hljs-number">3</span>)         <span class="hljs-comment"># 创建一个始终发送数字三倍的函数</span><br><span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<br></code></pre></td></tr></table></figure><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2 类和对象"></a>2 类和对象</h1><ul><li>类和对象<ul><li>Python是一种面向对象的编程语言，Python中一切皆对象，都有其属性和方法。</li><li>使用<code>class</code>关键字创建一个类，一个类就如同一个对象构造器，用于创建对象。</li><li>所有类都有一个名为<code>__init()</code>的函数，<code>__init__()</code>函数总是在类启动时执行。</li><li><code>class</code>定义不能为空，若<code>class</code>没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:                <span class="hljs-comment"># 创建一个名为MyClass的类，并带有一个名为x的属性</span><br>    x = <span class="hljs-number">5</span><br>p = MyClass()                 <span class="hljs-comment"># 创建一个名为p的对象，并打印x的值</span><br><span class="hljs-built_in">print</span>(p.x)                    <span class="hljs-comment"># 这是最为简单的类和对象，但在实际应用中没有真正用处</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                 <span class="hljs-comment"># 创建名为Person的类，__init__()函数为name和age赋值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(q.name)<br><span class="hljs-built_in">print</span>(q.age)<br><br>q.age = <span class="hljs-number">25</span>                    <span class="hljs-comment"># 修改对象属性</span><br><span class="hljs-built_in">print</span>(q.age)<br><span class="hljs-keyword">del</span> q.age                     <span class="hljs-comment"># 删除q对象中的age属性</span><br><span class="hljs-keyword">del</span> q                         <span class="hljs-comment"># 删除q对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">pass</span>                      <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>对象方法<ul><li>对象也可以包含方法，对象中的方法属于该对象的函数。</li><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>    <span class="hljs-comment"># 创建对象方法，插入一个打印函数，并在q对象上执行</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + self.name + <span class="hljs-string">&quot;.&quot;</span>)<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><ul><li>self参数<ul><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li><li>不必命名为<code>self</code>，可随意调用，但必须是类中任何函数的第一个参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, name, age</span>):<br>        <span class="hljs-built_in">object</span>.name = name<br>        <span class="hljs-built_in">object</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">abc</span>):          <span class="hljs-comment"># object和abc代替self</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + abc.name + <span class="hljs-string">&quot;.&quot;</span>)<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><h1 id="3-继承"><a href="#3-继承" class="headerlink" title="3 继承"></a>3 继承</h1><ul><li>继承<ul><li>让类与类之间产生父子关系，即获取另一个类的静态属性或方法。</li><li>父类也叫基类或超类，子类是从另一个类继承的类，也叫派生类。</li><li>任何类都可以是父类，语法与创建类相同，创建子类时需将父类作为参数发送。</li><li><code>__init__()</code>函数每次使用类创建新对象时都会自动调用该函数，将其添加到子类中。<ul><li>子类不再继承父类的<code>__init__()</code>函数，会覆盖父类<code>__init__()</code>函数的继承。</li><li>为保持父类的<code>__init__()</code>函数继承，需添加对父类<code>__init__()</code>函数的调用。</li></ul></li><li>还可以使用<code>super()</code>函数，让子类继承父类的所有方法和属性。</li><li>若在子类中添加与父类中函数同名的方法，会覆盖父方法的继承。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                                   <span class="hljs-comment"># 创建Person父类，具有fname和lname属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        self.fname = fname<br>        self.lname = lname<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printName</span>(<span class="hljs-params">self</span>):                        <span class="hljs-comment"># 创建printName方法</span><br>        <span class="hljs-built_in">print</span>(self.fname, self.lname)<br>x = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>x.printName()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student1</span>(<span class="hljs-title class_ inherited__">Person</span>):                         <span class="hljs-comment"># 创建Student1子类，继承Person类的属性和方法</span><br>    <span class="hljs-comment"># pass                                      # 将__init__()函数添加到Student1子类中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        Person.__init__(self, fname, lname)     <span class="hljs-comment"># 添加对父类函数的调用，保留父类的继承</span><br>y = Student1(<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>y.printName()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)          <span class="hljs-comment"># super函数不必使用父类名称，自动继承</span><br>        self.graduation = year                  <span class="hljs-comment"># 添加一个Student2子类的graduation属性</span><br>z = Student2(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br><span class="hljs-built_in">print</span>(z.fname, z.lname, z.graduation)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)<br>        self.graduation = year<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">self</span>):                          <span class="hljs-comment"># 添加一个调用类welcome方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome&quot;</span>, self.fname, self.lname, <span class="hljs-string">&quot;to the class of&quot;</span>, self.graduation, <span class="hljs-string">&quot;.&quot;</span>)<br>x = Student3(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br>x.Welcome()<br></code></pre></td></tr></table></figure><h1 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4 迭代器"></a>4 迭代器</h1><ul><li>迭代器<ul><li>一个实现迭代器协议的对象，由方法<code>__iter__()</code>和<code>__next__()</code>组成。</li><li>列表、元组、字典和集合等都是可迭代对象，都有<code>iter()</code>属性，用于获取迭代器。</li><li>使用for循环遍历可迭代对象，实际for循环即创建一个迭代器并循环执行<code>next()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>myfruit = <span class="hljs-built_in">iter</span>(mytuple)       <span class="hljs-comment"># 元组返回一个迭代器，并打印每个值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><br>mystring = <span class="hljs-string">&quot;apple&quot;</span>            <span class="hljs-comment"># 字符串也是可迭代对象</span><br>alphabet = <span class="hljs-built_in">iter</span>(mystring)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(alphabet))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:             <span class="hljs-comment"># for循环即一个迭代器</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>类和对象迭代器<ul><li>要将类和对象创建为一个迭代器，必须使用<code>__iter__()</code>和<code>__next__()</code>方法。<ul><li><code>__iter__()</code>方法进行初始化等操作，始终返回迭代器对象本身。</li><li><code>__next__()</code>方法允许执行操作，并且必须返回序列中的下一项。</li><li>如果有足够的<code>next()</code>语句或在for循环中使用，迭代将永远进行。</li></ul></li><li><code>__next__()</code>中添加StopIteration终止条件，以在迭代完成指定次数时引发错误，防止迭代永远进行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum1</span>:                 <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>            <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>           <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br>myclass = MyNum1()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum2</span>:                 <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>            <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>           <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br>myclass = MyNum2()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum3</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.a &lt;= <span class="hljs-number">20</span>:      <span class="hljs-comment"># 20次迭代后停止</span><br>            x = self.a<br>            self.a += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> x<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br>myclass = MyNum3()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myiters:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="5-范围"><a href="#5-范围" class="headerlink" title="5 范围"></a>5 范围</h1><ul><li>局部范围<ul><li>在函数内部创建的变量属于该函数的局部范围，并且只能在该函数内部使用。</li><li>函数内部创建的局部变量，对函数内部的任何函数都可用(嵌套函数都可用)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    x = <span class="hljs-number">30</span>                    <span class="hljs-comment"># 在myfunc函数内部创建的变量，在该函数内部可用</span><br>    <span class="hljs-built_in">print</span>(x)<br>myfunc()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">innerFunc</span>():<br>        <span class="hljs-built_in">print</span>(y)              <span class="hljs-comment"># 可以从函数内的函数访问局部变量y</span><br>    innerFunc()<br>myFunc()<br></code></pre></td></tr></table></figure><ul><li>全局范围<ul><li>在代码主体中创建的变量是全局变量，属于全局范围，可以在任何范围内使用。</li><li>若函数内外都使用相同变量名，将视为两个单独的变量，分别作用于函数内外部。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-built_in">print</span>(x)                  <span class="hljs-comment"># 可以在函数内部使用</span><br>myfunc()<br><span class="hljs-built_in">print</span>(x)                      <span class="hljs-comment"># 也可以在主体代码中使用</span><br><br>y = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-built_in">print</span>(y)                  <span class="hljs-comment"># 局部变量作用于函数内部</span><br>myFunc()<br><span class="hljs-built_in">print</span>(y)                      <span class="hljs-comment"># 全局变量作用于函数外部</span><br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>使用global关键字，在函数内部创建全局变量。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-keyword">global</span> x                  <span class="hljs-comment"># global关键字创建全局变量</span><br>    x = <span class="hljs-number">30</span><br>myfunction()<br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    <span class="hljs-keyword">global</span> y                  <span class="hljs-comment"># 修改函数内的全局变量y</span><br>    y = <span class="hljs-number">26</span><br>myFunc()<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h1 id="6-模块"><a href="#6-模块" class="headerlink" title="6 模块"></a>6 模块</h1><ul><li>模块<ul><li>模块可看成代码库，包含一组要包含在应用程序中的函数文件。</li><li>创建一个模块，只需要将所需的代码保存在文件扩展名为.py的文件中。</li><li>使用模块则通过import语句导入，语法：<code>module_name.function_name</code>。</li><li>模块中可包含函数，也可包含所有类型的变量，例如数组、字典、对象等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greeting</span>(<span class="hljs-params">name</span>):         <span class="hljs-comment"># 将该函数保存在名为Greeting.py文件中</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;.&quot;</span>)<br><br>person = &#123;                  <span class="hljs-comment"># 该字典也存在于Greeting.py文件中</span><br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;30&quot;</span>, <br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;China&quot;</span><br>&#125;<br><br><span class="hljs-keyword">import</span> Greeting             <span class="hljs-comment"># 在另一个文件中使用import语句导入创建的模块</span><br>Greeting.greeting(<span class="hljs-string">&quot;Lily&quot;</span>)<br><br>x = Greeting.person[<span class="hljs-string">&quot;age&quot;</span>]  <span class="hljs-comment"># 访问person字典</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>内置模块<ul><li>导入模块时可以使用as关键字创建别名，<code>dir()</code>函数可以列出模块中的所有函数名。</li><li>使用from关键字从模块中导入部分元素，导入时引用模块中的元素不要使用模块名称。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> Greeting <span class="hljs-keyword">as</span> x        <span class="hljs-comment"># 将Greeting模块重命名为x</span><br>y = x.person[<span class="hljs-string">&quot;age&quot;</span>]<br><span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">import</span> platform<br>z = <span class="hljs-built_in">dir</span>(platform)           <span class="hljs-comment"># dir()函数可用于所有模块，包括自定义模块</span><br><span class="hljs-built_in">print</span>(z)<br><br><span class="hljs-keyword">from</span> Greeting <span class="hljs-keyword">import</span> person <span class="hljs-comment"># 仅从模块中导入person字典</span><br><span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;name&quot;</span>])       <span class="hljs-comment"># 不使用模块名称，例如Greeting.person[&quot;name&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="6-1-Math"><a href="#6-1-Math" class="headerlink" title="6-1 Math"></a>6-1 Math</h2><ul><li>math模块<ul><li>内置函数<ul><li><code>min()</code>和<code>max()</code>可用于查找可迭代对象中的最小值和最大值。</li><li><code>abs()</code>函数返回指定数字的绝对值，<code>pow(x, y)</code>函数返回x的y次幂。</li></ul></li><li>使用时需要导入math模块，导入后就可以使用模块的方法和常量了。<ul><li><code>math.sqrt()</code>：返回一个数字的平方根。</li><li><code>math.ceil()</code>：将一个数字向上舍入取整。</li><li><code>math.floor()</code>：将一个数字向下舍入取整。</li><li><code>math.pi</code>：常数，返回PI，即圆周率3.14159265…的值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">min</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)          <span class="hljs-comment"># 5</span><br>b = <span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)          <span class="hljs-comment"># 25</span><br>c = <span class="hljs-built_in">abs</span>(-<span class="hljs-number">2.75</span>)              <span class="hljs-comment"># 2.75</span><br>d = <span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)               <span class="hljs-comment"># 4*4*4</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-keyword">import</span> math<br>x = math.sqrt(<span class="hljs-number">64</span>)           <span class="hljs-comment"># 返回一个数字的平方根</span><br>y = math.ceil(<span class="hljs-number">1.45</span>)         <span class="hljs-comment"># 向上取整，返回2</span><br>z = math.floor(<span class="hljs-number">1.45</span>)        <span class="hljs-comment"># 向下取整，返回1</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(math.pi)              <span class="hljs-comment"># 返回圆周率PI</span><br></code></pre></td></tr></table></figure><h2 id="6-2-Json"><a href="#6-2-Json" class="headerlink" title="6-2 Json"></a>6-2 Json</h2><ul><li>json模块<ul><li>一种用于存储和交换数据的语法，是文本，使用JavaScript对象表示法编写。</li><li>Python中有内置包json，用于处理json数据，使用前需import导入json模块。</li><li><code>json.loads()</code>方法可以用来解析json字符串，结果将会返回一个Python字典。</li><li><code>json.dumps()</code>方法可以将Python对象转换为json字符串。<ul><li>该方法具有参数，使用indent参数定义缩进数。</li><li>使用separators参数定义分隔符，默认值为<code>(&quot;, &quot;, &quot;: &quot;)</code>。</li><li>即使用逗号和空格分隔每个对象，使用冒号和空格分隔键和值。</li><li>该方法还可以用于对结果中的键进行排序，使用sort_keys参数来指定。</li></ul></li><li>Python对象与等效的json(JavaScript)，转换如下。<table><thead><tr><th align="left">对象</th><th align="left">dict</th><th align="left">list</th><th align="left">tuple</th><th align="left">string</th><th align="left">int</th><th align="left">float</th><th align="left">True</th><th align="left">False</th><th align="left">None</th></tr></thead><tbody><tr><td align="left">json</td><td align="left">Object</td><td align="left">Array</td><td align="left">Array</td><td align="left">String</td><td align="left">Number</td><td align="left">Number</td><td align="left">true</td><td align="left">false</td><td align="left">null</td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><br>x = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Lily&quot;, &quot;age&quot;: &quot;26&quot;, &quot;city&quot;: &quot;XiaMen&quot;&#125;&#x27;</span><br>y = json.loads(x)           <span class="hljs-comment"># 从json字符串转换为python字典</span><br><span class="hljs-built_in">print</span>(y[<span class="hljs-string">&quot;name&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>x = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;26&quot;</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;XiaMen&quot;</span>&#125;<br>y = json.dumps(x)           <span class="hljs-comment"># 从Python字典转换为json字符串</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br><span class="hljs-built_in">print</span>(json.dumps(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;))<br><span class="hljs-built_in">print</span>(json.dumps([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>]))<br><span class="hljs-built_in">print</span>(json.dumps((<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-string">&quot;hello&quot;</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">42</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">31.76</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">None</span>))     <span class="hljs-comment"># 将Python对象转换为json字符串并打印</span><br><br>z = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <br>    <span class="hljs-string">&quot;married&quot;</span>: <span class="hljs-literal">True</span>, <br>    <span class="hljs-string">&quot;divorced&quot;</span>: <span class="hljs-literal">False</span>, <br>    <span class="hljs-string">&quot;children&quot;</span>: (<span class="hljs-string">&quot;Ann&quot;</span>, <span class="hljs-string">&quot;Billy&quot;</span>), <br>    <span class="hljs-string">&quot;pets&quot;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;BMW 230&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">27.5</span>&#125;, <br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Ford Edge&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">24.1</span>&#125;<br>    ]<br>&#125;<br><span class="hljs-built_in">print</span>(json.dumps(z))        <span class="hljs-comment"># 转换一个包含所有合法数据类型的Python对象</span><br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, separators=(<span class="hljs-string">&quot;. &quot;</span>, <span class="hljs-string">&quot; = &quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, sort_keys=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h2 id="6-3-Datetime"><a href="#6-3-Datetime" class="headerlink" title="6-3 Datetime"></a>6-3 Datetime</h2><ul><li>datetime模块<ul><li>导入该模块可以显示当前日期，包含年、月、日、时、分、秒和微秒。</li><li>创建日期使用模块的构造函数<code>datetime()</code>，该函数需年月日这三个参数。<ul><li>该函数还接受时间和时区参数(时、分、秒、微秒、tzone)。</li><li>该函数的时间和时区参数都是可选的，且具有默认值0，时区默认值为None。</li></ul></li><li><code>strftime()</code>方法将日期对象格式化为可读字符串，接受参数，使用format指定返回字符串的格式。</li><li>时间日期格式化符号，示例如下。<table><thead><tr><th align="left"><code>%a</code>：<code>Wed(简化星期)</code></th><th align="left"><code>%b</code>：<code>Dec(简化月份)</code></th></tr></thead><tbody><tr><td align="left"><code>%A</code>：<code>Wednesday(完整星期)</code></td><td align="left"><code>%B</code>：<code>December(完整月份)</code></td></tr><tr><td align="left"><code>%c</code>：<code>Mon Dec 29 17:17:00 2019</code></td><td align="left"><code>%d</code>：<code>31(日，0-31)</code></td></tr><tr><td align="left"><code>%C</code>：<code>20(世纪)</code></td><td align="left"><code>%f</code>：<code>548513(微秒)</code></td></tr><tr><td align="left"><code>%G</code>：<code>2019(年份，ISO 8601)</code></td><td align="left"><code>%H</code>：<code>20(时，00-23，24小时制)</code></td></tr><tr><td align="left"><code>%I</code>：<code>07(时，01-12，12小时制)</code></td><td align="left"><code>%j</code>：<code>365(年中的第n天，001-366)</code></td></tr><tr><td align="left"><code>%m</code>：<code>06(月份，01-12)</code></td><td align="left"><code>%u</code>：<code>1(星期，1-7，ISO 8601)</code></td></tr><tr><td align="left"><code>%M</code>：<code>15(分钟，00-59)</code></td><td align="left"><code>%U</code>：<code>52(一年中的星期数，00-53，星期天开始)</code></td></tr><tr><td align="left"><code>%p</code>：<code>A.M.或P.M.</code></td><td align="left"><code>%V</code>：<code>01(一年中的星期数，01-53，ISO 8601)</code></td></tr><tr><td align="left"><code>%S</code>：<code>15(秒，00-59)</code></td><td align="left"><code>%%</code>：<code>%(本身)</code></td></tr><tr><td align="left"><code>%w</code>：<code>0(星期，0-6，星期天开始)</code></td><td align="left"><code>%x</code>：<code>01/01/19</code></td></tr><tr><td align="left"><code>%W</code>：<code>52(一年中的星期数，00-53，星期一开始)</code></td><td align="left"><code>%X</code>：<code>17:15:00</code></td></tr><tr><td align="left"><code>%y</code>：<code>19(年份，00-99)</code></td><td align="left"><code>%z</code>：<code>+0100(UTC offset，标准时间偏移)</code></td></tr><tr><td align="left"><code>%Y</code>：<code>2019(年份，0000-9999)</code></td><td align="left"><code>%Z</code>：<code>CST(当前时区的名称)</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br><br>x = datetime.datetime.now()         <span class="hljs-comment"># 显示当前日期</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(x.year)                       <span class="hljs-comment"># 显示年份</span><br><span class="hljs-built_in">print</span>(x.strftime(<span class="hljs-string">&quot;%A&quot;</span>))             <span class="hljs-comment"># 显示英文星期</span><br><br>y = datetime.datetime(<span class="hljs-number">2019</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment"># 创建一个日期对象</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(y.strftime(<span class="hljs-string">&quot;%B&quot;</span>))             <span class="hljs-comment"># 显示英文月份</span><br></code></pre></td></tr></table></figure><h2 id="6-4-正则表达式"><a href="#6-4-正则表达式" class="headerlink" title="6-4 正则表达式"></a>6-4 正则表达式</h2><ul><li>RegEx<ul><li>形成搜索模式的字符序列，用于检查字符串是否包含指定的搜索模式。</li><li>Python有一个名为re的内置包，用于处理正则表达式，使用前需导入re模块。<ul><li><code>findall()</code>：返回一个包含所有匹配项的列表。</li><li><code>search()</code>：在字符串中搜索匹配项，若有，返回一个Match对象，若多个，返回匹配项的第一个。</li><li><code>split()</code>：返回一个列表，其中字符串在每次匹配时都被拆分，可通过maxsplit参数控制出现次数。</li><li><code>sub()</code>：将匹配项替换为选择的文本，可以通过count参数来控制替换次数。</li></ul></li><li>元字符：指在正则表达式中具有特殊意义的专用字符，用来规定其前导字符在目标对象中的出现模式。<table><thead><tr><th align="left">元字符</th><th align="left">说明</th><th align="left">示例<img width=205></th></tr></thead><tbody><tr><td align="left"><code>[]</code></td><td align="left">一组字符</td><td align="left"><code>&quot;[a-m]&quot;</code></td></tr><tr><td align="left"><code>\</code></td><td align="left">表示特殊序列，也可用于转义特殊字符</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">除换行符之外的任何字符</td><td align="left"><code>&quot;he..o&quot;</code></td></tr><tr><td align="left"><code>^</code></td><td align="left">以“hello”开头</td><td align="left"><code>&quot;^hello&quot;</code></td></tr><tr><td align="left"><code>$</code></td><td align="left">以“planet”结尾</td><td align="left"><code>&quot;planet$&quot;</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">零次或多次出现</td><td align="left"><code>&quot;he.*o&quot;</code></td></tr><tr><td align="left"><code>+</code></td><td align="left">一次或多次出现</td><td align="left"><code>&quot;he.+o&quot;</code></td></tr><tr><td align="left"><code>?</code></td><td align="left">零次或一次出现</td><td align="left"><code>&quot;he.?o&quot;</code></td></tr><tr><td align="left"><code>&#123;&#125;</code></td><td align="left">指定出现的次数</td><td align="left"><code>&quot;he.&#123;2&#125;o&quot;</code></td></tr><tr><td align="left"><code>|</code></td><td align="left">或</td><td align="left"><code>&quot;falls | stays&quot;</code></td></tr><tr><td align="left"><code>()</code></td><td align="left">捕获和分组</td><td align="left"></td></tr></tbody></table></li><li>集合类特殊字符<table><thead><tr><th align="left">集合字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>[arn]</code></td><td align="left">返回指定字符“a、r或n”之一的任意匹配项</td></tr><tr><td align="left"><code>[a-n]</code></td><td align="left">返回任意小写字符的匹配项</td></tr><tr><td align="left"><code>[^arn]</code></td><td align="left">返回除“a、r和n”之外的任意字符匹配项</td></tr><tr><td align="left"><code>[0123]</code></td><td align="left">返回指定数字“0、1、2或3”之一的任意匹配项</td></tr><tr><td align="left"><code>[0-9]</code></td><td align="left">返回0到9之间任意数字的匹配项</td></tr><tr><td align="left"><code>[0-5][0-9]</code></td><td align="left">返回从00到59之间任意两位数字的匹配项</td></tr><tr><td align="left"><code>[a-zA-Z]</code></td><td align="left">返回a到z、A到Z之间任意字母的匹配项</td></tr><tr><td align="left"><code>[+]</code></td><td align="left">集合中“+*.|()${} ”都无特殊含义，返回匹配字符串中任意“+”字符</td></tr></tbody></table></li><li>特殊序列类字符<table><thead><tr><th align="left">特殊字符</th><th align="left">说明</th><th align="left">示例<img width=60></th></tr></thead><tbody><tr><td align="left"><code>\A</code></td><td align="left">如果指定字符位于字符串“The”的开头，则返回匹配项</td><td align="left"><code>&quot;\AThe&quot;</code></td></tr><tr><td align="left"><code>\b</code></td><td align="left">返回位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;\bain&quot;</code></td></tr><tr><td align="left"><code>\B</code></td><td align="left">返回不位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;ain\B&quot;</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">返回字符串包含0到9数字的匹配项</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>\D</code></td><td align="left">返回字符串不包含数字0到9的匹配项</td><td align="left"><code>&quot;\D&quot;</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">用于匹配单个空格符，包括tab键和换行符</td><td align="left"><code>&quot;\s&quot;</code></td></tr><tr><td align="left"><code>\S</code></td><td align="left">用于匹配除单个空格符之外的所有字符</td><td align="left"><code>&quot;\S&quot;</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">用于匹配a到z的字符、0到9的数字和下划线(_)字符</td><td align="left"><code>&quot;\w&quot;</code></td></tr><tr><td align="left"><code>\W</code></td><td align="left">用于匹配所有与\w不匹配的字符</td><td align="left"><code>&quot;\W&quot;</code></td></tr><tr><td align="left"><code>\Z</code></td><td align="left">如果指定字符位于字符串“Spain”的末尾，则返回匹配项</td><td align="left"><code>&quot;Spain\Z&quot;</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>x = re.search(<span class="hljs-string">&quot;^The.*Spain.$&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 查看是否以The开头，并以Spain.结尾</span><br><br>x = re.findall(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 按找到的顺序包含匹配项</span><br>y = re.findall(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 没找到匹配项，返回一个空列表</span><br><br>x = re.search(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x.start())        <span class="hljs-comment"># 搜索字符串中的第一个空格字符的位置</span><br>y = re.search(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 没找到匹配项，返回None</span><br><br>x = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 在每个空白字符处进行拆分</span><br>y = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 仅在第一次出现时拆分字符串</span><br><br>x = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 用9替换每个空白字符</span><br>y = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 替换前两次出现的空白字符</span><br></code></pre></td></tr></table></figure><ul><li>匹配对象<ul><li>指包含有关搜索和结果信息的对象，如果没有匹配，将返回None，而非匹配对象。</li><li>Match对象具有用于检索有关搜索的信息和结果的属性与方法。<ul><li><code>span()</code>：返回一个包含匹配的开始和结束位置的元组。</li><li><code>string</code>：返回传递给函数的字符串。</li><li><code>group()</code>：返回字符串中匹配的部分。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>a = re.search(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 执行将返回匹配对象的搜索</span><br><br>b = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(b.span())         <span class="hljs-comment"># 查找以大写S开头的任何单词，并打印第一个匹配项的位置</span><br><br>c = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(c.string)         <span class="hljs-comment"># 打印传入函数的字符串</span><br><br>d = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(d.group())        <span class="hljs-comment"># 打印匹配的字符串部分</span><br></code></pre></td></tr></table></figure><h1 id="7-用户输入"><a href="#7-用户输入" class="headerlink" title="7 用户输入"></a>7 用户输入</h1><ul><li>用户输入<ul><li>Python3.6版本使用<code>input()</code>方法进行用户输入。</li><li>Python2.7版本则使用<code>raw_input()</code>方法进行用户输入。</li><li>涉及到<code>input()</code>函数时停止执行，并在用户给出输入后继续执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">userName = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter username: &quot;</span>)          <span class="hljs-comment"># Python3.6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Username is &quot;</span> + userName + <span class="hljs-string">&quot;.&quot;</span>)<br><br><span class="hljs-comment"># userName = raw_input(&quot;Enter username: &quot;)    # Python2.7，已停止维护</span><br><span class="hljs-comment"># print(&quot;Username is &quot; + userName + &quot;.&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="8-异常处理"><a href="#8-异常处理" class="headerlink" title="8 异常处理"></a>8 异常处理</h1><ul><li>异常处理<ul><li>try代码块允许测试代码块的错误。</li><li>except代码块允许处理错误。</li><li>else代码块允许在没有错误时执行代码。</li><li>finally代码块不管try和except代码块的结果如何，都允许执行代码，可用于关闭对象和清理资源。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 发生错误或异常时，会停止并生成错误信息，使用try语句处理异常</span><br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">except</span>:             <span class="hljs-comment"># try代码块引发异常，执行except语句，若无try代码块，则程序崩溃</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;An exception occurred.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(b)<br><span class="hljs-keyword">except</span> NameError:   <span class="hljs-comment"># try语句异常，若为NameError异常，打印该条信息，否则打印except代码块语句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variable x is not defined.&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi~&quot;</span>)<br><span class="hljs-keyword">except</span>:             <span class="hljs-comment"># try代码块若异常，只执行except代码块中的内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">else</span>:               <span class="hljs-comment"># try代码块若没有异常，使用else定义要执行的代码块将被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nothing went wrong.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">finally</span>:            <span class="hljs-comment"># 指定了finally代码块，无论try代码块是否异常，都将执行该代码块</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The &#x27;try except&#x27; is finished.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 尝试打开并写入一个不可写的文件</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        f.write(<span class="hljs-string">&quot;Open file test.&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when writing to the file.&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()   <span class="hljs-comment"># 用于关闭对象和清理资源</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when opening the file.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>引发异常<ul><li>使用raise关键字可以选择在条件发生时抛出异常。</li><li>可以定义要引发的错误类型，以及抛出异常时要打印给用户查看到的文本内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:                   <span class="hljs-comment"># 如果x小于0，引发异常并停止程序</span><br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Sorry, no numbers below zero.&quot;</span>)<br><br>y = <span class="hljs-string">&quot;Hi~&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">type</span>(y) <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>:      <span class="hljs-comment"># 如果y不是整数，引发TypeError异常</span><br>    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Only integers are allowed.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
      <tag>类和对象</tag>
      
      <tag>继承</tag>
      
      <tag>模块</tag>
      
      <tag>用户输入</tag>
      
      <tag>异常处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(一)</title>
    <link href="/2019/01/01/python/python01-python-ji-chu-yi/"/>
    <url>/2019/01/01/python/python01-python-ji-chu-yi/</url>
    
    <content type="html"><![CDATA[<p>Python由荷兰数学和计算机科学研究学会的Guido van Rossum于1990年代初设计，并于1991年发布，是跨平台解释型脚本语言。</p><span id="more"></span><h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a>1 语法</h1><ul><li>缩进<ul><li>指代码行开头的空格，便于阅读，非常重要。</li><li>使用缩进表示代码块，如果跳过缩进，运行将会返回一个错误。</li><li>空格数量由程序员决定，最常见的是Tab四个，或Tab两个空格。</li><li>同个代码块中必须使用相同数量的空格缩进，否则返回一个错误。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">if</span> <span class="hljs-number">7</span> &gt; <span class="hljs-number">3</span>:<br>    <span class="hljs-comment"># 使用tab四个空格的缩进</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seven is greater than three!&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>注释<ul><li>单行注释：以<code>#</code>开头。</li><li>多行注释：以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>开头，以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>结尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a comment.&quot;</span>)         <br><span class="hljs-comment">### 单行注释</span><br><span class="hljs-string">&quot;&quot;&quot; 多行注释</span><br><span class="hljs-string">《劝学》· 孟郊</span><br><span class="hljs-string">击石乃有火，不击元无烟。</span><br><span class="hljs-string">人学始知道，不学非自然。</span><br><span class="hljs-string">万事须己运，他得非我贤。</span><br><span class="hljs-string">青春须早为，岂能长少年。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><ul><li>变量<ul><li>存储数据值的容器，赋值时创建，Python没有用于声明变量的命令。</li><li>变量不需要以任何特定的类型进行声明，甚至可以在设置后更改类型。</li><li>指定变量的数据类型，通过强制转换完成。</li><li>使用函数<code>type()</code>可以获取变量的数据类型。</li><li>使用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>声明字符串变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span>               <span class="hljs-comment"># 变量x设为int类型</span><br>x = <span class="hljs-string">&quot;Lily&quot;</span>          <span class="hljs-comment"># 变量x更改为str类型</span><br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>)          <span class="hljs-comment"># 强制转换变量y为int类型</span><br><span class="hljs-built_in">print</span>(y)        <br><br>z = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))      <span class="hljs-comment"># 获取变量z的数据类型</span><br></code></pre></td></tr></table></figure><ul><li>变量名<ul><li>命名规则<ul><li>区分大小写(age、Age和AGE是不同的变量)。</li><li>必须以字母或下划线开头，不能以数字开头。</li><li>只能包含字母数字字符和下划线(Az、0-9和_)。</li></ul></li><li>命名方法<ul><li>蛇形命名法，每个单词都以下划线字符(_)分隔。</li><li>小驼峰命名法，除首单词字母小写，其余单词都以大写字母开头。</li><li>大驼峰命名法，又叫帕斯卡命名法，每个单词都以大写字母开头。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">myvar__ = <span class="hljs-string">&quot;Lily&quot;</span><br>my_var_ = <span class="hljs-string">&quot;Lily&quot;</span><br>_my_var = <span class="hljs-string">&quot;Lily&quot;</span><br>my__Var = <span class="hljs-string">&quot;Lily&quot;</span><br>__MyVar = <span class="hljs-string">&quot;Lily&quot;</span><br>variable_name = <span class="hljs-string">&quot;Lily&quot;</span>      <span class="hljs-comment"># 蛇形命名</span><br>myVariableName = <span class="hljs-string">&quot;Lily&quot;</span>     <span class="hljs-comment"># 小驼峰命名</span><br>MyVariableName = <span class="hljs-string">&quot;Lily&quot;</span>     <span class="hljs-comment"># 大驼峰命名</span><br></code></pre></td></tr></table></figure><ul><li>多值分配<ul><li>允许在一行中为多个变量赋值。</li><li>可以在一行中为多个变量分配相同值。</li><li>若有一组列表或元组，允许将值提取到变量中，该方法称为拆包。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">x, y, z = <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>   <span class="hljs-comment"># 多个变量赋值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>x = y = z = <span class="hljs-string">&quot;Orange&quot;</span>                    <span class="hljs-comment"># 多个变量分配相同值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>x, y, z = fruits                        <span class="hljs-comment"># 拆包</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>输出变量<ul><li>使用函数<code>print()</code>输出多个变量，逗号分隔，支持不同数据类型。</li><li>使用<code>+</code>运算符输出多个变量，对于数字，该字符用于数学运算符。</li><li>如果尝试使用<code>+</code>操作符组合字符串和数字，那么将TypeError报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;C&quot;</span><br>y = <span class="hljs-string">&quot;Java&quot;</span><br>z = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(x, y, z)<br><span class="hljs-built_in">print</span>(x + <span class="hljs-string">&quot; &quot;</span> + y + <span class="hljs-string">&quot; &quot;</span> + z)<br><br>x = <span class="hljs-number">2</span>             <span class="hljs-comment"># int类型</span><br>y = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(x + y)      <span class="hljs-comment"># 2 + 1 = 3</span><br>x = <span class="hljs-string">&quot;2&quot;</span>           <span class="hljs-comment"># str类型</span><br>y = <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-built_in">print</span>(x + y)      <span class="hljs-comment"># str(2) + str(1) = 21</span><br><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-comment"># print(x + y)    # TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;.</span><br></code></pre></td></tr></table></figure><ul><li>全局变量<ul><li>函数外创建的变量，每个人都可用，无论是函数内部或外部。</li><li>函数内创建的同名变量，是局部变量，只能在函数内部使用。</li><li>若函数内外创建同名变量，全局变量将保持原样，全局并具有原始值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 在函数外部创建变量x，并在函数内部使用</span><br>x = <span class="hljs-string">&quot;scripting language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br>func_one()<br><br><span class="hljs-comment"># 在函数内部创建变量y，与全局变量y同名</span><br>y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():  <br>    y = <span class="hljs-string">&quot;scripting language.&quot;</span>                   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>在函数内部创建全局变量，使用global关键字。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 使用global关键字，则变量x属于全局范围</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():<br>    <span class="hljs-keyword">global</span> x<br>    x = <span class="hljs-string">&quot;scripting language.&quot;</span><br>func_one()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br><br><span class="hljs-comment"># 更改函数内的全局变量值，使用global引用该变量</span><br>y = <span class="hljs-string">&quot;scripting language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():<br>    <span class="hljs-keyword">global</span> y<br>    y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><ul><li>类型<ul><li>算术：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>**</code>、<code>//</code>。</li><li>赋值：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>**=</code>、<code>//=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code>。</li><li>比较：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>。</li><li>逻辑：<code>and</code>、<code>or</code>、<code>not</code>。</li><li>身份：<code>is</code>、<code>is not</code>。</li><li>成员：<code>in</code>、<code>not in</code>。</li><li>位：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">9</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a // b)           <span class="hljs-comment"># 算术运算，向下取整除</span><br><span class="hljs-built_in">print</span>(-a // b)<br><br>b *= a                  <span class="hljs-comment"># 赋值运算，b = b * a</span><br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-keyword">if</span> a &gt; b:               <span class="hljs-comment"># 比较运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a <span class="hljs-keyword">and</span> b:             <span class="hljs-comment"># 逻辑运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a和b都为True.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a和b有一个不为True.&quot;</span>)<br><br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">is</span> b):            <span class="hljs-comment"># 身份运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b有相同的标识.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b没有相同标识.&quot;</span>)<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>):         <span class="hljs-comment"># 成员运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a在给定的列表list中.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a不在给定的列表list中.&quot;</span>)<br><br>c = a &gt;&gt; <span class="hljs-number">2</span>              <span class="hljs-comment"># 位运算，9=0000 1001</span><br><span class="hljs-built_in">print</span>(c)                <span class="hljs-comment"># 右移两位，0000 0010=2</span><br></code></pre></td></tr></table></figure><h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h1><ul><li>内置数据类型<ul><li>无类型：<code>NoneType</code>。</li><li>数字类型：<code>int</code>、<code>float</code>、<code>complex</code>。</li><li>文本类型：<code>str</code>。</li><li>布尔类型：<code>bool</code>。</li><li>序列类型：<code>list</code>、<code>tuple</code>、<code>range</code>。</li><li>映射类型：<code>dict</code>。</li><li>集合类型：<code>set</code>、<code>frozenset</code>。</li><li>二进制类型：<code>bytes</code>、<code>bytearray</code>、<code>memoryview</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))                      <span class="hljs-comment"># 打印变量x的数据类型</span><br><br>y = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]   <span class="hljs-comment"># 设置数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>z = <span class="hljs-built_in">dict</span>(name = <span class="hljs-string">&quot;Lily&quot;</span>, age = <span class="hljs-number">26</span>)   <span class="hljs-comment"># 使用构造函数设置特定的数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br></code></pre></td></tr></table></figure><h2 id="4-1-数字"><a href="#4-1-数字" class="headerlink" title="4-1 数字"></a>4-1 数字</h2><ul><li>数字类型<ul><li><code>int</code>：整数，正数或负数，没有小数，长度不受限制。</li><li><code>float</code>：浮点数，包含一个或多个小数的正数或负数，可有带e的科学数字，表10的幂。</li><li><code>complex</code>：复数，使用j作为虚部，可以用<code>complex(a, b)</code>表示，也可以用<code>a + bj</code>表示。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span>           <span class="hljs-comment"># int</span><br>y = <span class="hljs-number">12E4</span>         <span class="hljs-comment"># float，12*10000</span><br>z = <span class="hljs-number">3</span> + <span class="hljs-number">5j</span>       <span class="hljs-comment"># complex，也可表示为complex(3, 5)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br><br><span class="hljs-keyword">import</span> random    <span class="hljs-comment"># 使用random内置模块，用于生成随机数</span><br><span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><ul><li>构造：类型转换就是使用构造函数完成的。<ul><li><code>int()</code>：整数、浮点数或字符串构造整数。</li><li><code>str()</code>：各种数据类型都可以构造字符串。</li><li><code>float()</code>：整数、浮点数或字符串构造浮点数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">float</span>(x)     <span class="hljs-comment"># int转float</span><br>b = <span class="hljs-built_in">int</span>(y)       <span class="hljs-comment"># float转int</span><br>c = <span class="hljs-built_in">complex</span>(x)   <span class="hljs-comment"># int转complex</span><br><span class="hljs-built_in">print</span>(a)         <span class="hljs-comment"># 注意，这里不能将复数转换成其他数字类型，否则报错</span><br><span class="hljs-built_in">print</span>(b)         <span class="hljs-comment"># TypeError: can&#x27;t convert complex to float(int).</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-2-字符串"><a href="#4-2-字符串" class="headerlink" title="4-2 字符串"></a>4-2 字符串</h2><ul><li>字符串<ul><li>Python中的字符串用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>括起来。</li><li>可以使用三个引号<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>将多行字符串分配给变量。</li><li>字符串是表示Unicode字符的字节数组，没有<code>char</code>字符数据类型，单个字符只是长度为1的字符串。</li><li>方括号可以用来访问字符串中的元素，由于字符串是数组，可以通过<code>for</code>循环遍历字符串中的字符。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">s = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">人，得自个儿成全自个儿。</span><br><span class="hljs-string">要想人前显贵，必得人后受罪！</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s)                          <span class="hljs-comment"># 换行符插入到与代码相同的位置</span><br><br>a = <span class="hljs-string">&quot;Test&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])                       <span class="hljs-comment"># 获取位置0的字符，即第一个字符的位置</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;banana&quot;</span>:  <br>    <span class="hljs-built_in">print</span>(b)                      <span class="hljs-comment"># for循环遍历单词banana中的字母</span><br><br>c = <span class="hljs-string">&quot;Hi!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(c))                     <span class="hljs-comment"># 使用len()函数获取字符串的长度</span><br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt)              <span class="hljs-comment"># 关键字in，检查txt文本中是否存在单词free</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;free&#x27; is present.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt)     <span class="hljs-comment"># 关键字not in，检查txt文本中是否不存在单词expensive</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No, &#x27;expensive&#x27; in not present.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>切片字符串<ul><li>使用切片语法返回一系列字符。</li><li>指定以冒号<code>:</code>分隔的开始和结束索引，返回字符串的一部分。</li><li>通过省略开始索引，切片范围会从第一个字符开始，即位置0。</li><li>通过省略结束索引，切片范围将到达末尾，也可以使用负索引从字符串末尾开始切片。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot;Hello, World!&quot;</span>         <span class="hljs-comment"># 第1个字符H的索引位置是0</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])              <span class="hljs-comment"># 获取位置2到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[ : <span class="hljs-number">5</span>])              <span class="hljs-comment"># 获取位置0到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>:  ])              <span class="hljs-comment"># 获取位置2到最后的字符，包括2</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">5</span>: -<span class="hljs-number">2</span>])            <span class="hljs-comment"># 负索引：末尾字符!的索引位置是0，往左依次是-1，-2...</span><br></code></pre></td></tr></table></figure><ul><li>字符串内置方法<ul><li><code>upper()</code>：以大写形式返回字符串。</li><li><code>lower()</code>：以小写形式返回字符串。</li><li><code>strip()</code>：删除开头或结尾的任何空格。</li><li><code>replace()</code>：用另一个字符串替换当前字符串。</li><li><code>split()</code>：返回一个列表，其中指定分隔符之间的文本成为列表项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot; Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(a.upper())            <span class="hljs-comment"># 大写形式</span><br><span class="hljs-built_in">print</span>(a.lower())            <span class="hljs-comment"># 小写形式</span><br><span class="hljs-built_in">print</span>(a.strip())            <span class="hljs-comment"># 删除空格</span><br><span class="hljs-built_in">print</span>(a.replace(<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>))  <span class="hljs-comment"># 用J替换H</span><br><span class="hljs-built_in">print</span>(a.split(<span class="hljs-string">&quot;,&quot;</span>))         <span class="hljs-comment"># 使用逗号分隔符拆分字符串</span><br></code></pre></td></tr></table></figure><ul><li>格式化字符串<ul><li>使用<code>+</code>运算符连接或组合两个字符串，如果用于连接字符串和数字，将报错。</li><li><code>format()</code>方法接受传递的参数，格式化字符串，可以用来组合字符串和数字。<ul><li>该方法接受无限数量的参数，并放置在相应的占位符中。</li><li>可通过索引号<code>&#123;num&#125;</code>确保将参数放置在正确的占位符中。</li><li>使用命名索引<code>&#123;name&#125;</code>，传递参数值时必须使用相应的变量名<code>name</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;Hello &quot;</span><br>y = <span class="hljs-string">&quot;World.&quot;</span><br>z = x + y                   <span class="hljs-comment"># 使用+运算符连接</span><br><span class="hljs-built_in">print</span>(z)<br><br>age = <span class="hljs-number">26</span><br>txt = <span class="hljs-string">&quot;My name is Lily, and I am &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(age))      <span class="hljs-comment"># 使用format()格式化方法</span><br><br>quantity = <span class="hljs-number">3</span><br>items_no = <span class="hljs-number">567</span><br>price_li = <span class="hljs-number">49.95</span><br>order = <span class="hljs-string">&quot;I want to pay &#123;&#125; dollars for &#123;&#125; pieces of item &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br>order = <span class="hljs-string">&quot;I want to pay &#123;2&#125; dollars for &#123;0&#125; pieces of item &#123;1&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br><br>price = <span class="hljs-number">49</span><br>txt = <span class="hljs-string">&quot;The price is &#123;:.2f&#125; dollars.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(price))    <span class="hljs-comment"># 将价格格式化为带两位小数的数字</span><br><br>order = <span class="hljs-string">&quot;I have a &#123;carname&#125;, it is a &#123;model&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(carname = <span class="hljs-string">&quot;Ford&quot;</span>, model = <span class="hljs-string">&quot;Mustang&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>转义字符<ul><li>想在字符串中插入非法字符，可以使用转义字符<code>\</code>，后跟插入的非法字符即可。</li><li>常见的转义字符<ul><li><code>\&#39;</code>：单引号。</li><li><code>\\</code>：反斜杠。</li><li><code>\a</code>：响铃。</li><li><code>\n</code>：换行。</li><li><code>\r</code>：回车。</li><li><code>\v</code>：纵向制表符。</li><li><code>\t</code>：横向制表符。</li><li><code>\b</code>：退格符。</li><li><code>\f</code>：换页符。</li><li><code>\ooo</code>：八进制。</li><li><code>\xhh</code>：十六进制。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">txt = <span class="hljs-string">&quot;We are the so-called \&quot;Vikings\&quot; from the north.&quot;</span><br><span class="hljs-built_in">print</span>(txt)                  <span class="hljs-comment"># 转义双引号</span><br></code></pre></td></tr></table></figure><h2 id="4-3-布尔值"><a href="#4-3-布尔值" class="headerlink" title="4-3 布尔值"></a>4-3 布尔值</h2><ul><li>布尔值<ul><li>只表示为<code>True</code>或<code>False</code>，这两个值其中的一个。</li><li>函数<code>bool()</code>允许评估任何值，并返回<code>True</code>或<code>False</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">26</span><br>b = <span class="hljs-number">30</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b大于a.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b小于a.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))             <span class="hljs-comment"># 评估一个数字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;Lily&quot;</span>))         <span class="hljs-comment"># 评估一个字符串</span><br></code></pre></td></tr></table></figure><ul><li>True值<ul><li>任何数字都是True，0除外。</li><li>任何字符串都是True，空字符串除外。</li><li>任何列表、元组、集合和字典都是True，空值除外。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;abc&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><ul><li>False值<ul><li>空值，例如<code>[]</code>、<code>()</code>、<code>&#123;&#125;</code>、<code>&quot;&quot;</code>、数字<code>0</code>和<code>None</code>，还有<code>False</code>本身。</li><li>用户自定义类型的对象<ul><li>如果类定义了<code>__len__()</code>方法，并返回0或False，则输出False值。</li><li>如果类同时定义<code>__len__()</code>和<code>__bool__()</code>方法，则输出参考<code>__bool__()</code>的返回值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">False</span>))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myclass</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>myobj = myclass()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(myobj))          <span class="hljs-comment"># 定义了__len__()方法，并返回0       </span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__len__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__bool__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A is True.&quot;</span> <span class="hljs-keyword">if</span> A() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;A is not True.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(A()))        <span class="hljs-comment"># 同时定义了__len__()和__bool__()方法</span><br></code></pre></td></tr></table></figure><ul><li>返回布尔值情况<ul><li>创建返回布尔值的函数，可返回布尔值。</li><li>返回布尔值的内置函数：<code>isinstance()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFun</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(myFun())              <span class="hljs-comment"># 创建返回布尔值的函数</span><br><br>x = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>))   <span class="hljs-comment"># 检查对象是否为int整数</span><br></code></pre></td></tr></table></figure><h2 id="4-4-列表"><a href="#4-4-列表" class="headerlink" title="4-4 列表"></a>4-4 列表</h2><ul><li>列表<ul><li>用于将多个项目存储在单个变量中，使用方括号<code>[]</code>创建。</li><li>列表项是有序可变的，且允许重复值，索引时第一项为[0]。</li><li>列表长度使用<code>len()</code>函数计算，列表项可以是任何数据类型。</li><li>列表的数据类型为<code>&lt;class &#39;list&#39;&gt;</code>，使用<code>list()</code>构造函数创建新列表。</li><li>四种集合数据类型<ul><li>list：列表，有序且可变的集合，允许重复成员。</li><li>tuple：元组，有序且不可变的集合，允许重复成员。</li><li>set：集合，无序且不可变的集合(可删除或添加元素)，无索引，不允许重复成员。</li><li>dict：字典，有序且可变的集合(3.7版本开始有序，之前无序)，不允许重复成员。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mylist))          <span class="hljs-comment"># 获取列表长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mylist))         <span class="hljs-comment"># 查看列表的数据类型</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]     <span class="hljs-comment"># 列表项可以是整数、布尔数据等类型</span><br>list2 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]<br>list3 = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;male&quot;</span>]<br>list4 = <span class="hljs-built_in">list</span>((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>))    <span class="hljs-comment"># list()函数创建新列表</span><br><span class="hljs-built_in">print</span>(list4)<br></code></pre></td></tr></table></figure><ul><li>访问列表项<ul><li>通过索引号来访问列表项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是包含指定项目的新列表。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从列表末尾开始索引需指定负索引，使用<code>in</code>关键字确定列表中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>])            <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负索引最后一项Cherry</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>])         <span class="hljs-comment"># 范围从0开始，到2结束，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[ : <span class="hljs-number">2</span>])         <span class="hljs-comment"># 省略起始值，范围从0到2，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>:  ])         <span class="hljs-comment"># 省略结束值，范围从1到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">2</span>: -<span class="hljs-number">1</span>])       <span class="hljs-comment"># 范围从-1到-2，不包括-1，即Banana</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mylist:       <span class="hljs-comment"># 确定mylist列表中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits list.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改列表项<ul><li>更改特定项目的值，需要参考索引号。</li><li>更改特定范围内项目的值<ul><li>使用新值定义一个列表，并参考要插入新值的索引号范围。</li><li>插入的项目多于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>插入的项目少于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>当插入的项目数和替换的项目数不匹配时，列表的长度会发生改变。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Orange&quot;</span>        <span class="hljs-comment"># 更改项目值</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">2</span>] = [<span class="hljs-string">&quot;Blackcurrant&quot;</span>, <span class="hljs-string">&quot;Watermelon&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 更改项目值范围，插入的项目多于替换的项目</span><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">3</span>] = [<span class="hljs-string">&quot;Cherry&quot;</span>]   <span class="hljs-comment"># 插入的项目少于替换的项目，将第2和第3个值替换为1个值</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>添加列表项<ul><li><code>append()</code>：将项目添加到列表的末尾。</li><li><code>insert()</code>：在指定索引处插入列表项。</li><li><code>extend()</code><ul><li>将另一个列表中的元素附加到当前列表，元素会被添加到列表的末尾。</li><li>附加列表非必须，还可添加任何可迭代对象，例如元组、集合或字典。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist.append(<span class="hljs-string">&quot;Orange&quot;</span>)     <span class="hljs-comment"># 将Orange添加到列表末尾</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Blackcurrant&quot;</span>)<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 插入Blackcurrant作为第二项</span><br><br>tropical = [<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>mylist.extend(tropical)     <span class="hljs-comment"># 添加tropical元素到mylist列表</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mytuple = (<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>)<br>mylist.extend(mytuple)      <span class="hljs-comment"># 添加元组的元素到mylist列表中</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>删除列表项<ul><li><code>remove()</code>：删除指定的项目。</li><li><code>pop()</code>：删除指定的索引，若不指定索引，则删除最后一项。</li><li>使用<code>del</code>关键字可以删除指定的索引，也可以完全删除列表。</li><li><code>clear()</code>：清空列表，该列表仍然存在，但列表中没有内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Cherry&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Mango&#x27;</span>, <span class="hljs-string">&#x27;Kiwi&#x27;</span>, <span class="hljs-string">&#x27;Papaya&#x27;</span>]<br>mylist.remove(<span class="hljs-string">&quot;Banana&quot;</span>)     <span class="hljs-comment"># 删除Banana</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.pop(<span class="hljs-number">1</span>)               <span class="hljs-comment"># 删除第二项</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.pop()                <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">del</span> mylist[<span class="hljs-number">0</span>]               <span class="hljs-comment"># 删除第一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-keyword">del</span> mylist                  <span class="hljs-comment"># 删除整个列表，mylist此时不存在了</span><br><br>mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.clear()              <span class="hljs-comment"># 清除列表内容</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表循环<ul><li>使用for循环可以遍历列表项。</li><li>还可以通过引用索引号遍历列表项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历列表项，<code>len()</code>函数确定列表的长度，从0开始通过索引循环遍历。</li><li>还可以使用列表推导式(List Comprehension)进行循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mylist:            <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mylist)):<br>    <span class="hljs-built_in">print</span>(mylist[y])        <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mylist):      <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mylist[z])<br>    z = z + <span class="hljs-number">1</span><br><br>[<span class="hljs-built_in">print</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist]  <span class="hljs-comment"># 列表推导式循环遍历</span><br></code></pre></td></tr></table></figure><ul><li>列表推导式<ul><li>语法：<code>newlist = [expression for item in iterable if condition == True]</code>。</li><li>返回值是一个新列表，保持旧列表不变。</li><li><code>condition</code>：条件是过滤器，只接受条件为True的项，可选项，可省略。</li><li><code>iterable</code>：迭代对象可以是任何可迭代对象，例如列表、元组或集合等。</li><li><code>expression</code>：表达式是迭代中的当前项，但也是结果，可作为操纵结果的方式包含条件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 只接受条件不是Apple的物品</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 条件可选</span><br><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># range()函数创建一个可迭代对象</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 加了“只接受小于5”的判断条件</span><br><br>mylist = [x.upper() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 将新列表中的值设置为大写</span><br><br>mylist = [x <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Cherry&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 将Banana替换为Cherry</span><br></code></pre></td></tr></table></figure><ul><li>列表排序<ul><li><code>sort()</code><ul><li>按字母数字顺序对列表进行排序，默认情况下升序。</li><li>如果是降序排序，使用关键字参数<code>reverse = True</code>。</li><li>还可以使用关键字参数<code>key = function</code>自定义函数。</li><li>默认情况下该方法区分大小写，所有大写字母排在小写字母之前。</li><li>如果想要一个不区分大小写的排序，使用<code>str.lower</code>作为键函数。</li></ul></li><li><code>reverse()</code>：反转元素的当前排序顺序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.sort()               <span class="hljs-comment"># 升序，从小到大</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(reverse = <span class="hljs-literal">True</span>) <span class="hljs-comment"># 降序，从大到小</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(n - <span class="hljs-number">50</span>)      <span class="hljs-comment"># 根据数字与50的接近程度对列表进行排序</span><br>mylist = [<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">65</span>, <span class="hljs-number">82</span>, <span class="hljs-number">23</span>]<br>mylist.sort(key = func)     <span class="hljs-comment"># 返回一个用于对列表进行升序排序的数字</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.sort()               <span class="hljs-comment"># 区分大小写，大写在前，小写在后</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(key = <span class="hljs-built_in">str</span>.lower)<span class="hljs-comment"># 不区分大小写的排序</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.reverse()            <span class="hljs-comment"># 颠倒列表项的顺序</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表复制<ul><li><code>copy()</code>：制作列表副本。</li><li><code>list()</code>：制作列表副本的另一种方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>cplist1 = mylist.copy()     <span class="hljs-comment"># 使用copy()方法复制</span><br><span class="hljs-built_in">print</span>(cplist1)<br><br>cplist2 = <span class="hljs-built_in">list</span>(mylist)      <span class="hljs-comment"># 使用list()方法复制</span><br><span class="hljs-built_in">print</span>(cplist2)<br></code></pre></td></tr></table></figure><ul><li>列表添加<ul><li>使用<code>+</code>运算符可以连接两个或多个列表。</li><li>将另一个列表中的所有项目逐个附加到一个列表中。</li><li>通过<code>extend()</code>方法将一个列表中的元素添加到另一个列表中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list3 = list1 + list2       <span class="hljs-comment"># +运算符</span><br><span class="hljs-built_in">print</span>(list3)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list2:<br>    list1.append(x)         <span class="hljs-comment"># 逐个符加到list1列表中</span><br><span class="hljs-built_in">print</span>(list1)<br><br>list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list1.extend(list2)         <span class="hljs-comment"># extend()方法在list1列表末尾添加list2元素</span><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>列表内置方法<ul><li><code>count()</code>：统计列表元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist.count(<span class="hljs-string">&quot;Apple&quot;</span>))      <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mylist.index(<span class="hljs-string">&quot;Banana&quot;</span>))     <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4-5 元组"></a>4-5 元组</h2><ul><li>元组<ul><li>用在单个变量中存储多个项目，用圆括号<code>()</code>书写。</li><li>元组项是有序不可更改的，并且允许重复值，被索引时第一项索引为<code>[0]</code>。</li><li><code>len()</code>函数确定元组长度，创建一个只有一项的元组，须在项目后添加一个逗号。</li><li>元组项可以是任何数据类型，例如字符串、整数或布尔类型等，可以包含不同类型。</li><li>元组的数据类型为<code>&lt;class &#39;tuple&#39;&gt;</code>，使用<code>tuple()</code>构造函数创建一个新的元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># 圆括号书写</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># 允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mytuple))         <span class="hljs-comment"># 打印元组中的项目数</span><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, )       <span class="hljs-comment"># 一项元组，必须在项目后添加一个逗号</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mytuple))        <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><br>tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)    <span class="hljs-comment"># 字符串类型</span><br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>)    <span class="hljs-comment"># 整数类型</span><br>tuple3 = (<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>)    <span class="hljs-comment"># 包含不同类型</span><br><br>mytuple = <span class="hljs-built_in">tuple</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># tuple()函数创建新元组</span><br></code></pre></td></tr></table></figure><ul><li>访问元组项<ul><li>通过引用方括号内的索引号来访问元组项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是具有指定项目的新元组。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从元组末尾开始索引需指定负索引，使用<code>in</code>关键字确定元组中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">1</span>])           <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">1</span>])          <span class="hljs-comment"># 打印元组的最后一项Cherry</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Melon&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])        <span class="hljs-comment"># 返回第三、四、五项</span><br><span class="hljs-built_in">print</span>(mytuple[ : <span class="hljs-number">4</span>])        <span class="hljs-comment"># 省略起始值，范围从0到4，不包括4</span><br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>:  ])        <span class="hljs-comment"># 省略结束值，范围从2到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])       <span class="hljs-comment"># 返回从索引-4到索引-1，不包括-4的项目</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mytuple:      <span class="hljs-comment"># 确定mytuple元组中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits typle.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更新元组值<ul><li>元组一旦创建就不可更改，可将其转换为列表，更改列表再转换回元组。</li><li>若要添加一个或多个项目，使用这些项目创建一个新元组，并将其添加到现有元组中。</li><li>删除元组中的项目同样需要先转换为列表进行操作，<code>del</code>关键字则可以完全删除元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mylists = <span class="hljs-built_in">list</span>(mytuple)     <span class="hljs-comment"># 将元组转换为列表</span><br>mylists[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Kiwi&quot;</span>         <span class="hljs-comment"># 更改列表</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)    <span class="hljs-comment"># 再将列表转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>newtuple = (<span class="hljs-string">&quot;Orange&quot;</span>, )     <span class="hljs-comment"># 创建新元组</span><br>mytuple += newtuple         <span class="hljs-comment"># 添加该元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>mylists = <span class="hljs-built_in">list</span>(mytuple)     <span class="hljs-comment"># 转换为列表</span><br>mylists.remove(<span class="hljs-string">&quot;Apple&quot;</span>)     <span class="hljs-comment"># 删除列表项</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)    <span class="hljs-comment"># 转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br><span class="hljs-keyword">del</span> mytuple                 <span class="hljs-comment"># 完全删除元组</span><br><span class="hljs-comment"># print(mytuple)            # NameError: name &#x27;mytuple&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>元组拆包<ul><li>创建元组并赋值称为元组打包，将值提取回变量中称为拆包。</li><li>拆包时变量数必须与元组值的数量匹配，若不匹配则使用星号<code>*</code>将剩余值收集为列表。</li><li>若星号被添加到另一个变量而非最后一个，Python将为变量分配值，直至剩余值数量与剩余变量数匹配。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>(green, yellow, red) = mytuple<br><span class="hljs-built_in">print</span>(green)                <span class="hljs-comment"># 拆包</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Strawberry&quot;</span>, <span class="hljs-string">&quot;Raspberry&quot;</span>)<br>(green, yellow, *red) = mytuple<br><span class="hljs-built_in">print</span>(red)                  <span class="hljs-comment"># 使用星号*将剩余值收集为列表</span><br><br>(green, *tropic, red) = mytuple<br><span class="hljs-built_in">print</span>(tropic)               <span class="hljs-comment"># 添加tropic变量值列表</span><br></code></pre></td></tr></table></figure><ul><li>元组循环<ul><li>使用for循环可以遍历元组项。</li><li>还可以通过引用索引号遍历元组项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历元组项，<code>len()</code>函数确定元组的长度，从0开始通过索引循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:           <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mytuple)):<br>    <span class="hljs-built_in">print</span>(mytuple[y])       <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mytuple):     <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mytuple[z])<br>    z = z + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>元组添加<ul><li>使用<code>+</code>运算符可以连接两个或多个元组。</li><li>使用<code>*</code>运算符将元组内容乘以给定次数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>tuple3 = tuple1 + tuple2<br><span class="hljs-built_in">print</span>(tuple3)               <span class="hljs-comment"># +运算符</span><br><br>fruits = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mytuple = fruits * <span class="hljs-number">2</span>        <span class="hljs-comment"># *运算符</span><br><span class="hljs-built_in">print</span>(mytuple)<br></code></pre></td></tr></table></figure><ul><li>元组内置方法<ul><li><code>count()</code>：统计元组元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple.count(<span class="hljs-string">&quot;Apple&quot;</span>))     <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mytuple.index(<span class="hljs-string">&quot;Banana&quot;</span>))    <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-6-集合"><a href="#4-6-集合" class="headerlink" title="4-6 集合"></a>4-6 集合</h2><ul><li>集合<ul><li>用于将多个项目存储在单个变量中，用大括号<code>&#123;&#125;</code>书写。</li><li>集合项是无序不可更改的，且无索引，也不允许重复值。</li><li><code>len()</code>函数确定集合长度，集合项可以是任何数据类型。</li><li>例如字符串、整数或布尔类型等，可以包含不同数据类型。</li><li>集合的数据类型为<code>&lt;class &#39;set&#39;&gt;</code>，使用<code>set()</code>构造函数创建一个新集合，for循环遍历集合项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># 大括号书写</span><br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># 不允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(myset))           <span class="hljs-comment"># 获取集合中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myset))          <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;      <span class="hljs-comment"># 字符串类型</span><br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;      <span class="hljs-comment"># 整数类型</span><br>set3 = &#123;<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>&#125;      <span class="hljs-comment"># 包含不同类型</span><br><br>myset = <span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># set()函数创建新集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>访问集合项<ul><li>不能通过索引访问集合项，使用<code>for</code>循环遍历。</li><li>或者使用<code>in</code>关键字确定集合中是否存在指定值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">in</span> myset)    <span class="hljs-comment"># in关键字确定</span><br></code></pre></td></tr></table></figure><ul><li>添加集合项<ul><li>创建集合后无法更改集合项，但<code>add()</code>方法可添加新项目。</li><li>使用<code>update()</code>方法可以将另一个集合项添加到当前集合中。</li><li><code>update()</code>方法中的对象，可以是任何可迭代的对象，例如元组、列表或字典等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.add(<span class="hljs-string">&quot;Orange&quot;</span>)         <span class="hljs-comment"># add()方法添加集合项</span><br><span class="hljs-built_in">print</span>(myset)<br><br>tropical = &#123;<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>&#125;<br>myset.update(tropical)      <span class="hljs-comment"># 添加tropical集合项到myset</span><br><span class="hljs-built_in">print</span>(myset)<br><br>mylist = [<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>myset.update(mylist)        <span class="hljs-comment"># 添加列表元素到myset集合中</span><br><span class="hljs-built_in">print</span>(myset)<br></code></pre></td></tr></table></figure><ul><li>删除集合项<ul><li>使用<code>remove()</code>或<code>discard()</code>方法删除集合中的项目。<ul><li>如果要删除的集合项不存在，使用<code>remove()</code>将会报错。</li><li>如果要删除的集合项不存在，使用<code>discard()</code>不会报错。</li></ul></li><li><code>pop()</code>方法删除最后一项，集合无序，不确定删除的具体项。</li><li><code>clear()</code>方法清空集合，该集合仍在，<code>del</code>关键字则完全删除集合。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.remove(<span class="hljs-string">&quot;Banana&quot;</span>)      <span class="hljs-comment"># remove()方法删除Banana</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-comment"># myset.remove(&quot;Banana&quot;)    # 不存在集合项，报错KeyError: &#x27;Banana&#x27;.</span><br>myset.discard(<span class="hljs-string">&quot;Banana&quot;</span>)     <span class="hljs-comment"># 不存在集合项，使用discard()方法不会报错</span><br><span class="hljs-built_in">print</span>(myset)<br><br>thisset = myset.pop()       <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(myset)<br><span class="hljs-built_in">print</span>(thisset)<br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.clear()               <span class="hljs-comment"># 清空集合</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-keyword">del</span> myset                   <span class="hljs-comment"># 完全删除集合</span><br><span class="hljs-comment"># print(myset)              # NameError: name &#x27;myset&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>集合添加<ul><li><code>union()</code>：返回一个包含两个集合中所有项目的新集合，会排除重复项。</li><li><code>update()</code>：将一个集合的所有项目插入到另一个集合中，会排除重复项。</li><li><code>intersection()</code>：仅包含存在于两个集合中的相同项。</li><li><code>intersection_update()</code>：仅保留两个集合中存在的相同项。</li><li><code>symmetric_difference()</code>：仅包含存在于两个集合中的不同项。</li><li><code>symmetric_difference_update()</code>：仅保留两个集合中存在的不同项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.union(set2)     <span class="hljs-comment"># 返回一个新集合set3</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set1.update(set2)           <span class="hljs-comment"># 将set2中的所有项目插入到set1中</span><br><span class="hljs-built_in">print</span>(set1)<br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.intersection(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 仅包含存在于set1和set2中的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set1.intersection_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 仅保留set1和set2中存在的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.symmetric_difference(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 仅包含存在于set1和set2中的不同项</span><br><br>set1.symmetric_difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 仅保留set1和set2中存在的不同项</span><br></code></pre></td></tr></table></figure><ul><li>集合内置方法<ul><li><code>copy()</code>：复制一个集合。</li><li><code>difference()</code>：返回集合的差集。</li><li><code>difference_update()</code>：移除指定集合中包含与另一个集合相同项的元素。</li><li><code>isdisjoint()</code>：判断两个集合是否相交，不相交返回True，否则返回False。</li><li><code>issubset()</code>：判断集合是否被其他集合包含，是则返回True，否则返回False。</li><li><code>issuperset()</code>：判断集合是否包含其他集合，是则返回True，否则返回False。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.copy()          <span class="hljs-comment"># 复制set1</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set3 = set1.difference(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 差集</span><br>set1.difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 移除set1中与set2相同的元素，返回set1中剩余的元素</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>result = set1.isdisjoint(set2)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断是否相交，不相交为True</span><br>result = set1.issubset(set3)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断set1是否被set3包含</span><br>result = set1.issuperset(set2)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断set1是否包含set2</span><br></code></pre></td></tr></table></figure><h2 id="4-7-字典"><a href="#4-7-字典" class="headerlink" title="4-7 字典"></a>4-7 字典</h2><ul><li>字典<ul><li>用于将数据值存储在键值对中，使用大括号<code>&#123;&#125;</code>进行书写，带有键和值。</li><li>字典项目是有序可更改的，且不允许重复，键值对形式呈现，用键名引用。</li><li>使用<code>len()</code>函数获取字典长度，字典的数据类型为<code>&lt;class &#39;dict&#39;&gt;</code>。</li><li>字典的值可以是任何数据类型，例如字符串、整数、布尔值或列表等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,           <span class="hljs-comment"># 字符串</span><br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,                 <span class="hljs-comment"># 整数</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>],    <span class="hljs-comment"># 列表</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(mydict)                     <span class="hljs-comment"># 不允许重复，重复值将覆盖现有值</span><br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;brand&quot;</span>])            <span class="hljs-comment"># 使用键名引用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mydict))                <span class="hljs-comment"># 打印字典中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mydict))               <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问字典项<ul><li>通过引用方括号内的键名来访问字典的项目，还可以使用<code>get()</code>方法获取。</li><li>修改原字典对象，视图对象的值也会发生改变，视图对象包括以下三个方法。<ul><li><code>keys()</code>方法返回字典中所有的键列表。</li><li><code>values()</code>方法返回字典中所有的值列表。</li><li><code>items()</code>方法以列表返回可遍历的元组数组。</li></ul></li><li>使用<code>in</code>关键字确定字典中是否存在指定的键。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;model&quot;</span>])      <span class="hljs-comment"># 引用键名访问</span><br><span class="hljs-built_in">print</span>(mydict.get(<span class="hljs-string">&quot;model&quot;</span>))  <span class="hljs-comment"># get()方法获取</span><br><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 获取键列表</span><br>mydict[<span class="hljs-string">&quot;colors&quot;</span>] = <span class="hljs-string">&quot;white&quot;</span>  <span class="hljs-comment"># 修改原字典mydict的colors对象</span><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 获取的键列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.values())      <span class="hljs-comment"># 获取值列表</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2022</span>       <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.values())      <span class="hljs-comment"># 获取的值列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.items())       <span class="hljs-comment"># 返回字典中的每个项目作为列表的元组</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2020</span>       <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.items())       <span class="hljs-comment"># 获取的元组数组也得到更新</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;model&quot;</span> <span class="hljs-keyword">in</span> mydict:       <span class="hljs-comment"># 检查mydict字典中是否存在model对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;model&#x27; is one of the keys in mydict dictionary.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改字典项<ul><li>通过引用键名来更改特定字典项的值。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2019</span>             <span class="hljs-comment"># 引用键名更改</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2021</span>&#125;)     <span class="hljs-comment"># update()方法更新</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>添加字典项<ul><li>通过使用新的索引键并为其分配值来完成向字典添加项目。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;color&quot;</span>] = <span class="hljs-string">&quot;red&quot;</span>           <span class="hljs-comment"># 使用新的索引键并为其分配值</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">2000000</span>&#125;) <span class="hljs-comment"># update()方法将price添加到字典中</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>删除字典项<ul><li><code>pop()</code>：删除具有指定键名的项目。</li><li><code>popitem()</code>：删除最后插入的项目，3.7之前的版本会删除随机项目。</li><li>使用<code>del</code>关键字删除具有指定键名的项目，也可以完全删除整个字典。</li><li><code>clear()</code>：清空字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,<br>    <span class="hljs-string">&quot;colors&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">20000000</span><br>&#125;<br>mydict.pop(<span class="hljs-string">&quot;model&quot;</span>)         <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)  <br>mydict.popitem()            <span class="hljs-comment"># 删除最后插入的项目</span><br><span class="hljs-built_in">print</span>(mydict)     <br><span class="hljs-keyword">del</span> mydict[<span class="hljs-string">&quot;brand&quot;</span>]         <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.clear()              <span class="hljs-comment"># 清空字典</span><br><span class="hljs-built_in">print</span>(mydict)       <br><span class="hljs-keyword">del</span> mydict                  <span class="hljs-comment"># 完全删除整个字典</span><br><span class="hljs-comment"># print(mydict)             # NameError: name &#x27;mydict&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>字典循环<ul><li>for循环可以遍历字典项，返回值可以是字典的键，也可以是字典的值。</li><li>可以使用for循环配合<code>keys()</code>和<code>values()</code>方法分别返回字典的键和值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 打印字典中的所有键</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(mydict[y])        <span class="hljs-comment"># 打印字典中的所有值</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> mydict.keys():<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># keys()方法返回键</span><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> mydict.values():<br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># values()方法返回值</span><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> mydict.items():<br>    <span class="hljs-built_in">print</span>(x, y)             <span class="hljs-comment"># items()方法遍历keys和values</span><br></code></pre></td></tr></table></figure><ul><li>字典复制<ul><li><code>copy()</code>：复制副本。</li><li><code>dict()</code>：制作副本。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>dict1 = mydict.copy()       <span class="hljs-comment"># 复制副本</span><br><span class="hljs-built_in">print</span>(dict1)<br>dict2 = <span class="hljs-built_in">dict</span>(mydict)        <span class="hljs-comment"># 制作副本</span><br><span class="hljs-built_in">print</span>(dict2)<br></code></pre></td></tr></table></figure><ul><li>字典嵌套<ul><li>指字典可以包含字典。</li><li>可以将其他字典添加到一个新字典中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建一个包含两个字典的字典</span><br>myfamily = &#123;<br>  <span class="hljs-string">&quot;child1&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;,<br>  <span class="hljs-string">&quot;child2&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br><span class="hljs-comment"># 创建一个包含两个字典的新字典</span><br>child1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;<br>child2 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>myfamily = &#123;<br>  <span class="hljs-string">&quot;child1&quot;</span>: child1,<br>  <span class="hljs-string">&quot;child2&quot;</span>: child2<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br></code></pre></td></tr></table></figure><ul><li>字典内置方法<ul><li><code>fromkeys()</code>：创建新字典，以序列中的元素作为字典的键，value为字典所有键对应的初始值。</li><li><code>setdefault()</code>：与<code>get()</code>方法类似，如果键不存在于字典中，就会添加键并将值设为默认值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">seq = (<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Sougou&quot;</span>)<br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq)                 <span class="hljs-comment"># 不指定默认的键值，默认为None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                          <span class="hljs-comment"># &#123;&#x27;Google&#x27;: None, &#x27;Baidu&#x27;: None, &#x27;Sougou&#x27;: None&#125;</span><br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq, <span class="hljs-number">10</span>)             <span class="hljs-comment"># 指定默认的键值为10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                          <span class="hljs-comment"># &#123;&#x27;Google&#x27;: 10, &#x27;Baidu&#x27;: 10, &#x27;Sougou&#x27;: 10&#125;</span><br><br>mydict = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">26</span>&#125;<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>))             <span class="hljs-comment"># 与get()方法类似</span><br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Sex&quot;</span>))             <span class="hljs-comment"># 添加键并将值设为默认值None   </span><br><span class="hljs-comment"># print(mydict.setdefault(&quot;Sex&quot;, &quot;female&quot;)) # 默认为None后再设置无效</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><ul><li>列表替代<ul><li>Python没有数组类型，只有列表类型，数组可用列表替代。</li><li>数组用于在一个变量中存储多个值，通过索引号来访问这些值。</li><li>Python没有对数组的内置支持，列表代替时内置方法与之相通。<ul><li><code>append()</code>、<code>clear()</code>、<code>copy()</code>、<code>count()</code>、<code>extend()</code>。</li><li><code>index()</code>、<code>insert()</code>、<code>pop()</code>、<code>remove()</code>、<code>reverse()</code>、<code>sort()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">cars = [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>]<br><span class="hljs-built_in">print</span>(cars[<span class="hljs-number">0</span>])                <span class="hljs-comment"># 获取第一个数组项的值</span><br><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span>            <span class="hljs-comment"># 修改第一个数组项的值</span><br><span class="hljs-built_in">print</span>(cars)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cars))              <span class="hljs-comment"># 返回该数组的长度，长度总比最高数组索引数大1</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cars:                <span class="hljs-comment"># 使用for循环遍历数组的所有元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>cars.append(<span class="hljs-string">&quot;Honda&quot;</span>)          <span class="hljs-comment"># append()方法添加元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.pop(<span class="hljs-number">1</span>)                   <span class="hljs-comment"># pop()方法从数组删除第二个元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.remove(<span class="hljs-string">&quot;Volvo&quot;</span>)          <span class="hljs-comment"># remove()方法从数组删除Volvo元素，只删除第一次出现的指定值</span><br><span class="hljs-built_in">print</span>(cars)<br></code></pre></td></tr></table></figure><ul><li>numpy库定义的数组<ul><li>数组在numpy库中定义，若要使用需事先导入库，数组类型为<code>&lt;class &#39;numpy.ndarray&#39;&gt;</code>。</li><li>numpy中的数组对象称为ndarray，通过使用<code>array()</code>函数可以创建一个numpy的ndarray对象。</li><li>将列表、元组或任何类似数组的对象传递给<code>array()</code>方法，<code>array()</code>方法将其转换为ndarray。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>myArray = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(myArray)                <span class="hljs-comment"># 列表创建数组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myArray))          <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>myArray = np.array(((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(myArray)                <span class="hljs-comment"># 元组创建数组</span><br></code></pre></td></tr></table></figure><ul><li>数组维度<ul><li>数组维度是嵌套数组的一个级别，嵌套数组即数组中有数组。</li><li>零维数组，也叫标量，数组值只有一个。</li><li>一维数组，指由多个元素值构成的数组。</li><li>二维数组<ul><li>是一维数组的数组，通常用于表示矩阵或二阶张量。</li><li>numpy库中有专门用于矩阵运算的完整子模块<code>numpy.mat</code>。</li></ul></li><li>三维数组，是二维数组的数组。</li><li>数组可以拥有任意数量的维度，创建数组时使用ndmin参数定义维数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = <span class="hljs-number">1</span><br>arr0 = np.array(a)            <span class="hljs-comment"># 零维数组</span><br><span class="hljs-built_in">print</span>(arr0)<br><span class="hljs-built_in">print</span>(arr0.shape)             <span class="hljs-comment"># 返回元组，获取数组各个维度的维数</span><br><span class="hljs-built_in">print</span>(arr0.ndim)              <span class="hljs-comment"># ndim属性返回一个整数，检查数组维度</span><br><br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr1 = np.array(b)            <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1)<br><span class="hljs-built_in">print</span>(arr1.shape)<br><span class="hljs-built_in">print</span>(arr1.ndim)<br><br>c = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>arr2 = np.array(c)            <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2)<br><span class="hljs-built_in">print</span>(arr2.shape)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><br>d = [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]<br>arr3 = np.array([c, d])       <span class="hljs-comment"># 三维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.shape)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                   <span class="hljs-comment"># 五维数组</span><br><span class="hljs-built_in">print</span>(arr5.shape)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><ul><li>数组的裁切<ul><li>类似列表和元组的切片，<code>[start: end]</code>或<code>[start: end: step]</code>。</li><li>将元素从一个给定的索引切到另一个给定的索引，包含开始索引，不包含结束索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1.ndim)              <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])             <span class="hljs-comment"># 裁切索引1到5的元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])          <span class="hljs-comment"># 设置裁切步长</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])          <span class="hljs-comment"># 返回数组中相隔的元素</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负裁切，索引从-1开始</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2.ndim)              <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])          <span class="hljs-comment"># 第二个元素[6, 7, 8, 9, 10]，索引号从1到4的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])          <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号为2的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])       <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号从1到4的元素，返回数组</span><br></code></pre></td></tr></table></figure><h1 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6 if语句"></a>6 if语句</h1><ul><li>if语句<ul><li>使用<code>if</code>关键字编写。</li><li>支持<code>if...</code>、<code>if...elif...</code>、<code>if...elif...else...</code>和<code>if...else...</code>格式。</li><li><code>if...</code>格式，如果只有一条语句要执行，可以将该条执行语句与if语句放在同一行上。</li><li><code>if...else...</code>格式，如果只有一条语句要执行，可以将执行语句与if语句放在同一行。</li><li>如果if语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)                      <span class="hljs-comment"># 注意缩进，若没有缩进，会报错</span><br><span class="hljs-keyword">elif</span> a == b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a等于b.&quot;</span>)                      <span class="hljs-comment"># 如果if条件不成立，则执行elif</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)                      <span class="hljs-comment"># else关键字捕获任何未被上述条件捕获的内容</span><br><br><span class="hljs-keyword">if</span> a &lt; b: <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)                <span class="hljs-comment"># 只有一条语句要执行，将执行语句与if语句放在同一行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>) <span class="hljs-keyword">if</span> a &lt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>)       <span class="hljs-comment"># 又叫三元运算符或条件表达式，还可同一行上多个else语句</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>) <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>) <span class="hljs-keyword">if</span> a==b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>)<br><br>x = <span class="hljs-number">23</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">10</span>:                                <span class="hljs-comment"># if嵌套</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于10.&quot;</span>)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">20</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于20.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小于20.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a == b:<br>    <span class="hljs-keyword">pass</span>                                  <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><h1 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7 for循环"></a>7 for循环</h1><ul><li>for循环<ul><li>用于迭代序列，例如列表、元组、集合或字符串等，不需要预先设置索引变量。</li><li>在循环遍历所有项目前停止循环，可以使用<code>break</code>关键字。</li><li><code>continue</code>关键字，停止循环的当前迭代并继续下一个循环。</li><li>如果for循环语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 遍历列表</span><br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Banana&quot;</span>:<br>    <span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 遍历字符串</span><br><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(z)                <span class="hljs-comment"># Apple, Banana</span><br>    <span class="hljs-keyword">if</span> z == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span>               <span class="hljs-comment"># 遍历到Banana时break停止，跳出循环</span><br><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># Apple</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># 遍历到Banana时continue跳过，继续下一个循环</span><br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># Apple, Cherry</span><br><br>obj = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;big&quot;</span>, <span class="hljs-string">&quot;delicious&quot;</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> obj:               <span class="hljs-comment"># for循环嵌套</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>        <span class="hljs-built_in">print</span>(a, b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">pass</span>                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>range()函数<ul><li>循环一组代码指定的次数，可以使用<code>range()</code>函数。</li><li>返回一个数字序列，默认从0开始，递增1，并以指定的数字结束。</li><li><code>range()</code>函数默认是以0作为起始值的，可通过添加参数来指定。</li><li><code>range()</code>函数默认序列递增1，可以通过添加第三个参数来指定。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 打印0到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># 打印3到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(c)                <span class="hljs-comment"># 打印3到30的值，序列递增3</span><br></code></pre></td></tr></table></figure><ul><li>else<ul><li>for循环中的<code>else</code>关键字指定循环结束时要执行的代码块。</li><li>如果循环语句被<code>break</code>停止，则else语句的代码块不会被执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 打印从0到5的所有数字，并在循环结束时打印一条信息</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">if</span> y == <span class="hljs-number">3</span>: <span class="hljs-keyword">break</span>        <span class="hljs-comment"># 当循环到y为3时，break停止并跳出循环，else语句不执行</span><br>    <span class="hljs-built_in">print</span>(y)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8 while循环"></a>8 while循环</h1><ul><li>while循环<ul><li>只要条件为真，就可以执行一组语句。</li><li>使用<code>break</code>关键字，即使while条件为真，也可以停止循环。</li><li>使用<code>continue</code>关键字，停止当前迭代，并继续下一个循环。</li><li>当条件不再为真时运行一段代码，可以使用else语句。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 打印小于6的数</span><br>    a += <span class="hljs-number">1</span>                  <span class="hljs-comment"># 注意递增，否则循环永远继续</span><br><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> b &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(b)<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">break</span>               <span class="hljs-comment"># 当b为3时break停止，跳出循环</span><br>    b += <span class="hljs-number">1</span><br><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> c &lt; <span class="hljs-number">6</span>:<br>    c += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> c == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># 当c为3时，继续下一次迭代</span><br>    <span class="hljs-built_in">print</span>(c)<br><br>x = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> x &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(x)<br>    x += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:                       <span class="hljs-comment"># 条件不再为真时运行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is no longer less than 6.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>变量</tag>
      
      <tag>运算符</tag>
      
      <tag>数据类型</tag>
      
      <tag>数组</tag>
      
      <tag>if语句</tag>
      
      <tag>循环语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
