<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Allure 测试报告</title>
    <link href="/2023/05/01/ce-shi-kuang-jia/tf03-allure-ce-shi-bao-gao/"/>
    <url>/2023/05/01/ce-shi-kuang-jia/tf03-allure-ce-shi-bao-gao/</url>
    
    <content type="html"><![CDATA[<p>Allure是一款轻量级的开源自动化测试报告生成框架，支持绝大部分测试框架，例如TestNG、JUnit、PyTest、UnitTest等。</p><span id="more"></span><h1 id="1-allure框架"><a href="#1-allure框架" class="headerlink" title="1 allure框架"></a>1 allure框架</h1><ul><li>allure框架<ul><li><a href="https://github.com/allure-framework/allure2/releases">allure2下载</a>：<a href="https://github.com/allure-framework/allure2/releases/download/2.20.1/allure-2.20.1.zip">allure-2.20.1.zip</a>，JDK1.8版本，<code>pip install allure-pytest</code>安装Python依赖。</li><li>添加变量：控制面板—&gt;用户账户—&gt;更改环境变量—&gt;Path—&gt;添加<code>...\allure-2.20.1\bin</code>。</li><li>Python依赖包含allure-pytest和allure-python-commons两个包，生成与allure2兼容的报告数据。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case.py</span><br><br><br><span class="hljs-meta">@pytest.mark.skip()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---use case a---&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---use case b---&#x27;</span>)<br><br><span class="hljs-comment"># pytest -vs --alluredir=./report/xml --clean-alluredir         # 生成xml格式的报告数据</span><br><span class="hljs-comment"># allure serve report\xml                                       # 直接在本地浏览器中打开报告</span><br></code></pre></td></tr></table></figure><ul><li>报告结构介绍<ul><li>Overview：总览。</li><li>Categories：用例类别，默认failed和error，可快速查看哪些用例执行是failed和error的。</li><li>Suites：即所有用例的层级关系，可以依据package、module、class和method来查找用例。</li><li>Graphs：测试结果的图形化展示，包括分布图等。</li><li>Timeline：测试用例的执行顺序，包括执行时间。</li><li>Behaviors：依据epic、feature、story进行用例分组。</li><li>Packages：按package、module进行测试用例的分组。</li></ul></li></ul><h2 id="1-1-添加环境变量"><a href="#1-1-添加环境变量" class="headerlink" title="1-1 添加环境变量"></a>1-1 添加环境变量</h2><ul><li>添加环境变量<ul><li>Overview的ENVIRONMENT<ul><li>在生成xml格式的报告数据文件夹中，创建一个<code>environment.properties</code>文件。</li><li>同理也可以在生成xml格式的报告数据文件夹中创建一个<code>environment.xml</code>文件。</li></ul></li><li>环境变量添加完成后，需要重新执行命令<code>allure serve report\xml</code>，在本地浏览器中重新打开报告才能生效。</li></ul></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Txt">Browser=Chrome                                           # environment.properties文件<br>Browser.Version=107.0                                    # 最好不带注释信息，可能乱码显示<br>Stand=Production<br>Type=Properties<br><br>###########################################################################################<br>&lt;environment&gt;                                            &lt;!-- environment.xml文件 --&gt;<br>    &lt;parameter&gt;                                          &lt;!-- .xml配置优先于.properties --&gt;<br>        &lt;key&gt;Browser&lt;/key&gt;<br>        &lt;value&gt;Chrome&lt;/value&gt;<br>    &lt;/parameter&gt;<br>    &lt;parameter&gt;<br>        &lt;key&gt;Browser.Version&lt;/key&gt;<br>        &lt;value&gt;100.0&lt;/value&gt;<br>    &lt;/parameter&gt;<br>    &lt;parameter&gt;<br>        &lt;key&gt;Stand&lt;/key&gt;<br>        &lt;value&gt;Production&lt;/value&gt;<br>    &lt;/parameter&gt;<br>    &lt;parameter&gt;<br>        &lt;key&gt;Type&lt;/key&gt;<br>        &lt;value&gt;xml&lt;/value&gt;<br>    &lt;/parameter&gt;<br>&lt;/environment&gt;<br></code></pre></td></tr></table></figure><h2 id="1-2-自定义缺陷分类"><a href="#1-2-自定义缺陷分类" class="headerlink" title="1-2 自定义缺陷分类"></a>1-2 自定义缺陷分类</h2><ul><li>自定义缺陷分类<ul><li>Categories：在生成xml格式的报告数据文件夹中创建一个<code>categories.json</code>文件。</li><li>Json文件参数说明<ul><li>name：必填，类别名称，可以是中文。</li><li>messageRegex：可选，用例运行的错误消息，默认<code>&quot;.*&quot;</code>，可以通过正则表达式进行匹配。</li><li>traceRegex：可选，用例运行错误消息的堆栈跟踪，默认<code>&quot;.*&quot;</code>，可以通过正则表达式匹配。</li><li>matchedStatuses：可选，用例运行状态，默认<code>[&quot;failed&quot;,&quot;broken&quot;,&quot;passed&quot;,&quot;skipped&quot;,&quot;unknown&quot;]</code>。</li><li>如果用例运行结果的状态在列表中，并且错误消息和堆栈跟踪都与之模式相匹配，则测试结果属于该类别。</li></ul></li></ul></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">[</span>                                                        <span class="hljs-comment">// categories.json文件</span><br>  <span class="hljs-punctuation">&#123;</span>                                                      <span class="hljs-comment">// 文件中最好不要带注释信息，否则无效</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Ignored tests&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;skipped&quot;</span><span class="hljs-punctuation">]</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Infrastructure problems&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;broken&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;failed&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;messageRegex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*bye-bye.*&quot;</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Outdated tests&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;broken&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;traceRegex&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.*FileNotFoundException.*&quot;</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Execution failed&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;failed&quot;</span><span class="hljs-punctuation">]</span> <br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test defects&quot;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;matchedStatuses&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;broken&quot;</span><span class="hljs-punctuation">]</span> <br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h1 id="2-allure注释说明"><a href="#2-allure注释说明" class="headerlink" title="2 allure注释说明"></a>2 allure注释说明</h1><ul><li>allure注释说明<ul><li><code>@allure.step()</code>：测试用例的步骤，参数传什么，在allure中步骤名就显示什么。</li><li><code>@allure.attach()</code>：显示不同类型的附件，补充测试结果，可依据自身情况调整。</li><li><code>@allure.title()</code>：自定义用例标题，支持占位符传递关键字参数，标题更具可读性。</li><li><code>@allure.description()</code>：为测试用例添加详细的描述，并且将其展示到测试报告中。</li><li>访问链接：将测试报告与bug管理工具或测试管理系统进行关联。<ul><li><code>@allure.link()</code>：访问网址的链接。</li><li><code>@allure.issue()</code>：访问缺陷的链接。</li><li><code>@allure.testcase()</code>：访问用例链接。</li></ul></li><li>BDD风格的标记：行为驱动开发(BDD)，在测试驱动开发(TDD)基础上发展而来的一种软件开发方法。<ul><li><code>@allure.epic()</code>：相当于module级的标签，敏捷里面的概念。</li><li><code>@allure.feature()</code>：相当于class级的标签，epic是feature的父级。</li><li><code>@allure.story()</code>：相当于method级的标签，feature是story的父级。</li></ul></li><li><code>@allure.severity()</code>：划分测试用例的等级，并展示到测试报告内。</li><li>测试套件：已有BDD风格的标记，测试套件不常用，可以做简单了解。<ul><li><code>@allure.suite()</code>：是与当前测试套件同级的测试套件。</li><li><code>@allure.sub_suite()</code>：当前测试套件的子级测试套件。</li><li><code>@allure.parent_suite()</code>：当前测试套件的父级测试套件。</li></ul></li></ul></li></ul><h2 id="2-1-用例步骤"><a href="#2-1-用例步骤" class="headerlink" title="2-1 用例步骤"></a>2-1 用例步骤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_step.py</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Open the login site.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter your account and password.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password</span>():<br>    input_username_password_and_login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter account, password &#123;arg1&#125;, &#123;arg2&#125;, and click login.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password_and_login</span>(<span class="hljs-params">arg1, arg2</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Verify the login process.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>():<br>    <span class="hljs-built_in">open</span>()<br>    input_username_password()<br><br><span class="hljs-comment"># pytest -vs test_step.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-2-用例补充"><a href="#2-2-用例补充" class="headerlink" title="2-2 用例补充"></a>2-2 用例补充</h2><ul><li>用例补充<ul><li><code>allure.attach(body, name, attachment_type, extension)</code>：用于未想要导入现成的附件情况。</li><li><code>allure.attach.file(source, name, attachment_type, extension)</code>：用于已有对应的附件情况。<ul><li>body：显示内容。</li><li>name：附件名称。</li><li>source：附件路径。</li><li>extension：附件扩展名。</li><li>attachment_type：附件类型。</li></ul></li><li>附件类型<ul><li>text<ul><li><code>CSV = (&quot;text/csv&quot;, &quot;csv&quot;)</code></li><li><code>TEXT = (&quot;text/plain&quot;, &quot;txt&quot;)</code></li><li><code>HTML = (&quot;text/html&quot;, &quot;html&quot;)</code></li><li><code>URI_LIST = (&quot;text/uri-list&quot;, &quot;uri&quot;)</code></li><li><code>TSV = (&quot;text/tab-separated-values&quot;, &quot;tsv&quot;)</code></li></ul></li><li>image<ul><li><code>PNG = (&quot;image/png&quot;, &quot;png&quot;)</code></li><li><code>JPG = (&quot;image/jpg&quot;, &quot;jpg&quot;)</code></li><li><code>BMP = (&quot;image/bmp&quot;, &quot;bmp&quot;)</code></li><li><code>GIF = (&quot;image/gif&quot;, &quot;gif&quot;)</code></li><li><code>TIFF = (&quot;image/tiff&quot;, &quot;tiff&quot;)</code></li><li><code>SVG = (&quot;image/svg-xml&quot;, &quot;svg&quot;)</code></li></ul></li><li>video<ul><li><code>MP4 = (&quot;video/mp4&quot;, &quot;mp4&quot;)</code></li><li><code>OGG = (&quot;video/ogg&quot;, &quot;ogg&quot;)</code></li><li><code>WEBM = (&quot;video/webm&quot;, &quot;webm&quot;)</code></li></ul></li><li>application<ul><li><code>XML = (&quot;application/xml&quot;, &quot;xml&quot;)</code></li><li><code>PDF = (&quot;application/pdf&quot;, &quot;pdf&quot;)</code></li><li><code>JSON = (&quot;application/json&quot;, &quot;json&quot;)</code></li><li><code>YAML = (&quot;application/yaml&quot;, &quot;yaml&quot;)</code></li><li><code>PCAP = (&quot;application/vnd.tcpdump.pcap&quot;, &quot;pcap&quot;)</code></li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_attach.py</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Open the login site.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter your account and password.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password</span>():<br>    input_username_password_and_login(<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)<br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Enter account, password &#123;arg1&#125;, &#123;arg2&#125;, and click login.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username_password_and_login</span>(<span class="hljs-params">arg1, arg2</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.step(<span class="hljs-params"><span class="hljs-string">&quot;Verify the login process.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>():<br>    <span class="hljs-built_in">open</span>()<br>    input_username_password()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_attach</span>():<br>    allure.attach(<span class="hljs-string">&#x27;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;strong&gt;Add an html page.&lt;/strong&gt;&lt;/body&gt;&#x27;</span>,<br>                  <span class="hljs-string">&#x27;Attach with HTML type&#x27;</span>, allure.attachment_type.HTML)<br>    <span class="hljs-comment"># 注意：需要在当前test_attach.py文件的目录下放置report.html和report.jpg，否则报错</span><br>    allure.attach.file(<span class="hljs-string">&#x27;./report.html&#x27;</span>, attachment_type=allure.attachment_type.HTML)<br>    allure.attach.file(<span class="hljs-string">&#x27;./report.jpg&#x27;</span>, attachment_type=allure.attachment_type.JPG)<br><br><span class="hljs-comment"># pytest test_attach.py --alluredir=./report/annex</span><br><span class="hljs-comment"># allure serve ./report/annex</span><br></code></pre></td></tr></table></figure><h2 id="2-3-用例标题"><a href="#2-3-用例标题" class="headerlink" title="2-3 用例标题"></a>2-3 用例标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_title.py</span><br><span class="hljs-keyword">import</span> allure<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Pre-operation: Get username.&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_use</span>(<span class="hljs-params">request</span>):<br>    use = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Username: <span class="hljs-subst">&#123;use&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> use<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Pre-operation: Get password.&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_pwd</span>(<span class="hljs-params">request</span>):<br>    pwd = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Password: <span class="hljs-subst">&#123;pwd&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> pwd<br><br><br>use_data = [<span class="hljs-string">&quot;Holy&quot;</span>, <span class="hljs-string">&quot;Lucy&quot;</span>]<br>pwd_data = [<span class="hljs-string">&quot;1235&quot;</span>, <span class="hljs-string">&quot;1236&quot;</span>]<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Username: &#123;get_use&#125; --- Password: &#123;get_pwd&#125;.&quot;</span></span>)   </span><span class="hljs-comment"># 占位符传递关键字参数</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;get_use&quot;</span>, use_data, indirect=<span class="hljs-literal">True</span></span>)    </span><span class="hljs-comment"># 动态标题，结合parametrize使用</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;get_pwd&quot;</span>, pwd_data, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_userinfo</span>(<span class="hljs-params">get_use, get_pwd</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Username: <span class="hljs-subst">&#123;get_use&#125;</span> --- Password: <span class="hljs-subst">&#123;get_pwd&#125;</span>.&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_title.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-4-用例描述"><a href="#2-4-用例描述" class="headerlink" title="2-4 用例描述"></a>2-4 用例描述</h2><ul><li>用例描述<ul><li>在用例函数声明的下方使用<code>&quot;&quot;&quot; &quot;&quot;&quot;</code>，使用<code>@allure.description()</code>装饰器。</li><li>使用<code>@allure.description_html()</code>装饰器添加html描述，类似attach传html。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_description.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_description1</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Verify 1=1</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><br><br><span class="hljs-meta">@allure.description(<span class="hljs-params"><span class="hljs-string">&quot;Verify 1=1&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_description2</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><br><br><span class="hljs-meta">@allure.description_html(<span class="hljs-params"><span class="hljs-string">&quot;&quot;&quot;&lt;h1&gt;Verify 1=1&lt;/h1&gt;&quot;&quot;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_description3</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br><br><span class="hljs-comment"># pytest -vs test_description.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-5-访问链接"><a href="#2-5-访问链接" class="headerlink" title="2-5 访问链接"></a>2-5 访问链接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_access.py</span><br><br>test_case_link = <span class="hljs-string">&quot;https://docs.qq.com/mind/DSnRoQU9kRlNTRm1v&quot;</span><br><br><br><span class="hljs-meta">@allure.link(<span class="hljs-params"><span class="hljs-string">&quot;https://stitch-top.github.io&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.link(<span class="hljs-params"><span class="hljs-string">&quot;https://stitch-top.github.io&quot;</span>, name=<span class="hljs-string">&quot;Click on the title to view the content.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_name_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.issue(<span class="hljs-params"><span class="hljs-string">&quot;https://docs.qq.com/mind/DSkNVTGVwVUhzYnBt&quot;</span>, <span class="hljs-string">&quot;Defect link&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_issue_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.testcase(<span class="hljs-params">test_case_link, <span class="hljs-string">&quot;Test case link&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_testcase_link</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_access.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="2-6-BDD风格的标记"><a href="#2-6-BDD风格的标记" class="headerlink" title="2-6 BDD风格的标记"></a>2-6 BDD风格的标记</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                       <span class="hljs-comment"># test_style.py</span><br><br><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;epic_a&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_a&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_b&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;feature_b&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_b&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.epic(<span class="hljs-params"><span class="hljs-string">&quot;epic_b&quot;</span></span>)</span><br><span class="hljs-meta">@allure.feature(<span class="hljs-params"><span class="hljs-string">&quot;feature_b&quot;</span></span>)</span><br><span class="hljs-meta">@allure.story(<span class="hljs-params"><span class="hljs-string">&quot;story_b&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_e</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_style.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br><span class="hljs-comment"># pytest --alluredir ./report/allure --allure-epics=epic_b          # 只运行epic中名为epic_b的用例</span><br><span class="hljs-comment"># pytest --alluredir ./report/allure --allure-features=feature_b    # 只运行feature中名为feature_b的用例</span><br><span class="hljs-comment"># pytest test_style.py --allure-stories story_a,story_b             # 只运行story_a,story_b的用例</span><br><span class="hljs-comment"># pytest test_style.py --allure-features feature_b --allure-stories story_a</span><br></code></pre></td></tr></table></figure><h2 id="2-7-用例等级的划分"><a href="#2-7-用例等级的划分" class="headerlink" title="2-7 用例等级的划分"></a>2-7 用例等级的划分</h2><ul><li>用例等级的划分<ul><li>blocker：阻塞缺陷，功能未实现。</li><li>critical：严重缺陷，功能点缺失。</li><li>normal：一般缺陷，边界情况，格式错误。</li><li>minor：次要缺陷，界面错误及UI需求不符。</li><li>trivial：轻微缺陷，必须项无提示，或提示不规范。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                     <span class="hljs-comment"># test_severity.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                                     <span class="hljs-comment"># 没标记severity的方法默认优先级为normal</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.BLOCKER</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():                                                     <span class="hljs-comment"># 优先级为blocker</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.CRITICAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():                                                     <span class="hljs-comment"># 优先级为critical</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.NORMAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>():                                                     <span class="hljs-comment"># 优先级为normal</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.MINOR</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_e</span>():                                                     <span class="hljs-comment"># 优先级为minor</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.TRIVIAL</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_f</span>():                                                     <span class="hljs-comment"># 优先级为trivial</span><br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.severity(<span class="hljs-params">allure.severity_level.NORMAL</span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>(<span class="hljs-title class_ inherited__">object</span>):                                           <span class="hljs-comment"># 类优先级normal</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_g</span>(<span class="hljs-params">self</span>):                                             <span class="hljs-comment"># 默认继承类优先级normal</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @allure.severity(<span class="hljs-params">allure.severity_level.CRITICAL</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_h</span>(<span class="hljs-params">self</span>):                                             <span class="hljs-comment"># 类优先级normal，函数优先级critical</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_severity.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br><span class="hljs-comment"># pytest test_severity.py --allure-severities=normal,critical     # 只运行优先级为normal和critical的用例</span><br><span class="hljs-comment"># pytest test_severity.py --allure-severities blocker,critical    # 只运行优先级为blocker和critical的用例</span><br></code></pre></td></tr></table></figure><h2 id="2-8-测试套件的使用"><a href="#2-8-测试套件的使用" class="headerlink" title="2-8 测试套件的使用"></a>2-8 测试套件的使用</h2><ul><li>测试套件的使用<ul><li>未被suite修饰时，一个py文件和一个class默认就是一个测试套件。</li><li>关系为py包含class套件，py和class下都可有它们各自的测试用例。</li><li>被suite修饰的类和方法，会被认为是和当前文件同级的测试套件。</li><li>如果类和类内方法同时被修饰，类修饰会被类内方法的修饰替代。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_suite.py</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test kit: suite&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test kit: sub_suite&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test kit: parent_suite&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-meta">@allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;test suites&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSuiteX</span>:<br><span class="hljs-meta">    @allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;class internal test kit d&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_e</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSuiteY</span>:                                               <span class="hljs-comment"># 无suite修饰的测试类</span><br><span class="hljs-meta">    @allure.suite(<span class="hljs-params"><span class="hljs-string">&quot;class internal test kit f&quot;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_f</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_g</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># pytest -vs test_suite.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h1 id="3-命令行参数介绍"><a href="#3-命令行参数介绍" class="headerlink" title="3 命令行参数介绍"></a>3 命令行参数介绍</h1><ul><li>命令行参数介绍<ul><li><code>pytest --alluredir=./report/xml test_file.py</code>：执行test_file.py文件用例。<ul><li>当多次执行不同文件用例时，报告存放的路径保持一致，那么报告数据将累加。</li><li>使用<code>--clean-alluredir</code>命令行参数生成的报告，可以清空报告的历史执行记录。</li><li>命令：<code>pytest --alluredir=./report/xml test_file.py --clean-alluredir</code>。</li></ul></li><li><code>allure -h</code>：查看参数帮助文档。<ul><li>generate：生成allure的html报告。</li><li>serve：启动allure服务，打开报告。</li><li>open：打开用generate生成的报告。</li></ul></li><li>浏览器打开allure报告的两种方式<ul><li><code>pytest -sq --alluredir=./report/xml</code>：执行测试用例文件，并指定结果目录。</li><li><code>allure serve ./report/xml</code>：打开allure测试报告。</li><li><code>allure generate -c -o ./report/xml ./report/html</code>：生成allure的html报告。</li><li><code>allure open ./report/html</code>：打开allure测试报告。</li></ul></li></ul></li></ul><h1 id="4-用例标题动态化"><a href="#4-用例标题动态化" class="headerlink" title="4 用例标题动态化"></a>4 用例标题动态化</h1><ul><li>用例标题动态化<ul><li>使用参数化，报告默认的用例标题为用例名称，可读性差。</li><li>参数化使用ids，会保留用例名称，也无法完全解决可读性差的问题。</li><li>若使用<code>@allure.title()</code>装饰器写死用例标题，后期维护成本较高。</li><li>将parametrize参数化数据驱动与<code>@allure.title()</code>装饰器结合使用，更加高效便捷。</li></ul></li></ul><h2 id="4-1-参数化"><a href="#4-1-参数化" class="headerlink" title="4-1 参数化"></a>4-1 参数化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param1.py</span><br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)          </span><span class="hljs-comment"># 参数化默认的标题</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param1.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-2-参数化id"><a href="#4-2-参数化id" class="headerlink" title="4-2 参数化id"></a>4-2 参数化id</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param2.py</span><br><br>info = [<br>    pytest.param(&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;admin1 login success&quot;</span>),<br>    pytest.param(&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;admin2 failed to log in&quot;</span>),<br>    pytest.param(&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;, <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;admin3 username does not exist&quot;</span>)<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)          </span><span class="hljs-comment"># 参数化ids</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param2.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-3-参数化ids"><a href="#4-3-参数化ids" class="headerlink" title="4-3 参数化ids"></a>4-3 参数化ids</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param3.py</span><br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br>ids = [<span class="hljs-string">&quot;admin1 login success&quot;</span>, <span class="hljs-string">&quot;admin2 failed to log in&quot;</span>, <span class="hljs-string">&quot;admin3 username does not exist&quot;</span>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, ids=ids, indirect=<span class="hljs-literal">True</span></span>) </span><span class="hljs-comment"># 参数化ids</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param3.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-4-allure-title"><a href="#4-4-allure-title" class="headerlink" title="4-4 @allure.title()"></a>4-4 @allure.title()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param4.py</span><br><span class="hljs-keyword">import</span> allure<br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Login use case: admin1 success, admin2 failure, admin3 user name does not exist.&quot;</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)          </span><span class="hljs-comment"># @allure.title()写死标题</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><span class="hljs-comment"># pytest -vs test_param4.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="4-5-参数化与装饰器结合"><a href="#4-5-参数化与装饰器结合" class="headerlink" title="4-5 参数化与装饰器结合"></a>4-5 参数化与装饰器结合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_param5.py</span><br><span class="hljs-keyword">import</span> allure<br><br>info = [<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12346&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;12347&quot;</span>&#125;<br>]<br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    param = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The account number is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span> and the password is: <span class="hljs-subst">&#123;param[<span class="hljs-string">&#x27;pwd&#x27;</span>]&#125;</span>.&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success!&quot;</span>&#125;<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Login use case: &#123;login&#125;.&quot;</span></span>)                       </span><span class="hljs-comment"># 参数化与title动态生成标题，结合fixture</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, info, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-keyword">assert</span> login[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">0</span><br><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">info = [</span><br><span class="hljs-string">    (&quot;admin1&quot;, &quot;12345&quot;, &quot;admin1 login success&quot;),</span><br><span class="hljs-string">    (&quot;admin2&quot;, &quot;12346&quot;, &quot;admin2 failed to log in&quot;),</span><br><span class="hljs-string">    (&quot;admin3&quot;, &quot;12347&quot;, &quot;admin3 username does not exist&quot;)</span><br><span class="hljs-string">]</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">@allure.title(&quot;Login use case: &#123;title&#125;.&quot;)                       # 参数化与title动态生成标题，不结合fixture</span><br><span class="hljs-string">@pytest.mark.parametrize(&quot;username, pwd, title&quot;, info)</span><br><span class="hljs-string">def test_login(username, pwd, title):</span><br><span class="hljs-string">    pass</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># pytest -vs test_param5.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h1 id="5-dynamic动态标记"><a href="#5-dynamic动态标记" class="headerlink" title="5 dynamic动态标记"></a>5 dynamic动态标记</h1><ul><li>dynamic动态标记<ul><li><code>allure.dynamic.issue</code>、<code>allure.dynamic.link</code>、<code>allure.dynamic.testcase</code>。</li><li><code>allure.dynamic.story</code>、<code>allure.dynamic.feature</code>、<code>allure.dynamic.description</code>。</li><li><code>allure.dynamic.title</code>、<code>allure.dynamic.severity</code>、<code>allure.dynamic.description_html</code>。</li></ul></li></ul><h2 id="5-1-title"><a href="#5-1-title" class="headerlink" title="5-1 title"></a>5-1 title</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic1.py</span><br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Title: Use case will be replaced after successful execution.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_with_dynamic_title_success</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br>    allure.dynamic.title(<span class="hljs-string">&quot;Success: updated title.&quot;</span>)<br><br><br><span class="hljs-meta">@allure.title(<span class="hljs-params"><span class="hljs-string">&quot;Title: Use case execution will not be replaced after failure.&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_with_dynamic_title_failed</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br>    allure.dynamic.title(<span class="hljs-string">&quot;Failure: Invalid title.&quot;</span>)             <span class="hljs-comment"># Python执行机制影响，该行代码不会执行</span><br><br><span class="hljs-comment"># pytest -vs test_dynamic1.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="5-2-description"><a href="#5-2-description" class="headerlink" title="5-2 description"></a>5-2 description</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic2.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Description: The use case will be replaced after successful execution.</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">2</span><br>    allure.dynamic.description(<span class="hljs-string">&quot;Success: updated description.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Description: The use case will not be replaced after a failed execution.</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> + <span class="hljs-number">1</span> == <span class="hljs-number">3</span><br>    allure.dynamic.description(<span class="hljs-string">&quot;Failure: Invalid description.&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_dynamic2.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="5-3-结合参数化"><a href="#5-3-结合参数化" class="headerlink" title="5-3 结合参数化"></a>5-3 结合参数化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic3.py</span><br><span class="hljs-keyword">import</span> pytest<br><br>info = [<br>    [<span class="hljs-string">&quot;admin1&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span>, <span class="hljs-string">&quot;Use case login success.&quot;</span>],             <span class="hljs-comment"># 这里必须是列表，字典顺序会乱</span><br>    [<span class="hljs-string">&quot;admin2&quot;</span>, <span class="hljs-string">&quot;12346&quot;</span>, <span class="hljs-string">&quot;Use case login failed.&quot;</span>],<br>    [<span class="hljs-string">&quot;admin3&quot;</span>, <span class="hljs-string">&quot;12347&quot;</span>, <span class="hljs-string">&quot;Account does not exist.&quot;</span>]<br>]<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;username, pwd, title&quot;</span>, info</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">username, pwd, title</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param username:</span><br><span class="hljs-string">    :param pwd:</span><br><span class="hljs-string">    :param title:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    allure.dynamic.title(title)<br>    allure.dynamic.description(<span class="hljs-string">f&quot;Username: <span class="hljs-subst">&#123;username&#125;</span>, Password: <span class="hljs-subst">&#123;pwd&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_dynamic3.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h2 id="5-4-结合其他特性"><a href="#5-4-结合其他特性" class="headerlink" title="5-4 结合其他特性"></a>5-4 结合其他特性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> allure                                                   <span class="hljs-comment"># test_dynamic4.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span><br>    allure.dynamic.feature(<span class="hljs-string">&quot;Dynamic feature&quot;</span>)<br>    allure.dynamic.story(<span class="hljs-string">&quot;Dynamic story&quot;</span>)<br>    allure.dynamic.severity(allure.severity_level.BLOCKER)<br>    allure.dynamic.link(<span class="hljs-string">&quot;Dynamic link: https://stitch-top.github.io&quot;</span>)<br>    allure.dynamic.issue(<span class="hljs-string">&quot;Dynamic issue: https://docs.qq.com/mind/DSkNVTGVwVUhzYnBt&quot;</span>)<br>    allure.dynamic.testcase(<span class="hljs-string">&quot;Dynamic testcase: https://docs.qq.com/mind/DSnRoQU9kRlNTRm1v&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs test_dynamic4.py --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br></code></pre></td></tr></table></figure><h1 id="6-pytest-xdist插件"><a href="#6-pytest-xdist插件" class="headerlink" title="6 pytest-xdist插件"></a>6 pytest-xdist插件</h1><ul><li>pytest-xdist插件<ul><li>为了让自动化测试用例可分布式执行，节省时间，引入pytest-xdist插件。</li><li>pytest-xdist属于进程级别的并发，分布式执行测试用例的设计原则如下。<ul><li>用例之间相互独立：保证用例之间没有依赖关系，可以完全独立运行。</li><li>用例没有执行顺序：保证随机顺序的执行测试用例，都可以正常执行。</li><li>用例之间互不影响：保证用例的运行结果不会影响到其他的测试用例。</li></ul></li><li>命令窗口下安装pytest-xdist插件：<code>pip install pytest-xdist</code>。</li><li>原理<ul><li>xdist通过产生一个或多个由master控制的workers来工作，再按master的指示运行用例。</li><li>每个workers负责执行收集到的完整测试用例集，master本身是不执行任何测试用例的。</li></ul></li><li>命令<ul><li>指定CPU的具体个数：<code>pytest -s -n num</code>，<code>-n</code>可以用<code>--numprocesses</code>代替。</li><li>使用与当前计算机CPU内核一样多的进程，速度提升大：<code>pytest -s -n auto</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># ..\conftest.py                                                # 项目结构</span><br><span class="hljs-comment"># ..\test_case.py</span><br><span class="hljs-comment"># ..\test_module1\test_case1.py</span><br><span class="hljs-comment"># ..\test_module2\test_case2.py</span><br><span class="hljs-comment"># ..\test_module3\test_case3.py</span><br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># conftest.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---start use case---&quot;</span>)<br>    name, pwd = <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;12345&quot;</span><br><br>    <span class="hljs-keyword">yield</span> name, pwd<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---exit use case---&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case.py</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_index</span>(<span class="hljs-params">login, x</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---home use case---&quot;</span>, x)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case1.py</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case1</span>(<span class="hljs-params">x</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module1: test case 1&quot;</span>, x)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_case2.py</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">list</span>(<span class="hljs-params"><span class="hljs-built_in">range</span>(<span class="hljs-params"><span class="hljs-number">10</span></span>)</span>)</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case2</span>(<span class="hljs-params">x</span>):<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module2: test case 2&quot;</span>, x)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep                                          <span class="hljs-comment"># test_case3.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case3</span>():<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module3: test case 3&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;                  ！！！执行时可在任务管理器中查看相应的IDE执行情况。</span><br><span class="hljs-string"># pytest                                                        # 不使用分布式执行</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 31 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_case.py ..........                                                             [ 32%]</span><br><span class="hljs-string">test_module1\test_case1.py ..........                                               [ 64%]</span><br><span class="hljs-string">test_module2\test_case2.py ..........                                               [ 96%]</span><br><span class="hljs-string">test_module3\test_case3.py ..........                                               [100%]</span><br><span class="hljs-string">=================================== 31 passed in 31.43s ===================================</span><br><span class="hljs-string"></span><br><span class="hljs-string"># pytest -s -n auto                                             # 使用分布式执行</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">gw0 [31] / gw1 [31] / gw2 [31] / gw3 [31] / gw4 [31] / gw5 [31]</span><br><span class="hljs-string">...............................</span><br><span class="hljs-string">=================================== 31 passed in 7.45s ====================================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-1-插件问题"><a href="#6-1-插件问题" class="headerlink" title="6-1 插件问题"></a>6-1 插件问题</h2><ul><li>插件问题<ul><li>优点<ul><li>xdist插件充分利用机器多核CPU的优势，提高了资源利用率。</li><li>将常用的功能放到fixture，更是提高了代码的复用性和维护性。</li></ul></li><li>缺点<ul><li>接口自动化时，通常会将接口放到fixture中，并设置<code>scope=session</code>，全局只运行一次。</li><li>此时若使用xdist插件进行分布式执行，<code>scope=session</code>的fixture将无法保证只运行一次。</li></ul></li><li>尽管没有内置支持确保<code>scope=session</code>的fixture只执行一次，但可通过文件锁进行进程间的通信来实现。<ul><li>使用xdist指定n个线程执行用例时，使用文件锁，fixture实际只执行一次。</li><li>其他n-1个进程通过进程间读取共享缓存文件的方式，复用fixture的数据。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># ..\conftest.py                                                # 项目结构</span><br><span class="hljs-comment"># ..\test_case1.py</span><br><span class="hljs-comment"># ..\test_case2.py</span><br><span class="hljs-comment"># ..\test_case3.py</span><br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># contest.py</span><br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)                                </span><span class="hljs-comment"># 未用文件锁</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xdist_fixture</span>():<br>    data = <span class="hljs-built_in">str</span>(random.random())<br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case1</span>(<span class="hljs-params">xdist_fixture</span>):                                  <span class="hljs-comment"># test_case1.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data1：<span class="hljs-subst">&#123;xdist_fixture&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case2</span>(<span class="hljs-params">xdist_fixture</span>):                                  <span class="hljs-comment"># test_case2.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data2：<span class="hljs-subst">&#123;xdist_fixture&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case3</span>(<span class="hljs-params">xdist_fixture</span>):                                  <span class="hljs-comment"># test_case3.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Data3：<span class="hljs-subst">&#123;xdist_fixture&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># pytest -n 3 --alluredir=./report/xml --clean-alluredir</span><br><span class="hljs-comment"># allure serve report\xml</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">test_case1---Data1：0.8613196731229967                          # session的fixture执行了3次</span><br><span class="hljs-string">test_case2---Data2：0.2953396024322359</span><br><span class="hljs-string">test_case3---Data3：0.5252796017515756</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-2-使用文件锁"><a href="#6-2-使用文件锁" class="headerlink" title="6-2 使用文件锁"></a>6-2 使用文件锁</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json                                                     <span class="hljs-comment"># contest.py</span><br><span class="hljs-keyword">import</span> pytest<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> filelock <span class="hljs-keyword">import</span> FileLock<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;session&quot;</span></span>)                                </span><span class="hljs-comment"># 使用文件锁</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xdist_fixture</span>(<span class="hljs-params">tmp_path_factory, worker_id</span>):<br>    <span class="hljs-comment"># In case of stand-alone operation, the code blocks here cannot be deleted, modified.</span><br>    <span class="hljs-keyword">if</span> worker_id == <span class="hljs-string">&quot;master&quot;</span>:                                   <span class="hljs-comment"># 不可删除、修改</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Custom code blocks.</span><br><span class="hljs-string">        This is where you customize the actions to be done, </span><br><span class="hljs-string">        such as: login requests, adding data, clearing database history, etc.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        data = <span class="hljs-built_in">str</span>(random.random())<br>        <span class="hljs-comment"># If required by the test case, the corresponding data, such as token, can be returned.</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Master is executed for the first time, the data is <span class="hljs-subst">&#123;data&#125;</span>.&quot;</span>)<br>        <span class="hljs-keyword">return</span> data<br><br>    <span class="hljs-comment"># In case of distributed operation, get a temporary directory shared by all child nodes.</span><br>    fn = root_tmp_dir / <span class="hljs-string">&quot;data.json&quot;</span>                             <span class="hljs-comment"># 不可删除、修改</span><br>    root_tmp_dir = tmp_path_factory.getbasetemp().parent        <span class="hljs-comment"># 不可删除、修改</span><br>    <br>    <span class="hljs-keyword">with</span> FileLock(<span class="hljs-built_in">str</span>(fn) + <span class="hljs-string">&quot;.lock&quot;</span>):                           <span class="hljs-comment"># 不可删除、修改</span><br>        <span class="hljs-keyword">if</span> fn.is_file():                                        <span class="hljs-comment"># 不可删除、修改</span><br>            <span class="hljs-comment"># Read data from a cache file, like a token in the case of a login operation.</span><br>            data = json.loads(fn.read_text())<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The worker reads the cache file and the data is <span class="hljs-subst">&#123;data&#125;</span>.&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            Custom code blocks.</span><br><span class="hljs-string">            This is where you customize the actions to be done, </span><br><span class="hljs-string">            such as: login requests, adding data, clearing database history, etc.</span><br><span class="hljs-string">            &quot;&quot;&quot;</span><br>            data = <span class="hljs-built_in">str</span>(random.random())<br>            fn.write_text(json.dumps(data))                     <span class="hljs-comment"># 不可删除、修改</span><br>            <span class="hljs-comment"># If required by the test case, the corresponding data, such as token, can be returned.</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The worker reads the cache file and the data is <span class="hljs-subst">&#123;data&#125;</span>.&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># pytest -n 3 --alluredir=./report/xml --clean-alluredir        # xdist分布式执行</span><br><span class="hljs-string"># allure serve report\xml</span><br><span class="hljs-string">The worker reads the cache file and the data is 0.14799648172518787.</span><br><span class="hljs-string">Data1：0.14799648172518787</span><br><span class="hljs-string">The worker reads the cache file and the data is 0.14799648172518787.</span><br><span class="hljs-string">Data2：0.14799648172518787</span><br><span class="hljs-string">The worker reads the cache file and the data is 0.14799648172518787.</span><br><span class="hljs-string">Data3：0.14799648172518787</span><br><span class="hljs-string"></span><br><span class="hljs-string"># pytest --alluredir=./report/xml --clean-alluredir             # 不使用xdist分布式执行</span><br><span class="hljs-string"># allure serve report\xml</span><br><span class="hljs-string">Master is executed for the first time, the data is 0.5299300518971257.</span><br><span class="hljs-string">Data1：0.5299300518971257</span><br><span class="hljs-string">Data2：0.5299300518971257</span><br><span class="hljs-string">Data3：0.5299300518971257</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="7-重复执行用例插件"><a href="#7-重复执行用例插件" class="headerlink" title="7 重复执行用例插件"></a>7 重复执行用例插件</h1><ul><li>重复执行用例插件<ul><li>pytest-repeat是一个pytest插件，安装命令：<code>pip install pytest-repeat</code>。</li><li>可以重复执行单个测试用例，或多个测试用例，也可以自定义重复执行的次数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                                   <span class="hljs-comment"># test_repeat1.py</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><span class="hljs-comment"># pytest -vs --count 3                                          # 指定重复运行3次</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 6 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat1.py::test_a[1-3] ---use case a---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_a[2-3] ---use case a---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_a[3-3] ---use case a---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_b[1-3] ---use case b---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_b[2-3] ---use case b---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">test_repeat1.py::test_b[3-3] ---use case b---</span><br><span class="hljs-string">PASSED</span><br><span class="hljs-string">==================================== warnings summary =====================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">=============================== 6 passed, 1 warning in 0.04s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-1-重复直到失败"><a href="#7-1-重复直到失败" class="headerlink" title="7-1 重复直到失败"></a>7-1 重复直到失败</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random                                                   <span class="hljs-comment"># test_repeat2.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():                                                <br>    num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">assert</span> num != <span class="hljs-number">10</span><br><br><span class="hljs-comment"># pytest --count 11 -x test_repeat2.py                          # 重复执行11次直到失败停止</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 11 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat2.py ......F</span><br><span class="hljs-string">======================================== FAILURES =========================================</span><br><span class="hljs-string">_____________________________________ test_case[7-11] _____________________________________</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_case():</span><br><span class="hljs-string">        num = random.randint(1, 11)</span><br><span class="hljs-string">&gt;       assert num != 10</span><br><span class="hljs-string">E       assert 10 != 10</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat2.py:6: AssertionError</span><br><span class="hljs-string">==================================== warnings summary =====================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">================================== short test summary info ================================</span><br><span class="hljs-string">FAILED test_repeat2.py::test_case[7-11] - assert 10 != 10</span><br><span class="hljs-string">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="hljs-string">=========================== 1 failed, 6 passed, 1 warning in 0.57s ========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-2-repeat装饰器"><a href="#7-2-repeat装饰器" class="headerlink" title="7-2 repeat装饰器"></a>7-2 repeat装饰器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_repeat3.py</span><br><br><br><span class="hljs-meta">@pytest.mark.repeat(<span class="hljs-params"><span class="hljs-number">3</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case---&quot;</span>)<br><br><span class="hljs-comment"># pytest test_repeat3.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_repeat3.py ...                                                                 [100%]</span><br><span class="hljs-string">==================================== warnings summary =====================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">=============================== 3 passed, 1 warning in 0.12s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-3-命令参数说明"><a href="#7-3-命令参数说明" class="headerlink" title="7-3 命令参数说明"></a>7-3 命令参数说明</h2><ul><li>命令参数说明<ul><li><code>--repeat-scope</code>：覆盖默认的用例执行顺序，类似于fixture的scope。</li><li>function：默认，范围针对每个用例重复执行，然后再执行下一个用例。</li><li>class：以类为用例的集合单位，重复执行类里面的用例，再执行下一个用例。</li><li>module：以模块为集合单位，重复执行模块里面的用例，再执行下一个用例。</li><li>session：重复整个测试会话，即所有测试用例都执行一次，然后再执行第二次。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                                   <span class="hljs-comment"># test_repeat4.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase1</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br>        <br>        <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase2</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case d---&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># pytest -s --count=2 --repeat-scope=class test_repeat4.py      # 重复执行class级别用例</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string"></span><br><span class="hljs-string"># pytest -s --count=2 --repeat-scope=module test_repeat4.py     # 重复执行module级别用例</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string">.---use case a---</span><br><span class="hljs-string">.---use case b---</span><br><span class="hljs-string">.---use case c---</span><br><span class="hljs-string">.---use case d---</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>测试框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Allure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest 框架</title>
    <link href="/2023/03/03/ce-shi-kuang-jia/tf02-pytest-kuang-jia/"/>
    <url>/2023/03/03/ce-shi-kuang-jia/tf02-pytest-kuang-jia/</url>
    
    <content type="html"><![CDATA[<p>PyTest是Python的一种单元测试框架，与Python自带的UnitTest测试框架类似，但使用比UnitTest框架更简洁，效率更高。</p><span id="more"></span><h1 id="1-规则说明"><a href="#1-规则说明" class="headerlink" title="1 规则说明"></a>1 规则说明</h1><ul><li>规则说明<ul><li>PyTest是Python2默认自带的，在Python3中则是独立的，需使用<code>pip install pytest</code>进行安装。</li><li>运行规则<ul><li>查找当前目录及子目录中<code>test_*.py</code>或<code>*_test.py</code>文件。</li><li>找到所有的文件后，执行文件中以<code>test</code>开头的所有函数。</li></ul></li><li>用例设计规则<ul><li>测试文件以<code>test_</code>开头，或以<code>_test</code>结尾，测试类以<code>Test</code>开头，并且不能带有<code>init</code>方法。</li><li>测试函数和方法以<code>test_</code>开头，断言用<code>assert</code>，所有的package包必须带<code>__init__.py</code>文件。</li></ul></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">pip install pytest                                       # 安装PyTest<br>pip show pytest                                          # 查看PyTest版本的详细信息<br>pytest --version                                         # 简单查看PyTest的安装版本<br>pytest -h                                                # PyTest查看帮助<br>pytest --<span class="hljs-built_in">help</span>                                            # PyTest查看帮助<br></code></pre></td></tr></table></figure><h2 id="1-1-用例执行规则"><a href="#1-1-用例执行规则" class="headerlink" title="1-1 用例执行规则"></a>1-1 用例执行规则</h2><ul><li>用例执行规则<ul><li>执行某个目录下所有的用例：<code>pytest FolderName/</code>。</li><li>执行某个文件中的所有用例：<code>pytest FileName.py</code>。</li><li>遇到错误时，停止正在执行的测试用例：<code>pytest -x FileName.py</code>。</li><li>用例错误个数达到指定数量时，停止测试：<code>pytest --maxfail=num</code>。</li><li>按照关键字进行模糊匹配，匹配名称不区分大小写：<code>pytest -k &quot;xxx&quot;</code>。</li><li>简单结果：<code>pytest -q FileName.py</code>，<code>--quiet decrease verbosity</code>。</li><li>按节点运行<ul><li>每个测试用例都分配了唯一的nodeid，nodeid由模块名和说明符组成。</li><li>模块名和说明符以<code>::</code>间隔，说明符可以包含类名、函数名和标记参数。</li></ul></li><li>标记表达式运行用<code>@pytest.mark.slow</code>修饰器修饰的所有用例：<code>pytest -m slow</code>。</li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">pytest                                                  # 执行PyTest用例的命令，推荐使用<br>py.test                                                 # 执行该文件夹下所有符合条件的用例<br>python -m pytest<br><br>pytest -k &quot;ClassName&quot;                                   # 运行ClassName类下的所有方法<br>pytest -k &quot;MethodName&quot;                                  # 运行所有名为MethodName的方法<br>pytest -k &quot;ClassName and <span class="hljs-keyword">not</span> MethodName&quot;                # 运行ClassName类下的除MethodName外的所有方法<br><br>pytest FileName.py::FunctionName                        # 函数名<br>pytest FileName.py::ClassName::FunctionName             # 类名+函数名<br>pytest FileName.py::ClassName::FunctionName[num1-num2]  # 类名+函数名+标记参数<br>pytest FileName.py -vv                                  # FileName.py文件下的所有用例节点执行结果<br></code></pre></td></tr></table></figure><h2 id="1-2-PyCharm运行方式"><a href="#1-2-PyCharm运行方式" class="headerlink" title="1-2 PyCharm运行方式"></a>1-2 PyCharm运行方式</h2><ul><li>PyCharm运行方式<ul><li>默认以Autodetect形式运行，可以通过修改PyCharm设置来改变运行方式。</li><li>File—&gt;Setting—&gt;Tools—&gt;Python Integrated Tools—&gt;Default test runner。</li><li>PyTest兼容UnitTest，用UnitTest框架编写的测试用例也能用PyTest框架运行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_node.py</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestNode</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br>    <br><span class="hljs-meta">    @pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;x, y&quot;</span>,[(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">3</span></span>), (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">5</span></span>)]</span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-keyword">assert</span> x + <span class="hljs-number">2</span> == y<br><br><span class="hljs-comment"># pytest test_node.py::test_one                         # 函数名</span><br><span class="hljs-comment"># pytest test_node.py::TestNode::test_one               # 类名+函数名</span><br><span class="hljs-comment"># pytest test_node.py::TestNode::test_two[1-3]          # 类名+函数名+标记参数</span><br><span class="hljs-comment"># pytest test_node.py::TestNode::test_two[3-5]          # 类名+函数名+标记参数</span><br><span class="hljs-comment"># pytest test_node.py -vv                               # 该文件下的所有用例节点执行结果</span><br></code></pre></td></tr></table></figure><h1 id="2-跳过用例"><a href="#2-跳过用例" class="headerlink" title="2 跳过用例"></a>2 跳过用例</h1><ul><li>跳过用例<ul><li><code>@pytest.mark.skip()</code>：标记无法在某平台上运行或希望失败的测试功能，跳过用例。</li><li><code>pytest.skip()</code>：测试用例执行期间，强制跳过不再继续执行，类似于break跳出循环。</li><li><code>pytest.xfail()</code>：若用例之间存在依赖，其中一个用例运行失败时，标记依赖的用例为失败，并跳过用例。</li><li><code>@pytest.mark.skipif(condition, reason=&quot;&quot;)</code>：有条件地跳过某些测试用例，condition返回True时跳过。</li><li>自定义跳过标识<ul><li>将<code>pytest.mark.skip()</code>或<code>@pytest.mark.skipif()</code>赋值给一个自定义标识变量，不同模块之间进行共享。</li><li>如果有多个模块的用例需要用到同个标识变量，可以单独文件管理通用的标识变量，适用于整个测试用例集。</li></ul></li><li><code>pytest.importorskip()</code>：如果缺少某些导入，则跳过模块中的所有测试用例。</li></ul></li></ul><h2 id="2-1-pytest-mark-skip"><a href="#2-1-pytest-mark-skip" class="headerlink" title="2-1 @pytest.mark.skip"></a>2-1 @pytest.mark.skip</h2><ul><li>@pytest.mark.skip<ul><li>可选参数reason：跳过的原因，会在执行结果中打印。</li><li>用在跳过单个用例、类用例、类的方法用例、函数用例上。</li><li>如果加在类用例上，类里面的所有测试用例都不会被执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_skip.py</span><br><br><br><span class="hljs-meta">@pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&#x27;skip function use cases&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br><span class="hljs-meta">    @pytest.mark.skip(<span class="hljs-params">reason=<span class="hljs-string">&#x27;skip class method use case&#x27;</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_skip.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skip.py::test_a SKIPPED (skip function use cases)             [ 33%]</span><br><span class="hljs-string">Skipped: skip function use cases</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skip.py::TestCase::test_b SKIPPED (skip class method use case)[ 66%]</span><br><span class="hljs-string">Skipped: skip class method use case</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skip.py::TestCase::test_c PASSED                              [100%]---test case c---</span><br><span class="hljs-string">========================= 1 passed, 2 skipped, 1 warning in 0.10s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-pytest-skip"><a href="#2-2-pytest-skip" class="headerlink" title="2-2 pytest.skip()"></a>2-2 pytest.skip()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyskip1.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;---use case <span class="hljs-subst">&#123;n&#125;</span> execution---&quot;</span>)<br>        n += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">5</span>:                                      <span class="hljs-comment"># pytest.skip(msg=&quot;&quot;)</span><br>            pytest.skip(<span class="hljs-string">&quot;---use case 5 exit---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyskip1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip1.py::test_case SKIPPED (---use case 5 exit---) [100%]---use case 0 execution---</span><br><span class="hljs-string">---use case 1 execution---</span><br><span class="hljs-string">---use case 2 execution---</span><br><span class="hljs-string">---use case 3 execution---</span><br><span class="hljs-string">---use case 4 execution---</span><br><span class="hljs-string"></span><br><span class="hljs-string">Skipped: ---use case 5 exit---</span><br><span class="hljs-string">============================== 1 skipped, 1 warning in 0.09s ==============================</span><br></code></pre></td></tr></table></figure><ul><li>跳过测试模块<ul><li><code>pytestmark = pytest.mark.skip(reason=&quot;&quot;)</code>：pytestmark为不可更改变量名。</li><li><code>pytest.skip(&quot;&quot;, allow_module_level=True)</code>：设置在模块级别跳过整个模块。</li></ul></li></ul><h4 id="1-pytestmark"><a href="#1-pytestmark" class="headerlink" title="(1) pytestmark"></a>(1) pytestmark</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyskip2.py</span><br><br>pytestmark = pytest.mark.skip(reason=<span class="hljs-string">&quot;skip current module&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyskip2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip2.py::test_a SKIPPED (skip current module)                    [ 33%]</span><br><span class="hljs-string">Skipped: skip current module</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip2.py::TestCase::test_b SKIPPED (skip current module)          [ 66%]</span><br><span class="hljs-string">Skipped: skip current module</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyskip2.py::TestCase::test_c SKIPPED (skip current module)          [100%]</span><br><span class="hljs-string">Skipped: skip current module</span><br><span class="hljs-string">============================== 3 skipped, 1 warning in 0.04s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-allow-module-level"><a href="#2-allow-module-level" class="headerlink" title="(2) allow_module_level"></a>(2) allow_module_level</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyskip3.py</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> sys.platform.startswith(<span class="hljs-string">&quot;darwin&quot;</span>):<br>    pytest.skip(<span class="hljs-string">&quot;use cases are executed under Mac only&quot;</span>, allow_module_level=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyskip3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;          ！！！win是Windows平台，darwin是Mac平台，Linux是Linux平台           </span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... </span><br><span class="hljs-string">Skipped: use cases are executed under Mac only</span><br><span class="hljs-string">collected 0 items / 1 skipped</span><br><span class="hljs-string">============================== 1 skipped, 1 warning in 0.06s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-pytest-xfail"><a href="#2-3-pytest-xfail" class="headerlink" title="2-3 pytest.xfail()"></a>2-3 pytest.xfail()</h2><ul><li>pytest.xfail()<ul><li>以登录操作为例，将登录作为前置条件，账户和密码参数化设置。</li><li>用例a、b、c全部调用了fixture的login功能，用例a用于测试登录。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_pyxfail.py</span><br><br>parameter = [&#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Test&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;]   <span class="hljs-comment"># 修改参数部分，让用例a执行失败</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    username = request.param[<span class="hljs-string">&quot;username&quot;</span>]<br>    password = request.param[<span class="hljs-string">&quot;password&quot;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;login: username%s, password%s&quot;</span> % (username, password))<br>    <span class="hljs-keyword">if</span> password == <span class="hljs-string">&quot;123456&quot;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;login&quot;</span>, parameter, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">self, login</span>):<br>        result = login<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a results: %s---&quot;</span> % result)<br>        <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span> == result<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self, login</span>):<br>        result = login<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b results: %s---&quot;</span> % result)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>            pytest.xfail(<span class="hljs-string">&quot;login failed, marked as xfail&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, login</span>):<br>        result = login<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c results: %s---&quot;</span> % result)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result:<br>            pytest.xfail(<span class="hljs-string">&quot;login failed, marked as xfail&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_pyxfail.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyxfail.py::TestCase::test_a[login0] login: usernameTest, password123</span><br><span class="hljs-string">FAILED                                              [ 33%]---use case a results: False---</span><br><span class="hljs-string">test_pyxfail.py:18 (TestCase.test_a[login0])</span><br><span class="hljs-string">True != False</span><br><span class="hljs-string">Expected :False</span><br><span class="hljs-string">Actual   :True</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string">self = &lt;Skip.test_pyxfail.TestCase object at 0x00000186EE687E50&gt;, login = False</span><br><span class="hljs-string">    def test_a(self, login):</span><br><span class="hljs-string">        result = login</span><br><span class="hljs-string">        print(&quot;---use case a results: %s---&quot; % result)</span><br><span class="hljs-string">&gt;       assert True == result</span><br><span class="hljs-string">E       assert True == False</span><br><span class="hljs-string">E         +True</span><br><span class="hljs-string">E         -False</span><br><span class="hljs-string">test_pyxfail.py:22: AssertionError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyxfail.py::TestCase::test_b[login0] </span><br><span class="hljs-string">XFAIL (login failed, marke...)                      [ 66%]---use case b results: False---</span><br><span class="hljs-string">self = &lt;Skip.test_pyxfail.TestCase object at 0x00000186EE6EBD60&gt;, login = False</span><br><span class="hljs-string">    def test_b(self, login):</span><br><span class="hljs-string">        result = login</span><br><span class="hljs-string">        print(&quot;---use case b results: %s---&quot; % result)</span><br><span class="hljs-string">        if not result:</span><br><span class="hljs-string">&gt;           pytest.xfail(&quot;login failed, marked as xfail&quot;)</span><br><span class="hljs-string">E           _pytest.outcomes.XFailed: login failed, marked as xfail</span><br><span class="hljs-string">test_pyxfail.py:28: XFailed</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_pyxfail.py::TestCase::test_c[login0] </span><br><span class="hljs-string">XFAIL (login failed, marke...)                      [100%]---use case c results: False---</span><br><span class="hljs-string">self = &lt;Skip.test_pyxfail.TestCase object at 0x00000186EE715040&gt;, login = False</span><br><span class="hljs-string">    def test_c(self, login):</span><br><span class="hljs-string">        result = login</span><br><span class="hljs-string">        print(&quot;---use case c results: %s---&quot; % result)</span><br><span class="hljs-string">        if not result:</span><br><span class="hljs-string">&gt;           pytest.xfail(&quot;login failed, marked as xfail&quot;)</span><br><span class="hljs-string">E           _pytest.outcomes.XFailed: login failed, marked as xfail</span><br><span class="hljs-string">test_pyxfail.py:34: XFailed</span><br><span class="hljs-string">========================= 1 failed, 2 xfailed, 1 warning in 0.29s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-pytest-mark-skipif"><a href="#2-4-pytest-mark-skipif" class="headerlink" title="2-4 @pytest.mark.skipif"></a>2-4 @pytest.mark.skipif</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_skipif.py</span><br><br><br><span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">10</span></span>), reason=<span class="hljs-string">&quot;python version not less than 3.10&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.skipif(<span class="hljs-params">condition=sys.version_info &lt; (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">10</span></span>), reason=<span class="hljs-string">&quot;python version not less than 3.10&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, </span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_skipif.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;                           ！！！这里用的Python3.9版本                         </span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skipif.py::test_a SKIPPED (python version not less than 3.10)              [ 33%]</span><br><span class="hljs-string">Skipped: python version not less than 3.10</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skipif.py::TestCase::test_b SKIPPED (python version not less th...)        [ 66%]</span><br><span class="hljs-string">Skipped: python version not less than 3.10</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skipif.py::TestCase::test_c SKIPPED (python version not less th...)        [100%]</span><br><span class="hljs-string">Skipped: python version not less than 3.10</span><br><span class="hljs-string">============================== 3 skipped, 1 warning in 0.16s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-自定义跳过标识"><a href="#2-5-自定义跳过标识" class="headerlink" title="2-5 自定义跳过标识"></a>2-5 自定义跳过标识</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_skiptag.py</span><br><br><span class="hljs-comment"># mark_version = pytest.mark.skip(reason=&quot;not working on win&quot;)</span><br>mark_version = pytest.mark.skipif(sys.platform != <span class="hljs-string">&#x27;win&#x27;</span>, reason=<span class="hljs-string">&quot;not working on win&quot;</span>)<br><br><br><span class="hljs-meta">@mark_version</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><span class="hljs-meta">    @mark_version</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, </span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_skiptag.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skiptag.py::test_a SKIPPED (not working on win)              [ 33%]</span><br><span class="hljs-string">Skipped: not working on win</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skiptag.py::TestCase::test_b PASSED                          [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_skiptag.py::TestCase::test_c SKIPPED (not working on win)    [100%]</span><br><span class="hljs-string">Skipped: not working on win</span><br><span class="hljs-string">========================= 1 passed, 2 skipped, 1 warning in 0.06s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-pytest-importorskip"><a href="#2-6-pytest-importorskip" class="headerlink" title="2-6 pytest.importorskip()"></a>2-6 pytest.importorskip()</h2><ul><li>pytest.importorskip()<ul><li><code>pytest.importorskip(modname: str, minversion: Optional[str] = None, reason: Optional[str] = None)</code></li><li>参数列表：modname-模块名、minversion-版本号、reason-跳过原因，模块名必选，版本号和跳过原因都是可选的。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_importorskip.py</span><br><br>sys = pytest.importorskip(<span class="hljs-string">&quot;sys&quot;</span>, minversion=<span class="hljs-string">&quot;1.0&quot;</span>)<br><br><br><span class="hljs-meta">@sys</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test cases---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_importorskip.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... </span><br><span class="hljs-string">Skipped: module &#x27;sys&#x27; has __version__ None, required is: &#x27;1.0&#x27;</span><br><span class="hljs-string">collected 0 items / 1 skipped</span><br><span class="hljs-string">============================== 1 skipped, 1 warning in 0.25s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="3-assert断言"><a href="#3-assert断言" class="headerlink" title="3 assert断言"></a>3 assert断言</h1><ul><li>assert断言<ul><li>即实际结果和期望结果的比对，符合预期就pass，不符合则failed。</li><li>PyTest允许使用标准的Python断言assert来验证测试中的期望和值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():                                                <span class="hljs-comment"># test_assert.py</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_function</span>():<br>    <span class="hljs-keyword">assert</span> f() == <span class="hljs-number">5</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_assert.py::test_function FAILED                                     [100%]</span><br><span class="hljs-string">test_assert.py:4 (test_function)</span><br><span class="hljs-string">3 != 5</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :5</span><br><span class="hljs-string">Actual   :3</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def test_function():</span><br><span class="hljs-string">&gt;       assert f() == 5</span><br><span class="hljs-string">E       assert 3 == 5</span><br><span class="hljs-string">E         +3</span><br><span class="hljs-string">E         -5</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_assert.py:6: AssertionError</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.63s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-1-异常信息"><a href="#3-1-异常信息" class="headerlink" title="3-1 异常信息"></a>3-1 异常信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():                                                <span class="hljs-comment"># test_excinfo1.py</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_function</span>():<br>    x = f()<br>    <span class="hljs-keyword">assert</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, <span class="hljs-string">&quot;Determine if x is an even number and the current value of x is %s.&quot;</span> % x<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo1.py::test_function FAILED                                   [100%]</span><br><span class="hljs-string">test_excinfo1.py:4 (test_function)</span><br><span class="hljs-string">1 != 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :0</span><br><span class="hljs-string">Actual   :1</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">def test_function():</span><br><span class="hljs-string">        x = f()</span><br><span class="hljs-string">&gt;       assert x % 2 == 0, &quot;Determine if x is an even number and the current value of x is %s.&quot; % x</span><br><span class="hljs-string">E       AssertionError: Determine if x is an even number and the current value of x is 3.</span><br><span class="hljs-string">E       assert 1 == 0</span><br><span class="hljs-string">E         +1</span><br><span class="hljs-string">E         -0</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo1.py:7: AssertionError</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.73s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-2-异常断言"><a href="#3-2-异常断言" class="headerlink" title="3-2 异常断言"></a>3-2 异常断言</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_excinfo2.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_zero_division</span>():<br>    <span class="hljs-keyword">with</span> pytest.raises(ZeroDivisionError):              <span class="hljs-comment"># 使用pytest.raises作为上下文管理器</span><br>        <span class="hljs-number">1</span> / <span class="hljs-number">0</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo2.py::test_zero_division PASSED                              [100%]</span><br><span class="hljs-string">============================== 1 passed, 1 warning in 0.15s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>异常类型<ul><li>要判断抛出的异常是否预期，例如<code>1/0</code>抛出的异常为：<code>ZeroDivisionError: division by zero</code>。</li><li>断言该异常，通常是断言异常的type和value值，type是ZeroDivisionError，value是division by zero。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_excinfo3.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_zero_division</span>():                               <span class="hljs-comment"># 断言异常</span><br>    <span class="hljs-keyword">with</span> pytest.raises(ZeroDivisionError) <span class="hljs-keyword">as</span> excinfo:   <span class="hljs-comment"># 使用pytest.raises作为上下文管理器</span><br>        <span class="hljs-number">1</span> / <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">assert</span> excinfo.<span class="hljs-built_in">type</span> == ZeroDivisionError            <span class="hljs-comment"># 断言异常type值</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;division by zero&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(excinfo.value)     <span class="hljs-comment"># 断言异常value值</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_excinfo3.py::test_zero_division PASSED                              [100%]</span><br><span class="hljs-string">============================== 1 passed, 1 warning in 0.15s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-常用断言"><a href="#3-3-常用断言" class="headerlink" title="3-3 常用断言"></a>3-3 常用断言</h2><ul><li>常用断言<ul><li><code>assert xx</code>：判断xx为真。</li><li><code>assert not xx</code>：判断xx不为真。</li><li><code>assert a in b</code>：判断b包含a。</li><li><code>assert a == b</code>：判断a等于b。</li><li><code>assert a != b</code>：判断a不等于b。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_commonassert.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_true</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_01</span>():<br>    a = <span class="hljs-number">5</span><br>    b = -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> is_true(a)                                   <span class="hljs-comment"># 断言a为真</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> is_true(b)                               <span class="hljs-comment"># 断言b不为真</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_02</span>():<br>    a = <span class="hljs-string">&#x27;hello&#x27;</span><br>    b = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-keyword">assert</span> a <span class="hljs-keyword">in</span> b                                       <span class="hljs-comment"># 断言b包含a</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_03</span>():<br>    a = <span class="hljs-string">&#x27;Yoyo&#x27;</span><br>    b = <span class="hljs-string">&#x27;Yoyo&#x27;</span><br>    <span class="hljs-keyword">assert</span> a == b                                       <span class="hljs-comment"># 断言相等</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_04</span>():<br>    a = <span class="hljs-number">5</span><br>    b = <span class="hljs-number">6</span><br>    <span class="hljs-keyword">assert</span> a != b                                       <span class="hljs-comment"># 断言不相等</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_commonassert.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_commonassert.py::test_01 PASSED                                     [ 25%]</span><br><span class="hljs-string">test_commonassert.py::test_02 PASSED                                     [ 50%]</span><br><span class="hljs-string">test_commonassert.py::test_03 PASSED                                     [ 75%]</span><br><span class="hljs-string">test_commonassert.py::test_04 PASSED                                     [100%]</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.38s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="4-用例运行级别"><a href="#4-用例运行级别" class="headerlink" title="4 用例运行级别"></a>4 用例运行级别</h1><ul><li>用例运行级别<ul><li>模块级：setup_module、teardown_module，在所有用例前后只执行一次。</li><li>函数级：setup_function、teardown_function，在所有用例前后都执行一次。</li><li>类级别：setup_class、teardown_class，在类中的所有用例前后只执行一次。</li><li>类方法级：setup_method、teardown_method，在类中的所有用例前后都执行一次。</li><li>类方法细化级：setup、teardown，运行规则与类方法级相同，在每个用例前后都执行一次。</li></ul></li></ul><h2 id="4-1-模块级"><a href="#4-1-模块级" class="headerlink" title="4-1 模块级"></a>4-1 模块级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_module.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_module</span>():                                     <span class="hljs-comment"># 模块级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_module</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;this&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_module.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_module.py::test_one </span><br><span class="hljs-string">---setup_module: execute only once before and after all use cases---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_one()</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_module.py::test_two PASSED                 [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_module: execute only once before and after all use cases---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.15s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-函数级"><a href="#4-2-函数级" class="headerlink" title="4-2 函数级"></a>4-2 函数级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_function.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_function</span>():                                   <span class="hljs-comment"># 函数级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_function: execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_function: Execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;this&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_function.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_function.py::test_one </span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                        [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown_function: Execute once before and after all use cases---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_function.py::test_two </span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                        [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_function: Execute once before and after all use cases---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.05s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-3-类级别"><a href="#4-3-类级别" class="headerlink" title="4-3 类级别"></a>4-3 类级别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_class.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类级别</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_class.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_class.py::TestCase::test_one </span><br><span class="hljs-string">---setup_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                              [ 50%]---running---test_one()</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_class.py::TestCase::test_two PASSED            [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.19s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-类方法级"><a href="#4-4-类方法级" class="headerlink" title="4-4 类方法级"></a>4-4 类方法级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_method.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类方法级</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_method.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_method.py::TestCase::test_one </span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_method.py::TestCase::test_two </span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                          [100%]---running---test_two()</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.06s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-5-类方法细化级"><a href="#4-5-类方法细化级" class="headerlink" title="4-5 类方法细化级"></a>4-5 类方法细化级</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixclass.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类方法细化级</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixclass.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixclass.py::TestCase::test_one </span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                              [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixclass.py::TestCase::test_two </span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                              [100%]---running---test_two()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.13s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-类和方法混合"><a href="#4-6-类和方法混合" class="headerlink" title="4-6 类和方法混合"></a>4-6 类和方法混合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mixclass.py</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_class</span>(<span class="hljs-params">self</span>):                              <span class="hljs-comment"># 类级</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_method</span>(<span class="hljs-params">self</span>):                             <span class="hljs-comment"># 方法级</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_method: execute once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self</span>):                                    <span class="hljs-comment"># 类方法细化级</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown: execute once before and after each use case---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_one</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_one()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;this&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_two</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_two()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_mixclass.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixclass.py::TestCase::test_one </span><br><span class="hljs-string">---setup_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_one()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixclass.py::TestCase::test_two </span><br><span class="hljs-string">---setup_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">---setup: execute once before and after each use case---</span><br><span class="hljs-string">PASSED                                          [100%]---running---test_two()</span><br><span class="hljs-string">---teardown: execute once before and after each use case---</span><br><span class="hljs-string">---teardown_method: execute once before and after all use cases in a class---</span><br><span class="hljs-string">---teardown_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.17s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="4-7-模块和类混合"><a href="#4-7-模块和类混合" class="headerlink" title="4-7 模块和类混合"></a>4-7 模块和类混合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mixmodule.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_module</span>():                                     <span class="hljs-comment"># 模块级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_module</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_module: execute only once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_function</span>():                                   <span class="hljs-comment"># 函数级</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_function: execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_function</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_function: execute once before and after all use cases---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_a()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;this&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_b()&quot;</span>)<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;o&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:                                         <span class="hljs-comment"># 类级别</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---setup_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_class</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---teardown_class: execute only once before and after all use cases in a class---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_c()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;class&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;c&#x27;</span> <span class="hljs-keyword">in</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_d</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---running---test_d()&quot;</span>)<br>        x = <span class="hljs-string">&#x27;module&#x27;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-string">&#x27;m&#x27;</span> <span class="hljs-keyword">in</span> x<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_mixmodule.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;            ！！！注意：模块级优先权最大，函数级和类级别互不干涉。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::test_a </span><br><span class="hljs-string">---setup_module: execute only once before and after all use cases---</span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                          [ 25%]---running---test_a()</span><br><span class="hljs-string">---teardown_function: execute once before and after all use cases---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::test_b </span><br><span class="hljs-string">---setup_function: execute once before and after all use cases---</span><br><span class="hljs-string">PASSED                                          [ 50%]---running---test_b()</span><br><span class="hljs-string">---teardown_function: execute once before and after all use cases---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::TestCase::test_c </span><br><span class="hljs-string">---setup_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">PASSED                                          [ 75%]---running---test_c()</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mixmodule.py::TestCase::test_d </span><br><span class="hljs-string">PASSED                                          [100%]---running---test_d()</span><br><span class="hljs-string">---teardown_class: execute only once before and after all use cases in a class---</span><br><span class="hljs-string">---teardown_module: execute only once before and after all use cases---</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.16s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="5-fixture预置条件"><a href="#5-fixture预置条件" class="headerlink" title="5 fixture预置条件"></a>5 fixture预置条件</h1><ul><li>fixture预置条件<ul><li>相比用例运行级别的setup和teardown，fixture的命名方式更为灵活。</li><li><code>@pytest.fixture(scope=&quot;function&quot;, params=&quot;None&quot;, autouse=False, ids=None, name=None)</code><ul><li>scope：类似于作用域，默认function，还可以是class、module、session、package。</li><li>autouse：默认为False，用例手动调用该fixture，若为True则作用域内的用例自动调用。</li><li>name：默认的装饰器名称，同一模块的fixture相互调用时可以使用不同的name进行命名。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture.py</span><br><br><br><span class="hljs-meta">@pytest.fixture()                                       </span><span class="hljs-comment"># 不带参数时默认scope=&quot;function&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter your account number and password to log in.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():                                           <span class="hljs-comment"># 不传参login</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;           ！！！实现场景：用例a需要登录，用例b不需要登录，用例c需要登录。         </span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture.py::test_a Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                           [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture.py::test_b PASSED                   [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture.py::test_c Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                           [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.10s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-1-conftest-py"><a href="#5-1-conftest-py" class="headerlink" title="5-1 conftest.py"></a>5-1 conftest.py</h2><ul><li>conftest.py<ul><li>配置文件里可以实现数据共享(多个<code>.py</code>文件的预置操作)，不用import，PyTest就能自动查找配置。</li><li>注意：<code>conftest.py</code>配置脚本名称固定，与运行的用例要在同个package下且有<code>__init__.py</code>文件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># conftest.py</span><br><br><br><span class="hljs-meta">@pytest.fixture()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please enter your account number and password to log in.&quot;</span>)<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_conftest.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():                                           <span class="hljs-comment"># 不传参login</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">login</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_conftest.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;   ！！！单独运行test_conftest.py时可以调用到conftest.py配置文件中的login()方法。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_conftest.py::test_a Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                          [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_conftest.py::test_b PASSED                 [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_conftest.py::test_c Please enter your account number and password to log in.</span><br><span class="hljs-string">PASSED                                          [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.03s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-2-scope实现setup"><a href="#5-2-scope实现setup" class="headerlink" title="5-2 scope实现setup"></a>5-2 scope实现setup</h2><ul><li>scope实现setup<ul><li>fixture的参数<code>scope=&quot;module&quot;</code>可以实现多个<code>.py</code>跨文件共享前置。</li><li>module作用于整个<code>.py</code>文件，用例调用时，参数写上函数名称即可。</li><li><code>scope=&quot;module&quot;</code>可以理解为在测试用例中加上前置条件，类似setup。</li></ul></li></ul><h4 id="1-用例全调用"><a href="#1-用例全调用" class="headerlink" title="(1) 用例全调用"></a>(1) 用例全调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_scope1.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_scope1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;              ！！！三个用例都调用了open函数，但只在用例a处执行一次。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope1.py::test_a Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">PASSED                                           [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope1.py::test_b PASSED                    [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope1.py::test_c PASSED                    [100%]---test case c: searching pytest---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.05s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-部分用例调用"><a href="#2-部分用例调用" class="headerlink" title="(2) 部分用例调用"></a>(2) 部分用例调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_scope2.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_scope2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;         ！！！用例a和用例c不调用open函数，用例b调用，只在用例b处执行一次。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope2.py::test_a PASSED                    [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope2.py::test_b Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">PASSED                                           [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_scope2.py::test_c PASSED                    [100%]---test case c: searching pytest---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.04s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-3-yield实现teardown"><a href="#5-3-yield实现teardown" class="headerlink" title="5-3 yield实现teardown"></a>5-3 yield实现teardown</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_yield.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Execute teardown.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_yield.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_yield.py::test_a Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">PASSED                                           [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_yield.py::test_b PASSED                     [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_yield.py::test_c PASSED                     [100%]---test case c: searching pytest---</span><br><span class="hljs-string">Execute teardown.</span><br><span class="hljs-string">Close your browser.</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.05s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-用例异常"><a href="#1-用例异常" class="headerlink" title="(1) 用例异常"></a>(1) 用例异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_exception1.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Execute teardown.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br>    <span class="hljs-keyword">raise</span> NameError                                     <span class="hljs-comment"># 模拟异常，不影响其他用例执行</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_exception1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;                   ！！！用例异常时，不影响yield实现teardown的执行。</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py::test_a Open your browser and open the Baidu homepage.</span><br><span class="hljs-string">FAILED                                           [ 33%]---test case a: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py:12 (test_a)</span><br><span class="hljs-string">open = None</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_a(open):</span><br><span class="hljs-string">        print(&quot;---test case a: searching pytest---&quot;)</span><br><span class="hljs-string">&gt;       raise NameError                          # 模拟异常，不影响其他用例执行</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py:15: NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py::test_b PASSED                [ 66%]---test case b: searching pytest---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception1.py::test_c PASSED                [100%]---test case c: searching pytest---</span><br><span class="hljs-string">Execute teardown.</span><br><span class="hljs-string">Close your browser.</span><br><span class="hljs-string">========================= 1 failed, 2 passed, 1 warning in 0.36s ==========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-setup异常"><a href="#2-setup异常" class="headerlink" title="(2) setup异常"></a>(2) setup异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_exception2.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser and open the Baidu homepage.&quot;</span>)<br>    <span class="hljs-keyword">raise</span> NameError                                     <span class="hljs-comment"># 模拟setup异常</span><br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Execute teardown.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case a: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case b: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params"><span class="hljs-built_in">open</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test case c: searching pytest---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_exception2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py::test_a ERROR       [ 33%]Open your browser and open the Baidu homepage.</span><br><span class="hljs-string"></span><br><span class="hljs-string">test setup failed</span><br><span class="hljs-string">@pytest.fixture(scope=&quot;module&quot;)</span><br><span class="hljs-string">    def open():</span><br><span class="hljs-string">        print(&quot;Open your browser and open the Baidu homepage.&quot;)</span><br><span class="hljs-string">&gt;       raise NameError  # 模拟setup异常</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py:7: NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py::test_b ERROR       [ 66%]</span><br><span class="hljs-string">test setup failed</span><br><span class="hljs-string">@pytest.fixture(scope=&quot;module&quot;)</span><br><span class="hljs-string">    def open():</span><br><span class="hljs-string">        print(&quot;Open your browser and open the Baidu homepage.&quot;)</span><br><span class="hljs-string">&gt;       raise NameError  # 模拟setup异常</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py:7: NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py::test_c ERROR       [100%]</span><br><span class="hljs-string">test setup failed</span><br><span class="hljs-string">@pytest.fixture(scope=&quot;module&quot;)</span><br><span class="hljs-string">    def open():</span><br><span class="hljs-string">        print(&quot;Open your browser and open the Baidu homepage.&quot;)</span><br><span class="hljs-string">&gt;       raise NameError  # 模拟setup异常</span><br><span class="hljs-string">E       NameError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_exception2.py:7: NameError</span><br><span class="hljs-string">============================== 1 warning, 3 errors in 0.39s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-配合with使用"><a href="#3-配合with使用" class="headerlink" title="(3) 配合with使用"></a>(3) 配合with使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                            <span class="hljs-comment"># test_with.py</span><br><span class="hljs-keyword">import</span> smtplib<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">smtp</span>():<br>    <span class="hljs-keyword">with</span> smtplib.SMTP(<span class="hljs-string">&quot;smtp.gmail.com&quot;</span>, <span class="hljs-number">587</span>, timeout=<span class="hljs-number">5</span>) <span class="hljs-keyword">as</span> smtp:<br>        <span class="hljs-keyword">yield</span> smtp                                       <span class="hljs-comment"># smtp对象自动关闭时，with语句结束</span><br></code></pre></td></tr></table></figure><h2 id="5-4-addfinalizer终结函数"><a href="#5-4-addfinalizer终结函数" class="headerlink" title="5-4 addfinalizer终结函数"></a>5-4 addfinalizer终结函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_addfinalizer.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_addfinalizer</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Open your browser.&quot;</span>)<br>    test = <span class="hljs-string">&quot;test_addfinalizer&quot;</span>                          <span class="hljs-comment"># 前置操作setup</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fin</span>():                                          <span class="hljs-comment"># 后置操作teardown</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Close your browser.&quot;</span>)<br><br>    request.addfinalizer(fin)<br>    <span class="hljs-keyword">return</span> test                                         <span class="hljs-comment"># 返回前置操作的变量</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>(<span class="hljs-params">test_addfinalizer</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---test cases---&quot;</span>, test_addfinalizer)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_addfinalizer.py::test_case Open your browser.</span><br><span class="hljs-string">PASSED                                   [100%]---test cases--- test_addfinalizer</span><br><span class="hljs-string">Close your browser.</span><br><span class="hljs-string">============================== 1 passed, 1 warning in 0.14s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="5-5-调用fixture的3种方法"><a href="#5-5-调用fixture的3种方法" class="headerlink" title="5-5 调用fixture的3种方法"></a>5-5 调用fixture的3种方法</h2><ul><li>调用fixture的3种方法<ul><li>函数或类的方法中传fixture的函数参数名称。</li><li>用装饰器<code>@pytest.mark.usefixtures()</code>修饰。</li><li>设置fixture的参数为<code>autouse=True</code>来自动使用。</li></ul></li></ul><h4 id="1-用例fixture传参"><a href="#1-用例fixture传参" class="headerlink" title="(1) 用例fixture传参"></a>(1) 用例fixture传参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling1.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of function---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">start</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling1.py::test_a </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling1.py::TestCase::test_b </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling1.py::TestCase::test_c </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.06s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-装饰器usefixtures"><a href="#2-装饰器usefixtures" class="headerlink" title="(2) 装饰器usefixtures"></a>(2) 装饰器usefixtures</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling2.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of function---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.usefixtures(<span class="hljs-params"><span class="hljs-string">&quot;start&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">start</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.usefixtures(<span class="hljs-params"><span class="hljs-string">&quot;start&quot;</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self, start</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling2.py::test_a </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling2.py::TestCase::test_b </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [ 66%]---use case b---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling2.py::TestCase::test_c </span><br><span class="hljs-string">---start execution of function---</span><br><span class="hljs-string">PASSED                                          [100%]---use case c---</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.18s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-设置autouse-x3D-True"><a href="#3-设置autouse-x3D-True" class="headerlink" title="(3) 设置autouse&#x3D;True"></a>(3) 设置autouse&#x3D;True</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling3.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of module---&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module: %s&quot;</span> % request.module.__name__)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---start browser---&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---end of test---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_home</span>(<span class="hljs-params">request</span>):                                 <span class="hljs-comment"># 函数实现</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function: %s \n---back to home page---&quot;</span> % request.function.__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling3.py::test_a </span><br><span class="hljs-string">---start execution of module---</span><br><span class="hljs-string">module: test_calling3</span><br><span class="hljs-string">---start browser---</span><br><span class="hljs-string">function: test_a </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                          [ 50%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling3.py::test_b function: test_b </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                          [100%]---use case b---</span><br><span class="hljs-string">---end of test---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.08s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>设置autouse&#x3D;True<ul><li>start设置scope为module级别，在当前用例模块中只执行一次，<code>autouse=True</code>自动使用。</li><li>open_home设置scope为function级别，每个用例前都调用一次，<code>autouse=True</code>自动使用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_calling4.py</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;module&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\n---start execution of module---&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;module: %s&quot;</span> % request.module.__name__)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---start browser---&quot;</span>)<br><br>    <span class="hljs-keyword">yield</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---end of test---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br><span class="hljs-meta">    @pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&quot;function&quot;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_home</span>(<span class="hljs-params">self, request</span>):                       <span class="hljs-comment"># 类实现</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;function: %s \n---back to home page---&quot;</span> % request.function.__name__)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_calling4.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling4.py::TestCase::test_a </span><br><span class="hljs-string">---start execution of module---</span><br><span class="hljs-string">module: test_calling4</span><br><span class="hljs-string">---start browser---</span><br><span class="hljs-string">function: test_a </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                [ 50%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_calling4.py::TestCase::test_b </span><br><span class="hljs-string">function: test_b </span><br><span class="hljs-string">---back to home page---</span><br><span class="hljs-string">PASSED                                [100%]---use case b---</span><br><span class="hljs-string">---end of test---</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.17s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="6-自定义标记mark"><a href="#6-自定义标记mark" class="headerlink" title="6 自定义标记mark"></a>6 自定义标记mark</h1><ul><li>自定义标记mark<ul><li>自定义标记可以将一个Web项目划分为多个模块，然后指定模块名称进行执行。</li><li>APP自动化时，若想让Android与IOS共用一套代码，也可以使用标记指定名称。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mark1.py</span><br><br><br><span class="hljs-meta">@pytest.mark.a</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                           <span class="hljs-comment"># 标记test_a()为a</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_server.py&#x27;</span>, <span class="hljs-string">&#x27;-m=a&#x27;</span>])<br><br><span class="hljs-comment"># pytest -v -m a test_mark1.py</span><br><span class="hljs-string">&quot;&quot;&quot; ！！！此时的a标签为未识别标签，没有注册直接使用将弹出警告信息，不注册时仍可挑选用例。</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items / 2 deselected / 1 selected</span><br><span class="hljs-string">test_mark1.py::test_a PASSED                                      [100%]</span><br><span class="hljs-string">================================== warnings summary =======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mark1.py:4</span><br><span class="hljs-string">  ...\test_mark1.py:4: PytestUnknownMarkWarning: Unknown pytest.mark.a - is this a typo?</span><br><span class="hljs-string">  You can register custom marks to avoid this warning - for details, </span><br><span class="hljs-string">  see https://docs.pytest.org/en/stable/mark.html</span><br><span class="hljs-string">    @pytest.mark.a</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">====================== 1 passed, 2 deselected, 2 warnings in 0.04s ========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li><a href="http://localhost:4000/2022/10/31/PyTest/#1-1-%E7%94%A8%E4%BE%8B%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99">用例执行规则</a><ul><li>命令窗口下只运行用tagname标记的测试用例时，可以使用命令：<code>pytest -v -m tagname</code>。</li><li>若不想执行tagname标记的用例，文件内容对应修改，使用命令：<code>pytest -v -m &quot;not tagname&quot;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_mark2.py</span><br><br><br><span class="hljs-meta">@pytest.mark.a</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():                                           <span class="hljs-comment"># 标记test_a()为a</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_mark2.py&#x27;</span>, <span class="hljs-string">&#x27;-m=not a&#x27;</span>])<br><br><span class="hljs-comment"># pytest -v -m &quot;not a&quot; test_mark2.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================== test session starts ====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items / 1 deselected / 2 selected</span><br><span class="hljs-string">test_mark2.py::test_b PASSED                                      [ 50%] </span><br><span class="hljs-string">test_mark2.py::TestCase::test_c PASSED                            [100%]</span><br><span class="hljs-string">=================================== warnings summary ======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_mark2.py:4</span><br><span class="hljs-string">  ...\test_mark2.py:4: PytestUnknownMarkWarning: Unknown pytest.mark.a - is this a typo?  </span><br><span class="hljs-string">  You can register custom marks to avoid this warning - for details, </span><br><span class="hljs-string">  see https://docs.pytest.org/en/stable/mark.html</span><br><span class="hljs-string">    @pytest.mark.a</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">====================== 2 passed, 1 deselected, 2 warnings in 0.05s ========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-1-重写注册标签"><a href="#6-1-重写注册标签" class="headerlink" title="6-1 重写注册标签"></a>6-1 重写注册标签</h2><ul><li>重写注册标签<ul><li>根目录创建<code>conftest.py</code>文件，在文件中重写pytest_configure函数的方式可以注册标签。</li><li>函数名pytest_configure和参数config是固定的，唯一需要变更的是注册标签的名字和描述。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_configure</span>(<span class="hljs-params">config</span>):                           <span class="hljs-comment"># conftest.py</span><br>    config.addinivalue_line(<br>        <span class="hljs-string">&quot;markers&quot;</span>, <span class="hljs-string">&quot;a: a test&quot;</span><br>    )<br><br><span class="hljs-comment"># pytest -v -m a test_mark1.py                          # test_mark1.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 3 items / 2 deselected / 1 selected</span><br><span class="hljs-string">test_mark1.py::test_a PASSED                                      [100%]</span><br><span class="hljs-string">================================== warnings summary =======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">====================== 1 passed, 2 deselected, 1 warning in 0.04s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="6-2-配置注册标签"><a href="#6-2-配置注册标签" class="headerlink" title="6-2 配置注册标签"></a>6-2 配置注册标签</h2><ul><li>配置注册标签<ul><li>还有一种更加便捷的注册标签的方式，即在<code>pytest.ini</code>配置文件中进行语法配置。</li><li>同样在根目录创建<code>pytest.ini</code>文件，只需要在文件中编写如下配置内容就可以了。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Ini"><span class="hljs-section">[pytest]</span>                                                <span class="hljs-comment"># pytest.ini</span><br><br><br><span class="hljs-attr">markers</span> =<br>    a: a tests<br><br><span class="hljs-comment"># pytest -v -m &quot;not a&quot; test_mark2.py                    # test_mark2.py</span><br>&quot;&quot;&quot;             ！！！该方法便捷简单，实际自动化脚本开发时，更推荐使用。               <br>================================== test session <span class="hljs-attr">starts</span> ====================================<br>...<br>collected 3 items / 1 deselected / 2 selected<br>test_mark2.py::test_b PASSED                                      <span class="hljs-section">[ 50%]</span> <br>test_mark2.py::TestCase::test_c PASSED                            <span class="hljs-section">[100%]</span><br>=================================== warnings <span class="hljs-attr">summary</span> ======================================<br>...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from <br>&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working<br>    return isinstance(x, collections.Callable)<br><br>-- Docs: https://docs.pytest.org/en/stable/<span class="hljs-attr">warnings.html</span><br>====================== 2 passed, 1 deselected, 1 warning in <span class="hljs-attr">0.04s</span> =========================<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><h2 id="6-3-灵活挑选用例"><a href="#6-3-灵活挑选用例" class="headerlink" title="6-3 灵活挑选用例"></a>6-3 灵活挑选用例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[pytest]                        # pytest.ini</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">markers =</span><br><span class="hljs-string">    a: a tests</span><br><span class="hljs-string">    b: b tests</span><br><span class="hljs-string">    function: function tests</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> pytest                   <span class="hljs-comment"># test_mark3.py</span><br><br><br><span class="hljs-meta">@pytest.mark.a                  </span><span class="hljs-comment"># 每个测试函数可以自定义多个标签</span><br><span class="hljs-meta">@pytest.mark.function           </span><span class="hljs-comment"># 实际开发中某些用例既可用作功能用例，也可以用作冒烟测试用例</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case a---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.b</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case b---&quot;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.function</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCase</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;---use case c---&quot;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">pytest -v -m a test_mark3.py</span><br><span class="hljs-string">pytest -v -m &quot;not a&quot; test_mark3.py</span><br><span class="hljs-string">pytest -v -m &quot;a and b&quot; test_mark3.py</span><br><span class="hljs-string">pytest -v -m &quot;a or function&quot; test_mark3.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="7-用例的参数化设置"><a href="#7-用例的参数化设置" class="headerlink" title="7 用例的参数化设置"></a>7 用例的参数化设置</h1><ul><li>用例的参数化设置<ul><li>参数化方式有两种：parametrize参数化和fixture参数化。</li><li>使用<code>@pytest.mark.parametrize</code>装饰器实现用例的参数化。</li><li>parametrize还可以结合内置函数，标记测试实例进行参数化。</li></ul></li></ul><h2 id="7-1-parametrize"><a href="#7-1-parametrize" class="headerlink" title="7-1 parametrize"></a>7-1 parametrize</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param1.py</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;test_input, expected&quot;</span>, [(<span class="hljs-params"><span class="hljs-string">&#x27;3+3&#x27;</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;2+4&#x27;</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;6*1&#x27;</span>, <span class="hljs-number">6</span></span>)]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_eval</span>(<span class="hljs-params">test_input, expected</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">eval</span>(test_input) == expected<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param1.py::test_eval[3+3-6] PASSED                                  [ 33%]</span><br><span class="hljs-string">test_param1.py::test_eval[2+4-6] PASSED                                  [ 66%]</span><br><span class="hljs-string">test_param1.py::test_eval[6*1-6] PASSED                                  [100%]</span><br><span class="hljs-string">============================== 3 passed, 1 warning in 0.09s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-结合内置函数"><a href="#1-结合内置函数" class="headerlink" title="(1) 结合内置函数"></a>(1) 结合内置函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param2.py</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;test_input, expected&quot;</span>,</span></span><br><span class="hljs-params"><span class="hljs-meta">                         [(<span class="hljs-params"><span class="hljs-string">&#x27;3+3&#x27;</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-string">&#x27;2+4&#x27;</span>, <span class="hljs-number">6</span></span>), pytest.param(<span class="hljs-params"><span class="hljs-string">&#x27;6*1&#x27;</span>, <span class="hljs-number">6</span>, marks=pytest.mark.xfail</span>)]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_eval</span>(<span class="hljs-params">test_input, expected</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">eval</span>(test_input) == expected<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param2.py::test_eval[3+3-6] PASSED                                  [ 33%]</span><br><span class="hljs-string">test_param2.py::test_eval[2+4-6] PASSED                                  [ 66%]</span><br><span class="hljs-string">test_param2.py::test_eval[6*1-6] XPASS                                   [100%]</span><br><span class="hljs-string">========================= 2 passed, 1 xpassed, 1 warning in 0.05s =========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-参数组合使用"><a href="#2-参数组合使用" class="headerlink" title="(2) 参数组合使用"></a>(2) 参数组合使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param3.py</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;x&#x27;</span>, [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]</span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;y&#x27;</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_case</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Test data: x---%s, y---%s&quot;</span> % (x, y))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param3.py::test_case[2-0] PASSED                   [ 25%]Test data: x---0, y---2</span><br><span class="hljs-string">test_param3.py::test_case[2-1] PASSED                   [ 50%]Test data: x---1, y---2</span><br><span class="hljs-string">test_param3.py::test_case[3-0] PASSED                   [ 75%]Test data: x---0, y---3</span><br><span class="hljs-string">test_param3.py::test_case[3-1] PASSED                   [100%]Test data: x---1, y---3</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.10s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-函数传参操作"><a href="#3-函数传参操作" class="headerlink" title="(3) 函数传参操作"></a>(3) 函数传参操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_param4.py</span><br><br>info = [(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>), (<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)]              <span class="hljs-comment"># 测试登录数据</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">username, password</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Account: %s&#x27;</span> % username)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s&#x27;</span> % password)<br>    <span class="hljs-keyword">if</span> password:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;username, password&#x27;</span>, info</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">username, password</span>):<br>    result = login(username, password)<br>    <span class="hljs-keyword">assert</span> result == <span class="hljs-literal">True</span>, <span class="hljs-string">&#x27;Reason for failure: password is empty.&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_param4.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py::test_login[admin-12345] PASSED                      [ 50%]Account: admin</span><br><span class="hljs-string">Password: 12345</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py::test_login[admin-] FAILED                           [100%]Account: admin</span><br><span class="hljs-string">Password: </span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py:14 (test_login[admin-])</span><br><span class="hljs-string">False != True</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :True</span><br><span class="hljs-string">Actual   :False</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">username = &#x27;admin&#x27;, password = &#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @pytest.mark.parametrize(&#x27;username, password&#x27;, info)</span><br><span class="hljs-string">    def test_login(username, password):</span><br><span class="hljs-string">        result = login(username, password)</span><br><span class="hljs-string">&gt;       assert result == True, &#x27;Reason for failure: password is empty.&#x27;</span><br><span class="hljs-string">E       AssertionError: Reason for failure: password is empty.</span><br><span class="hljs-string">E       assert False == True</span><br><span class="hljs-string">E         +False</span><br><span class="hljs-string">E         -True</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_param4.py:18: AssertionError</span><br><span class="hljs-string">========================= 1 failed, 1 passed, 1 warning in 0.26s ==========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7-2-fixture传参"><a href="#7-2-fixture传参" class="headerlink" title="7-2 fixture传参"></a>7-2 fixture传参</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture1.py</span><br><br>info = [<span class="hljs-string">&#x27;admin1&#x27;</span>, <span class="hljs-string">&#x27;admin2&#x27;</span>]                             <span class="hljs-comment"># 测试账号数据</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    user = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login account: %s&#x27;</span> % user)<br>    <span class="hljs-keyword">return</span> user<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;login&#x27;</span>, info, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):                                  <span class="hljs-comment"># indirect=True声明login是一个函数</span><br>    value = login<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return value of login in the test case: %s&#x27;</span> % value)<br>    <span class="hljs-keyword">assert</span> value != <span class="hljs-string">&#x27;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture1.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture1.py::test_login[admin1] Login account: admin1</span><br><span class="hljs-string">PASSED                              [ 50%]Return value of login in the test case: admin1</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture1.py::test_login[admin2] Login account: admin2</span><br><span class="hljs-string">PASSED                              [100%]Return value of login in the test case: admin2</span><br><span class="hljs-string">============================== 2 passed, 1 warning in 0.13s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-传两个参数"><a href="#1-传两个参数" class="headerlink" title="(1) 传两个参数"></a>(1) 传两个参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture2.py</span><br><br>info = [&#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin1&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;12345&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin2&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;]         <span class="hljs-comment"># 测试登录数据，传多个参数用字典存储</span><br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">request</span>):<br>    user = request.param[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = request.param[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login account: %s&#x27;</span> % user)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s&#x27;</span> % password)<br>    <span class="hljs-keyword">if</span> password:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;login&#x27;</span>, info, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">login</span>):                                  <span class="hljs-comment"># 登录用例</span><br>    value = login<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Return value of login in the test case: %s&#x27;</span> % value)<br>    <span class="hljs-keyword">assert</span> value, <span class="hljs-string">&#x27;Failure reason: password is empty.&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture2.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 2 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py::test_login[login0] Login account: admin1</span><br><span class="hljs-string">Password: 12345</span><br><span class="hljs-string">PASSED                              [ 50%]Return value of login in the test case: True</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py::test_login[login1] Login account: admin2</span><br><span class="hljs-string">Password: </span><br><span class="hljs-string">FAILED                              [100%]Return value of login in the test case: False</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py:18 (test_login[login1])</span><br><span class="hljs-string">login = False</span><br><span class="hljs-string"></span><br><span class="hljs-string">    @pytest.mark.parametrize(&#x27;login&#x27;, info, indirect=True)</span><br><span class="hljs-string">    def test_login(login):                              # 登录用例</span><br><span class="hljs-string">        value = login</span><br><span class="hljs-string">        print(&#x27;Return value of login in the test case: %s&#x27; % value)</span><br><span class="hljs-string">&gt;       assert value, &#x27;Failure reason: password is empty.&#x27;</span><br><span class="hljs-string">E       AssertionError: Failure reason: password is empty.</span><br><span class="hljs-string">E       assert False</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture2.py:23: AssertionError</span><br><span class="hljs-string">========================= 1 failed, 1 passed, 1 warning in 0.31s ==========================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-多个fixture"><a href="#2-多个fixture" class="headerlink" title="(2) 多个fixture"></a>(2) 多个fixture</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_fixture3.py</span><br><br>test_username = [<span class="hljs-string">&#x27;admin1&#x27;</span>, <span class="hljs-string">&#x27;admin2&#x27;</span>]                    <span class="hljs-comment"># 用例组合是2个参数的个数相乘：2*2</span><br>test_password = [<span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-string">&#x27;12346&#x27;</span>]<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_username</span>(<span class="hljs-params">request</span>):<br>    username = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login account: %s&#x27;</span> % username)<br>    <span class="hljs-keyword">return</span> username<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;module&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">input_password</span>(<span class="hljs-params">request</span>):<br>    password = request.param<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Password: %s&#x27;</span> % password)<br>    <span class="hljs-keyword">return</span> password<br><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;input_username&#x27;</span>, test_username, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&#x27;input_password&#x27;</span>, test_password, indirect=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_login</span>(<span class="hljs-params">input_username, input_password</span>):<br>    u = input_username<br>    p = input_password<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test data: u---%s, p---%s&#x27;</span> % (u, p))<br>    <span class="hljs-keyword">assert</span> p<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_fixture3.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 4 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12345-admin1] Login account: admin1</span><br><span class="hljs-string">Password: 12345</span><br><span class="hljs-string">PASSED                        [ 25%]Test data: u---admin1, p---12345</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12345-admin2] Login account: admin2</span><br><span class="hljs-string">PASSED                        [ 50%]Test data: u---admin2, p---12345</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12346-admin2] Password: 12346</span><br><span class="hljs-string">PASSED                        [ 75%]Test data: u---admin2, p---12346</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_fixture3.py::test_login[12346-admin1] Login account: admin1</span><br><span class="hljs-string">PASSED                        [100%]Test data: u---admin1, p---12346</span><br><span class="hljs-string">============================== 4 passed, 1 warning in 0.18s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="8-命令行参数的配置"><a href="#8-命令行参数的配置" class="headerlink" title="8 命令行参数的配置"></a>8 命令行参数的配置</h1><ul><li>命令行参数的配置<ul><li>在<code>conftest.py</code>文件中添加命令行选项，命令行传入参数<code>--cmdopt</code>，用例需用到时即调用cmdpot函数。</li><li>配置文件<code>pytest.ini</code>也可以改变pytest的运行方式，是一个固定文件，读取配置信息，按指定方式运行。</li><li>PyTest框架的部分文件说明<ul><li><code>conftest.py</code>：参数用例的一些fixture配置。</li><li><code>setup.cfg</code>：ini格式文件，影响<code>setup.py</code>的行为。</li><li><code>pytest.ini</code>：主配置文件，改变PyTest的默认行为。</li><li><code>tox.ini</code>：与<code>pytest.ini</code>类似，使用tox工具时才用。</li><li><code>__init__.py</code>：识别该文件所在的文件夹为Python的package包。</li></ul></li></ul></li></ul><h2 id="8-1-conftest-py"><a href="#8-1-conftest-py" class="headerlink" title="8-1 conftest.py"></a>8-1 conftest.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># conftest.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_addoption</span>(<span class="hljs-params">parser</span>):<br>    parser.addoption(<span class="hljs-string">&#x27;--cmdopt&#x27;</span>,<br>                     action=<span class="hljs-string">&#x27;store&#x27;</span>,<br>                     default=<span class="hljs-string">&#x27;type1&#x27;</span>,<br>                     <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;myoption: type1 or type2&#x27;</span>)<br><br><br><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmdopt</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> request.config.getoption(<span class="hljs-string">&#x27;--cmdopt&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-不带参数执行"><a href="#1-不带参数执行" class="headerlink" title="(1) 不带参数执行"></a>(1) 不带参数执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_sample.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_answer</span>(<span class="hljs-params">cmdopt</span>):<br>    <span class="hljs-keyword">if</span> cmdopt == <span class="hljs-string">&#x27;type1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---1---&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> cmdopt == <span class="hljs-string">&#x27;type2&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---2---&#x27;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_sample.py&#x27;</span>])<br><br><span class="hljs-comment"># pytest -s test_sample.py                              # 不带参数执行，默认传type1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py ---1---</span><br><span class="hljs-string">F</span><br><span class="hljs-string"></span><br><span class="hljs-string">====================================== FAILURES ===========================================</span><br><span class="hljs-string">_____________________________________ test_answer _________________________________________</span><br><span class="hljs-string">cmdopt = &#x27;type1&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_answer(cmdopt):</span><br><span class="hljs-string">        if cmdopt == &#x27;type1&#x27;:</span><br><span class="hljs-string">            print(&#x27;---1---&#x27;)</span><br><span class="hljs-string">        elif cmdopt == &#x27;type2&#x27;:</span><br><span class="hljs-string">            print(&#x27;---2---&#x27;)</span><br><span class="hljs-string">&gt;       assert 0</span><br><span class="hljs-string">E       assert 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py:9: AssertionError</span><br><span class="hljs-string">=================================== warnings summary ======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">================================ short test summary info ==================================</span><br><span class="hljs-string">FAILED test_sample.py::test_answer - assert 0</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.42s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-带上参数执行"><a href="#2-带上参数执行" class="headerlink" title="(2) 带上参数执行"></a>(2) 带上参数执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># pytest -s test_sample.py --cmdopt=type2               # 带上参数执行</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">================================= test session starts =====================================</span><br><span class="hljs-string">...</span><br><span class="hljs-string">collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py ---2---</span><br><span class="hljs-string">F</span><br><span class="hljs-string"></span><br><span class="hljs-string">====================================== FAILURES ===========================================</span><br><span class="hljs-string">_____________________________________ test_answer _________________________________________</span><br><span class="hljs-string">cmdopt = &#x27;type2&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_answer(cmdopt):</span><br><span class="hljs-string">        if cmdopt == &#x27;type1&#x27;:</span><br><span class="hljs-string">            print(&#x27;---1---&#x27;)</span><br><span class="hljs-string">        elif cmdopt == &#x27;type2&#x27;:</span><br><span class="hljs-string">            print(&#x27;---2---&#x27;)</span><br><span class="hljs-string">&gt;       assert 0</span><br><span class="hljs-string">E       assert 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_sample.py:9: AssertionError</span><br><span class="hljs-string">=================================== warnings summary ======================================</span><br><span class="hljs-string">...DeprecationWarning: Using or importing the ABCs from &#x27;collections&#x27; instead of from </span><br><span class="hljs-string">&#x27;collections.abc&#x27; is deprecated since Python 3.3, and in 3.10 it will stop working</span><br><span class="hljs-string">    return isinstance(x, collections.Callable)</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- Docs: https://docs.pytest.org/en/stable/warnings.html</span><br><span class="hljs-string">================================ short test summary info ==================================</span><br><span class="hljs-string">FAILED test_sample.py::test_answer - assert 0</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 0.28s ===============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="8-2-pytest-ini配置"><a href="#8-2-pytest-ini配置" class="headerlink" title="8-2 pytest.ini配置"></a>8-2 pytest.ini配置</h2><ul><li>pytest.ini配置<ul><li>一个项目有一个<code>pytest.ini</code>文件即可，放在项目的根目录下。</li><li>命令窗口下使用<code>pytest --help</code>指令，可以查看到<code>pytest.ini</code>文件中的设置选项。</li><li><code>pytest.ini</code>文件不能带中文注释，否则运行将报错：<code>UnicodeDecodeError: &#39;gbk&#39;...illegal multibyte</code>。</li><li>addopts参数默认更改命令行选项，例如：执行完用例需要生成报告，使用命令<code>pytest --html=report.html</code>。</li><li>将生成报告的命令加入<code>pytest.ini</code>文件中，下次直接执行<code>pytest</code>指令，PyTest就会默认带上这些新增的参数。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Ini"><span class="hljs-section">[pytest]</span>                                                <span class="hljs-comment"># pytest.ini，放在项目的根目录下</span><br><br><br>markers =                                               <span class="hljs-comment"># 自定义mark标记的配置注册</span><br>    a: a tests<br>    b: b tests<br>    function: Function tests<br>    webtest: Run the webtest case<br><br><br><span class="hljs-attr">addopts</span> = --html=report.html                            <span class="hljs-comment"># 执行完用例生成报告，需事先安装好插件</span><br></code></pre></td></tr></table></figure><ul><li><a href="https://stitch-top.github.io/2022/01/11/testing/testing01-pytest-ce-shi-kuang-jia-yi/#6-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E8%AE%B0mark">mark标记</a><ul><li>使用mark标记功能，对后续分类测试用例十分有用，将自定义标记写入<code>pytest.ini</code>文件中，方便管理。</li><li>命令窗口对应<code>pytest.ini</code>文件所在的文件夹下，输入<code>pytest --markers</code>命令可以查看到已定义的标记。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                           <span class="hljs-comment"># test_xpass.py</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---use case a---&#x27;</span>)<br><br><br><span class="hljs-meta">@pytest.mark.xfail()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    y = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-keyword">assert</span> x == y<br><br><br><span class="hljs-meta">@pytest.mark.xfail()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_c</span>():<br>    x = <span class="hljs-string">&#x27;hello&#x27;</span><br>    y = <span class="hljs-string">&#x27;hello world&#x27;</span><br>    <span class="hljs-keyword">assert</span> x != y<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pytest.main([<span class="hljs-string">&#x27;-s&#x27;</span>, <span class="hljs-string">&#x27;test_xpass.py&#x27;</span>])<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 3 items</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py::test_a PASSED                                        [ 33%]---use case a---</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py::test_b XFAIL                                         [ 66%]</span><br><span class="hljs-string">@pytest.mark.xfail()</span><br><span class="hljs-string">    def test_b():</span><br><span class="hljs-string">        x = &#x27;hello&#x27;</span><br><span class="hljs-string">        y = &#x27;hello world&#x27;</span><br><span class="hljs-string">&gt;       assert x == y</span><br><span class="hljs-string">E       AssertionError: assert &#x27;hello&#x27; == &#x27;hello world&#x27;</span><br><span class="hljs-string">E         - hello world</span><br><span class="hljs-string">E         + hello</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py:13: AssertionError</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_xpass.py::test_c XPASS                                         [100%]</span><br><span class="hljs-string">=================== 1 passed, 1 xfailed, 1 xpassed, 1 warning in 0.27s ====================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>禁用xpass<ul><li>设置<code>xfail_strict = true</code>可以让标记为<code>@pytest.mark.xfail</code>但实际通过的用例被报告为失败。</li><li>在<code>test_xpass.py</code>实例中，test_b和test_c都标记为失败，这里希望b和c用例不用执行就显示xfail。</li></ul></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Ini"><span class="hljs-section">[pytest]</span>                                                <span class="hljs-comment"># pytest.ini，禁用XPASS</span><br><br><br><span class="hljs-attr">xfail_strict</span> = <span class="hljs-literal">true</span>                                     <span class="hljs-comment"># 再次执行test_xpass.py，查看结果</span><br><br>&quot;&quot;&quot;                    ！！！test_c的XPASS被强制性标记为FAILED。<br>=================================== test session <span class="hljs-attr">starts</span> ===================================<br>collecting ... collected 3 items<br><br>test_xpass.py::test_a PASSED                                        <span class="hljs-section">[ 33%]</span>---use case a---<br><br>test_xpass.py::test_b XFAIL                                         <span class="hljs-section">[ 66%]</span><br>@pytest.mark.xfail()<br>    def test_b():<br>        <span class="hljs-attr">x</span> = <span class="hljs-string">&#x27;hello&#x27;</span><br>        <span class="hljs-attr">y</span> = <span class="hljs-string">&#x27;hello world&#x27;</span><br>&gt;       assert <span class="hljs-attr">x</span> == y<br>E       AssertionError: assert <span class="hljs-attr">&#x27;hello&#x27;</span> == <span class="hljs-string">&#x27;hello world&#x27;</span><br>E         - hello world<br>E         + hello<br><br>test_xpass.py:13: AssertionError<br><br>test_xpass.py::test_c FAILED                                        <span class="hljs-section">[100%]</span><br>test_xpass.py:15 (test_c)<br><span class="hljs-section">[XPASS(strict)]</span> <br>==================== 1 failed, 1 passed, 1 xfailed, 1 warning in <span class="hljs-attr">0.26s</span> ====================<br>&quot;&quot;&quot;<br></code></pre></td></tr></table></figure><h1 id="9-生成html测试报告"><a href="#9-生成html测试报告" class="headerlink" title="9 生成html测试报告"></a>9 生成html测试报告</h1><ul><li>生成html测试报告<ul><li>pytest-html：PyTest用于生成测试结果的html报告插件，<code>pip install pytest-html</code>进行安装。<ul><li>执行方法：<code>pytest --html=report.html</code>，当前目录中生成<code>report.html</code>报告文件。</li><li>指定执行某个<code>.py</code>文件生成报告：<code>pytest test_filename.py --html=report.html</code>。</li><li>生成报告到当前文件夹的report目录中：<code>pytest test_filename.py --html=./report/report.html</code>。</li><li>上述方法生成的报告，css独立，分享报告时样式将丢失，为更好展示报告，可将css样式合并到html中。</li><li>让<code>report.html</code>报告独立显示，可使用命令：<code>pytest --html=report.html --self-contained-html</code>。</li><li>用例执行失败重跑需依赖pytest-rerunfailures插件，命令安装：<code>pip install pytest-rerunfailures</code>。<ul><li>重跑n次：<code>pytest --reruns n</code>，失败才重跑，成功用例使用无效。</li><li>重跑n次，每次间隔m秒：<code>pytest --reruns n --reruns-delay m</code>。</li></ul></li></ul></li><li>allure：report框架，支持Python的PyTest、Java的JUnit、TestNG等框架，可以集成到Jenkins上。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pytest                                          <span class="hljs-comment"># conftest.py，用例报错时进行截图的配置代码</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>driver: webdriver.Firefox = <span class="hljs-literal">None</span>                       <span class="hljs-comment"># 需用到浏览器插件，提前配置好</span><br><br><br><span class="hljs-meta">@pytest.mark.hookwrapper</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pytest_runtest_makereport</span>(<span class="hljs-params">item</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    When a use case fails to execute, a screenshot is automatically displayed in the report.</span><br><span class="hljs-string">    :param item:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    pytest_html = item.config.pluginmanager.getplugin(<span class="hljs-string">&#x27;html&#x27;</span>)<br>    outcome = <span class="hljs-keyword">yield</span><br>    report = outcome.get_result()<br>    extra = <span class="hljs-built_in">getattr</span>(report, <span class="hljs-string">&#x27;extra&#x27;</span>, [])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type item: &quot;</span>, <span class="hljs-built_in">type</span>(item))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;type report: &quot;</span>, <span class="hljs-built_in">type</span>(report))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;extra:&quot;</span>, extra)<br><br>    <span class="hljs-keyword">if</span> report.when == <span class="hljs-string">&#x27;call&#x27;</span> <span class="hljs-keyword">or</span> report.when == <span class="hljs-string">&#x27;setup&#x27;</span>:<br>        xfail = <span class="hljs-built_in">hasattr</span>(report, <span class="hljs-string">&#x27;wasfail&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (report.skipped <span class="hljs-keyword">and</span> xfail) <span class="hljs-keyword">or</span> (report.failed <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> xfail):<br>            file_name = report.nodeid.replace(<span class="hljs-string">&quot;::&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>) + <span class="hljs-string">&quot;.png&quot;</span><br>            screen_img = _capter_screenshot()<br>            <span class="hljs-keyword">if</span> file_name:<br>                html = <span class="hljs-string">&#x27;&lt;div&gt;&lt;img src=&quot;data:image/png;base64,%s&quot; \</span><br><span class="hljs-string">                        alt=&quot;screenshot&quot; style=&quot;width:600px;height:300px;&quot;&#x27;</span> \<br>                       <span class="hljs-string">&#x27;onclick=&quot;window.open(this.src)&quot; align=&quot;right&quot;/&gt;&lt;/div&gt;&#x27;</span> % screen_img<br>                extra.append(pytest_html.extras.html(html))<br>        report.extra = extra<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_capter_screenshot</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Screenshots are saved as base64 and displayed in the html report.</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> driver.get_screenshot_as_base64()<br><br><br><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">scope=<span class="hljs-string">&#x27;session&#x27;</span>, autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">browser</span>():<br>    <span class="hljs-keyword">global</span> driver<br>    <span class="hljs-keyword">if</span> driver <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        driver = webdriver.Firefox()<br>    <span class="hljs-keyword">return</span> driver<br><br><span class="hljs-comment">###########################################################################################</span><br><span class="hljs-keyword">import</span> time                                            <span class="hljs-comment"># test_screenshot.py</span><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_get_title</span>(<span class="hljs-params">browser</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :type browser: webdriver.firefox</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    browser.get(<span class="hljs-string">&quot;https://stitch-top.github.io/&quot;</span>)       <span class="hljs-comment"># GitHub网站访问较慢</span><br>    time.sleep(<span class="hljs-number">5</span>)<br>    t = browser.title<br>    <span class="hljs-keyword">assert</span> t == <span class="hljs-string">&quot;Stitch.top&quot;</span>                           <span class="hljs-comment"># &quot;Dr.626&quot;</span><br>    browser.close()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">=================================== test session starts ===================================</span><br><span class="hljs-string">collecting ... collected 1 item</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_screenshot.py::test_get_title type item:  &lt;class &#x27;_pytest.python.Function&#x27;&gt;</span><br><span class="hljs-string">type report:  &lt;class &#x27;_pytest.reports.TestReport&#x27;&gt;</span><br><span class="hljs-string">extra: []</span><br><span class="hljs-string">type item:  &lt;class &#x27;_pytest.python.Function&#x27;&gt;</span><br><span class="hljs-string">type report:  &lt;class &#x27;_pytest.reports.TestReport&#x27;&gt;</span><br><span class="hljs-string">extra: []</span><br><span class="hljs-string">FAILED                                                  [100%]</span><br><span class="hljs-string">test_screenshot.py:4 (test_get_title)</span><br><span class="hljs-string">&#x27;Dr.626&#x27; != &#x27;Stitch.top&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Expected :&#x27;Stitch.top&#x27;</span><br><span class="hljs-string">Actual   :&#x27;Dr.626&#x27;</span><br><span class="hljs-string">&lt;Click to see difference&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">browser = &lt;selenium.webdriver.firefox.webdriver.WebDriver (session=&quot;7b59821c-6f12-45c5-b952-d00e512a9a2c&quot;)&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    def test_get_title(browser):</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        :<span class="hljs-built_in">type</span> browser: webdriver.firefox<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        browser.get(&quot;https://stitch-top.github.io/&quot;)</span><br><span class="hljs-string">        time.sleep(5)</span><br><span class="hljs-string">        t = browser.title</span><br><span class="hljs-string">&gt;       assert t == &quot;Stitch.top&quot;                       # &quot;Dr.626&quot;</span><br><span class="hljs-string">E       AssertionError: assert &#x27;Dr.626&#x27; == &#x27;Stitch.top&#x27;</span><br><span class="hljs-string">E         - Stitch.top</span><br><span class="hljs-string">E         + Dr.626</span><br><span class="hljs-string"></span><br><span class="hljs-string">test_screenshot.py:12: AssertionError</span><br><span class="hljs-string">type item:  &lt;class &#x27;_pytest.python.Function&#x27;&gt;</span><br><span class="hljs-string">type report:  &lt;class &#x27;_pytest.reports.TestReport&#x27;&gt;</span><br><span class="hljs-string">extra: []</span><br><span class="hljs-string">============================== 1 failed, 1 warning in 16.11s ==============================</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>测试框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Pytest</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium</title>
    <link href="/2023/01/08/ce-shi-kuang-jia/tf01-selenium/"/>
    <url>/2023/01/08/ce-shi-kuang-jia/tf01-selenium/</url>
    
    <content type="html"><![CDATA[<p>Selenium提供了一个简单的API，使用WebDriver来编写校验测试，通过API可直观地使用Selenium WebDriver的所有功能。</p><span id="more"></span><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><ul><li>概念<ul><li><a href="https://www.selenium.dev/zh-cn/documentation/">官方文档</a>，PyPI的官方库支持下载Selenium，命令安装：<code>pip install selenium</code>。</li><li>各浏览器驱动<ul><li>Firefox：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a>。</li><li>Chrome：<a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a>。</li><li>Edge：<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver</a>。</li><li>下载解压驱动，将其复制到Python的安装目录中，与<code>python.exe</code>同一文件夹位置。</li></ul></li><li>使用Edge驱动报错<ul><li>报错信息：<code>Message: &#39;MicrosoftWebDriver.exe&#39; executable needs to be in Path</code>。</li><li>驱动版本正确，路径也已加，则将驱动名msedgedriver.exe改为MicrosoftWebDriver.exe。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># web_driver.py</span><br><br>driver = webdriver.Edge()<br><span class="hljs-comment"># driver = webdriver.Chrome()</span><br><span class="hljs-comment"># driver = webdriver.Firefox()                          # 初始化一个火狐浏览器实例</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)                              <span class="hljs-comment"># 设置隐式时间等待</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)                     <span class="hljs-comment"># 通过get方法打开百度</span><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br><span class="hljs-comment"># driver.close()                                        # close只会关闭一个标签页</span><br></code></pre></td></tr></table></figure><h1 id="2-定位元素"><a href="#2-定位元素" class="headerlink" title="2 定位元素"></a>2 定位元素</h1><ul><li>定位元素<ul><li>定位单个元素：公共方法。<ul><li><code>find_element_by_id</code>、<code>find_element_by_name</code>。</li><li><code>find_element_by_xpath</code>、<code>find_element_by_tag_name</code>。</li><li><code>find_element_by_class_name</code>、<code>find_element_by_css_selector</code>。</li><li><code>find_element_by_link_text</code>、<code>find_element_by_partial_link_text</code>。</li></ul></li><li>定位一组元素：返回一个List列表，公共方法。<ul><li><code>find_elements_by_id</code>、<code>find_elements_by_name</code>。</li><li><code>find_elements_by_xpath</code>、<code>find_elements_by_tag_name</code>。</li><li><code>find_elements_by_class_name</code>、<code>find_elements_by_css_selector</code>。</li><li><code>find_elements_by_link_text</code>、<code>find_elements_by_partial_link_text</code>。</li></ul></li><li>find_element和find_elements：私有方法。<ul><li>调用这两个私有方法，通过By声明定位，传入对应定位方法的定位参数。</li><li>使用前先导入模块：<code>from selenium.webdriver.common.by import By</code>。</li><li>两参数分别是定位类型和定位值：<code>driver.find_element(By.ID, &#39;kw&#39;)</code>。<ul><li><code>ID = &quot;id&quot;</code>、<code>NAME = &quot;name&quot;</code>。</li><li><code>XPATH = &quot;xpath&quot;</code>、<code>TAG_NAME = &quot;tag name&quot;</code>。</li><li><code>CLASS_NAME = &quot;class name&quot;</code>、<code>CSS_SELECTOR = &quot;css selector&quot;</code>。</li><li><code>LINK_TEXT = &quot;link text&quot;</code>、<code>PARTIAL_LINK_TEXT = &quot;partial link text&quot;</code>。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># positioning_elements.py</span><br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)                              <span class="hljs-comment"># 设置隐式时间等待</span><br>driver.get(<span class="hljs-string">r&quot;..\html\location_id.html&quot;</span>)                 <span class="hljs-comment"># 路径需要补充完整</span><br>element_id = driver.find_element_by_id(<span class="hljs-string">&#x27;loginForm&#x27;</span>)<br><span class="hljs-built_in">print</span>(element_id)<br><br>driver.get(<span class="hljs-string">r&quot;..\html\location_name.html&quot;</span>)<br>element_name1 = driver.find_element_by_name(<span class="hljs-string">&#x27;username&#x27;</span>)<br>element_name2 = driver.find_element_by_name(<span class="hljs-string">&#x27;password&#x27;</span>)<br>element_name3 = driver.find_element_by_name(<span class="hljs-string">&#x27;continue&#x27;</span>)<br><span class="hljs-built_in">print</span>(element_name1)<br><span class="hljs-built_in">print</span>(element_name2)<br><span class="hljs-built_in">print</span>(element_name3)<br><br>driver.get(<span class="hljs-string">r&quot;..\html\location_xpath.html&quot;</span>)<br>element_xpath = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;loginForm&quot;]/div[1]/a[2]&#x27;</span>)<br><span class="hljs-built_in">print</span>(element_xpath)<br><br>driver.get(<span class="hljs-string">r&quot;..\html\location_tag.html&quot;</span>)<br>element_tag = driver.find_element_by_tag_name(<span class="hljs-string">&#x27;h3&#x27;</span>)<br><span class="hljs-built_in">print</span>(element_tag)<br><br>driver.get(<span class="hljs-string">r&quot;..\html\location_class.html&quot;</span>)<br>element_class = driver.find_element_by_class_name(<span class="hljs-string">&#x27;content&#x27;</span>)<br><span class="hljs-built_in">print</span>(element_class)<br><br>driver.get(<span class="hljs-string">r&quot;..\html\location_css.html&quot;</span>)<br>element_css = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.content&quot;</span>)<br><span class="hljs-built_in">print</span>(element_css)<br><br>driver.get(<span class="hljs-string">r&quot;..\html\location_link.html&quot;</span>)<br>element_link1 = driver.find_element_by_link_text(<span class="hljs-string">&#x27;首页&#x27;</span>)<br>element_link2 = driver.find_element_by_partial_link_text(<span class="hljs-string">&#x27;关&#x27;</span>)<br><span class="hljs-built_in">print</span>(element_link1)<br><span class="hljs-built_in">print</span>(element_link2)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="2-1-ID"><a href="#2-1-ID" class="headerlink" title="2-1 ID"></a>2-1 ID</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位元素ID<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_id(&#x27;loginForm&#x27;)，找不到元素会抛出NoSuchElementException异常 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Name"><a href="#2-2-Name" class="headerlink" title="2-2 Name"></a>2-2 Name</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位元素Name<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;清除&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_name(&#x27;username&#x27;) --&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_name(&#x27;password&#x27;) --&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_name(&#x27;continue&#x27;) --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 找不到元素会抛出NoSuchElementException异常 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-3-XPath"><a href="#2-3-XPath" class="headerlink" title="2-3 XPath"></a>2-3 XPath</h2><ul><li>XPath<ul><li>注意：该定位方式在Selenium版本4.x.x已弃用，若要使用，需回退到4.0.0之前的版本。</li><li>索引，当前层级下第1个input标签：<code>find_element_by_xpath(&quot;//input[1]&quot;)</code>。</li><li>元素属性定位<ul><li>特定属性名<code>@属性名</code>：<code>find_element_by_xpath(&quot;//form[@id]&quot;)</code>。</li><li><code>@属性名=&quot;属性值&quot;</code>：<code>find_element_by_xpath(&quot;//form[@id=&#39;loginForm&#39;]&quot;)</code>。</li><li>任意属性名<code>@*=&quot;属性值&quot;</code>：<code>find_element_by_xpath(&quot;//input[@*=&#39;username&#39;]&quot;)</code>。</li><li>多属性结合<ul><li><code>find_element_by_xpath(&quot;//input[@name=&#39;continue&#39;][@type=&#39;submit&#39;]&quot;)</code>。</li><li><code>find_element_by_xpath(&quot;//input[@name=&#39;continue&#39; or @type=&#39;submit&#39;]&quot;)</code>。</li><li><code>find_element_by_xpath(&quot;//input[@name=&#39;continue&#39; and @type=&#39;submit&#39;]&quot;)</code>。</li></ul></li></ul></li><li>路径定位<ul><li>相对路径<code>//</code>：<code>find_element_by_xpath(&quot;//form&quot;)</code>。</li><li>绝对路径<code>/</code>：<code>find_element_by_xpath(&quot;/html/body/form&quot;)</code>。</li><li>当前路径<code>.</code>：<code>find_element_by_xpath(&quot;//form/.&quot;)</code>，等同于<code>//form</code>。</li><li>上级路径<code>..</code>：<code>find_element_by_xpath(&quot;//form/input[1]/..&quot;)</code>，等同于<code>//form</code>。</li></ul></li><li>函数定位<ul><li><code>last()</code>：<code>find_element_by_xpath(&quot;//input[last()]&quot;)</code>。</li><li><code>text()</code>：<code>find_element_by_xpath(&quot;//a[text()=&#39;Mouclick&#39;]&quot;)</code>。</li><li><code>contains()</code>：<code>find_element_by_xpath(&quot;//input[contains(@type, &#39;submit&#39;)]&quot;)</code>。</li><li><code>starts-with()</code>：<code>find_element_by_xpath(&quot;//a[starts-with(text(), &#39;Mouclick&#39;)]&quot;)</code>。</li></ul></li><li>轴定位<ul><li>child：<code>find_element_by_xpath(&quot;//form/child&quot;)</code>。</li><li>parent：<code>find_element_by_xpath(&quot;//input[1]/parent&quot;)</code>。</li><li>preceding：<code>find_element_by_xpath(&quot;//a[text()=&#39;Continue&#39;]/preceding::a&quot;)</code>。</li><li>following：<code>find_element_by_xpath(&quot;//a[text()=&#39;Continue&#39;]/following::input[1]&quot;)</code>。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位元素Xpath<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;about.html&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;清除&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 若找不到“关于”这一元素，会抛出NoSuchElementException异常 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_xpath(&#x27;//*[@id=&quot;loginForm&quot;]/div[1]/a[2]&#x27;) --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-4-标签名"><a href="#2-4-标签名" class="headerlink" title="2-4 标签名"></a>2-4 标签名</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位元素Tag<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>谢张仲谋端午送巧作<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h</span>&gt;</span>宋·黄庭坚<span class="hljs-tag">&lt;/<span class="hljs-name">h</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君家玉女从小见，闻道如今画不成。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>翦裁似借天女手，萱草石榴偏眼明。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_tag_name(&#x27;h3&#x27;)，找不到元素会抛出NoSuchElementException异常 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-ClassName"><a href="#2-5-ClassName" class="headerlink" title="2-5 ClassName"></a>2-5 ClassName</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位元素Class<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>蒹葭苍苍，白露为霜。所谓伊人，在水一方。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_class_name(&#x27;content&#x27;)，找不到元素会抛出NoSuchElementException异常 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-6-CSS选择器"><a href="#2-6-CSS选择器" class="headerlink" title="2-6 CSS选择器"></a>2-6 CSS选择器</h2><ul><li>CSS选择器<ul><li>标签名定位：<code>find_element_by_css_selector(&quot;p&quot;)</code>。</li><li>id定位：<code>find_element_by_css_selector(&quot;#loginForm&quot;)</code>。</li><li>class定位：<code>find_element_by_css_selector(&quot;.content&quot;)</code>。</li><li>元素定位<ul><li><code>element&gt;element</code>：<code>find_element_by_css_selector(&quot;form&gt;p&quot;)</code>，儿子节点。</li><li><code>element element</code>：<code>find_element_by_css_selector(&quot;form p.content&quot;)</code>，子孙节点。</li><li><code>element+element</code>：<code>find_element_by_css_selector(&quot;a+input&quot;)</code>，紧挨着的兄弟节点，子节点不算。</li><li>注意：使用Firefox浏览器时，+号前后要加空格，否则定位不到，Chrome和Edge不用，CSS本身也不用。</li></ul></li><li>属性定位<ul><li><code>[属性=属性值]</code>：<code>find_element_by_css_selector(&quot;[name=&#39;username&#39;]&quot;)</code>。</li><li><code>[属性^=属性值]</code>：<code>find_element_by_css_selector(&quot;[name^=&#39;con&#39;]&quot;)</code>，name属性开头为con的标签。</li><li><code>[属性*=属性值]</code>：<code>find_element_by_css_selector(&quot;[name*=&#39;con&#39;]&quot;)</code>，name属性包含con的所有标签。</li><li><code>[属性$=属性值]</code>：<code>find_element_by_css_selector(&quot;[name$=&#39;nue&#39;]&quot;)</code>，name的属性值结尾是nue的所有标签。</li></ul></li><li>下标定位<ul><li><code>#loginForm&gt;:last-child</code>：id为loginForm标签下的最后1个标签。</li><li><code>#loginForm&gt;:nth-last-child(2)</code>：id为loginForm标签下的倒数第2个标签。</li><li><code>#loginForm&gt;input:nth-child(3)</code>：id为loginForm的标签下的第3个标签，且标签名为input。</li><li><code>#loginForm&gt;:nth-child(1)</code>或<code>#loginForm&gt;:first-child</code>：id为loginForm标签下的第1个标签。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>定位元素Css<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loginForm&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;continue&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;清除&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>蒹葭苍苍，白露为霜。所谓伊人，在水一方。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_css_selector(&quot;.content&quot;) --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 找不到元素会抛出NoSuchElementException异常 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-7-链接文本获取"><a href="#2-7-链接文本获取" class="headerlink" title="2-7 链接文本获取"></a>2-7 链接文本获取</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>蒹葭苍苍，白露为霜。所谓伊人，在水一方。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;about.html&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_link_text(&#x27;首页&#x27;) --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 找不到元素会NoSuchElementException异常 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- find_element_by_partial_link_text(&#x27;关&#x27;) --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-等待设置"><a href="#3-等待设置" class="headerlink" title="3 等待设置"></a>3 等待设置</h1><ul><li>等待设置<ul><li>固定等待：<code>timd.sleep()</code>。<ul><li>不管浏览器是否加载完，程序都得等待，对于调试阶段十分有用。</li><li>但太过死板，严重影响程序执行速度，自动化测试时不建议使用。</li></ul></li><li>隐式等待：<code>implicitly_wait()</code>。<ul><li>规定时间内网页加载完，则执行下一步，否则等到时间截止，再执行下一步。</li><li>该等待方式对于整个浏览器驱动的周期都起作用，所以只需要设置一次即可。</li></ul></li><li>显示等待：<code>WebDriverWait()</code>。<ul><li>程序隔几秒看一眼，条件成立则执行下一步，否则继续等待。</li><li>直到超过设置的最长时间，然后抛出TimeoutException异常。</li></ul></li></ul></li></ul><h2 id="3-1-固定等待"><a href="#3-1-固定等待" class="headerlink" title="3-1 固定等待"></a>3-1 固定等待</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                           <span class="hljs-comment"># fixed_waiting.py</span><br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                 <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>sleep(<span class="hljs-number">30</span>)                                                <span class="hljs-comment"># 固定等待30秒再执行下一步</span><br><span class="hljs-built_in">print</span>(driver.current_url)                                <span class="hljs-comment"># 获取当前页面的URL</span><br>driver.quit()                                            <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="3-2-隐式等待"><a href="#3-2-隐式等待" class="headerlink" title="3-2 隐式等待"></a>3-2 隐式等待</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                           <span class="hljs-comment"># implicit_waiting.py</span><br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                 <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">30</span>)                               <span class="hljs-comment"># 隐式等待，最长等30秒</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><span class="hljs-built_in">print</span>(driver.current_url)                                <span class="hljs-comment"># 获取当前页面的URL</span><br>driver.quit()                                            <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="3-3-显示等待"><a href="#3-3-显示等待" class="headerlink" title="3-3 显示等待"></a>3-3 显示等待</h2><ul><li>显示等待<ul><li><code>WebDriverWait(driver, timeout, poll_frequency, ignored_exceptions)</code></li><li>参数说明<ul><li>driver：浏览器驱动。</li><li>timeout：最长超时时间，默认以秒为单位。</li><li>poll_frequency：调用until或until_not方法的间隔时间，默认为0.5秒。</li><li>ignored_exceptions：超时后的异常信息，默认抛出NoSuchElementException异常。</li></ul></li><li>调用方法<ul><li><code>WebDriverWait(driver, timeout=3).until(method, message=&quot;&quot;)</code>，返回值True。</li><li><code>WebDriverWait(driver, timeout=3).until_not(method, message=&quot;&quot;)</code>，返回值False。</li></ul></li><li>expected_conditions类提供的预期条件判断方法<ul><li>alert_is_present：判断页面上是否存在alert。</li><li>element_to_be_clickable：判断某个元素是否可以点击。</li><li>title<ul><li>title_is：判断当前页面的标题是否等于预期字符串。</li><li>title_contains：判断当前页面的标题是否包含预期。</li></ul></li><li>presence<ul><li>presence_of_element_located：验证只要一个符合条件的元素被加载出来，就可通过。</li><li>presence_of_all_elements_located：验证必须所有符合条件的元素都加载出来才通过。</li></ul></li><li>staleness_of：判断一个元素是否仍在DOM中，传入WebElement，可判断页面是否刷新了。</li><li>visibility<ul><li>visibility_of：判断元素是否可见，传入WebElement。</li><li>visibility_of_element_located：判断元素是否可见，传入的参数是元组类型的locator。</li><li>invisibility_of_element_located：判断元素是否不可见，传入参数是元组类型的locator。</li></ul></li><li>text<ul><li>text_to_be_present_in_element：判断某个元素中的text是否包含预期的字符串。</li><li>text_to_be_present_in_element_value：判断某个元素的value属性是否包含预期的字符串。</li></ul></li><li>frame_to_be_available_and_switch_to_it：判断表单是否可以切入，可切入则返回True并切入。</li><li>element<ul><li>element_to_be_selected：判断元素是否被选中，传入WebElement对象。</li><li>element_located_to_be_selected：判断元素是否被选中，传locator元组。</li><li>element_selection_state_to_be：判断元素是否被选中，传入WebElement对象和状态，相等返回True。</li><li>element_located_selection_state_to_be：判断元素是否被选中，传入locator以及状态，相等返回True。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># display_waiting.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.by <span class="hljs-keyword">import</span> By<br><span class="hljs-keyword">from</span> selenium.webdriver.support.wait <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br>driver = webdriver.Edge()<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)                              <span class="hljs-comment"># 隐式等待，最长等10秒</span><br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>locator = (By.LINK_TEXT, <span class="hljs-string">&#x27;hao123&#x27;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    wait = WebDriverWait(driver, <span class="hljs-number">20</span>, <span class="hljs-number">0.5</span>)               <span class="hljs-comment"># 显示等待可同隐式等待一起用</span><br>    wait.until(EC.presence_of_element_located(locator))<br>    driver.find_element_by_link_text(<span class="hljs-string">&#x27;hao123&#x27;</span>)          <span class="hljs-comment"># 最长的等待时间取决于两者之间的最大值</span><br><span class="hljs-keyword">finally</span>:<br>    driver.close()                                      <span class="hljs-comment"># 关闭当前标签页</span><br></code></pre></td></tr></table></figure><h1 id="4-常用方法"><a href="#4-常用方法" class="headerlink" title="4 常用方法"></a>4 常用方法</h1><ul><li>常用方法<ul><li><code>name</code>·····································查看浏览器名称</li><li><code>title</code>····································获取当前页面标题，判断页面跳转是否符合预期</li><li><code>current_url</code>······························获取当前页面URL，一般可以用来测试重定向操作</li><li><code>back()</code>···································后退</li><li><code>forward()</code>································前进</li><li><code>refresh()</code>································刷新页面</li><li><code>maximize_window()</code>························浏览器窗口最大化</li><li><code>switch_to.alert</code>··························焦点切换到弹窗中</li><li><code>get_window_position()</code>····················获取当前窗口的坐标</li><li><code>get_window_size()</code>························获取当前窗口的宽和高</li><li><code>set_window_size(width, height)</code>···········设置当前窗口的宽和高</li><li><code>get_screenshot_as_file(filename)</code>·········截取当前页面</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># common_method.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Browser: &quot;</span> + driver.name)                        <span class="hljs-comment"># 查看浏览器名称</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Title: &quot;</span> + driver.title)                         <span class="hljs-comment"># 获取当前页面标题</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;URL: &quot;</span> + driver.current_url)                     <span class="hljs-comment"># 获取当前页面URL</span><br><br>driver.find_element_by_id(<span class="hljs-string">&quot;kw&quot;</span>).send_keys(<span class="hljs-string">&quot;Selenium&quot;</span>)<br>driver.find_element_by_id(<span class="hljs-string">&quot;su&quot;</span>).click()                 <span class="hljs-comment"># 点击搜索selenium内容</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.back()                                           <span class="hljs-comment"># 后退回百度首页</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.forward()                                        <span class="hljs-comment"># 前进到搜索selenium页面</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.back()                                           <span class="hljs-comment"># 后退回百度首页</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.refresh()                                        <span class="hljs-comment"># 刷新页面</span><br><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br>setmenu = driver.find_element_by_id(<span class="hljs-string">&quot;s-usersetting-top&quot;</span>)<br>ActionChains(driver).move_to_element(setmenu).perform()<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;搜索设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;保存设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>text = driver.switch_to.alert.text                      <span class="hljs-comment"># 切换到弹窗中，获取弹窗提示信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pop-up alert message: &quot;</span> + text)<br>sleep(<span class="hljs-number">3</span>)<br>driver.switch_to.alert.accept()                         <span class="hljs-comment"># 接受警告框</span><br>sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Coordinates of the current window: &quot;</span> + <span class="hljs-built_in">str</span>(driver.get_window_position()))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Width and height of the current window: &quot;</span> + <span class="hljs-built_in">str</span>(driver.get_window_size()))<br>driver.set_window_size(<span class="hljs-number">1440</span>, <span class="hljs-number">700</span>)                       <span class="hljs-comment"># 设置当前窗口的宽和高</span><br>driver.get_screenshot_as_file(<span class="hljs-string">&quot;.\picture\common_method.png&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 截取当前页面</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-1-Cookie"><a href="#4-1-Cookie" class="headerlink" title="4-1 Cookie"></a>4-1 Cookie</h2><ul><li>Cookie<ul><li><code>get_cookies()</code>····························获取所有Cookie</li><li><code>get_cookie(name)</code>·························获取name属性的Cookie</li><li><code>delete_all_cookies()</code>·····················删除浏览器中的所有Cookie</li><li><code>delete_cookie(name)</code>······················删除name属性的Cookie</li><li><code>add_cookie(cookie_dic)</code>···················添加Cookie(Cookie格式为字典)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># cookie_operation.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br><br><span class="hljs-built_in">print</span>(driver.get_cookies())                             <span class="hljs-comment"># 获取所有Cookie</span><br><span class="hljs-built_in">print</span>(driver.get_cookie(name=<span class="hljs-string">&quot;ZFY&quot;</span>))                    <span class="hljs-comment"># 获取ZFY属性的Cookie</span><br>driver.delete_cookie(name=<span class="hljs-string">&quot;ZFY&quot;</span>)                        <span class="hljs-comment"># 删除ZFY属性的Cookie</span><br><span class="hljs-keyword">if</span> driver.get_cookie(name=<span class="hljs-string">&quot;ZFY&quot;</span>):                       <span class="hljs-comment"># 判断ZFY属性的Cookie是否还在</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Failed to delete.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Deleted successfully.&quot;</span>)<br>driver.delete_all_cookies()                             <span class="hljs-comment"># 删除浏览器中的所有Cookie</span><br>driver.add_cookie(&#123;                                     <span class="hljs-comment"># 添加Cookie</span><br>    <span class="hljs-string">&#x27;domain&#x27;</span>: <span class="hljs-string">&#x27;.baidu.com&#x27;</span>,<br>    <span class="hljs-string">&#x27;expiry&#x27;</span>: <span class="hljs-number">2022112517</span>,<br>    <span class="hljs-string">&#x27;httpOnly&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Test&#x27;</span>,<br>    <span class="hljs-string">&#x27;path&#x27;</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-string">&#x27;sameSite&#x27;</span>: <span class="hljs-string">&#x27;None&#x27;</span>,<br>    <span class="hljs-string">&#x27;secure&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;BWo2kLK:ASP9EHiAqyW83MVaN3FAjB:BD1FVCezH7s42g:C&#x27;</span><br>&#125;)<br><span class="hljs-built_in">print</span>(driver.get_cookie(name=<span class="hljs-string">&quot;Test&quot;</span>))                   <span class="hljs-comment"># 获取Test属性的Cookie</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-2-多窗口"><a href="#4-2-多窗口" class="headerlink" title="4-2 多窗口"></a>4-2 多窗口</h2><ul><li>多窗口<ul><li>首先需要获得每一个窗口的句柄，句柄即唯一标识符号。</li><li><code>quit()</code>···································关闭所有窗口</li><li><code>close()</code>··································关闭当前窗口</li><li><code>window_handles</code>···························获取所有窗口的句柄</li><li><code>switch_to.window()</code>·······················切换到相应的窗口中</li><li><code>current_window_handle</code>····················获取当前窗口的句柄</li><li><code>switch_to.parent_content</code>·················返回上一级表单，新方法</li><li><code>switch_to_parent_content()</code>···············返回上一级表单，旧方法</li><li><code>switch_to.default_content()</code>··············返回最外层表单，新方法</li><li><code>switch_to_default_content()</code>··············返回最外层表单，旧方法</li><li><code>switch_to.frame(id/name/xpath)</code>···········切换到被嵌套的frame中</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># multiple_windows.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.execute_script(<span class="hljs-string">&quot;window.open(&#x27;https://mail.163.com/&#x27;)&quot;</span>)<br><br>handles = driver.window_handles                         <span class="hljs-comment"># 获取所有窗口的句柄</span><br><span class="hljs-built_in">print</span>(handles)<br>current = driver.current_window_handle                  <span class="hljs-comment"># 获取当前窗口的句柄</span><br><span class="hljs-built_in">print</span>(current)<br><span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> handles:<br>    <span class="hljs-keyword">if</span> handle != current:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Switch to second window.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(handle)<br>        driver.close()                                  <span class="hljs-comment"># close关闭当前窗口</span><br>        sleep(<span class="hljs-number">3</span>)<br>        driver.switch_to.window(handle)                 <span class="hljs-comment"># 切换到第二个窗口</span><br>        sleep(<span class="hljs-number">3</span>)<br><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>iframe = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;loginDiv&#x27;]/iframe&quot;</span>)<br>driver.switch_to.frame(iframe)                          <span class="hljs-comment"># 切换到被嵌套的frame中</span><br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;login-form&#x27;]/div/div/div[2]/input&quot;</span>).send_keys(<span class="hljs-string">&#x27;admin&#x27;</span>)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 输入账号</span><br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;login-form&#x27;]/div/div[3]/div[2]/input[2]&quot;</span>).send_keys(<span class="hljs-string">&#x27;12345&#x27;</span>)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 输入密码</span><br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;login-form&#x27;]/div/div[8]/a&quot;</span>).click()<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 点击登录</span><br><br>driver.switch_to.parent_frame()                         <span class="hljs-comment"># 返回上一级表单</span><br><span class="hljs-comment"># driver.switch_to.default_content()                    # 返回最外层表单</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-3-警告框"><a href="#4-3-警告框" class="headerlink" title="4-3 警告框"></a>4-3 警告框</h2><ul><li>警告框<ul><li>WebDriver处理JavaScript生成的alert、confirm和prompt，使用<code>switch_to.alert</code>方法实现。</li><li><code>switch_to.alert.text</code>·····················返回alert、confirm、prompt中的文字信息</li><li><code>switch_to.alert.accept()</code>·················接受现有警告框</li><li><code>switch_to.alert.dismiss()</code>················解散现有警告框</li><li><code>switch_to.alert.send_keys()</code>··············警告框中输入文本，只适用于prompt弹窗<ul><li>alert方法有一个参数，弹窗显示后，只一个确认或关闭按钮。</li><li>confirm方法要求用户选择，有确认有返回，确定则True，取消则False。</li><li>prompt方法可在弹窗中输入文本，输入值后可点击确定，取消值为Null。</li></ul></li></ul></li></ul><h4 id="1-alert-box-py"><a href="#1-alert-box-py" class="headerlink" title="(1) alert_box.py"></a>(1) alert_box.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># alert_box.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br><br>setmenu = driver.find_element_by_id(<span class="hljs-string">&quot;s-usersetting-top&quot;</span>)<br>ActionChains(driver).move_to_element(setmenu).perform()<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;搜索设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_link_text(<span class="hljs-string">&#x27;保存设置&#x27;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>text = driver.switch_to.alert.text                      <span class="hljs-comment"># 切换到弹窗中，获取弹窗提示信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Pop-up alert message: &quot;</span> + text)<br>sleep(<span class="hljs-number">3</span>)<br>driver.switch_to.alert.dismiss()                        <span class="hljs-comment"># 取消</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.get(<span class="hljs-string">&quot;file:///D:/.../alert_box.html&quot;</span>)             <span class="hljs-comment"># 路径需要补充完整</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_xpath(<span class="hljs-string">&quot;//button[@onclick=&#x27;myFunction()&#x27;]&quot;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br>driver.switch_to.alert.send_keys(<span class="hljs-string">&#x27;Dr.626&#x27;</span>)<br>sleep(<span class="hljs-number">5</span>)<br>driver.switch_to.alert.accept()                         <span class="hljs-comment"># 接受警告框</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-alert-box-html"><a href="#2-alert-box-html" class="headerlink" title="(2) alert_box.html"></a>(2) alert_box.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- alert_box.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>警告框<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>点击按钮查看输入的对话框。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 195px; height: 40px;&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> x;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> person = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入你的名字：&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (person != <span class="hljs-literal">null</span> &amp;&amp; person != <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                x = <span class="hljs-string">&quot;你好，&quot;</span> + person + <span class="hljs-string">&quot;！今天感觉如何？&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;demo&quot;</span>).<span class="hljs-property">innerHTML</span> = x;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-下拉框"><a href="#4-4-下拉框" class="headerlink" title="4-4 下拉框"></a>4-4 下拉框</h2><ul><li>下拉框<ul><li>先定位到下拉框，再定位选项。</li><li>需点击才能显示选项时，有两次点击动作，第一次点击下拉框，第二次点击选项。</li><li>不需点击，鼠标放上去就会显示选项时，则可使用<code>move_to_element()</code>方法定位。</li><li>针对下拉框是select标签的<ul><li>导入Select类：<code>from selenium.webdriver.support.select import Select</code>。<ul><li><code>select_by_index(index)</code>···········根据index属性定位选项，index从0开始</li><li><code>select_by_value(value)</code>···········根据value属性定位选项</li><li><code>select_by_visible_text(text)</code>·····根据选项文本值定位选项</li><li><code>first_selected_option</code>············返回选中的第一个选择项</li><li><code>first_selected_option.text</code>·······返回默认选项的文本信息</li><li><code>all_selected_options</code>·············返回所有已选中的选择项</li></ul></li><li>取消选择deselect，只适用于添加了multiple的下拉框，否则会报错。<ul><li><code>deselect_by_index(index)</code>·········根据index属性清除选定的选项，index从0开始</li><li><code>deselect_by_value(value)</code>·········根据value属性清除选定的选项</li><li><code>deselect_by_visible_text(text)</code>···根据选项文本值清除选定的选项</li><li><code>deselect_all()</code>···················清除所有选项</li></ul></li></ul></li></ul></li></ul><h4 id="1-drop-down-py"><a href="#1-drop-down-py" class="headerlink" title="(1) drop_down.py"></a>(1) drop_down.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># drop_down.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.support.select <span class="hljs-keyword">import</span> Select<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;file:///D:/.../drop_down_month.html&quot;</span>)       <span class="hljs-comment"># drop_down_month.html文件存放路径</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br><br>select1 = Select(driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/form[2]/select&quot;</span>))<br>select1.select_by_index(<span class="hljs-number">0</span>)                              <span class="hljs-comment"># 根据index属性定位选项，index从0开始</span><br>select1.select_by_value(<span class="hljs-string">&quot;2&quot;</span>)                            <span class="hljs-comment"># 根据value属性定位选项</span><br>select1.select_by_visible_text(<span class="hljs-string">&quot;三月&quot;</span>)<br><span class="hljs-keyword">for</span> select <span class="hljs-keyword">in</span> select1.all_selected_options:             <span class="hljs-comment"># 根据选项文本值定位选项</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected selections 1: &quot;</span> + select.text)      <span class="hljs-comment"># 返回所有已选中的选择项</span><br><br>select2 = Select(driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/form[1]/select&quot;</span>))<br>text1 = select2.first_selected_option                   <span class="hljs-comment"># 返回选中的第一个选择项</span><br>text2 = select2.first_selected_option.text              <span class="hljs-comment"># 返回默认选项的文本信息</span><br><span class="hljs-built_in">print</span>(text1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Default option text 0: &quot;</span> + text2)<br><br>select1.select_by_index(<span class="hljs-number">0</span>)<br>select1.select_by_index(<span class="hljs-number">1</span>)<br>select1.select_by_index(<span class="hljs-number">2</span>)<br>select1.select_by_index(<span class="hljs-number">3</span>)<br>select1.select_by_index(<span class="hljs-number">4</span>)<br>select1.select_by_index(<span class="hljs-number">5</span>)<br>select1.deselect_by_index(<span class="hljs-number">0</span>)                            <span class="hljs-comment"># 根据index属性清除选定的选项，index从0开始</span><br>select1.deselect_by_value(<span class="hljs-string">&quot;1&quot;</span>)                          <span class="hljs-comment"># 根据value属性清除选定的选项</span><br>select1.deselect_by_visible_text(<span class="hljs-string">&quot;三月&quot;</span>)<br><span class="hljs-keyword">for</span> select <span class="hljs-keyword">in</span> select1.all_selected_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected selections 2: &quot;</span> + select.text)      <span class="hljs-comment"># 返回所有已选中的选择项</span><br><br>select1.deselect_all()                                  <span class="hljs-comment"># 清除所有选项</span><br><span class="hljs-keyword">for</span> select <span class="hljs-keyword">in</span> select1.all_selected_options:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Selected selections 3: &quot;</span> + select.text)      <span class="hljs-comment"># 返回所有已选中的选择项</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-drop-down-fruit-html"><a href="#2-drop-down-fruit-html" class="headerlink" title="(2) drop_down_fruit.html"></a>(2) drop_down_fruit.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- drop_down_fruit.html，“水果拼盘”模拟下拉框多选操作暂未找到实现方法 --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>下拉框 | 水果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 搜索引擎：select单选</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">oc</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">f1</span>.<span class="hljs-property">t1</span>.<span class="hljs-title function_">value</span>());</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 水果拼盘、选择城市：multiple可多选</span></span><br><span class="language-javascript">        (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            selectMultip = &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">register</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 思路：为下拉选创建一个隐藏的子选项</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 每次单选之后将单选的值追加到隐藏的子选项中，并将子选项选中显示</span></span><br><span class="language-javascript">                    <span class="hljs-comment">// 全局查找所有标记multip的select</span></span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;[multip]&quot;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">render</span>(e);</span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">reload</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id, data, setData</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> htm = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                        htm += <span class="hljs-string">&#x27;&lt;option value=&quot;&#x27;</span> + data[i].<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span> + data[i].<span class="hljs-property">text</span> + <span class="hljs-string">&#x27;&lt;/option&gt;&#x27;</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> e = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);</span><br><span class="language-javascript">                    e.<span class="hljs-property">innerHTML</span> = htm;</span><br><span class="language-javascript">                    <span class="hljs-title function_">render</span>(e);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setVal</span>(id, setData);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">setVal</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id, str</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> type = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(str);</span><br><span class="language-javascript">                    <span class="hljs-keyword">switch</span> (type) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;[object String]&quot;</span>:</span><br><span class="language-javascript">                            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">val</span> = str;</span><br><span class="language-javascript">                            <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;[object Array]&quot;</span>:</span><br><span class="language-javascript">                            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">val</span> = str.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                            <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                        <span class="hljs-attr">default</span>:</span><br><span class="language-javascript">                            <span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-attr">getVal</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id).<span class="hljs-property">val</span>;</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                e.<span class="hljs-property">param</span> = &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">arr</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">valarr</span>: [],</span><br><span class="language-javascript">                    <span class="hljs-attr">opts</span>: []</span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> choosevalue = <span class="hljs-string">&quot;&quot;</span>,</span><br><span class="language-javascript">                    op;</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; e.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    op = e.<span class="hljs-title function_">item</span>(i);</span><br><span class="language-javascript">                    e.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">push</span>(op);</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (op.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&quot;choose&quot;</span>)) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (choosevalue == <span class="hljs-string">&quot;&quot;</span>) &#123;</span><br><span class="language-javascript">                            choosevalue = op.<span class="hljs-property">value</span></span><br><span class="language-javascript">                        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                            choosevalue += <span class="hljs-string">&quot;,&quot;</span> + op.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-comment">// 创建一个隐藏的option标签用来存储多选的值，其中的值为一个数组</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> option = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;option&quot;</span>);</span><br><span class="language-javascript">                option.<span class="hljs-property">hidden</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                e.<span class="hljs-title function_">appendChild</span>(option);</span><br><span class="language-javascript">                e.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&quot;input&quot;</span>, selchange);</span><br><span class="language-javascript">                e.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;input&quot;</span>, selchange);</span><br><span class="language-javascript">                <span class="hljs-comment">// 重新定义标签基础属性的get和set方法，实现取值和赋值的功能</span></span><br><span class="language-javascript">                <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(e, <span class="hljs-string">&quot;val&quot;</span>, &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;[hidden]&quot;</span>).<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                        &#125;,</span><br><span class="language-javascript">                        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;</span><br><span class="language-javascript">                            e.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span> = [];</span><br><span class="language-javascript">                            <span class="hljs-keyword">var</span> valrealarr = value == <span class="hljs-string">&quot;&quot;</span> ? [] : value.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;,&quot;</span>);</span><br><span class="language-javascript">                            e.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span> = [];</span><br><span class="language-javascript">                            e.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;</span><br><span class="language-javascript">                                o.<span class="hljs-property">style</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                            &#125;);</span><br><span class="language-javascript">                            <span class="hljs-keyword">if</span> (valrealarr.<span class="hljs-title function_">toString</span>()) &#123;</span><br><span class="language-javascript">                                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; valrealarr.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                                    e.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;</span><br><span class="language-javascript">                                        <span class="hljs-keyword">if</span> (o.<span class="hljs-property">value</span> == valrealarr[i]) &#123;</span><br><span class="language-javascript">                                            o.<span class="hljs-property">style</span> = <span class="hljs-string">&quot;color: blue;&quot;</span>;</span><br><span class="language-javascript">                                            e.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(o.<span class="hljs-property">text</span>);</span><br><span class="language-javascript">                                            e.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">push</span>(o.<span class="hljs-property">value</span>)</span><br><span class="language-javascript">                                        &#125;</span><br><span class="language-javascript">                                    &#125;);</span><br><span class="language-javascript">                                &#125;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">text</span> = e.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">value</span> = e.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[e.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-number">0</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                            &#125;</span><br><span class="language-javascript">                        &#125;,</span><br><span class="language-javascript">                        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">                    &#125;)</span><br><span class="language-javascript">                    <span class="hljs-comment">// 添加属性choose，此属性添加到option中用来指定默认值</span></span><br><span class="language-javascript">                e.<span class="hljs-property">val</span> = choosevalue;</span><br><span class="language-javascript">                <span class="hljs-comment">// 添加属性tip，此属性添加到select标签上</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (e.<span class="hljs-title function_">hasAttribute</span>(<span class="hljs-string">&quot;tip&quot;</span>) &amp;&amp; !e.<span class="hljs-property">tiped</span>) &#123;</span><br><span class="language-javascript">                    e.<span class="hljs-property">tiped</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                    e.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&#x27;afterend&#x27;</span>, <span class="hljs-string">&#x27;&lt;i style=&quot;color: red; \</span></span><br><span class="hljs-string"><span class="language-javascript">                                          font-size: 12px&quot;&gt;*可多选*\&lt;/i&gt;&#x27;</span>);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">function</span> <span class="hljs-title function_">selchange</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedIndex</span>].<span class="hljs-property">text</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedIndex</span>].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">selectedIndex</span>].<span class="hljs-property">style</span> = <span class="hljs-string">&quot;color: blue;&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> ind = <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">indexOf</span>(text);</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (ind &gt; -<span class="hljs-number">1</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">splice</span>(ind, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">splice</span>(ind, <span class="hljs-number">1</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">opts</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">o</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">if</span> (o.<span class="hljs-property">value</span> == value) &#123;</span><br><span class="language-javascript">                            o.<span class="hljs-property">style</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;);</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">push</span>(text);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">push</span>(value);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">text</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">valarr</span>.<span class="hljs-title function_">toString</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">param</span>.<span class="hljs-property">arr</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>[<span class="hljs-number">0</span>].<span class="hljs-property">selected</span> = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        搜索引擎：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sid&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o1&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id1&quot;</span>&gt;</span>谷歌<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o2&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id2&quot;</span>&gt;</span>必应<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o3&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id3&quot;</span>&gt;</span>搜狗<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o4&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id4&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;o4&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id5&quot;</span>&gt;</span>火狐<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        水果拼盘：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multip</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fruits&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span> <span class="hljs-attr">tip</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>樱桃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>草莓<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>杨桃<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>蜜柚<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br>            selectMultip.register();<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        选择城市：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multip</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;gz&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;wh&quot;</span>&gt;</span>武汉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bj&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xm&quot;</span>&gt;</span>厦门<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;hz&quot;</span>&gt;</span>杭州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sz&quot;</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sz&quot;</span>&gt;</span>苏州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;nj&quot;</span>&gt;</span>南京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cq&quot;</span>&gt;</span>重庆<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 355px; height: 45px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>单选按钮Radio<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pg&quot;</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jz&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jz&quot;</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xj&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xj&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;pt&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;li&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>葡萄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;xg&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;xg&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>西瓜<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 355px; height: 130px;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>多选按钮Checkbox<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;汽车&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;qc&quot;</span>&gt;</span>汽车<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;购物&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gw&quot;</span>&gt;</span>购物<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;购物&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ms&quot;</span>&gt;</span>美食<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;旅游&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ly&quot;</span> <span class="hljs-attr">readonly</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;音乐&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;yy&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>音乐<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 不可选 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-drop-down-month-html"><a href="#3-drop-down-month-html" class="headerlink" title="(3) drop_down_month.html"></a>(3) drop_down_month.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- drop_down_month.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>下拉框 | 月份<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Single Select --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        月份单选：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>一月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>二月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>三月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>四月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>五月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>六月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>七月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span>八月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>九月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>十月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span>十一月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>十二月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Multiple Select --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>        月份多选：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">multiple</span>=<span class="hljs-string">&quot;multiple&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 300px; height: 30px;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span>一月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>二月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>三月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span>四月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;5&quot;</span>&gt;</span>五月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;6&quot;</span>&gt;</span>六月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;7&quot;</span>&gt;</span>七月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;8&quot;</span>&gt;</span>八月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;9&quot;</span>&gt;</span>九月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span>十月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;11&quot;</span>&gt;</span>十一月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span>十二月<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">integrity</span>=<span class="hljs-string">&quot;sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUju\</span></span><br><span class="hljs-string"><span class="hljs-tag">            uRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==&quot;</span> <span class="hljs-attr">crossorigin</span>=<span class="hljs-string">&quot;anonymous&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/multiple-select@1.5.2/dist/multiple-select.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;select&#x27;</span>).<span class="hljs-title function_">multipleSelect</span>()</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-5-鼠标事件"><a href="#4-5-鼠标事件" class="headerlink" title="4-5 鼠标事件"></a>4-5 鼠标事件</h2><ul><li>鼠标事件<ul><li>使用前需先导入ActionChains类：<code>from selenium.webdriver.common.action_chains import ActionChains</code>。</li><li>用户行为不会立即执行，而是将所有操作放在一个队列中，执行perform方法时按放入队列的顺序，先进先出执行。</li><li><code>perform()</code>······················执行ActionChains类中存储的所有行为，可以理解为对整个操作的提交动作</li><li><code>release()</code>······················在某个元素上释放鼠标，写在<code>perform()</code>前，通过<code>perform()</code>方法来执行</li><li><code>click()</code>························鼠标点击</li><li><code>double_click()</code>·················鼠标双击</li><li><code>context_click()</code>················鼠标右击</li><li><code>click_and_hold()</code>···············按住鼠标左键不动</li><li><code>move_to_element(target)</code>·····························移动到某个元素上</li><li><code>move_by_offset(xoffset, yoffset)</code>····················移动到某个坐标上</li><li><code>drag_and_drop(source, target)</code>·······················按住鼠标左键，然后移动到目标元素并释放鼠标按钮</li><li><code>drag_and_drop_by_offset(source, xoffset, yoffset)</code>···按住鼠标左键，然后移动到目标偏移并释放鼠标按钮</li></ul></li></ul><h4 id="1-mouse-event-py"><a href="#1-mouse-event-py" class="headerlink" title="(1) mouse_event.py"></a>(1) mouse_event.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># mouse_event.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element1 = driver.find_element_by_id(<span class="hljs-string">&quot;kw&quot;</span>)<br>ActionChains(driver).click(element1).perform()          <span class="hljs-comment"># 鼠标点击</span><br>sleep(<span class="hljs-number">3</span>)<br>element2 = driver.find_element_by_id(<span class="hljs-string">&quot;hotsearch-refresh-btn&quot;</span>)<br>ActionChains(driver).double_click(element2).perform()   <span class="hljs-comment"># 鼠标双击</span><br>sleep(<span class="hljs-number">3</span>)<br>element3 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;lg&#x27;]/img&quot;</span>)<br>ActionChains(driver).context_click(element3).perform()  <span class="hljs-comment"># 鼠标右击</span><br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).drag_and_drop(element3, element1).perform()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.get(<span class="hljs-string">&quot;file:///D:/.../mouse_event.html&quot;</span>)           <span class="hljs-comment"># mouse_event.html文件存放路径</span><br>element4 = driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/div[1]/div[2]/div/div&quot;</span>)<br>wholesld = driver.find_element_by_xpath(<span class="hljs-string">&quot;/html/body/div[1]/div[2]&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Size: &quot;</span> + <span class="hljs-built_in">str</span>(element4.size), <span class="hljs-string">&quot;Position: &quot;</span> + <span class="hljs-built_in">str</span>(element4.location[<span class="hljs-string">&#x27;x&#x27;</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Size: &quot;</span> + <span class="hljs-built_in">str</span>(wholesld.size), <span class="hljs-string">&quot;Position: &quot;</span> + <span class="hljs-built_in">str</span>(wholesld.location[<span class="hljs-string">&#x27;x&#x27;</span>]))<br>ActionChains(driver).click_and_hold(element4).perform()<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 按住鼠标左键不动</span><br>ActionChains(driver).drag_and_drop_by_offset(element4, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>).perform()<br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).drag_and_drop_by_offset(element4, <span class="hljs-number">312</span>, <span class="hljs-number">0</span>).release().perform()<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 需鼠标移动到对应的自动化控制浏览器上</span><br>element5 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;dragEle&#x27;]&quot;</span>)<br>ActionChains(driver).move_to_element(element5).perform()<br>sleep(<span class="hljs-number">3</span>)<br>ActionChains(driver).move_by_offset(<span class="hljs-number">100</span>, <span class="hljs-number">30</span>).perform()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-mouse-event-html"><a href="#2-mouse-event-html" class="headerlink" title="(2) mouse_event.html"></a>(2) mouse_event.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- mouse_event.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滑动框1 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>滑动框<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#E8E8E8</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.container</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden; <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span> solid powderblue; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0.3125rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#canvas</span> &#123;<span class="hljs-attribute">background</span>: indianred;&#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#block</span> &#123;<span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.refreshIcon</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">left</span>: <span class="hljs-number">280px</span>; <span class="hljs-attribute">top</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">21px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">./refresh.png</span>); <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.verSliderBlock</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00ff7f</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;./right_arrow.png&#x27;</span>); <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">3</span>); <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#45494c</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>; <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.bar</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">width</span>: <span class="hljs-number">310px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#f7f9fa</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#45494c</span>; <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e7eb</span>; <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#bar-mask</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">0</span> solid <span class="hljs-number">#1991fa</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#d1e9fe</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;310&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;155&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;310&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;155&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;block&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;refreshIcon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bar&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bar-mask&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;verSliderBlock&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;slide&quot;</span>&gt;</span>向右滑动验证<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    (<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">window</span></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> block = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;block&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas_ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> block_ctx = block.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> refresh = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.refreshIcon&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">200</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">            y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">            w = <span class="hljs-number">42</span>,</span><br><span class="language-javascript">            l = <span class="hljs-number">42</span>,</span><br><span class="language-javascript">            r = <span class="hljs-number">10</span>,</span><br><span class="language-javascript">            <span class="hljs-variable constant_">PI</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y)</span><br><span class="language-javascript">        <span class="hljs-comment">// 获取图片后面的随机号码</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomNumberByRange</span>(<span class="hljs-params">start, end</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (end - start) + start)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 初始化图片</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">initImg</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                canvas_ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>)</span><br><span class="language-javascript">                block_ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> blockWidth = w + r * <span class="hljs-number">2</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 滑块实际的y坐标</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> _y = y - r * <span class="hljs-number">2</span> + <span class="hljs-number">2</span></span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> <span class="hljs-title class_">ImageData</span> = block_ctx.<span class="hljs-title function_">getImageData</span>(x, _y, blockWidth, blockWidth)</span><br><span class="language-javascript">                block.<span class="hljs-property">width</span> = blockWidth</span><br><span class="language-javascript">                block_ctx.<span class="hljs-title function_">putImageData</span>(<span class="hljs-title class_">ImageData</span>, <span class="hljs-number">0</span>, _y)</span><br><span class="language-javascript">            &#125;;</span><br><span class="language-javascript">            img.<span class="hljs-property">crossOrigin</span> = <span class="hljs-string">&quot;Anonymous&quot;</span></span><br><span class="language-javascript">            img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;https://picsum.photos/300/150/?image=&#x27;</span> + <span class="hljs-title function_">getRandomNumberByRange</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 清除图片</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">clean</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            x = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">200</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                y = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">10</span>,</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y)</span><br><span class="language-javascript">            canvas_ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>);</span><br><span class="language-javascript">            block_ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">310</span>, <span class="hljs-number">155</span>)</span><br><span class="language-javascript">            block.<span class="hljs-property">width</span> = <span class="hljs-number">310</span></span><br><span class="language-javascript">            <span class="hljs-title function_">draw</span>(canvas_ctx, <span class="hljs-string">&#x27;fill&#x27;</span>)</span><br><span class="language-javascript">            <span class="hljs-title function_">draw</span>(block_ctx, <span class="hljs-string">&#x27;clip&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 绘制方块</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">ctx, operation</span>) &#123;</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">beginPath</span>()</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(x, y)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">arc</span>(x + l / <span class="hljs-number">2</span>, y - r + <span class="hljs-number">2</span>, r, <span class="hljs-number">0.72</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-number">2.26</span> * <span class="hljs-variable constant_">PI</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x + l, y)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">arc</span>(x + l + r - <span class="hljs-number">2</span>, y + l / <span class="hljs-number">2</span>, r, <span class="hljs-number">1.21</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-number">2.78</span> * <span class="hljs-variable constant_">PI</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x + l, y + l)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x, y + l)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">arc</span>(x + r - <span class="hljs-number">2</span>, y + l / <span class="hljs-number">2</span>, r + <span class="hljs-number">0.4</span>, <span class="hljs-number">2.76</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-number">1.24</span> * <span class="hljs-variable constant_">PI</span>, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(x, y)</span><br><span class="language-javascript">            ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span></span><br><span class="language-javascript">            ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.7)&#x27;</span></span><br><span class="language-javascript">            ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;rgba(255, 255, 255, 0.7)&#x27;</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">stroke</span>()</span><br><span class="language-javascript">            ctx[operation]()</span><br><span class="language-javascript">            ctx.<span class="hljs-property">globalCompositeOperation</span> = <span class="hljs-string">&#x27;overlay&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-title function_">initImg</span>()</span><br><span class="language-javascript">        <span class="hljs-title function_">draw</span>(canvas_ctx, <span class="hljs-string">&#x27;fill&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-title function_">draw</span>(block_ctx, <span class="hljs-string">&#x27;clip&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">// 添加移动事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> block_slider = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#block&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> slider = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.verSliderBlock&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> slider_mark = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#bar-mask&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// 用于判断当前是否是在按住滑块的情况下</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> yd = <span class="hljs-literal">false</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> moveX = <span class="hljs-number">0</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> downX = <span class="hljs-number">0</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标按下</span></span><br><span class="language-javascript">        slider.<span class="hljs-property">onmousedown</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            downX = e.<span class="hljs-property">clientX</span>;</span><br><span class="language-javascript">            yd = <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标移动事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">hadleMousemove</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (yd) &#123;</span><br><span class="language-javascript">                moveX = e.<span class="hljs-property">clientX</span> - downX;</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#slide&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (moveX &gt;= <span class="hljs-number">310</span>) &#123;</span><br><span class="language-javascript">                    moveX = <span class="hljs-number">310</span> - <span class="hljs-number">40</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (moveX &gt; -<span class="hljs-number">2</span>) &#123;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#1991FA&quot;</span>;</span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderWidth</span> = <span class="hljs-string">&quot;1px&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;#1991fa&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = moveX + <span class="hljs-number">40</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                    block_slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = (<span class="hljs-number">310</span> - <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) / (<span class="hljs-number">310</span> - <span class="hljs-number">40</span>) * moveX + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = moveX + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标抬起事件</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">hadleMouseup</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (yd) &#123;</span><br><span class="language-javascript">                slider.<span class="hljs-property">onmousemove</span> = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(moveX)</span><br><span class="language-javascript">                block_slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = (<span class="hljs-number">310</span> - <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) / (<span class="hljs-number">310</span> - <span class="hljs-number">40</span>) * moveX + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>((<span class="hljs-number">310</span> - <span class="hljs-number">40</span> - <span class="hljs-number">20</span>) / (<span class="hljs-number">310</span> - <span class="hljs-number">40</span>) * moveX - x) &lt; <span class="hljs-number">10</span>) &#123;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;url(&#x27;./success.png&#x27;)&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;100%&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                    <span class="hljs-comment">// alert(&#x27;验证成功&#x27;)</span></span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">rest</span>();</span><br><span class="language-javascript">                    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#fce1e1&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderWidth</span> = <span class="hljs-string">&quot;1px&quot;</span></span><br><span class="language-javascript">                    slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;#f57a7a&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#f57a7a&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;url(&#x27;./fail.png&#x27;)&quot;</span>;</span><br><span class="language-javascript">                    slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;100%&#x27;</span></span><br><span class="language-javascript">                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">                        <span class="hljs-title function_">rest</span>();</span><br><span class="language-javascript">                    &#125;, <span class="hljs-number">1000</span>)</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                yd = <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标在按住滑块下移动</span></span><br><span class="language-javascript">        slider.<span class="hljs-property">onmousemove</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMousemove</span>(e)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 鼠标在滑块下抬起</span></span><br><span class="language-javascript">        slider.<span class="hljs-property">onmouseup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMouseup</span>(e)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 设置全局的移动事件，当鼠标按下滑块后，移动过程中鼠标可能会移出滑块</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 此时滑块也会监听鼠标的移动进行相应的移动</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMousemove</span>(e)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mouseup&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">hadleMouseup</span>(e)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">rest</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">clean</span>()</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#slide&#x27;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;向右滑动验证&#x27;</span></span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#fff&quot;</span>;</span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&quot;url(&#x27;./right_arrow.png&#x27;)&quot;</span>;</span><br><span class="language-javascript">            slider.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundSize</span> = <span class="hljs-string">&#x27;100%&#x27;</span></span><br><span class="language-javascript">            block_slider.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;#d1e9fe&quot;</span></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderWidth</span> = <span class="hljs-string">&quot;0px&quot;</span></span><br><span class="language-javascript">            slider_mark.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;#d1e9fe&quot;</span></span><br><span class="language-javascript">            <span class="hljs-title function_">initImg</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">// 刷新</span></span><br><span class="language-javascript">        refresh.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">rest</span>()</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;(<span class="hljs-variable language_">window</span>))</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滑动框2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.main</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative; <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>; <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto; <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#888888</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">0px</span> solid powderblue; <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#range</span> &#123;</span><br><span class="language-css">            -webkit-appearance: none; <span class="hljs-attribute">background</span>: <span class="hljs-number">#999</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: none; <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>; <span class="hljs-attribute">width</span>: <span class="hljs-number">490px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=range]</span>::-webkit-slider-thumb &#123;</span><br><span class="language-css">            -webkit-appearance: none; <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>; <span class="hljs-attribute">background</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">3px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background</span>: green; <span class="hljs-attribute">top</span>: -<span class="hljs-number">2px</span>; <span class="hljs-attribute">left</span>: <span class="hljs-number">10px</span>; <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.range</span> &#123;<span class="hljs-attribute">position</span>: relative;&#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.value</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#ffebc7</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;value&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;range&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;0.1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;.value&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;0&quot;</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> rangeSwitch = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> x = $(<span class="hljs-string">&quot;#range&quot;</span>).<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-string">&quot;width&quot;</span>: (x / <span class="hljs-number">10</span>) * <span class="hljs-number">500</span> * <span class="hljs-number">0.96</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;.value&quot;</span>).<span class="hljs-title function_">html</span>(x)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#range&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;input&quot;</span>, rangeSwitch)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 滑动框3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">input</span> &#123;</span><br><span class="language-css">            appearance: none; -moz-appearance: none;</span><br><span class="language-css">            -webkit-appearance: none; <span class="hljs-attribute">background</span>: none; <span class="hljs-attribute">border</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span> &#123;</span><br><span class="language-css">            <span class="hljs-comment">/* margin: 20px 0 0 200px; */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto; <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative; <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#686B69</span>; <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden; <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>; <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.btn</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute; <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#0c7</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>; <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.tips</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#submit</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">28px</span>; <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>; <span class="hljs-attribute">background</span>: <span class="hljs-number">#0c7</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">text-align</span>: center; <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dragEle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tips&quot;</span>&gt;</span>&gt;&gt;拖动滑块验证<br>                &lt;&lt;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交验证&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">DragValidate</span>(<span class="hljs-params">dargEle, msgEle</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// 滑块拖动标识</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> dragging = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> iX;</span><br><span class="language-javascript">            dargEle.<span class="hljs-title function_">mousedown</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                msgEle.<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">                dragging = <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">                <span class="hljs-comment">// 获取初始坐标</span></span><br><span class="language-javascript">                iX = e.<span class="hljs-property">clientX</span>;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">mousemove</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (dragging) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;</span><br><span class="language-javascript">                    <span class="hljs-keyword">var</span> oX = e.<span class="hljs-property">clientX</span> - iX;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (oX &lt; <span class="hljs-number">30</span>) &#123;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    &#125;;</span><br><span class="language-javascript">                    <span class="hljs-comment">// 容器宽度+10</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span> (oX &gt;= <span class="hljs-number">210</span>) &#123;</span><br><span class="language-javascript">                        oX = <span class="hljs-number">200</span>;</span><br><span class="language-javascript">                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                    &#125;;</span><br><span class="language-javascript">                    dargEle.<span class="hljs-title function_">width</span>(oX + <span class="hljs-string">&quot;px&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-comment">// console.log(oX);</span></span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">            $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">mouseup</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> width = dargEle.<span class="hljs-title function_">width</span>();</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (width &lt; <span class="hljs-number">200</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//console.log(width);</span></span><br><span class="language-javascript">                    dargEle.<span class="hljs-title function_">width</span>(<span class="hljs-string">&quot;30px&quot;</span>);</span><br><span class="language-javascript">                    msgEle.<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;&gt;&gt;拖动滑块验证&lt;&lt;&quot;</span>);</span><br><span class="language-javascript">                &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                    dargEle.<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;validate&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;验证成功！&quot;</span>).<span class="hljs-title function_">unbind</span>(<span class="hljs-string">&quot;mousedown&quot;</span>);</span><br><span class="language-javascript">                &#125;;</span><br><span class="language-javascript">                dragging = <span class="hljs-literal">false</span>;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">        <span class="hljs-title class_">DragValidate</span>($(<span class="hljs-string">&quot;#dragEle&quot;</span>), $(<span class="hljs-string">&quot;.tips&quot;</span>));</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;#submit&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&quot;#dragEle&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;validate&quot;</span>)) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请先拖动滑块验证！&quot;</span>);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;验证成功！&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-6-键盘事件"><a href="#4-6-键盘事件" class="headerlink" title="4-6 键盘事件"></a>4-6 键盘事件</h2><ul><li>键盘事件<ul><li>导入Keys类：<code>from selenium.webdriver.common.keys import Keys</code>。</li><li>组合键<ul><li><code>send_keys(Keys.CONTROL, &#39;a&#39;)</code>······················全选</li><li><code>send_keys(Keys.CONTROL, &#39;c&#39;)</code>······················复制</li><li><code>send_keys(Keys.CONTROL, &#39;v&#39;)</code>······················粘贴</li><li><code>send_keys(Keys.CONTROL, &#39;x&#39;)</code>······················剪切</li></ul></li><li>非组合键<ul><li><code>send_keys(Keys.F1~F12)</code>····························键盘F1~F12，例如：刷新键F5</li><li><code>send_keys(Keys.TAB)</code>·······························制表键</li><li><code>send_keys(Keys.ENTER)</code>·····························回车键</li><li><code>send_keys(Keys.SPACE)</code>·····························空格键</li><li><code>send_keys(Keys.ESCAPE)</code>····························回退键</li><li><code>send_keys(Keys.BACK_SPACE)</code>························删除键</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># keyboard_event.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element1 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)<br>element1.send_keys(<span class="hljs-string">&quot;SeleniumT&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.BACK_SPACE)                     <span class="hljs-comment"># 删除输入的最后一个单词T</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;a&#x27;</span>)                   <span class="hljs-comment"># 全选</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;c&#x27;</span>)                   <span class="hljs-comment"># 复制</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;x&#x27;</span>)                   <span class="hljs-comment"># 剪切</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.CONTROL, <span class="hljs-string">&#x27;v&#x27;</span>)                   <span class="hljs-comment"># 粘贴</span><br>sleep(<span class="hljs-number">3</span>)<br>element1.send_keys(Keys.ENTER)                          <span class="hljs-comment"># 回车</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element2 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)<br>element2.send_keys(<span class="hljs-string">&quot;Python&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.SPACE)                          <span class="hljs-comment"># 空格</span><br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.ESCAPE)                         <span class="hljs-comment"># 回退</span><br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.F5)                             <span class="hljs-comment"># 刷新页面</span><br>sleep(<span class="hljs-number">3</span>)<br>element2.send_keys(Keys.TAB)                            <span class="hljs-comment"># 制表下一个标题</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="4-7-操作对象元素"><a href="#4-7-操作对象元素" class="headerlink" title="4-7 操作对象元素"></a>4-7 操作对象元素</h2><ul><li>操作对象元素<ul><li><code>size</code>··················································返回元素尺寸</li><li><code>text</code>··················································获取元素文本信息</li><li><code>clear()</code>···············································清除内容</li><li><code>click()</code>···············································鼠标点击</li><li><code>submit()</code>··············································提交表单</li><li><code>location</code>··············································获取元素坐标</li><li><code>tag_name</code>··············································获取元素标签类型</li><li><code>send_keys()</code>···········································向输入框输入内容</li><li><code>is_enabled()</code>·····判断元素是否可用，针对<code>type=&quot;button&quot;</code>，返回值一般为True，按钮置灰为False</li><li><code>is_selected()</code>····判断元素是否被选中，一般用于判断表单元素，例如：radio或checkbox是否被选中</li><li><code>is_displayed()</code>···判断元素是否显示，返回结果为一个布尔值，返回True或者False</li><li><code>get_attribute()</code>·······································获取元素某个属性值<ul><li><code>get_attribute(&#39;textContent&#39;)</code>······················获取标签之间的文本内容</li><li><code>get_attribute(&#39;innerHTML&#39;)</code>························获取标签之间的完整HTML</li><li><code>get_attribute(&#39;outerHTML&#39;)</code>························获取当前标签的完整HTML</li></ul></li><li><code>value_of_css_property(css_name)</code>·······················获取CSS的属性值</li></ul></li></ul><h4 id="1-operation-object-py"><a href="#1-operation-object-py" class="headerlink" title="(1) operation_object.py"></a>(1) operation_object.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># operation_object.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>sleep(<span class="hljs-number">3</span>)<br><br>element1 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#lg &gt; map:nth-child(4) &gt; area:nth-child(1)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Size: &quot;</span> + <span class="hljs-built_in">str</span>(element1.size))                    <span class="hljs-comment"># 百度logo图片尺寸</span><br>element2 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;s-top-left&#x27;]&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Text: &quot;</span> + element2.text)                         <span class="hljs-comment"># 获取导航栏文本信息</span><br>element3 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;kw&#x27;]&quot;</span>)<br>element3.click()<br>sleep(<span class="hljs-number">3</span>)<br>element3.send_keys(<span class="hljs-string">&quot;Python&quot;</span>)                            <span class="hljs-comment"># 向输入框输入Python</span><br>sleep(<span class="hljs-number">3</span>)<br>element3.clear()                                        <span class="hljs-comment"># 清除文本内容</span><br>element4 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;su&#x27;]&quot;</span>)<br>element4.submit()                                       <span class="hljs-comment"># 提交表单，百度一下</span><br>sleep(<span class="hljs-number">3</span>)<br>element5 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.title-text&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Location: &quot;</span> + <span class="hljs-built_in">str</span>(element5.location))            <span class="hljs-comment"># 百度热搜坐标</span><br><br>driver.get(<span class="hljs-string">&quot;file:///D:/.../operation_object.html&quot;</span>)      <span class="hljs-comment"># operation_object.html文件存放路径</span><br>sleep(<span class="hljs-number">3</span>)<br>element6 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;but1&#x27;]&quot;</span>)<br>element7 = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;but2&#x27;]&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enabled: &quot;</span> + <span class="hljs-built_in">str</span>(element6.is_enabled()))         <span class="hljs-comment"># 判断按钮是否可用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Enabled: &quot;</span> + <span class="hljs-built_in">str</span>(element7.is_enabled()))         <span class="hljs-comment"># 判断按钮是否可用</span><br><br>driver.get(<span class="hljs-string">&quot;https://mail.163.com/&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>iframe = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;loginDiv&#x27;]/iframe&quot;</span>)<br>driver.switch_to.frame(iframe)                          <span class="hljs-comment"># 切换到iframe中</span><br>element8 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#un-login&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seleted: &quot;</span> + <span class="hljs-built_in">str</span>(element8.is_selected()))        <span class="hljs-comment"># 判断是否勾选，type=&quot;checkbox&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Display: &quot;</span> + <span class="hljs-built_in">str</span>(element8.is_displayed()))       <span class="hljs-comment"># 判断单选框是否显示</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;TagMame: &quot;</span> + <span class="hljs-built_in">str</span>(element8.tag_name))             <span class="hljs-comment"># 获取单选框的标签类型</span><br>element9 = driver.find_element_by_css_selector(<span class="hljs-string">&quot;#account-box &gt; div:nth-child(2)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Content: &quot;</span> + <span class="hljs-built_in">str</span>(element9.get_attribute(<span class="hljs-string">&quot;textContent&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;InnerHTML: &quot;</span> + <span class="hljs-built_in">str</span>(element9.get_attribute(<span class="hljs-string">&quot;innerHTML&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;OuterHTML: &quot;</span> + <span class="hljs-built_in">str</span>(element9.get_attribute(<span class="hljs-string">&quot;outerHTML&quot;</span>)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Get Width: &quot;</span> + <span class="hljs-built_in">str</span>(element9.value_of_css_property(<span class="hljs-string">&quot;width&quot;</span>)))<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-operation-object-html"><a href="#2-operation-object-html" class="headerlink" title="(2) operation_object.html"></a>(2) operation_object.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- operation_object.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>操作对象元素<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">display_alert</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;啥也不是！&quot;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;display_alert()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击我，有惊喜！&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;but2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">disabled</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;display_alert()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点击我，有惊喜！&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-调用JavaScript"><a href="#5-调用JavaScript" class="headerlink" title="5 调用JavaScript"></a>5 调用JavaScript</h1><ul><li>调用JavaScript<ul><li>开发Web端自动化用例代码时，主要过程可以拆分为四个阶段。<ul><li>Web页面加载。</li><li>定位页面元素。</li><li>操作页面元素。</li><li>判断返回结果。</li></ul></li><li>实际使用中常遇到代码执行缓慢，以及代码执行稳定性不高等问题。</li><li>针对稳定性问题，可以将这部分对网页元素进行操作的代码替换成对应的JavaScript脚本。</li><li>就可较大程度地提高稳定性和执行效率(浏览器原生支持JavaScript，直接在内核中执行)。</li></ul></li></ul><h2 id="5-1-百度查询"><a href="#5-1-百度查询" class="headerlink" title="5-1 百度查询"></a>5-1 百度查询</h2><h4 id="1-javascript-click-py"><a href="#1-javascript-click-py" class="headerlink" title="(1) javascript_click.py"></a>(1) javascript_click.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript_click.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>query = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    // 给value属性赋值，实现关键字的输入</span><br><span class="hljs-string">    keywordInput.value = &quot;Selenium&quot;;</span><br><span class="hljs-string">    // 延迟5秒点击&#x27;百度一下&#x27;按钮，setTimeout是异步执行</span><br><span class="hljs-string">    setTimeout(function () &#123;</span><br><span class="hljs-string">        // 根据全局唯一的ID获取查询按钮对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">        var queryBtn = document.getElementById(&quot;su&quot;);</span><br><span class="hljs-string">        // 触发按钮的click点击操作</span><br><span class="hljs-string">        queryBtn.click();</span><br><span class="hljs-string">    &#125;, 5000);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(query)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-javascript-event-py"><a href="#2-javascript-event-py" class="headerlink" title="(2) javascript_event.py"></a>(2) javascript_event.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript_event.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>query = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    // 给value属性赋值，实现关键字的输入</span><br><span class="hljs-string">    keywordInput.value = &quot;Selenium JavaScript&quot;;</span><br><span class="hljs-string">    // 延迟5秒点击&#x27;百度一下&#x27;按钮，setTimeout是异步执行</span><br><span class="hljs-string">    setTimeout(function () &#123;</span><br><span class="hljs-string">        // 根据全局唯一的ID获取查询按钮对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">        var queryBtn = document.getElementById(&quot;su&quot;);</span><br><span class="hljs-string">        // 创建event事件对象</span><br><span class="hljs-string">        var event = document.createEvent(&quot;MouseEvents&quot;);</span><br><span class="hljs-string">        // 初始化事件对象为click事件</span><br><span class="hljs-string">        event.initEvent(&quot;click&quot;, true, true);</span><br><span class="hljs-string">        // 有些标签元素没有onclick属性，直接调用click方法并不会触发对象的点击操作</span><br><span class="hljs-string">        queryBtn.dispatchEvent(event);</span><br><span class="hljs-string">    &#125;, 5000);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(query)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="5-2-返回元素对象"><a href="#5-2-返回元素对象" class="headerlink" title="5-2 返回元素对象"></a>5-2 返回元素对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript_element.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 执行JavaScript脚本返回标签元素对象WebElement</span><br>getKeyWordInput = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    return keywordInput;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>keyWordInputElement = driver.execute_script(getKeyWordInput)<br>keyWordInputElement.send_keys(<span class="hljs-string">&quot;Selenium JavaScript&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="5-3-浏览器滚动条"><a href="#5-3-浏览器滚动条" class="headerlink" title="5-3 浏览器滚动条"></a>5-3 浏览器滚动条</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript_scrollbar.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 执行JavaScript脚本操作页面下拉框</span><br>scrollScript = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 根据全局唯一的ID获取输入框对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">    var keywordInput = document.getElementById(&quot;kw&quot;);</span><br><span class="hljs-string">    keywordInput.value = &quot;Selenium&quot;;</span><br><span class="hljs-string">    // 延迟5秒点击&#x27;百度一下&#x27;按钮，setTimeout是异步执行</span><br><span class="hljs-string">    setTimeout(function () &#123;</span><br><span class="hljs-string">        // 根据全局唯一的ID获取查询按钮对象，使用DOM对象的getElementById方法定位元素</span><br><span class="hljs-string">        var queryBtn = document.getElementById(&quot;su&quot;);</span><br><span class="hljs-string">        queryBtn.click();</span><br><span class="hljs-string">        setTimeout(function () &#123;</span><br><span class="hljs-string">            // 适用于除Chrome浏览器外的其他浏览器</span><br><span class="hljs-string">            document.documentElement.scrollTop = 10000 ;</span><br><span class="hljs-string">            // Chrome浏览器使用这种方法</span><br><span class="hljs-string">            // document.body.scrollTop = 10000;</span><br><span class="hljs-string">        &#125;, 5000);</span><br><span class="hljs-string">        // 延迟5秒下拉滚动条到页面最低端</span><br><span class="hljs-string">    &#125;, 5000);</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(scrollScript)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="5-4-相似元素过滤"><a href="#5-4-相似元素过滤" class="headerlink" title="5-4 相似元素过滤"></a>5-4 相似元素过滤</h2><h4 id="1-javascript-news-py"><a href="#1-javascript-news-py" class="headerlink" title="(1) javascript_news.py"></a>(1) javascript_news.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript_news.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com/&quot;</span>)<br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>clickNewsLink = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 获取超链接的HTML父元素节点</span><br><span class="hljs-string">    var linkParentElement = document.getElementById(&quot;s-top-left&quot;);</span><br><span class="hljs-string">    // 获取linkParentElement元素下的所有超链接</span><br><span class="hljs-string">    var links = linkParentElement.getElementsByTagName(&quot;a&quot;);</span><br><span class="hljs-string">    for (var i = 0; i &lt; links.length; i++) &#123;</span><br><span class="hljs-string">        // 通过&#x27;新闻&#x27;关键字过滤需要的超链接</span><br><span class="hljs-string">        var linkText = links[i].innerHTML.trim();</span><br><span class="hljs-string">        if (linkText.indexOf(&quot;新闻&quot;) != -1) &#123;</span><br><span class="hljs-string">            // 点击超链接</span><br><span class="hljs-string">            links[i].click();</span><br><span class="hljs-string">            break;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(clickNewsLink)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-javascript-label-py"><a href="#2-javascript-label-py" class="headerlink" title="(2) javascript_label.py"></a>(2) javascript_label.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># javascript_label.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;file:///D:/.../javascript_label.html&quot;</span>)      <span class="hljs-comment"># javascript_label.html文件存放路径</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>script = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    // 获取当前页面的所有a标签元素</span><br><span class="hljs-string">    var a_tags = document.getElementsByTagName(&quot;a&quot;);   </span><br><span class="hljs-string">    for (var i = 0; i &lt; a_tags.length; i++) &#123;</span><br><span class="hljs-string">        // 要点击的JavaScript超链接有一个name=&quot;JavaScript&quot;属性和关键字javascript</span><br><span class="hljs-string">        // 获取超链接的内容</span><br><span class="hljs-string">        var a_text = a_tags[i].innerHTML.trim();   </span><br><span class="hljs-string">        if (a_tags[i].hasAttribute(&quot;name&quot;) &amp;&amp; a_text.indexOf(&quot;JavaScript&quot;) != -1) &#123;</span><br><span class="hljs-string">            // 获取具有属性name且内容中包含&#x27;JavaScript&#x27;字符串的a标签，并触发点击操作</span><br><span class="hljs-string">            a_tags[i].click();</span><br><span class="hljs-string">            break;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>driver.execute_script(script)<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="3-javascript-label-html"><a href="#3-javascript-label-html" class="headerlink" title="(3) javascript_label.html"></a>(3) javascript_label.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- javascript_label.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>相似标签过滤<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第一部分<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;language1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Python&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第一部分 - Python&#x27;)&quot;</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Java&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第一部分 - Java&#x27;)&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;C#&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第一部分 - C#&#x27;)&quot;</span>&gt;</span>C#<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Scala&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第一部分 - Scala&#x27;)&quot;</span>&gt;</span>Scala<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;JavaScript&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第一部分 - JavaScript&#x27;)&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>第二部分<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;language2&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第二部分 - Python&#x27;)&quot;</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第二部分 - Java&#x27;)&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第二部分 - C#&#x27;)&quot;</span>&gt;</span>C#<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第二部分 - Scala&#x27;)&quot;</span>&gt;</span>Scala<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;第二部分 - JavaScript&#x27;)&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="6-上传及下载文件"><a href="#6-上传及下载文件" class="headerlink" title="6 上传及下载文件"></a>6 上传及下载文件</h1><ul><li>上传及下载文件<ul><li>上传文件：打开一个系统的Window窗口，从窗口选择文件上传，问题一般会卡在如何操作Window窗口上。<ul><li>控件标签为input时，只要定位上传按钮，通过<code>send_keys()</code>添加文件路径就可以了。</li><li>控件标签为非input时，可以借助第三方工具AutoIt：<a href="https://www.autoitx.com/Doc/">https://www.autoitx.com/Doc/</a>。</li></ul></li><li>下载文件：Selenium的WebDriver允许设置默认下载路径(配置浏览器参数)，从而可以跳过下载弹窗提示。</li></ul></li></ul><h2 id="6-1-上传文件"><a href="#6-1-上传文件" class="headerlink" title="6-1 上传文件"></a>6-1 上传文件</h2><h4 id="1-upload-file-py"><a href="#1-upload-file-py" class="headerlink" title="(1) upload_file.py"></a>(1) upload_file.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># upload_file.py</span><br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;file:///D:/.../upload_file.html&quot;</span>)           <span class="hljs-comment"># upload_file.html文件存放路径</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br>upload = driver.find_element_by_name(<span class="hljs-string">&quot;upfile&quot;</span>)          <span class="hljs-comment"># 定位上传文件按钮</span><br>upload.send_keys(<span class="hljs-string">r&quot;D:/.../geckodriver.log&quot;</span>)             <span class="hljs-comment"># geckodriver.log文件存放路径</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-upload-file-html"><a href="#2-upload-file-html" class="headerlink" title="(2) upload_file.html"></a>(2) upload_file.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- upload_file.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;upfile&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-2-下载文件"><a href="#6-2-下载文件" class="headerlink" title="6-2 下载文件"></a>6-2 下载文件</h2><ul><li>下载文件<ul><li>Firefox<ul><li><code>browser.download.dir</code><ul><li>自定义下载路径，默认只自动创建一级目录，若指定了多级不存在的目录，会下载到默认路径中。</li><li>例如：定义了多级不存在的目录<code>G:\\Download\\Python</code>，文件就会自动下载到默认下载目录中。</li></ul></li><li><code>browser.download.folderList</code><ul><li>0表示下载到桌面，1表示下载到浏览器默认下载路径，2表示使用自定义下载路径。</li><li>与<code>browser.download.dir</code>配合使用，如果设置成0或1，那么dir路径的配置将无用。</li></ul></li><li><code>browser.download.manager.useWindow</code>：设定下载框是否要进行隐藏。</li><li><code>browser.download.manager.closeWhenDone</code>：设定下载结束后是否自动关闭下载框。</li><li><code>browser.download.manager.alertOnEXEOpen</code>：设定下载<code>.exe</code>文件是否要弹出警告。</li><li><code>browser.download.manager.showWhenStarting</code>：设定启动下载时是否显示下载管理器。</li><li><code>browser.download.manager.focusWhenStarting</code>：设定开始下载时是否获取浏览器焦点。</li><li><code>browser.download.manager.showAlertOnComplete</code>：设定下载结束后是否显示下载完成提示框。</li><li><code>browser.helperApps.alwaysAsk.force</code><ul><li>未知的MIME类型文件，浏览器会弹窗让用户处理，默认值为True。</li><li>将默认值改为False，表示不会记录打开未知MIME类型文件的方式。</li></ul></li><li><code>browser.helperApps.neverAsk.openFile</code><ul><li>直接打开下载文件，不显示确认框，默认值为空字符串，右侧代码设定多种文件的MIME类型。</li><li>例如：<code>application/exe</code>表示<code>.exe</code>类型的文件，<code>application/excel</code>表示Excel类型的文件。</li></ul></li><li><code>browser.helperApps.neverAsk.saveToDisk</code><ul><li>对所给文件类型不再弹框进行询问，直接保存到本地磁盘，可选文件类型如下。</li><li><code>text/plain</code></li><li><code>application/zip</code></li><li><code>application/pdf</code></li><li><code>application/a-gzip</code></li><li><code>application/x-gzip</code></li><li><code>application/x-gtar</code></li><li><code>application/x-compressed</code></li><li><code>application/octet-stream</code></li></ul></li></ul></li><li>Chrome<ul><li><code>download.default_directory</code>：设置下载路径。</li><li><code>safebrowsing.enabled</code>：是否提示安全警告，一般下载XML文件时弹窗提醒，True为信任不弹窗。</li><li><code>profile.default_content_settings.popups</code>：取消下载时保存路径弹窗，0是禁止弹出所有窗口。</li></ul></li></ul></li></ul><h4 id="1-Firefox"><a href="#1-Firefox" class="headerlink" title="(1) Firefox"></a>(1) Firefox</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># download_firefox.py</span><br><br>fp = webdriver.FirefoxProfile()                         <span class="hljs-comment"># 创建Firefox配置信息对象，存放自定义配置</span><br>fp.set_preference(<span class="hljs-string">&#x27;browser.download.dir&#x27;</span>, <span class="hljs-string">&#x27;E:\\&#x27;</span>)       <span class="hljs-comment"># 指定下载文件的存放路径</span><br>fp.set_preference(<span class="hljs-string">&#x27;browser.download.folderList&#x27;</span>, <span class="hljs-number">2</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.useWindow&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.closeWhenDone&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.alertOnEXEOpen&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&#x27;browser.download.manager.showWhenStarting&#x27;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.focusWhenStarting&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.download.manager.showAlertOnComplete&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.helperApps.alwaysAsk.force&quot;</span>, <span class="hljs-literal">False</span>)<br>fp.set_preference(<span class="hljs-string">&quot;browser.helperApps.neverAsk.openFile&quot;</span>, <span class="hljs-string">&quot;application/zip&quot;</span>)<br>fp.set_preference(<span class="hljs-string">&#x27;browser.helperApps.neverAsk.saveToDisk&#x27;</span>, <span class="hljs-string">&#x27;application/zip, application/pdf&#x27;</span>)<br><br>driver = webdriver.Firefox(firefox_profile=fp)          <span class="hljs-comment"># 通过参数将配置添加到FirefoxProfile对象中</span><br>driver.get(<span class="hljs-string">&quot;https://npm.taobao.org/mirrors/geckodriver/v0.20.0/&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>file = driver.find_element_by_link_text(<span class="hljs-string">&quot;geckodriver-v0.20.0-win64.zip&quot;</span>)<br>file.click()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h4 id="2-Chrome"><a href="#2-Chrome" class="headerlink" title="(2) Chrome"></a>(2) Chrome</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># download_chrome.py</span><br><br>options = webdriver.ChromeOptions()                     <span class="hljs-comment"># 创建Google加载项对象</span><br>prefs = &#123;<span class="hljs-string">&#x27;profile.default_content_settings.popups&#x27;</span>: <span class="hljs-number">0</span>,  <span class="hljs-comment"># 定义加载项参数</span><br>         <span class="hljs-string">&#x27;download.default_directory&#x27;</span>: <span class="hljs-string">&#x27;E:\\&#x27;</span>&#125;          <span class="hljs-comment"># 指定下载文件的存放路径</span><br>options.add_experimental_option(<span class="hljs-string">&#x27;prefs&#x27;</span>, prefs)         <span class="hljs-comment"># 将加载项参数添加到Google加载项对象中</span><br>driver = webdriver.Chrome(options=options)              <span class="hljs-comment"># 创建浏览器对象，并添加加载项对象</span><br>driver.get(<span class="hljs-string">&#x27;https://npm.taobao.org/mirrors/chromedriver/80.0.3987.106/&#x27;</span>)<br>sleep(<span class="hljs-number">3</span>)<br>driver.find_element_by_link_text(<span class="hljs-string">&quot;chromedriver_win32.zip&quot;</span>).click()<br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h1 id="7-HTML5标签处理"><a href="#7-HTML5标签处理" class="headerlink" title="7 HTML5标签处理"></a>7 HTML5标签处理</h1><ul><li>HTML5标签处理<ul><li>video视频标签：<code>&lt;video&gt;&lt;/video&gt;</code>。<ul><li><code>return arguments[0].play()</code>：在线播放视频。</li><li><code>return arguments[0].load()</code>：重新载入视频。</li><li><code>return arguments[0].pause()</code>：暂停播放视频。</li><li><code>return arguments[0].duration</code>：获取视频文件的播放时长。</li><li><code>return arguments[0].currentSrc</code>：获取视频文件的网络存储地址。</li></ul></li><li>canvas画图标签：<code>&lt;canvas&gt;&lt;/canvas&gt;</code>，结合鼠标事件或JavaScript脚本实现效果图。</li></ul></li></ul><h2 id="7-1-video视频标签"><a href="#7-1-video视频标签" class="headerlink" title="7-1 video视频标签"></a>7-1 video视频标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># html5_video.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://videojs.com/&quot;</span>)                      <span class="hljs-comment"># 有梯子更佳，部分地区访问速度慢</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">30</span>)<br><br>element_video = driver.find_element_by_id(<span class="hljs-string">&quot;preview-player_html5_api&quot;</span>)<br>url = driver.execute_script(<span class="hljs-string">&quot;return arguments[0].currentSrc&quot;</span>, element_video)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Src: &quot;</span> + url)                                    <span class="hljs-comment"># 获取视频文件的网络存储地址</span><br>dur = driver.execute_script(<span class="hljs-string">&quot;return arguments[0].duration&quot;</span>, element_video)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Dur: &quot;</span> + <span class="hljs-built_in">str</span>(dur))                               <span class="hljs-comment"># 获取视频文件的播放时长</span><br><br>ActionChains(driver).click(element_video).perform()     <span class="hljs-comment"># 使用鼠标事件进行点击，播放3秒</span><br>sleep(<span class="hljs-number">3</span>)<br>driver.execute_script(<span class="hljs-string">&quot;return arguments[0].pause()&quot;</span>, element_video)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 暂停视频</span><br>driver.execute_script(<span class="hljs-string">&quot;return arguments[0].load()&quot;</span>, element_video)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 重新载入视频</span><br>driver.execute_script(<span class="hljs-string">&quot;return arguments[0].play()&quot;</span>, element_video)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 持续播放3秒</span><br>driver.save_screenshot(<span class="hljs-string">r&quot;D:/.../picture/html5_video.png&quot;</span>)<br>sleep(<span class="hljs-number">3</span>)                                                <span class="hljs-comment"># 视频截图</span><br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h2 id="7-2-canvas画图标签"><a href="#7-2-canvas画图标签" class="headerlink" title="7-2 canvas画图标签"></a>7-2 canvas画图标签</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                          <span class="hljs-comment"># html5_canvas.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;http://literallycanvas.com/&quot;</span>)               <span class="hljs-comment"># 有梯子更佳，部分地区访问速度慢</span><br>driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>driver.implicitly_wait(<span class="hljs-number">30</span>)<br><br>element_canvas = driver.find_element_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;literally-canvas&#x27;]/div[3]/div[1]/canvas[1]&quot;</span>)<br>ActionChains(driver).click_and_hold(element_canvas).perform()<br>ActionChains(driver).move_by_offset(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>).move_by_offset(<span class="hljs-number">10</span>, -<span class="hljs-number">10</span>).perform()<br>ActionChains(driver).release().perform()                <span class="hljs-comment"># 模拟鼠标释放操作</span><br>sleep(<span class="hljs-number">3</span>)<br><br>driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br></code></pre></td></tr></table></figure><h1 id="8-分页爬取B站数据"><a href="#8-分页爬取B站数据" class="headerlink" title="8 分页爬取B站数据"></a>8 分页爬取B站数据</h1><ul><li>分页爬取B站数据<ul><li>爬虫：即获取网页并提取和保存信息的自动化程序。</li><li>获取网页源代码，分析源代码，从中提取想要的数据，最通用的方法是使用正则表达式。</li><li>如果网页的结构存在一定的规则，还可以根据一些节点属性，结合定位元素来提取数据。</li><li>提取数据后，一般都会将数据保存到文档中，例如：TXT文本、JSON文本、Excel文档。</li><li>或保存到数据库中，如MySQL、MongoDB等，甚至借助SFTP等工具保存到远程服务器上，方便后续的使用。</li></ul></li></ul><h2 id="8-1-数据爬取"><a href="#8-1-数据爬取" class="headerlink" title="8-1 数据爬取"></a>8-1 数据爬取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># bilibili_data.py</span><br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br><span class="hljs-comment"># 浏览器无界面操作，不清楚操作情况，代码执行过程中容易定位不到而报错</span><br><span class="hljs-comment"># driver = webdriver.ChromeOptions()</span><br><span class="hljs-comment"># driver.add_argument(&#x27;--headless&#x27;)</span><br><span class="hljs-comment"># driver = webdriver.Chrome(chrome_options=driver)</span><br><br><span class="hljs-comment"># Edge界面操作，可以清楚地看到翻页过程，方便代码抓取元素进行定位</span><br>driver = webdriver.Edge()<br>driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span>)<br>driver.maximize_window()<br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 定位搜索框，输入搜索内容，回车进行搜索</span><br>search = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.nav-search-input&quot;</span>)<br>search.send_keys(<span class="hljs-string">&quot;Selenium教程&quot;</span>)<br>search.send_keys(Keys.ENTER)<br><br><span class="hljs-comment"># 获取浏览器中的所有句柄，切换至搜索到的内容页面</span><br>handles = driver.window_handles<br>current = driver.current_window_handle<br><span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> handles:<br>    <span class="hljs-keyword">if</span> handle != current:<br>        driver.close()<br>        driver.implicitly_wait(<span class="hljs-number">10</span>)<br>        driver.switch_to.window(handle)<br>        driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 定位“下一页”按钮的前一个页面按钮，提取最大页数文本</span><br>pages = driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(10)&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总页数：&quot;</span> + pages.text)<br><br><span class="hljs-comment"># 将获取到的数据写入Excel文档</span><br>book = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, style_compression=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 遍历页面</span><br><span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pages.text)+<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;----------------------------Page <span class="hljs-subst">&#123;page&#125;</span>----------------------------&quot;</span>)<br>    <span class="hljs-comment"># 定位“标题名称、作者、发布时间”元素</span><br>    titles = driver.find_elements_by_css_selector(<span class="hljs-string">&quot;.bili-video-card__info--right&quot;</span>)<br><br>    <span class="hljs-comment"># 分页写入数据</span><br>    sheet = book.add_sheet(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;page&#125;</span>页&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;名称&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;作者&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;发布时间&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;URL&#x27;</span>)<br><br>    <span class="hljs-comment"># 设置Excel表格列宽</span><br>    sheet.col(<span class="hljs-number">0</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br>    sheet.col(<span class="hljs-number">1</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">2</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">3</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br><br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> titles:<br>        <span class="hljs-comment"># 多出部分隐藏的url，隐藏部分无text，判空跳过</span><br>        <span class="hljs-keyword">if</span> title.text == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 逐行读取text</span><br>            lines = (title.text).split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            url = title.find_element_by_xpath(<span class="hljs-string">&#x27;a&#x27;</span>).get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            num += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># Excel写入数据</span><br>        sheet.write(num, <span class="hljs-number">0</span>, lines[<span class="hljs-number">0</span>])<br>        sheet.write(num, <span class="hljs-number">1</span>, lines[<span class="hljs-number">1</span>])<br>        sheet.write(num, <span class="hljs-number">2</span>, lines[<span class="hljs-number">2</span>])<br>        sheet.write(num, <span class="hljs-number">3</span>, url)<br><br>    <span class="hljs-comment"># 点击“下一页”按钮进行翻页</span><br>    driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(11)&quot;</span>).click()<br>    sleep(<span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># 将Excel保存到指定路径下</span><br>book.save(<span class="hljs-string">r&#x27;D:\...\data\bilibili_data.xls&#x27;</span>)<br>driver.quit()<br></code></pre></td></tr></table></figure><h2 id="8-2-代码整合"><a href="#8-2-代码整合" class="headerlink" title="8-2 代码整合"></a>8-2 代码整合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># crawling_data.py</span><br><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.common.exceptions <span class="hljs-keyword">import</span> TimeoutException<br><br><span class="hljs-comment"># Edge界面操作</span><br>driver = webdriver.Edge()<br><span class="hljs-comment"># 将获取到的数据写入Excel文档</span><br>book = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, style_compression=<span class="hljs-number">0</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_source</span>():<br>    driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span>)<br>    driver.maximize_window()<br>    driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><br><span class="hljs-comment"># 定位搜索框，输入搜索内容，回车进行搜索</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_search</span>():<br>    search = driver.find_element_by_css_selector(<span class="hljs-string">&quot;.nav-search-input&quot;</span>)<br>    search.send_keys(<span class="hljs-string">&quot;Selenium教程&quot;</span>)<br>    search.send_keys(Keys.ENTER)<br><br><br><span class="hljs-comment"># 获取浏览器中的所有句柄，切换至搜索到的内容页面</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">switch_window</span>():<br>    handles = driver.window_handles<br>    current = driver.current_window_handle<br>    <span class="hljs-keyword">for</span> handle <span class="hljs-keyword">in</span> handles:<br>        <span class="hljs-keyword">if</span> handle != current:<br>            driver.close()<br>            driver.implicitly_wait(<span class="hljs-number">10</span>)<br>            driver.switch_to.window(handle)<br>            driver.implicitly_wait(<span class="hljs-number">10</span>)<br><br><br><span class="hljs-comment"># 点击“下一页”按钮进行翻页</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">next_page</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;----------------------------Page <span class="hljs-subst">&#123;page&#125;</span>----------------------------&quot;</span>)<br>        <span class="hljs-comment"># 动态进度条进行加载</span><br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>            sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r当前进度：&#123;0&#125;&#123;1&#125;%&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;■&#x27;</span> * t * <span class="hljs-number">5</span>, (t * <span class="hljs-number">10</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(11)&quot;</span>).click()<br>        sleep(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> TimeoutException:<br>        driver.refresh()<br>        <span class="hljs-keyword">return</span> next_page(page)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_to_excel</span>(<span class="hljs-params">page</span>):<br>    <span class="hljs-comment"># 分页写入数据</span><br>    sheet = book.add_sheet(<span class="hljs-string">f&#x27;第<span class="hljs-subst">&#123;page&#125;</span>页&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;名称&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;作者&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;发布时间&#x27;</span>)<br>    sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;URL&#x27;</span>)<br><br>    <span class="hljs-comment"># 设置Excel表格列宽</span><br>    sheet.col(<span class="hljs-number">0</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br>    sheet.col(<span class="hljs-number">1</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">2</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">30</span><br>    sheet.col(<span class="hljs-number">3</span>).width = <span class="hljs-number">256</span> * <span class="hljs-number">50</span><br><br>    num = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 定位“标题名称、作者、发布时间”元素</span><br>    titles = driver.find_elements_by_css_selector(<span class="hljs-string">&quot;.bili-video-card__info--right&quot;</span>)<br>    <span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> titles:<br>        <span class="hljs-comment"># 多出部分隐藏的url，隐藏部分无text，判空跳过</span><br>        <span class="hljs-keyword">if</span> title.text == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 逐行读取text</span><br>            lines = (title.text).split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            url = title.find_element_by_xpath(<span class="hljs-string">&#x27;a&#x27;</span>).get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>            num += <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># Excel写入数据</span><br>        sheet.write(num, <span class="hljs-number">0</span>, lines[<span class="hljs-number">0</span>])<br>        sheet.write(num, <span class="hljs-number">1</span>, lines[<span class="hljs-number">1</span>])<br>        sheet.write(num, <span class="hljs-number">2</span>, lines[<span class="hljs-number">2</span>])<br>        sheet.write(num, <span class="hljs-number">3</span>, url)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        get_source()<br>        get_search()<br>        switch_window()<br><br>        <span class="hljs-comment"># 定位“下一页”按钮的前一个页面按钮，提取最大页数文本</span><br>        pages = driver.find_element_by_css_selector(<span class="hljs-string">&quot;button.vui_button:nth-child(10)&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;总页数：&quot;</span> + pages.text)<br><br>        <span class="hljs-comment"># 遍历页面</span><br>        <span class="hljs-keyword">for</span> page <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">int</span>(pages.text) + <span class="hljs-number">1</span>):<br>            next_page(page)<br>            write_to_excel(page)<br>    <span class="hljs-keyword">finally</span>:<br>        driver.quit()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br>    <span class="hljs-comment"># 将Excel保存到指定路径下</span><br>    book.save(<span class="hljs-string">r&#x27;D:\...\data\crawling_data.xls&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="9-JFORUM论坛实战"><a href="#9-JFORUM论坛实战" class="headerlink" title="9 JFORUM论坛实战"></a>9 JFORUM论坛实战</h1><ul><li>JFORUM论坛实战<ul><li>搭建JForum论坛：已提前安装Java1.8版本依赖，Tomcat启动会涉及。<ul><li>安装xampp：<a href="https://nchc.dl.sourceforge.net/project/xampp/XAMPP%20Windows/5.6.40/xampp-windows-x64-5.6.40-1-VC11-installer.exe">xampp-windows-x64-5.6.40-1-VC11-installer.exe</a>。</li><li>解压JForum-2.7.0.war到“jforum”文件夹中：<a href="https://master.dl.sourceforge.net/project/jforum2/jforum-2.7.0.war?viasf=1">JForum-2.7.0.war</a>。</li><li>将“jforum”文件夹剪切粘贴到xampp的“\tomcat\webapps”目录下。</li><li>XAMPP Control Panel-&gt;启动xampp，分别点击Apache、MySQL、Tomcat的Start按钮。</li><li>MySQL的Admin-&gt;数据库-&gt;数据库名<code>jforum</code>，排序规则<code>utf8_general_ci</code>-&gt;创建。</li><li>账户-&gt;对三个用户名为root的账户修改权限-&gt;修改密码为<code>123456</code>(自定义数据库密码)。</li><li>都改好之后刷新页面将显示权限不足，找到xampp的“phpMyAdmin\config.inc.php”文件。</li><li>修改密码为设置root权限时的密码：<code>$cfg[&#39;Servers&#39;][$i][&#39;password&#39;] = &#39;123456&#39;;</code>。</li><li>浏览器访问“<a href="http://127.0.0.1:8080/jforum/install.jsp">http://127.0.0.1:8080/jforum/install.jsp</a>”进行JForum论坛的安装与部署。<ul><li>数据库名称<code>jforum</code>，数据库用户账号<code>root</code>(有大小写区别，不要写错)，密码<code>123456</code>。</li><li>数据库编码默认不选(安装时系统会自动选择)，系统管理员账号<code>Admin</code>，密码<code>123456</code>。</li><li>最后安装完成，即可跳转“<a href="http://127.0.0.1:8080/jforum/user/login.page">论坛首页</a>”。</li></ul></li></ul></li><li>前提：进入后台管理的系统设置。<ul><li>会员注册时使用图片验证码、发帖时启用图片验证码。</li><li>系统管理者或版面管理员发文时启用图片验证码，都改为否，更新。</li><li>轮询发帖前，需要先新建一个名称都为“每日一言”的版面和版块。</li></ul></li><li>批量自动化注册：验证用户信息是否正确地保存到数据库、注册过程是否流畅、是否有错误提示等。</li><li>批量自动化登录：验证用户输入的用户名和密码是否正确、登录过程是否流畅、是否有错误提示等。</li><li>多账号轮询发帖：一种自动化工具的应用。<ul><li>多个账号登录JForum论坛，实现同一板块的轮询发帖操作。</li><li>使用到的接口：<a href="https://v.api.aa1.cn/api/yiyan/index.php">https://v.api.aa1.cn/api/yiyan/index.php</a>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver                              <span class="hljs-comment"># edge_driver.py</span><br><br>driver = webdriver.Edge()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open_homepage</span>():<br>    driver.get(<span class="hljs-string">&quot;http://127.0.0.1:8080/jforum/user/login.page&quot;</span>)<br>    driver.maximize_window()                                <span class="hljs-comment"># 浏览器窗口最大化</span><br>    driver.implicitly_wait(<span class="hljs-number">10</span>)                              <span class="hljs-comment"># 设置隐式时间等待，全局生效</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close_browser</span>():<br>    driver.quit()                                           <span class="hljs-comment"># quit关闭整个浏览器</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    open_homepage()                                         <span class="hljs-comment"># 调用打开浏览器函数</span><br>    close_browser()                                         <span class="hljs-comment"># 调用关闭浏览器函数</span><br></code></pre></td></tr></table></figure><h2 id="9-1-批量注册"><a href="#9-1-批量注册" class="headerlink" title="9-1 批量注册"></a>9-1 批量注册</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> edge_driver <span class="hljs-keyword">import</span> *                                   <span class="hljs-comment"># member_register.py，关联edge_driver.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log_out</span>():<br>    logout_button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;logout&quot;]&#x27;</span>)<br>    ActionChains(driver).click(logout_button).perform()     <span class="hljs-comment"># 注销当前账号的登录</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">member_register</span>(<span class="hljs-params">username, email, password</span>):             <span class="hljs-comment"># 分模块写，利于代码重用</span><br>    register_button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;register&quot;]&#x27;</span>)<br>    ActionChains(driver).click(register_button).perform()   <span class="hljs-comment"># 点击会员注册按钮</span><br>    consent_clause = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;/html/body/table/tbody/tr[2]/td/table/tbody/tr[3]/td/input[1]&#x27;</span><br>    )<br>    ActionChains(driver).click(consent_clause).perform()    <span class="hljs-comment"># 点击同意协议按钮</span><br><br>    user_name = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;formregister&quot;]/table[2]/tbody/tr[3]/td[2]/input&#x27;</span><br>    )<br>    e_mail = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;formregister&quot;]/table[2]/tbody/tr[4]/td[2]/input&#x27;</span><br>    )<br>    code_one = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;password&quot;]&#x27;</span>)<br>    code_two = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;formregister&quot;]/table[2]/tbody/tr[6]/td[2]/input&#x27;</span><br>    )<br>    user_name.send_keys(username)                           <span class="hljs-comment"># 输入用户名、电子邮箱、密码</span><br>    e_mail.send_keys(email)<br>    code_one.send_keys(password)<br>    code_two.send_keys(password)<br><br>    define_button = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;formregister&quot;]/table[2]/tbody/tr[7]/td/input[1]&#x27;</span><br>    )<br>    ActionChains(driver).click(define_button).perform()     <span class="hljs-comment"># 点击确定按钮</span><br>    log_out()                                               <span class="hljs-comment"># 注销账号</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    open_homepage()                                         <span class="hljs-comment"># 打开浏览器</span><br>    member_info = [                                         <span class="hljs-comment"># 要注册的用户密码信息</span><br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Elara&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Elara@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Galen&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Galen@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Thalia&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Thalia@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Celeste&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Celeste@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Saffron&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Saffron@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br>    ]<br>    <span class="hljs-keyword">for</span> member <span class="hljs-keyword">in</span> member_info:                              <span class="hljs-comment"># 批量注册</span><br>        username = member[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        email = member[<span class="hljs-string">&#x27;email&#x27;</span>]<br>        password = member[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        member_register(username, email, password)<br>    close_browser()                                         <span class="hljs-comment"># 关闭浏览器</span><br></code></pre></td></tr></table></figure><h2 id="9-2-批量登录"><a href="#9-2-批量登录" class="headerlink" title="9-2 批量登录"></a>9-2 批量登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> member_register <span class="hljs-keyword">import</span> *                               <span class="hljs-comment"># member_login.py，关联member_register.py</span><br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log_in</span>():<br>    login_button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;login&quot;]&#x27;</span>)<br>    ActionChains(driver).click(login_button).perform()      <span class="hljs-comment"># 点击跳转登录页面</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">member_login</span>(<span class="hljs-params">username, password</span>):<br>    user_name = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;loginform&quot;]/table[2]/tbody/tr[2]/td/table/tbody/tr[2]/td[2]/input&#x27;</span><br>    )<br>    user_name.send_keys(username)                           <span class="hljs-comment"># 用户名</span><br>    pass_word = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;loginform&quot;]/table[2]/tbody/tr[2]/td/table/tbody/tr[3]/td[2]/input&#x27;</span><br>    )<br>    pass_word.send_keys(password)                           <span class="hljs-comment"># 密码</span><br>    login_button = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;loginform&quot;]/table[2]/tbody/tr[2]/td/table/tbody/tr[5]/td/input[2]&#x27;</span><br>    )<br>    ActionChains(driver).click(login_button).perform()      <span class="hljs-comment"># 登录</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    open_homepage()                                         <span class="hljs-comment"># 打开浏览器</span><br>    member_info = [                                         <span class="hljs-comment"># 要登录的用户密码信息</span><br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Elara&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Elara@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Galen&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Galen@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Thalia&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Thalia@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Celeste&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Celeste@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Saffron&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Saffron@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br>    ]<br>    <span class="hljs-keyword">for</span> member <span class="hljs-keyword">in</span> member_info:                              <span class="hljs-comment"># 批量登录</span><br>        username = member[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = member[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        member_login(username, password)<br>        log_out()                                           <span class="hljs-comment"># 注销当前账号，进行下一账号的登录</span><br>        log_in()                                            <span class="hljs-comment"># 返回登录页面</span><br>    close_browser()                                         <span class="hljs-comment"># 关闭浏览器</span><br></code></pre></td></tr></table></figure><h2 id="9-3-轮询发帖"><a href="#9-3-轮询发帖" class="headerlink" title="9-3 轮询发帖"></a>9-3 轮询发帖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> requests                                             <span class="hljs-comment"># member_posting.py，关联member_login.py</span><br><span class="hljs-keyword">from</span> member_login <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_apiData</span>():<br>    url = <span class="hljs-string">&#x27;https://v.api.aa1.cn/api/yiyan/index.php&#x27;</span>        <span class="hljs-comment"># 每日一言接口</span><br>    response = requests.get(url, verify=<span class="hljs-literal">False</span>)              <span class="hljs-comment"># 报错[SSL: CERTIFICATE_VERIFY_FAILED]</span><br>    html = response.text                                    <span class="hljs-comment"># verify禁用证书验证</span><br>    soup = BeautifulSoup(html, <span class="hljs-string">&#x27;html.parser&#x27;</span>)               <span class="hljs-comment"># 不推荐该方法，降低安全性</span><br>    text = soup.get_text()<br>    <span class="hljs-keyword">return</span> text                                             <span class="hljs-comment"># 获取接口返回的每日一言</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">member_posting</span>(<span class="hljs-params">title, content</span>):<br>    block_button = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;/html/body/table/tbody/tr[2]/td/table[2]/tbody&#x27;</span><br>        <span class="hljs-string">&#x27;/tr/td/table[2]/tbody/tr[5]/td[2]/span[1]/a&#x27;</span><br>    )<br>    block_button.click()                                    <span class="hljs-comment"># 进入板块</span><br>    deliver_keynote = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;/html/body/table/tbody/tr[2]/td/table[2]/tbody/tr/td/table[2]/tbody/tr/td[1]/a/img&#x27;</span><br>    )<br>    deliver_keynote.click()                                 <span class="hljs-comment"># 发表主题</span><br>    topic_title = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;post&quot;]/table/tbody/tr/td/table[3]/tbody/tr[2]/td[2]/span/input&#x27;</span><br>    )<br>    topic_title.send_keys(title)                            <span class="hljs-comment"># 标题内容</span><br>    post_content = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;//*[@id=&quot;post&quot;]/table/tbody/tr/td/table[3]/tbody&#x27;</span><br>        <span class="hljs-string">&#x27;/tr[3]/td[2]/div/table/tbody/tr[4]/td/textarea&#x27;</span><br>    )<br>    post_content.send_keys(content)                         <span class="hljs-comment"># 帖子内容</span><br>    close_bbcode = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;disable_bbcode&quot;]&#x27;</span>)<br>    close_bbcode.click()                                    <span class="hljs-comment"># 勾选进行关闭</span><br>    send_button = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;btnSubmit&quot;]&#x27;</span>)<br>    send_button.click()                                     <span class="hljs-comment"># 发布帖子</span><br>    return_home = driver.find_element_by_xpath(<br>        <span class="hljs-string">&#x27;/html/body/table/tbody/tr[2]/td/table[2]/tbody/tr/td/table[2]/tbody/tr/td[2]/span/a[1]&#x27;</span><br>    )<br>    return_home.click()                                     <span class="hljs-comment"># 返回论坛首页</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    open_homepage()                                         <span class="hljs-comment"># 调用打开浏览器函数</span><br>    member_info = [                                         <span class="hljs-comment"># 要登录的用户密码信息</span><br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Elara&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Elara@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Galen&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Galen@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Thalia&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Thalia@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Celeste&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Celeste@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;,<br>        &#123;<span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;Saffron&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;Saffron@example.com&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123456&quot;</span>&#125;<br>    ]<br>    <span class="hljs-keyword">for</span> member <span class="hljs-keyword">in</span> member_info:                              <span class="hljs-comment"># 批量登录</span><br>        username = member[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = member[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        member_login(username, password)<br>        date = datetime.now().strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>        title = <span class="hljs-string">&#x27;每日一言&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + date<br>        content = get_apiData()                             <span class="hljs-comment"># 获取接口的每日一言</span><br>        member_posting(title, content)                      <span class="hljs-comment"># 当前账号进行发帖</span><br>        log_out()                                           <span class="hljs-comment"># 注销当前账号，进行下一账号的登录</span><br>        log_in()                                            <span class="hljs-comment"># 返回登录页面</span><br>    close_browser()                                         <span class="hljs-comment"># 调用关闭浏览器函数</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>测试框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>F12 开发者工具</title>
    <link href="/2022/11/10/ce-shi-gong-ju/tt06-f12-kai-fa-zhe-gong-ju/"/>
    <url>/2022/11/10/ce-shi-gong-ju/tt06-f12-kai-fa-zhe-gong-ju/</url>
    
    <content type="html"><![CDATA[<p>利用浏览器中的F12开发者工具选项，进行网站界面的测试、调试及分析网页出现的问题，支持查看HTML元素、响应事件等。</p><span id="more"></span><h1 id="1-开发者工具"><a href="#1-开发者工具" class="headerlink" title="1 开发者工具"></a>1 开发者工具</h1><ul><li>开发者工具：以Chrome正式版本108.0.5359.125为例。<ul><li>Elements：元素，用于查找网页源代码中的元素，手动修改任一元素的属性和样式能在浏览器中得到实时反馈。</li><li>Console：控制台，记录开发者开发过程中的日志信息，并且可以作为与JavaScript代码进行交互的命令行Shell。</li><li>Sources：源代码。<ul><li>用于查看页面的HTML源代码、JavaScript源代码、CSS源代码。</li><li>还可用于调试JavaScript源代码，给JavaScript源代码添加断点。</li></ul></li><li>Network：网络。<ul><li>从发起网页页面请求Request，到分析HTTP请求后，得到的各个请求资源信息。</li><li>包括名称、状态、类型、启动器、大小、时间、瀑布流，测试人员应重点掌握。</li></ul></li><li>Performance：前端性能，监控CPU、内存、网络、GPU、时间消耗等资源。</li><li>Memory：内存，查看当前网页的JavaScript占用内存情况。</li><li>Application：应用，记录加载的所有资源，包括存储空间、IndexedDB、Web SQL、Cookie、应用程序缓存等。</li><li>Security：安全，调试当前网页的安全和认证问题，确保在网站上正确地实现HTTPS，判断当前网页是否安全。</li></ul></li></ul><p><img src="/../../img/F12/F12@001.jpg" srcset="/img/load.gif" lazyload alt="开发者工具-语言改中文设置-Settings"></p><ul><li>语言改中文设置<ul><li>点击界面右上角的Settings按钮，选择Preferences的Language为“Chinese-中文”，右上角点“×”关闭Settings界面。</li><li>此时，F12开发者工具选项的界面上显示<code>Reload DevTools</code>按钮，点击该按钮，重新加载开发者工具选项界面就可以了。</li></ul></li></ul><p><img src="/../../img/F12/F12@002.jpg" srcset="/img/load.gif" lazyload alt="开发者工具-语言改中文设置-Preferences"></p><h1 id="2-Elements"><a href="#2-Elements" class="headerlink" title="2 Elements"></a>2 Elements</h1><ul><li>Elements<ul><li>查看页面的所有HTML元素及CSS样式，用于页面结构分析，也可用于自动化脚本的元素定位。</li><li>Styles：样式，实时修改属性值。<ul><li>所有样式都是可编辑的，在每个属性后单击可添加新样式。</li><li>点击样式面板右侧的文件名，界面将跳转到Source面板中。</li></ul></li><li>Computed：盒模型，底部是当前盒模型的具体属性。</li><li>Layout：Grid和Flexbox布局。</li><li>Event Listeners：事件监听器。</li><li>DOM Breakpoints：DOM断点。</li><li>Properties：属性，支持过滤查找。</li><li>Accessibility：无障碍的功能模式。</li></ul></li></ul><p><img src="/../../img/F12/F12@003.jpg" srcset="/img/load.gif" lazyload alt="Elements"></p><h1 id="3-Console"><a href="#3-Console" class="headerlink" title="3 Console"></a>3 Console</h1><ul><li>Console<ul><li>查看调试日志信息或异常错误信息，前端开发依据具体问题进行调试，从而解决出现的Bug问题。</li><li>通过JavaScript代码或命令行，将日志信息输出到控制台。<ul><li><code>console.log()</code>：以字符串形式打印基本的日志信息。</li><li><code>console.dir()</code>：以对象结构扩展列表形式打印信息。</li><li>消息分组<ul><li><code>console.group</code>：给相关日志分组。</li><li><code>console.groupEnd()</code>：对消息进行分组，避免混乱。</li><li><code>console.groupCollapsed()</code>：默认情况下折叠分组。</li></ul></li><li>时间函数<ul><li><code>console.time()</code>：启动计时器。</li><li><code>console.timeLog()</code>：每次调用时打印自计时器启动3秒后的时间。</li><li><code>console.timeEnd()</code>：打印总时间。</li></ul></li><li><code>console.warn()</code>：显示带有黄色小图标的警告信息。</li><li><code>console.error()</code>：显示带有红色小图标的错误信息。</li><li><code>console.table()</code>：将对象打印成表格形式，每个对象的属性带有标记的行。</li><li><code>console.trace()</code>：调用堆栈顶部所需的函数，查看调用该代码的确切位置。</li><li><code>console.count()</code>：计数，可自定义标签打印，每次调用时计数值加1，结合forEach打印。</li><li><code>console.assert()</code>：通过属性做条件筛选，当条件不成立时才打印设置的消息，调试必备。</li></ul></li><li>控制台交互<ul><li><code>$()</code>：返回与指定的CSS选择器相匹配的第一个元素，等同于<code>document.querySelector()</code>。</li><li><code>$$()</code>：返回与指定的CSS选择器相匹配的所有元素数组，等同于<code>document.querySelectorAll()</code>。</li><li><code>$x()</code>：返回与指定的XPath相匹配的所有元素数组。</li></ul></li><li>常见报错内容：XXX类没找到、XXX变量未定义、SSL证书失效、前后端跨域错误等。</li></ul></li></ul><p><img src="/../../img/F12/F12@004.jpg" srcset="/img/load.gif" lazyload alt="Console"></p><h1 id="4-Sources"><a href="#4-Sources" class="headerlink" title="4 Sources"></a>4 Sources</h1><ul><li>Sources<ul><li>当前打开的网页界面所涉及到的所有源代码都会出现在该栏，包括css样式、img图片、js文件等。</li><li>调试JavaScript代码<ul><li>如果当前代码经过压缩，点击下方的花括号<code>&#123;&#125;</code>增强可读性。</li><li>支持点击JavaScript代码块前的行数来设置断点，所有断点都会在右侧的断点区中列出来。</li><li>断点可在DOM元素节点发生改变时、XHR生命周期状态改变时、指定的事件执行时被触发。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@005.jpg" srcset="/img/load.gif" lazyload alt="Sources"></p><h1 id="5-Network"><a href="#5-Network" class="headerlink" title="5 Network"></a>5 Network</h1><ul><li>Network<ul><li>网络查询，前后端信息通过接口传输，Network记录了接口信息，包括请求头、请求体、响应体等。</li><li>Google官方将Network面板分成了5大窗格(Pane)。<ul><li>Controls：主要控制Network的外观以及功能。</li><li>Filters：控制Requests Table具体显示的内容。</li><li>Overview：以时间流形式显示获取到的资源时间轴信息。</li><li>Requests Table：按获取到资源的前后顺序显示资源信息。</li><li>Summary：显示总的请求数、数据传输量、加载时间信息。</li></ul></li></ul></li></ul><h2 id="5-1-Controls"><a href="#5-1-Controls" class="headerlink" title="5-1 Controls"></a>5-1 Controls</h2><ul><li>Controls<ul><li>监控网络请求：默认开启，会在面板处记录网络连接信息，关闭后则不会记录。</li><li>清空网络请求：点击按钮，将清除底下网络请求列表包括Overview的所有内容。</li><li>过滤网络请求：点击按钮，打开Filter栏，控制Requests Table具体显示的内容。</li><li>搜索请求列表：点击按钮，左侧弹出一个Search面板，供搜索请求及响应资源。</li><li>保留请求资源：用户重新加载当前页面时，之前的请求资源信息会被保留下来。</li><li>关闭缓存：勾选后页面资源不会存入缓存，可从Status一栏的状态码看到文件的请求状态。</li><li>弱网设置：网速模拟限制，可选“不限速、Fast 3G、Slow 3G、Offline(离线)、自定义”。</li><li>网络设置<ul><li>Caching(缓存设置)、Network throttling(弱网设置)、Accepted Content-Encodings(服务端压缩格式)。</li><li>User agent(HTTP请求头的一部分，指所用浏览器和操作系统的类型及版本、浏览器内核等信息的标识)。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@006.jpg" srcset="/img/load.gif" lazyload alt="Network-Controls"></p><h2 id="5-2-Filters"><a href="#5-2-Filters" class="headerlink" title="5-2 Filters"></a>5-2 Filters</h2><ul><li>Filters<ul><li>自定义条件过滤：Filter栏输入内容。</li><li>预定义方式过滤：All(显示所有请求)。<ul><li>Fetch&#x2F;XHR(Ajax、Axios的异步请求)、JS(Js文件)、CSS(Css文件)、Img(图片)。</li><li>Media(媒体文件，音视频等)、Font(Web字体)、Doc(HTML)、WS(Websocket请求)。</li><li>Wasm(WebAssembly文件)、Manifest(AndroidManifest.xml文件)、Other(其他请求)。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@007.jpg" srcset="/img/load.gif" lazyload alt="Network-Filters"></p><h2 id="5-3-Overview"><a href="#5-3-Overview" class="headerlink" title="5-3 Overview"></a>5-3 Overview</h2><p><img src="/../../img/F12/F12@008.jpg" srcset="/img/load.gif" lazyload alt="Network-Overview"></p><h2 id="5-4-Requests-Table"><a href="#5-4-Requests-Table" class="headerlink" title="5-4 Requests Table"></a>5-4 Requests Table</h2><ul><li>Requests Table<ul><li>Name：资源名称，点击名称，右侧面板将显示该资源的详情。</li><li>Status：响应状态码，包括2XX(成功)、3XX(重定向)、4XX(客户端错误)、5XX(服务器错误)。</li><li>Type：响应数据类型，MIME类型指Multipurpose Internet Mail Extensions(即html、css、js等)。</li><li>Initiator：标记请求是由哪个对象或进程发起的(即请求源)。</li><li>Size：响应数据大小，如果是从缓存中取得的资源则显示“from cache”。</li><li>Time：响应时间，从发起Request开始，至获取到Response所用的总时间。</li><li>Waterfall<ul><li>可视化瀑布流，可以看到请求所花费的时间具体到哪些部分。</li><li>将一次HTTP请求所花时间做了拆解，有助于分析和定位问题。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@009.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table"></p><h5 id="1-Name-资源名称"><a href="#1-Name-资源名称" class="headerlink" title="(1) Name(资源名称)"></a>(1) Name(资源名称)</h5><ul><li>Headers：该资源的HTTP头信息。<ul><li>General，常规的。<ul><li>Request URL：资源请求URL。</li><li>Request Method：请求方式。</li><li>Status Code：HTTP状态码。</li><li>Remote Address：请求的远程地址。</li><li>Referrer Policy<ul><li>作用是控制请求头中referrer的内容，目前是一个候选标准，不过已有部分浏览器支持，包含以下值。</li><li>空字符串：默认按照浏览器机制设置referrer的内容，与no-referrer-when-downgrade的设置一致。</li><li>no-referrer：在请求头中不显示referrer的任何信息。</li><li>no-referrer-when-downgrade：默认值。<ul><li>当从HTTPS网站跳转到HTTP网站，或请求资源时(即HTTPS安全降级HTTP)，则不显示referrer的信息。</li><li>其他情况(HTTPS安全同级HTTPS，或HTTP安全同级HTTP)，在referrer中显示完整的源网站URL信息。</li></ul></li><li>same-origin：浏览器只会显示referrer信息给同源网站(即协议、域名、端口都相同)，且是完整的URL信息。</li><li>origin：浏览器在referrer字段中只显示源网站的源地址(即协议、域名、端口)，而不包括完整的路径。</li><li>strict-origin：该策略更为安全，与origin策略相似。<ul><li>只是不允许referrer信息显示在从HTTPS网站到HTTP网站的请求中(安全降级)。</li></ul></li><li>origin-when-cross-origin<ul><li>发送请求给同源网站时，浏览器会在referrer中显示完整的URL信息。</li><li>发送请求给非同源网站时，浏览器只显示源地址(即协议、域名、端口)。</li></ul></li><li>strict-origin-when-cross-origin：与origin-when-cross-origin策略相似。<ul><li>只是不允许referrer信息显示在从HTTPS网站到HTTP网站的请求中(安全降级)。</li></ul></li><li>unsafe-url：无论请求发送给任何网站，浏览器总是会将完整的URL信息显示在referrer字段中。</li></ul></li></ul></li><li>Response Headers，响应头。<ul><li>Content-Length：响应体的长度。</li><li>Content-Language：响应体的语言。</li><li>Accept-Ranges：服务器是否支持指定范围的请求及分段请求的类型。</li><li>Connection：维护客户端和服务端的连接关系，表示是否需要持久连接。</li><li>Content-Encoding：服务端选定的内容编码类型，格式包括gzip和deflate。</li><li>Content-Type：服务端发送的媒体类型信息，以及采用的请求体编码格式。<ul><li>type：主类型，任意字符串，如text，如果是<code>*</code>则代表所有。</li><li>subtype：子类型，任意字符串，如html，用<code>/</code>与主类型隔开。</li><li>parameter：可选参数，如charset、boundary等。</li><li>例：<code>text(主)/html(子);charset:utf-8(参);</code>。</li></ul></li><li>Date：客户端请求服务端的时间。</li><li>Server：服务端的Web服务端名。</li><li>Expires：响应过期的日期和时间。</li><li>ETag：请求变量实体标签的当前值。</li><li>Last-Modified：请求资源的最后修改时间。</li><li>Transfer-Encoding：分块(chunked)传递数据到客户端。</li><li>Vary：告诉下游代理使用缓存响应还是从原始服务器响应。</li></ul></li><li>Request Headers，请求头。<ul><li>Accept：客户端接收的资源类型。</li><li>Authorization：HTTP授权的授权证书。</li><li>Accept-Language：客户端接收的语言类型。</li><li>Accept-Charset：浏览器可接收的字符编码集。</li><li>Accept-Encoding：客户端接收的压缩数据类型。</li><li>Host：连接的目标主机以及端口号。</li><li>Cookie：客户端暂存服务端的信息。</li><li>Referer：从哪个页面发起该请求的。</li><li>User-Agent：包含发出请求的用户信息。</li><li>Via：通知中间网关或代理服务器地址，通信协议。</li><li>Cache-Control：指定请求和响应遵循的缓存机制。</li><li>Accept-Ranges：可请求网页实体的一个或多个子范围字段。</li><li>Connection：指维护客户端和服务端的连接关系，表示是否需要持久连接。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@010.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Name-Headers"></p><ul><li>Preview：根据所选资源类型(JSON、图片、文本等)显示相应的预览，通常以Json格式展示，便于理解。</li><li>Response：显示HTTP的Response信息，与Preview展示的是同一个内容，以整体的形式展示，便于使用。</li><li>Initiator：标记请求是由哪个对象或进程发起的(即请求源)。</li><li>Timing：资源在整个请求生命周期过程中各部分花费的时间。<ul><li>Queued at：查询结束。</li><li>Started at：查询开始。</li><li>Queueing：排队队列的时间花费，即浏览器将资源放入队列的时间。</li><li>Stalled<ul><li>阻塞，从HTTP连接建立，到请求能够被发送出去(真正传输数据)之间所花费的时间。</li><li>包含了处理代理的时间，若有已建立好的连接，还包含等待已建立连接被复用的时间。</li></ul></li><li>Proxy Negotiation：与代理服务器协商时间。</li><li>DNS Lookup：DNS解析时间，浏览器需要将域名转换成IP。</li><li>Initial Connection：初始化连接所花费的时间，这里一般是指TCP三次连接握手的时间。</li><li>SSL：HTTPS特有，若网站使用了HTTPS，则指浏览器与服务器建立安全性连接的时间。</li><li>Request sent：发送请求所消耗的时间。</li><li>Waiting (TTFB)，TTFB即Time to First Byte，首字节时间。<ul><li>等待服务端返回数据的时间，浏览器等待响应第一个字节到达所花的时间。</li><li>包含来回的延迟时间和服务器准备响应的时间，受限于服务器的处理性能。</li></ul></li><li>Content Download：浏览器用来下载资源所用的时间，这段时间越长说明资源越大。</li></ul></li></ul><p><img src="/../../img/F12/F12@011.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Name-Timing"></p><ul><li>Cookies：客户端非敏感数据存储，与存放路径有关，以键值对形式存储。</li></ul><p><img src="/../../img/F12/F12@012.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Name-Cookies"></p><h5 id="2-Waterfall-瀑布流"><a href="#2-Waterfall-瀑布流" class="headerlink" title="(2) Waterfall(瀑布流)"></a>(2) Waterfall(瀑布流)</h5><ul><li>颜色代表的含义<ul><li>浅灰：查询中。</li><li>绿色：等待中。</li><li>蓝色：内容下载。</li><li>橙色：初始连接。</li><li>深灰：停滞、代理转发、请求发送。</li></ul></li><li>除了上述横向的柱状颜色图外，还有一条纵向的紫线，是开始通过脚本加载资源的一个临界线。<ul><li>紫线前，是通过HTML文件进行加载的资源，如链接的SRC或脚本的SRC。</li><li>紫线后，是通过执行HTML文件加载进来的JavaScript进行加载资源的操作。</li><li>这条线对于前端开发而言至关重要，可以帮助他们进行前端性能的优化分析。</li></ul></li></ul><p><img src="/../../img/F12/F12@013.jpg" srcset="/img/load.gif" lazyload alt="Network-Requests Table-Waterfall"></p><h2 id="5-5-Summary"><a href="#5-5-Summary" class="headerlink" title="5-5 Summary"></a>5-5 Summary</h2><p><img src="/../../img/F12/F12@014.jpg" srcset="/img/load.gif" lazyload alt="Network-Summary"></p><h1 id="6-Performance"><a href="#6-Performance" class="headerlink" title="6 Performance"></a>6 Performance</h1><ul><li>Performance<ul><li>在某段时间内，监控所有页面操作下前端页面的性能，以及资源的消耗。</li><li>启动性能监控按钮前，可将截图、内存和前端重要信息三个选项勾选上。</li><li>启动性能监控按钮，用户进行页面操作后，点击Stop按钮关闭性能监控，查看结果。</li></ul></li></ul><p><img src="/../../img/F12/F12@015.jpg" srcset="/img/load.gif" lazyload alt="Performance"></p><h1 id="7-Memory"><a href="#7-Memory" class="headerlink" title="7 Memory"></a>7 Memory</h1><p><img src="/../../img/F12/F12@016.jpg" srcset="/img/load.gif" lazyload alt="Memory"></p><h1 id="8-Application"><a href="#8-Application" class="headerlink" title="8 Application"></a>8 Application</h1><ul><li>Application<ul><li>记录网站加载的所有资源信息，包括存储和缓存数据、字体、图片、脚本、样式表等。</li><li>存储数据又包含了Local Storage、Session Storage、IndexedDB、Web SQL、Cookies。</li><li>Local Storage<ul><li>浏览器永久存储，如果在开发过程中使用了Local Storage来存储键值对。</li><li>那么就可通过Local Storage窗格来检查、新增、修改、删除这个键值对。</li></ul></li><li>Cache Storage：浏览器本地缓存。</li><li>Session Storage：浏览器临时存储，会话级别。</li><li>Application Cache：应用程序缓存，可使用该窗格查看通过Application Cache API创建的资源。</li><li>Frames<ul><li>将页面上的资源按frame类别分组显示，顶级的top是一个主文档。</li><li>在top下是主文档的Fonts、Images、Scripts、Stylesheets等资源。</li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@017.jpg" srcset="/img/load.gif" lazyload alt="Application"></p><h1 id="9-Security"><a href="#9-Security" class="headerlink" title="9 Security"></a>9 Security</h1><ul><li>Security<ul><li>HTTPS，Hyper Text Transfer Protocol over Secure Socket Layer，以安全为目的的HTTP通道。</li><li>HTTPS与HTTP的区别<ul><li>HTTPS协议需要到CA申请证书，免费证书比较少，一般都要求缴费，比HTTP协议安全。</li><li>HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议。</li><li>HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>HTTP连接简单，是无状态的，HTTPS是由SSL和HTTP构建的，是可进行加密传输、身份认证的网络协议。</li></ul></li><li>如果网页安全，显示消息：<code>This page is secure (valid HTTPS)</code>。<ul><li>点击<code>View certificate</code>按钮可查看Main origin的服务器证书信息。</li></ul></li><li>如果网页不安全(有两种类型)，显示消息：<code>This page is not secure</code>。<ul><li>点击<code>View requests in Network Panel</code>按钮会跳转到Network面板。</li><li>被请求的页面通过HTTP提供服务，则Main origin将会被标记为不安全。</li><li>被请求的页面通过HTTPS获取，该页面继续通过HTTP从其他来源检索内容，则该页面仍然会被标记为不安全。<ul><li>这种类型的网页即混合内容页面，只部分受保护，非加密内容可被嗅探入侵，易受中间人攻击。</li><li>中间人攻击，即Man-in-the-Middle Attack，简称为MITM攻击，是一种间接的入侵攻击手段。</li><li>通过各种技术将控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，该计算机就称为中间人。</li></ul></li></ul></li></ul></li></ul><p><img src="/../../img/F12/F12@018.jpg" srcset="/img/load.gif" lazyload alt="Security"></p>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>F12</tag>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADB 命令详解</title>
    <link href="/2022/09/02/ce-shi-gong-ju/tt05-adb-ming-ling-xiang-jie/"/>
    <url>/2022/09/02/ce-shi-gong-ju/tt05-adb-ming-ling-xiang-jie/</url>
    
    <content type="html"><![CDATA[<p>Android Debug Bridge是一种允许模拟器或已连接的Android设备进行通信的命令行工具，可为各种设备操作提供便利。</p><span id="more"></span><h1 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1 工作原理"></a>1 工作原理</h1><ul><li>工作原理<ul><li>Client端：运行在开发机器中，例如电脑，用来发送adb命令。</li><li>Daemon守护进程：运行在调试设备，例如手机、模拟器中，用来接收并执行adb命令。</li><li>Server端：运行在开发机器中，例如电脑，用来管理Client和手机端Daemon间的通信。<ul><li>电脑的命令行窗口输入adb命令，先执行Client端，Client端拿到命令后发送给Server端。</li><li>Server再传给Daemon，最后在手机上执行，例如：手机上安装一个应用会返回一个信息。</li><li>将该信息传递给电脑的Server端，命令再将其传给Client端，最后显示在命令行。</li></ul></li></ul></li></ul><h2 id="1-1-安装ADB"><a href="#1-1-安装ADB" class="headerlink" title="1-1 安装ADB"></a>1-1 安装ADB</h2><ul><li>安装ADB<ul><li>ADB工具下载：<a href="https://adbdownload.com/">https://adbdownload.com/</a>。</li><li>环境变量配置：Path，变量值为下载的ADB路径。</li><li>验证是否安装成功，命令窗口下输入：<code>adb help</code>。</li></ul></li></ul><h2 id="1-2-调试模式"><a href="#1-2-调试模式" class="headerlink" title="1-2 调试模式"></a>1-2 调试模式</h2><ul><li>调试模式<ul><li>使用USB将PC端和Android手机设备连接，再将手机设备的USB调试模式打开，不同型号手机调试模式位置不同。</li><li>模拟器：Android Studio Emulator(官方)、Genymotion(国外软件)、网易mumu、雷电、夜神、逍遥等第三方模拟器。</li><li>手机设备的调试模式开启后，打开PC端的命令行窗口中，输入<code>adb devices</code>，回车确认PC端是否正常连接手机设备。</li></ul></li></ul><h1 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2 常用命令"></a>2 常用命令</h1><ul><li>常用命令<ul><li>单一设备的adb命令语法：<code>adb &lt;command&gt;</code>。</li><li>多个设备的adb命令语法：<code>adb [-e|-d|-s &lt;serial-number&gt;] &lt;command&gt;</code>。<ul><li><code>-e</code>：指定当前唯一运行的模拟器为命令目标。</li><li><code>-d</code>：指定当前唯一通过USB连接的Android设备为命令目标。</li><li><code>serial-number</code>：设备序列号，通过<code>adb devices</code>命令获取。</li><li><code>-s &lt;serial-number&gt;</code>：指定相应设备序列号的设备或模拟器为命令目标，多设备或模拟器情况较常使用。</li></ul></li></ul></li></ul><h2 id="2-1-帮助信息"><a href="#2-1-帮助信息" class="headerlink" title="2-1 帮助信息"></a>2-1 帮助信息</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb <span class="hljs-built_in">help</span>                           # 显示adb的版本和帮助信息<br>adb --<span class="hljs-built_in">help</span>                         # 显示adb的版本和帮助信息<br>adb version                        # 查看adb的版本信息<br></code></pre></td></tr></table></figure><h2 id="2-2-开关服务"><a href="#2-2-开关服务" class="headerlink" title="2-2 开关服务"></a>2-2 开关服务</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb <span class="hljs-built_in">start</span>-server                   # 开启adb服务，一般无需执行此命令，运行时发现Server未启动会自动调起<br>adb -P &lt;port&gt; <span class="hljs-built_in">start</span>-server         # 指定Server网络端口启动服务，默认端口为<span class="hljs-number">5037</span><br>adb kill-server                    # 关掉adb服务<br></code></pre></td></tr></table></figure><h2 id="2-3-查看连接"><a href="#2-3-查看连接" class="headerlink" title="2-3 查看连接"></a>2-3 查看连接</h2><ul><li>查看连接<ul><li>通过USB数据线，开启Android设备的调试模式进行连接：<code>adb devices</code>。</li><li>WLAN连接(需USB线)<ul><li>Android设备与电脑连同一WiFi上，再通过USB连接，命令<code>adb tcpip 5555</code>让设备在5555端口监听TCP&#x2F;IP连接。</li><li>断开USB，找到设备的IP地址，通过<code>adb connect &lt;device-ip-address&gt;</code>使用IP地址将Android设备与电脑连接。</li><li>使用结束后，通过<code>adb disconnect &lt;device-ip-address&gt;</code>断开无线连接，<code>adb usb</code>可将WiFi连接转为USB连接。</li></ul></li><li>WLAN连接(无需USB线，需root权限)<ul><li>Android设备上安装一个终端模拟器，地址：<a href="https://jackpal.github.io/Android-Terminal-Emulator/">Terminal Emulator for Android Downloads</a>。</li><li>将Android设备与要运行adb的电脑连接到同一WiFi上，打开Android设备上的终端模拟器。</li><li>输入<code>su</code>以root权限操作，再输入<code>setprop service.adb.tcp.port 5555</code>开启设备的5555端口。</li><li>找到设备的IP，通过<code>adb connect &lt;device-ip-address&gt;</code>使用IP将Android设备与电脑连接起来。</li></ul></li><li><code>adb get-state</code>返回的状态信息类型<ul><li>devices：设备或模拟器已经连接到adb服务器上了。</li><li>offline：设备或模拟器没有连接到adb服务器或无响应。</li><li>no devices&#x2F;emulators found：没有设备或找不到模拟器。</li></ul></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb root                           # root权限运行adbd<br>adb devices                        # 查询已连接的设备或模拟器列表<br>adb devices -l                     # 查询已连接的设备或模拟器具体信息<br>adb get-state                      # 返回设备或模拟器的连接状态信息<br></code></pre></td></tr></table></figure><h2 id="2-4-安装应用"><a href="#2-4-安装应用" class="headerlink" title="2-4 安装应用"></a>2-4 安装应用</h2><ul><li>安装应用<ul><li>三步骤：push apk文件到&#x2F;data&#x2F;local&#x2F;tmp，调用pm install安装，删除tmp中对应的apk文件。</li><li>单一设备的adb命令语法：<code>adb install [-d] [-s] [-g] [-l] [-r] [-t] &lt;apk-file&gt;</code>。<ul><li><code>-d</code>：允许降级覆盖安装。</li><li><code>-s</code>：将应用安装到sdcard。</li><li><code>-g</code>：授予所有运行时权限。</li><li><code>-l</code>：将应用安装到保护目录&#x2F;mnt&#x2F;asec。</li><li><code>-r</code>：覆盖原来安装的软件，并保留数据。</li><li><code>-t</code><ul><li>允许安装AndroidManifest.xml里application指定<code>android:testOnly=&quot;true&quot;</code>的应用。</li><li>安装过程中如果遇到Failure输出代码为<code>INSTALL_FAILED_TEST_ONLY</code>，则使用该命令。</li></ul></li></ul></li><li>多个设备的adb命令语法：<code>adb -s &lt;serial-number&gt; install &lt;apk-file&gt;</code>。</li><li>安装状态：Success(成功)、Failure(失败，对应的失败输出代码，如下所示)。<table><thead><tr><th align="left">输出代码类型&gt;&gt;&gt;参看“<a href="https://blog.csdn.net/zhonglunshun/article/details/78362439">玩转ADB命令</a>”</th><th align="left">说明及解决办法</th></tr></thead><tbody><tr><td align="left"><code>INSTALL_FAILED_DEXOPT</code></td><td align="left">dex优化验证失败，或空间不足</td></tr><tr><td align="left"><code>INSTALL_FAILED_OLDER_SDK</code></td><td align="left">设备系统版本低于应用要求</td></tr><tr><td align="left"><code>INSTALL_FAILED_NEWER_SDK</code></td><td align="left">设备系统版本高于应用要求</td></tr><tr><td align="left"><code>INSTALL_FAILED_TEST_ONLY</code></td><td align="left">应用是test-only的，但安装时没有指定-t参数</td></tr><tr><td align="left"><code>INSTALL_FAILED_TEST_ONLY</code></td><td align="left">APK文件是使用Android Studio直接RUN编译出来的文件(通过Gradle的assembleDebug或assembleRelease重新编译，或 Generate Signed APK)</td></tr><tr><td align="left"><code>INSTALL_FAILED_INVALID_APK</code></td><td align="left">无效的APK文件</td></tr><tr><td align="left"><code>INSTALL_FAILED_INVALID_URI</code></td><td align="left">无效的APK文件名(确保APK文件名里无中文)</td></tr><tr><td align="left"><code>INSTALL_FAILED_UID_CHANGED</code></td><td align="left">安装过该应用，与本次分配的UID不一致(清除以前安装过的残留文件)</td></tr><tr><td align="left"><code>INSTALL_FAILED_INTERNAL_ERROR</code></td><td align="left">因系统问题安装失败</td></tr><tr><td align="left"><code>INSTALL_FAILED_NO_SHARED_USER</code></td><td align="left">请求的共享用户不存在</td></tr><tr><td align="left"><code>INSTALL_FAILED_ALREADY_EXISTS</code></td><td align="left">应用已存在或没卸载干净(install时使用-r参数，或先uninstall再安装)</td></tr><tr><td align="left"><code>INSTALL_FAILED_USER_RESTRICTED</code></td><td align="left">用户被限制安装应用</td></tr><tr><td align="left"><code>INSTALL_FAILED_MISSING_FEATURE</code></td><td align="left">应用使用了设备不可用的功能</td></tr><tr><td align="left"><code>INSTALL_FAILED_PACKAGE_CHANGED</code></td><td align="left">应用与调用程序期望的不一致</td></tr><tr><td align="left"><code>INSTALL_FAILED_CONTAINER_ERROR</code></td><td align="left">sdcard访问失败(确认sdcard可用，或安装到内置存储)，应用签名与ROM签名一致，被当作内置应用(打包时不与ROM使用相同签名)</td></tr><tr><td align="left"><code>INSTALL_FAILED_NO_MATCHING_ABIS</code></td><td align="left">包含设备的应用程序二进制接口不支持的native code</td></tr><tr><td align="left"><code>INSTALL_FAILED_VERSION_DOWNGRADE</code></td><td align="left">已安装了该应用的更高版本(使用-d参数)</td></tr><tr><td align="left"><code>INSTALL_FAILED_ACWF_INCOMPATIBLE</code></td><td align="left">应用程序与设备不兼容</td></tr><tr><td align="left"><code>INSTALL_FAILED_DUPLICATE_PACKAGE</code></td><td align="left">已存在同名程序</td></tr><tr><td align="left"><code>INSTALL_FAILED_MEDIA_UNAVAILABLE</code></td><td align="left">安装位置不可用(一般为sdcard，确认sdcard可用或安装到内置存储)</td></tr><tr><td align="left"><code>INSTALL_FAILED_UPDATE_INCOMPATIBLE</code></td><td align="left">安装过同名应用卸载时数据未移除，或已安装该应用但签名不一致(先卸载再安装)</td></tr><tr><td align="left"><code>INSTALL_FAILED_INSUFFICIENT_STORAGE</code></td><td align="left">空间不足(清理空间)</td></tr><tr><td align="left"><code>INSTALL_FAILED_VERIFICATION_TIMEOUT</code></td><td align="left">验证安装包超时</td></tr><tr><td align="left"><code>INSTALL_FAILED_VERIFICATION_FAILURE</code></td><td align="left">验证安装包失败</td></tr><tr><td align="left"><code>INSTALL_FAILED_DUPLICATE_PERMISSION</code></td><td align="left">尝试定义一个已存在的权限名称</td></tr><tr><td align="left"><code>INSTALL_FAILED_CONFLICTING_PROVIDER</code></td><td align="left">设备里已存在与应用同名的content provider</td></tr><tr><td align="left"><code>INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</code></td><td align="left">包含不兼容设备CPU应用程序二进制接口的native code</td></tr><tr><td align="left"><code>INSTALL_FAILED_MISSING_SHARED_LIBRARY</code></td><td align="left">安装包使用了设备上不可用的共享库</td></tr><tr><td align="left"><code>INSTALL_FAILED_REPLACE_COULDNT_DELETE</code></td><td align="left">替换时无法删除</td></tr><tr><td align="left"><code>INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</code></td><td align="left">请求的共享用户存在，但签名不一致</td></tr><tr><td align="left"><code>INSTALL_FAILED_INVALID_INSTALL_LOCATION</code></td><td align="left">不能安装到指定位置(切换安装位置，添加或删除-s参数)，应用签名与ROM签名一致，被当作内置应用(打包时不与ROM使用相同签名)</td></tr><tr><td align="left"><code>INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</code></td><td align="left">已安装target SDK支持运行时权限的同名应用，要安装的版本不支持运行时权限</td></tr><tr><td align="left"><code>INSTALL_CANCELED_BY_USER</code></td><td align="left">应用安装需在设备上确认，但未操作设备或点了取消(在设备上同意安装)</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_NOT_APK</code></td><td align="left">指定路径不是文件，或不是以.apk结尾</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_BAD_MANIFEST</code></td><td align="left">无法解析的AndroidManifest.xml文件</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_MANIFEST_EMPTY</code></td><td align="left">在manifest文件里找不到，则找可操作标签instrumentation或application</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_NO_CERTIFICATES</code></td><td align="left">安装包没有签名</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</code></td><td align="left">manifest文件里没有或使用了无效包名</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</code></td><td align="left">解析manifest文件时遇到结构性错误</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</code></td><td align="left">manifest文件里指定了无效的共享用户ID</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</code></td><td align="left">解析器遇到异常</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</code></td><td align="left">解析APK文件时遇到CertificateEncodingException</td></tr><tr><td align="left"><code>INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</code></td><td align="left">已安装该应用，且签名与APK文件不一致(先卸载再安装)</td></tr><tr><td align="left"><code>does not contain AndroidManifest.xml</code></td><td align="left">无效的APK文件</td></tr><tr><td align="left"><code>is not a valid zip file</code></td><td align="left">无效的APK文件</td></tr><tr><td align="left"><code>Offline</code></td><td align="left">设备未连接成功(先将设备与adb连接成功)</td></tr><tr><td align="left"><code>unauthorized</code></td><td align="left">设备未授权允许调试</td></tr><tr><td align="left"><code>protocol failure</code></td><td align="left">设备已断开连接(先将设备与adb连接成功)</td></tr><tr><td align="left"><code>Unknown option: -s</code></td><td align="left">Android2.2以下不支持安装到sdcard(不使用-s参数)</td></tr><tr><td align="left"><code>error: device not found</code></td><td align="left">没有连接成功的设备(先将设备与adb连接成功)</td></tr><tr><td align="left"><code>No space left on device</code></td><td align="left">空间不足(清理空间)</td></tr><tr><td align="left"><code>Permission denied...sdcard...</code></td><td align="left">sdcard不可用</td></tr><tr><td align="left"><code>signatures do not match the previously installed version; ignoring!</code></td><td align="left">已安装该应用且签名不一致(先卸载再安装)</td></tr></tbody></table></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb install -d demo.apk            # 允许降级覆盖安装demo.apk<br>adb install -g demo.apk            # 授予demo.apk所有运行时权限<br>adb install -t demo.apk            # 允许安装指定android:testOnly=&quot;true&quot;的应用<br></code></pre></td></tr></table></figure><h2 id="2-5-日志打印"><a href="#2-5-日志打印" class="headerlink" title="2-5 日志打印"></a>2-5 日志打印</h2><ul><li>日志打印<ul><li>Android系统的日志分为两部分，底层的Linux内核日志输出到&#x2F;proc&#x2F;kmsg，Android的日志输出到&#x2F;dev&#x2F;log。</li><li>查看设备属性的基本命令格式：<code>adb logcat [option] [filter-specs]</code>，<code>Ctrl + C</code>可以停止日志监控。</li><li>级别过滤：<code>adb logcat [filter-specs]</code>，MacOS用<code>adb logcat &quot;*:W&quot;</code>，否则报错<code>no matches found: *:W</code>。<ul><li><code>*:V</code>：过滤只显示(开发产品中的调试信息)Verbose及以上级别(优先级最低)。</li><li><code>*:D</code>：过滤只显示(发布产品中的调试信息)Debug及以上级别。</li><li><code>*:I</code>：过滤只显示(一般提示性的信息)Info及以上级别。</li><li><code>*:W</code>：过滤只显示(警告信息)Warning及以上级别。</li><li><code>*:E</code>：过滤只显示(错误信息)Error及以上级别。</li><li><code>*:F</code>：过滤只显示Fatal及以上级别。</li><li><code>*:S</code>：过滤只显示Silent及以上级别(优先级最高，什么也不输出)。</li></ul></li><li>tag和级别过滤：<code>adb logcat [tag:level] ... [tag:level]</code>。</li><li>格式化输出：<code>adb logcat -v &lt;format&gt;</code>，format指定日志输出的格式，默认为brief。<ul><li>raw：<code>&lt;message&gt;</code>。</li><li>tag：<code>&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</code>。</li><li>process：<code>&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</code>。</li><li>brief：<code>&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</code>。</li><li>time：<code>&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</code>。</li><li>long：<code>[&lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt;] &lt;message&gt;</code>。</li><li>threadtime：<code>&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</code>。</li></ul></li><li>加载一个可使用的日志缓冲区供查看：<code>adb logcat -b &lt;Buffer&gt;</code>。<ul><li>Radio：输出通信系统的log。</li><li>System：输出系统组件的log。</li><li>Event：输出Event模块的log。</li><li>Main：所有Java层的log以及不属于上面3层的log。</li><li>缓冲区主要给系统组件使用，一般应用不需关心，应用的log都输出到Main缓冲区中。</li><li>默认log输出，即在不指定缓冲区的情况下，是输出System缓冲区和Main缓冲区的log。</li></ul></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb logcat *:W                    # 输出Warning、Error、Fatal和Silent日志<br>adb logcat ActivityManager:I *:S  # 输出ActivityManager的Info及其他tag的Silent以上级别日志<br>adb logcat -v <span class="hljs-built_in">time</span>                # 打印时间<br>adb logcat -v <span class="hljs-built_in">color</span>               # 使用不同的颜色来显示每个优先级<br>adb logcat -v long *:S            # 以long格式输出tag的Silent以上级别日志<br>adb logcat &gt; log.log              # 保存日志到PC端的log.log文件中<br>adb logcat -c                     # 清空已存在的日志<br>adb logcat -d                     # 将日志显示在控制台<br>adb logcat -f &lt;file-<span class="hljs-built_in">path</span>&gt;         # 将日志输出到文件<br>adb logcat -g                     # 打印指定日志缓冲区的大小<br></code></pre></td></tr></table></figure><h2 id="2-6-文件传送"><a href="#2-6-文件传送" class="headerlink" title="2-6 文件传送"></a>2-6 文件传送</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb uninstall [-k] &lt;package-name&gt;  # 卸载应用，-k参数可选，表示卸载应用但保留数据和缓存目录<br>adb pull &lt;remote&gt; [local]          # 将移动设备中的文件传送到PC上，remote是移动设备路径，local是PC路径<br>adb push &lt;local&gt; &lt;remote&gt;          # 将PC中的文件传送到移动设备端，local是PC路径，remote是移动设备路径<br></code></pre></td></tr></table></figure><h2 id="2-7-重启命令"><a href="#2-7-重启命令" class="headerlink" title="2-7 重启命令"></a>2-7 重启命令</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb reboot recovery                # 重启到Recovery模式<br>adb reboot                         # 从Recovery重启到Android<br>adb reboot bootloader              # 重启到Fastboot模式<br></code></pre></td></tr></table></figure><h1 id="3-高级命令"><a href="#3-高级命令" class="headerlink" title="3 高级命令"></a>3 高级命令</h1><ul><li>高级命令<ul><li>Android系统是基于Linux内核开发的，支持常见的Linux命令。</li><li>命令都保存在手机的&#x2F;system&#x2F;bin文件中，在adb shell里可调用。</li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb shell ls                       # PC端查看Android设备当前目录的所有内容<br>abd shell                          # 进入Android设备目录<br>ls                                 # 查看设备当前目录的所有内容<br><span class="hljs-built_in">cd</span> /system/bin                     # 进入手机的/system/bin文件中<br>ls                                 # 查看保存在手机/system/bin文件中的Linux命令<br><span class="hljs-keyword">exit</span>                               # 退出Android设备目录，回到PC端<br></code></pre></td></tr></table></figure><h1 id="4-查看应用"><a href="#4-查看应用" class="headerlink" title="4 查看应用"></a>4 查看应用</h1><ul><li>查看应用<ul><li>命令格式：<code>adb shell pm list packages [-s] [-u] [-3] [-i] [-e] [-d] [-f] [--user USER_ID] [FILTER]</code>。<ul><li><code>-s</code>：只显示系统应用。</li><li><code>-u</code>：包含已卸载应用。</li><li><code>-3</code>：只显示第三方应用。</li><li><code>-i</code>：显示应用的installer。</li><li><code>-e</code>：只显示enabled的应用。</li><li><code>-d</code>：只显示disabled的应用。</li><li><code>-f</code>：显示应用关联的apk文件。</li><li><code>&lt;FILTER&gt;</code>：包名包含<code>&lt;FILTER&gt;</code>字符串。</li></ul></li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb shell pm list packages                    # 列出系统应用<br>adb shell pm list packages -s                 # 列出系统应用<br>adb shell pm list packages -<span class="hljs-number">3</span>                 # 列出第三方应用<br>adb shell pm list packages test               # 查看包名包含字符串test的应用列表<br>adb shell pm list packages | grep test        # 使用grep过滤包名包含字符串test的应用列表<br>adb shell pm clear &lt;package-name&gt;             # 清除应用数据及缓存<br></code></pre></td></tr></table></figure><h1 id="5-设备信息"><a href="#5-设备信息" class="headerlink" title="5 设备信息"></a>5 设备信息</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb shell getprop ro.product.model           # 查看设备型号<br>adb shell getprop ro.build.version.release   # 查看Android系统版本<br>adb shell dumpsys wifi                       # 查看无限网络信息<br>adb shell dumpsys power                      # 查看电源管理相关信息<br>adb shell dumpsys battery                    # 查看电池状况，scale指最大电量，level指当前电量<br>adb shell dumpsys cpuinfo                    # 查看当前设备CPU使用情况，获取的是一段时间的均值<br>adb shell dumpsys meminfo                    # 查看进程占用情况，即内存信息<br>adb shell dumpsys window displays            # 查看显示屏参数<br>adb shell wm size                            # 查看屏幕分辨率<br>adb shell wm density                         # 查看屏幕密度<br>adb shell settings get secure android_id     # 查看android_id<br>adb shell ifconfig &quot;| grep Mask&quot;             # 查看手机IP地址<br>adb shell cat /proc/cpuinfo                  # 查看CPU使用情况<br>adb shell cat /proc/meminfo                  # 查看内存信息，MemTotal设备总内存，MemFree当前空闲内存<br>adb shell df                                 # 获取Android系统各个分区的相关信息<br></code></pre></td></tr></table></figure><h1 id="6-实用功能"><a href="#6-实用功能" class="headerlink" title="6 实用功能"></a>6 实用功能</h1><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">adb exec-out screencap -p &gt; sc.png            # 截图保存到电脑，如果adb版本较老，则无法使用exec-out命令<br>adb shell screencap -p /sdcard/sc.png         # 截图保存到设备里<br>adb shell screenrecord /sdcard/filename.mp4   # 录制屏幕以mp4格式保存到/sdcard，Ctrl+C停止录屏<br>adb shell monkey -p &lt;package-name&gt; -v <span class="hljs-number">500</span>     # Monkey压力测试，向包名指定的应用程序发送<span class="hljs-number">500</span>个伪随机事件<br>adb shell ps                                  # 进程，USER所属用户，PID进程ID，PPID父进程ID，NAME进程名<br>adb shell top                                 # 实时资源占用，PR优先级，S进程状态(R/S/T/Z)，#THR线程数<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ADB</tag>
      
      <tag>Android调试工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postman</title>
    <link href="/2022/07/21/ce-shi-gong-ju/tt04-postman/"/>
    <url>/2022/07/21/ce-shi-gong-ju/tt04-postman/</url>
    
    <content type="html"><![CDATA[<p>Postman是一个简单的接口测试工具，被广泛应用于API设计、构建、测试等工作环节，也同样适用于API安全测试和管理。</p><span id="more"></span><h1 id="1-Postman"><a href="#1-Postman" class="headerlink" title="1 Postman"></a>1 Postman</h1><ul><li>Postman<ul><li>官方下载安装后注册账号，登录使用：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a>。</li><li>Create new collection：添加用例集，Documentation是用例集描述(非必填项)。</li><li>Add folder：添加模块。</li><li>Add request：添加请求，Headers(请求头)、Body(请求体，为Json时选择raw)。</li><li>Export：导出用例集。</li><li>Import：导入用例集，若已存在同名的用例集，则Import as Copy，即导出一个拷贝份，不建议Replace替换。</li></ul></li></ul><p><img src="/../../img/Postman/Postman@001.jpg" srcset="/img/load.gif" lazyload alt="Postman"></p><h1 id="2-常用断言"><a href="#2-常用断言" class="headerlink" title="2 常用断言"></a>2 常用断言</h1><ul><li>常用断言<ul><li>借助JavaScript语言进行代码的编写，自动判断预期结果与实际结果是否一致。</li><li>断言代码写在请求的Tests标签中，请求Response中的Test Results即断言结果。</li><li>工作原理(由上往下依次执行)<ul><li>Postman界面：组织http请求方法、请求头、请求体、url等。</li><li>Postman内部：分析http请求方法、请求头、请求体、url等。</li><li>服务器：接收Postman发送过来的请求后，解析http请求，回发http响应。</li><li>Postman内部：执行断言代码，得到断言结果。</li><li>Postman界面：在Test Results中显示断言结果。</li></ul></li></ul></li></ul><h2 id="2-1-响应头"><a href="#2-1-响应头" class="headerlink" title="2-1 响应头"></a>2-1 响应头</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Snippets</span>：<span class="hljs-title class_">Response</span> <span class="hljs-attr">headers</span>: <span class="hljs-title class_">Content</span>-<span class="hljs-title class_">Type</span> header check<br><br>pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Content-Type is present&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// pm代表Postman的一个实例，test()是Postman实例的一个方法，有以下两个参数</span><br><span class="hljs-comment">// 参数一：断言结束后给出的文字提示(可修改)</span><br><span class="hljs-comment">// 参数二：匿名函数</span><br>pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>);<br><span class="hljs-comment">// Postman的响应头中包含Content-Type</span><br><span class="hljs-comment">// header()的第二个参数可添加Content-Type对应的value值，用逗号隔开</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Json数据"><a href="#2-2-Json数据" class="headerlink" title="2-2 Json数据"></a>2-2 Json数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Snippets</span>：<span class="hljs-title class_">Response</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span> value check<br><br>pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Your test name&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> jsonData = pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">json</span>();<br>    pm.<span class="hljs-title function_">expect</span>(jsonData.<span class="hljs-property">value</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">eql</span>(<span class="hljs-number">100</span>);<br>&#125;);<br><br><span class="hljs-comment">// pm代表Postman的一个实例，test()是Postman实例的一个方法，有以下两个参数</span><br><span class="hljs-comment">// 参数一：断言结束后给出的文字提示(可修改)</span><br><span class="hljs-comment">// 参数二：匿名函数</span><br><span class="hljs-keyword">var</span> jsonData<br><span class="hljs-comment">// 用JavaScript语法定义一个变量，变量名为jsonData</span><br>pm.<span class="hljs-title function_">expect</span>(jsonData.<span class="hljs-property">value</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">eql</span>(xxx);<br><span class="hljs-comment">// Postman预期Json结果key所对应的值等于xxx</span><br></code></pre></td></tr></table></figure><h2 id="2-3-响应状态码"><a href="#2-3-响应状态码" class="headerlink" title="2-3 响应状态码"></a>2-3 响应状态码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Snippets</span>：<span class="hljs-title class_">Status</span> <span class="hljs-attr">code</span>: <span class="hljs-title class_">Code</span> is <span class="hljs-number">200</span><br><br>pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Status code is 200&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>);<br>&#125;);<br><br><span class="hljs-comment">// pm代表Postman的一个实例，test()是Postman实例的一个方法，有以下两个参数</span><br><span class="hljs-comment">// 参数一：断言结束后给出的文字提示(可修改)</span><br><span class="hljs-comment">// 参数二：匿名函数</span><br>pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>);<br><span class="hljs-comment">// Postman的响应结果中应该包含状态码200</span><br></code></pre></td></tr></table></figure><h2 id="2-4-包含字符串"><a href="#2-4-包含字符串" class="headerlink" title="2-4 包含字符串"></a>2-4 包含字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Snippets</span>：<span class="hljs-title class_">Response</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">Contains</span> <span class="hljs-title function_">string</span>(响应体是否包含某个字符串)<br><br>pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Body matches string&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-title function_">expect</span>(pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">text</span>()).<span class="hljs-property">to</span>.<span class="hljs-title function_">include</span>(<span class="hljs-string">&quot;string_you_want_to_search&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// pm代表Postman的一个实例，test()是Postman实例的一个方法，有以下两个参数</span><br><span class="hljs-comment">// 参数一：断言结束后给出的文字提示(可修改)</span><br><span class="hljs-comment">// 参数二：匿名函数</span><br>pm.<span class="hljs-title function_">expect</span>(pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">text</span>()).<span class="hljs-property">to</span>.<span class="hljs-title function_">include</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br><span class="hljs-comment">// Postman期望响应文本中，包含xxx字符串，其中string_you_want_to_search为预期结果(可修改)</span><br></code></pre></td></tr></table></figure><h2 id="2-5-等于字符串"><a href="#2-5-等于字符串" class="headerlink" title="2-5 等于字符串"></a>2-5 等于字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-title class_">Snippets</span>：<span class="hljs-title class_">Response</span> <span class="hljs-attr">body</span>: <span class="hljs-title class_">Is</span> equal to a <span class="hljs-title function_">string</span>(响应体是否等于某个字符串或对象)<br><br>pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Body is correct&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">body</span>(<span class="hljs-string">&quot;response_body_string&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// pm代表Postman的一个实例，test()是Postman实例的一个方法，有以下两个参数</span><br><span class="hljs-comment">// 参数一：断言结束后给出的文字提示(可修改)</span><br><span class="hljs-comment">// 参数二：匿名函数</span><br>pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">body</span>(<span class="hljs-string">&quot;xxx&quot;</span>);<br><span class="hljs-comment">// Postman的响应中应该有响应体xxx，其中response_body_string为预期结果(可修改)</span><br></code></pre></td></tr></table></figure><h1 id="3-变量设置"><a href="#3-变量设置" class="headerlink" title="3 变量设置"></a>3 变量设置</h1><ul><li>变量设置<ul><li>全局变量：在Postman中全局生效的变量，全局唯一。<ul><li>代码设置：<code>pm.globals.set(&quot;var_name&quot;, value);</code>，var_name是全局变量名，value是全局变量值。</li><li>代码获取：<code>var value = pm.globals.get(&quot;var_name&quot;);</code>，var_name全局变量名，value接收值变量。</li><li>请求参数获取(即Postman界面获取)：<code>&#123;&#123; var_name &#125;&#125;</code>，var_name是全局变量名。</li></ul></li><li>环境变量：特定环境(生产环境、开发环境、测试环境)下生效的变量，在本环境内唯一。<ul><li>代码设置：<code>pm.environment.set(&quot;var_name&quot;, value);</code>，var_name是环境变量名，value是环境变量值。</li><li>代码获取：<code>var value = pm.environment.get(&quot;var_name&quot;);</code>，var_name环境变量名，value接收值变量。</li><li>请求参数获取(即Postman界面获取)：<code>&#123;&#123; var_name &#125;&#125;</code>，var_name是环境变量名。</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Postman</tag>
      
      <tag>Chrome扩展</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Charles</title>
    <link href="/2022/05/10/ce-shi-gong-ju/tt03-charles/"/>
    <url>/2022/05/10/ce-shi-gong-ju/tt03-charles/</url>
    
    <content type="html"><![CDATA[<p>Charles是一款代理服务器，通过成为电脑或浏览器的代理，截取请求和结果进行抓包分析，支持重发网络请求，方便后端调试。</p><span id="more"></span><h1 id="1-Charles安装"><a href="#1-Charles安装" class="headerlink" title="1 Charles安装"></a>1 Charles安装</h1><ul><li>Charles安装<ul><li>官网下载：<a href="https://www.charlesproxy.com/latest-release/download.do">https://www.charlesproxy.com/latest-release/download.do</a>。</li><li>由于Charles收费，安装后需注册，启动Charles&gt;Help&gt;Register Charles。<ul><li>Registered Name：<a href="https://zhile.io./">https://zhile.io。</a></li><li>License Key：48891cf209c6d32bf4。</li></ul></li><li>输入Registered Name以及License Key&gt;Register&gt;确定&gt;重新启动Charles。</li></ul></li></ul><h2 id="1-1-安装证书"><a href="#1-1-安装证书" class="headerlink" title="1-1 安装证书"></a>1-1 安装证书</h2><ul><li>安装证书<ul><li>Help&gt;SSL Proxying&gt;Install Charles Root Certificate&gt;安装证书&gt;本地计算机&gt;选“将所有的证书都放入下列存储”。</li><li>浏览&gt;选“受信任的根证书颁发机构”&gt;确定&gt;下一页&gt;完成&gt;确定，安装好之后需要重新打开，确认下证书是否生效。</li><li>Help&gt;SSL Proxying&gt;Install Charles Root Certificate&gt;证书路径&gt;如果证书状态为“该证书没有问题”，则安装成功。</li></ul></li></ul><p><img src="/../img/Charles/Charles@001.jpg" srcset="/img/load.gif" lazyload alt="Charles安装-安装证书"></p><h2 id="1-2-修改配置"><a href="#1-2-修改配置" class="headerlink" title="1-2 修改配置"></a>1-2 修改配置</h2><ul><li>修改配置<ul><li>安装好证书之后，使用Charles工具抓取到的HTTPS请求仍然显示为<unknow>，说明配置还有其他问题。</li><li>Proxy&gt;SSL Proxying Settings&gt;点Include底部的Add&gt;Host和Port都填<code>*</code>&gt;OK&gt;重启Charles。</li><li>SSL Proxying Settings还允许设置SSL访问地址，例如<code>*.com:443</code>、<code>*.cn:443</code>(这两设置允许访问大部分地址)等。</li></ul></li></ul><p><img src="/../img/Charles/Charles@002.jpg" srcset="/img/load.gif" lazyload alt="Charles安装-修改配置"></p><h2 id="1-3-Charles界面"><a href="#1-3-Charles界面" class="headerlink" title="1-3 Charles界面"></a>1-3 Charles界面</h2><ul><li>Charles界面<ul><li>菜单栏：File、Edit、View、Proxy(用得多)、Tools(用得多)、Window、Help。</li><li>工具栏(从左到右依次)<ul><li>清除会话、开始&#x2F;停止抓取会话、开始&#x2F;停止SSL代理、开始&#x2F;停止限流、开始&#x2F;停止断点。</li><li>依据所选内容编辑新请求、重新发送一个请求、验证会话、工具、配置(Proxy配置等)。</li></ul></li><li>两种视图模式<ul><li>Structure：树状结构显示，将网络请求按访问的域名分类。</li><li>Sequence：水平结构显示，将网络请求按访问的时间排序，可修改为类似Fiddler的左右视图模式。</li><li>修改为左右视图模式操作：菜单栏Edit&gt;Preferences&gt;Viewers&gt;Sequence view layout选Tall&gt;OK。</li></ul></li></ul></li></ul><h4 id="1-Structure"><a href="#1-Structure" class="headerlink" title="(1) Structure"></a>(1) Structure</h4><p><img src="/../img/Charles/Charles@003.jpg" srcset="/img/load.gif" lazyload alt="Charles安装-Charles界面-Structure"></p><h4 id="2-Sequence"><a href="#2-Sequence" class="headerlink" title="(2) Sequence"></a>(2) Sequence</h4><p><img src="/../img/Charles/Charles@004.jpg" srcset="/img/load.gif" lazyload alt="Charles安装-Charles界面-Sequence"></p><h4 id="3-Proxy菜单"><a href="#3-Proxy菜单" class="headerlink" title="(3) Proxy菜单"></a>(3) Proxy菜单</h4><ul><li>Recording Settings<ul><li>Options：通过Recording Size Limit限制记录数据的大小。</li><li>Include：只有与配置地址相匹配的请求才会被录制。</li><li>Exclude：只有与配置地址相匹配的请求才不被录制。</li></ul></li><li>Throttle Settings<ul><li>在Start Throttling状态下，可通过Throttle Settings配置Charles的网速模拟配置。</li><li>勾选Enable Throttling启用网速模拟配置，在Throttle Preset下选择网络类型即可。</li></ul></li><li>Breakpoint Settings<ul><li>勾选Enable Breakpoints启用断点模式，选Add，填入需监控的Scheme、Procotol、Host等信息。</li><li>可以用来观察和修改请求内容，以及响应内容，但在这个过程中，需要注意请求的超时时间问题。</li></ul></li><li>Web Interface Settings：勾选Enable web interface启用Web界面，允许匿名访问，也可配置用户名和密码。</li></ul><p><img src="/../img/Charles/Charles@005.jpg" srcset="/img/load.gif" lazyload alt="Charles安装-Charles界面-Proxy菜单"></p><h4 id="4-Tools菜单"><a href="#4-Tools菜单" class="headerlink" title="(4) Tools菜单"></a>(4) Tools菜单</h4><p><img src="/../img/Charles/Charles@006.jpg" srcset="/img/load.gif" lazyload alt="Charles安装-Charles界面-Tools菜单"></p><h1 id="2-过滤网络请求"><a href="#2-过滤网络请求" class="headerlink" title="2 过滤网络请求"></a>2 过滤网络请求</h1><ul><li>过滤网络请求<ul><li>通常情况下，需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。</li><li>Focus过滤：在已经捕捉到的会话列表中，选中想过滤的网络请求，右击选Focus。</li><li>Filter过滤：在Filter栏中填入需要过滤出来的关键字，例如服务器的地址是<a href="https://www.csdn.net/">https://www.csdn.net/</a>，填入csdn。</li><li>捕捉会话设置：菜单栏Proxy&gt;Recording Settings&gt;Include&gt;Add&gt;Protocol为https，Host为<a href="www.csdn.net">www.csdn.net</a>&gt;OK。</li></ul></li></ul><h2 id="2-1-Focus过滤"><a href="#2-1-Focus过滤" class="headerlink" title="2-1 Focus过滤"></a>2-1 Focus过滤</h2><p><img src="/../img/Charles/Charles@007.jpg" srcset="/img/load.gif" lazyload alt="过滤网络请求-Focus过滤"></p><h2 id="2-2-Filter过滤"><a href="#2-2-Filter过滤" class="headerlink" title="2-2 Filter过滤"></a>2-2 Filter过滤</h2><p><img src="/../img/Charles/Charles@008.jpg" srcset="/img/load.gif" lazyload alt="过滤网络请求-Filter过滤"></p><h2 id="2-3-捕捉会话设置"><a href="#2-3-捕捉会话设置" class="headerlink" title="2-3 捕捉会话设置"></a>2-3 捕捉会话设置</h2><p><img src="/../img/Charles/Charles@009.jpg" srcset="/img/load.gif" lazyload alt="过滤网络请求-捕捉会话设置"></p><h1 id="3-模拟慢速网络"><a href="#3-模拟慢速网络" class="headerlink" title="3 模拟慢速网络"></a>3 模拟慢速网络</h1><ul><li>模拟慢速网络<ul><li>开发时常需要模拟慢速网络或高延迟网络，以测试在移动网络下应用的表现是否正常。</li><li>配置：Proxy&gt;Throttle Settings&gt;勾选Enable Throttling&gt;设置Throttle Preset的类型。</li><li>完成配置后，可通过Proxy&gt;Start Throttling或快捷键Ctrl+T，来启用或停止模拟操作。</li><li>关于：<a href="https://blog.csdn.net/mao834099514/article/details/79456881">2G、3G、4G网络制式上下行频率、速率比较</a>。</li></ul></li></ul><p><img src="/../img/Charles/Charles@010.jpg" srcset="/img/load.gif" lazyload alt="模拟慢速网络"></p><h1 id="4-修改返回内容"><a href="#4-修改返回内容" class="headerlink" title="4 修改返回内容"></a>4 修改返回内容</h1><ul><li>修改返回内容<ul><li>让服务器返回指定内容，方便调试，例如列表页面为空、数据异常、部分耗时的网络请求超时等。</li><li>Charles提供了Map、Rewrite以及Breakpoints功能，都可以达到修改服务器返回指定内容的目的。<ul><li>Breakpoints：断点功能，适合做一些临时性的修改。</li><li>Rewrite：重写功能，适合对网络请求进行一些批量和长期的正则替换。</li><li>Map：重定向功能，适合长期地将某一些请求重定向到另一个网络地址或本地文件。</li></ul></li></ul></li></ul><h2 id="4-1-断点功能"><a href="#4-1-断点功能" class="headerlink" title="4-1 断点功能"></a>4-1 断点功能</h2><ul><li>断点功能<ul><li>会话列表中右键点击某会话，例如：<code>https://www.baidu.com</code>路径下的<code>content-search.xml</code>，然后选Breakpoints。</li><li>Proxy&gt;Breakpoints Settings中断点设置完成，打开浏览器重新访问百度，Charles中将弹窗一个Breakpoints断点窗口。</li></ul></li></ul><p><img src="/../img/Charles/Charles@011.jpg" srcset="/img/load.gif" lazyload alt="修改返回内容-断点功能"></p><h2 id="4-2-重写功能"><a href="#4-2-重写功能" class="headerlink" title="4-2 重写功能"></a>4-2 重写功能</h2><ul><li>重写功能<ul><li>例如：百度请求获取到带“百度搜索”字样的返回结果，重写设置改成了“重写测试”。</li><li>当浏览器再次请求百度页面时，获取到的返回结果就是带“重写测试”字样的返回结果。</li><li>Tools&gt;Rewrite Settings&gt;勾选Enable Rewrite&gt;左侧Add&gt;Name填百度搜索&gt;右下角Add&gt;填写Rewrite Rule&gt;OK。</li></ul></li></ul><p><img src="/../img/Charles/Charles@012.jpg" srcset="/img/load.gif" lazyload alt="修改返回内容-重写功能"></p><h2 id="4-3-重定向功能"><a href="#4-3-重定向功能" class="headerlink" title="4-3 重定向功能"></a>4-3 重定向功能</h2><ul><li>重定向功能<ul><li>Map Local：重定向到本地文件中，Tools&gt;Map Local Settings&gt;Enable Map Local&gt;Add&gt;Edit Mapping&gt;OK。</li><li>Map Remote：重定向到另一网络，Tools&gt;Map Remote Settings&gt;Enable Map Remote&gt;Add&gt;Edit Mapping&gt;OK。</li></ul></li></ul><h4 id="1-Local"><a href="#1-Local" class="headerlink" title="(1) Local"></a>(1) Local</h4><p><img src="/../img/Charles/Charles@013.jpg" srcset="/img/load.gif" lazyload alt="修改返回内容-重定向功能-Local"></p><h4 id="2-Remote"><a href="#2-Remote" class="headerlink" title="(2) Remote"></a>(2) Remote</h4><p><img src="/../img/Charles/Charles@014.jpg" srcset="/img/load.gif" lazyload alt="修改返回内容-重定向功能-Remote"></p><h1 id="5-Tools中的配置"><a href="#5-Tools中的配置" class="headerlink" title="5 Tools中的配置"></a>5 Tools中的配置</h1><ul><li>Tools中的配置<ul><li>黑名单的配置<ul><li>不想某些请求发起，直接返回无法访问，可以使用黑名单配置，例如访问百度操作。</li><li>Tools&gt;Block List Settings&gt;勾选Enable Block List&gt;Add&gt;填写Edit Location&gt;OK。</li></ul></li><li>缓存返回数据<ul><li>多用于APP数据缓存，在没有Server情况下程序也能运行，Charles菜单栏Tools&gt;Mirror Settings。</li><li>勾选Enable Mirror和Only for selected locations&gt;Save to路径选择&gt;Add&gt;填写Edit Location&gt;OK。</li></ul></li><li>修改请求地址<ul><li>即DNS欺骗设置，把域名解析到一个假的IP上，不一定要使用locahost，或者127.0.0.1。</li><li>Tools&gt;DNS Spoofing Settings&gt;Enable DNS Spoofing&gt;Add&gt;填写Edit DNS Spoof&gt;OK。</li></ul></li></ul></li></ul><h2 id="5-1-黑名单的配置"><a href="#5-1-黑名单的配置" class="headerlink" title="5-1 黑名单的配置"></a>5-1 黑名单的配置</h2><p><img src="/../img/Charles/Charles@015.jpg" srcset="/img/load.gif" lazyload alt="Tools中的配置-黑名单的配置"></p><h2 id="5-2-缓存返回数据"><a href="#5-2-缓存返回数据" class="headerlink" title="5-2 缓存返回数据"></a>5-2 缓存返回数据</h2><p><img src="/../img/Charles/Charles@016.jpg" srcset="/img/load.gif" lazyload alt="Tools中的配置-缓存返回数据"></p><h2 id="5-3-修改请求地址"><a href="#5-3-修改请求地址" class="headerlink" title="5-3 修改请求地址"></a>5-3 修改请求地址</h2><p><img src="/../img/Charles/Charles@017.jpg" srcset="/img/load.gif" lazyload alt="Tools中的配置-修改请求地址"></p><h1 id="6-PC与移动端抓包"><a href="#6-PC与移动端抓包" class="headerlink" title="6 PC与移动端抓包"></a>6 PC与移动端抓包</h1><ul><li>PC与移动端抓包<ul><li>PC端：确保Charles处于Start Recording状态，勾选Proxy&gt;Windows Prcsoxy。</li><li>移动端：通过把网络委托给Charles工具进行代理，与服务端对话。<ul><li>手机和电脑需在一个局域网内，不一定非要同个IP段，只要是在同一个路由器下即可。</li><li>电脑端设置<ul><li>确保电脑防火墙已经关闭，如果不抓取电脑上的请求，可以取消勾选Proxy&gt;Windows Proxy。</li><li>代理设置：Proxy&gt;Proxy Settings&gt;Port默认8888，勾选Enable transparent HTTP proxying。</li></ul></li><li>移动端设置<ul><li>Help&gt;SSL Proxying&gt;Install Charles Root Certificate on a Mobile Device or Remote Browser。</li><li>手机WiFi的代理设置：连接的WiFi设为手动代理，输入主机名(电脑IP)和端口(默认填写8888)。</li><li>如果是IOS，则在手机中打开浏览器，地址栏输入“chls.pro&#x2F;ssl”下载证书，再进行证书的安装。</li><li>如果是安卓，那么直接等待Charles页面弹窗，提示允许代理的操作，再点击Allow按钮就可以了。</li><li>如果不小心点了Deny按钮，则Proxy&gt;Access Control Settings&gt;在IP Range中Add手机的IP&gt;OK。</li></ul></li></ul></li></ul></li></ul><h2 id="6-1-代理设置"><a href="#6-1-代理设置" class="headerlink" title="6-1 代理设置"></a>6-1 代理设置</h2><p><img src="/../img/Charles/Charles@018.jpg" srcset="/img/load.gif" lazyload alt="PC与移动端抓包-代理设置"></p><h2 id="6-2-安装证书"><a href="#6-2-安装证书" class="headerlink" title="6-2 安装证书"></a>6-2 安装证书</h2><p><img src="/../img/Charles/Charles@019.jpg" srcset="/img/load.gif" lazyload alt="PC与移动端抓包-安装证书"></p>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Charles</tag>
      
      <tag>HTTP代理服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler</title>
    <link href="/2022/03/02/ce-shi-gong-ju/tt02-fiddler/"/>
    <url>/2022/03/02/ce-shi-gong-ju/tt02-fiddler/</url>
    
    <content type="html"><![CDATA[<p>Fiddler是一个HTTP的调试代理工具，以代理服务器的方式，监听系统的HTTP网络数据流动，还能设置断点，用于抓包。</p><span id="more"></span><h1 id="1-Fiddler"><a href="#1-Fiddler" class="headerlink" title="1 Fiddler"></a>1 Fiddler</h1><ul><li>Fiddler<ul><li>官网地址：<a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler</a>。</li><li>免费版本：<a href="https://blog.csdn.net/g_optimistic/article/details/89931109">https://blog.csdn.net/g_optimistic&#x2F;article&#x2F;details&#x2F;89931109</a>。</li><li>主要特征<ul><li>系统流量捕获、预配置浏览器捕获、流量分析、现代HTTP版本支持、模拟请求和响应。</li><li>API编写、安全协作、跨平台支持、样式选项(提供现代、直观的UI和一组流行的主题)。</li></ul></li><li>主页说明<ul><li>菜单栏：File、Edit、Rules、Tools、View、Help。</li><li>工具面板：WinConfig、Replay、Go、Stream、Decode、Find、Save、Browse、Clear Cache等快捷按钮。</li><li>会话面板：展示捕获到的所有会话，其中包括了sessions的状态码、协议Protocol、Host主机、URL地址等。</li><li>监控面板：提供Statistics、Inspectors、AutoResponder等多个选项卡，通过不同的选项卡操作捕获的会话。</li><li>状态面板：Capturing(启用禁用抓包)、All Processes(当前正在捕获的进程)、Number of sessions(会话数)等。</li><li>命令输入栏：可以结合正则表达式，输入一些命令快速过滤会话列表。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@001.png" srcset="/img/load.gif" lazyload alt="Fiddler-主页说明"></p><h2 id="1-1-工作原理"><a href="#1-1-工作原理" class="headerlink" title="1-1 工作原理"></a>1-1 工作原理</h2><ul><li>工作原理<ul><li>Fiddler本质上是一个Web代理服务器，默认的工作端口是8888，查看方式如下。</li><li>菜单栏-&gt;Tools-&gt;Options-&gt;Connections-&gt;Fiddler listens on port-&gt;8888。</li><li>Web代理服务器(Proxy Server)是网络的中间实体，位于Web客户端和Web服务器之间，扮演中间人的角色。</li><li>HTTP的代理服务器即可作为Web服务器为客户端提供服务，又可作为Web客户端，向其他服务器请求数据。</li><li>代理服务器的作用：共享网络、提高访问速度(有缓存功能)、突破访问限制、隐藏身份。</li><li>打开Fiddler后，会自动设置代理，关闭则自动注销代理，这样就不会影响到其他程序的运行了。</li><li>非正常退出时不会自动注销代理，容易造成网页无法访问的情况，可通过重启Fiddler解决问题。</li><li>抓包原理<ul><li>类似于快递代收点，快递员将快递放到代收点。</li><li>如果快递没有使用胶带等封口，那么代收点可以任意查看、替换快递中的物品，类似于HTTP。</li><li>如果快递使用胶带等封了口，那么代收点就不能随意查看、替换快递中的物品，类似于HTTPS。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@002.png" srcset="/img/load.gif" lazyload alt="Fiddler-工作原理-默认端口"></p><h2 id="1-2-快速抓包"><a href="#1-2-快速抓包" class="headerlink" title="1-2 快速抓包"></a>1-2 快速抓包</h2><ul><li>快速抓包<ul><li>若Fiddler没有抓到想要的包，逐一排查以下内容。</li><li>检查是否开启抓包模式，主页左下角是否有Capturing图标，有则处于抓包中，没有则点击一下开启抓包。</li><li>检查访问本地搭建的静态网站地址，是否使用了回路地址localhost或127.0.0.1，如果是则不能成功抓包。<ul><li>控制面板-&gt;Internet选项-&gt;连接-&gt;局域网设置-&gt;代理服务器的高级-&gt;例外默认设为<code>&lt;-loopback&gt;</code>。</li><li>说明在默认的代理设置中，回路地址localhost或127.0.0.1被排除了。</li><li>但若搭建的静态网站指定了端口，Fiddler的默认设置中可能并未排除指定端口的流量，因此可正常抓包。</li></ul></li><li>如果还是不能正常抓包，更换不同的浏览器试下。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@003.png" srcset="/img/load.gif" lazyload alt="Fiddler-快速抓包"></p><h2 id="1-3-HTTP协议"><a href="#1-3-HTTP协议" class="headerlink" title="1-3 HTTP协议"></a>1-3 HTTP协议</h2><ul><li>HTTP协议<ul><li>超文本传输协议，Hyper Text Transfer Protocol，一个简单的请求响应协议，基于TCP&#x2F;IP协议栈的应用层协议。</li><li>发展历史：0.9版本(交换信息的无序协议)-&gt;1.0版本(1982年)-&gt;1.1版本(规定了连接方式和类型)-&gt;2.0版本。</li></ul></li></ul><h4 id="1-请求报文"><a href="#1-请求报文" class="headerlink" title="(1) 请求报文"></a>(1) 请求报文</h4><ul><li>HTTP的请求报文是指从客户端发送给服务器的报文。</li><li>组成<ul><li>请求行：请求方法 + 空格 + 请求URL + 空格 + HTTP协议版本。<ul><li>请求方法：提供多种方法(GET、POST、PUT、DELETE、HEAD、OPTIONS、TRACE、CONNECT等)。</li><li>请求URL：用来告知服务器需要获取的资源，例如“<a href="http://detectportal.firefox.com/canonical.html">http://detectportal.firefox.com/canonical.html</a>”。</li><li>HTTP协议版本：用来告知服务器，采用的HTTP协议版本，例如“HTTP&#x2F;1.1”。</li></ul></li><li>请求头：用于与服务器进行通信、协商，格式为<code>key: value</code>。<ul><li>Accept：请求头指定客户端可以接收到的消息内容，例如<code>Accept: text/plain</code>。</li><li>Accept-Language：请求头游览器可接受语言，例如<code>Accept-Language: en, zh</code>。</li><li>User-Agent：用来标识发起请求的客户端(浏览器、应用程序、爬虫等)身份信息。</li><li>Content-Type：媒体类型，即数据格式，常见application&#x2F;json、multipart&#x2F;form-data等。</li><li>Accept-Charset：请求头指定游览器可接受的字符编码，例如<code>Accept-Charset: utf-8</code>。</li></ul></li><li>空行：请求头的最后一行，表示请求头结束，接下来为请求数据。</li><li>请求体：GET和DELETE方法没有请求体，POST和PUT方法有请求体，数据受Content-Type值的影响。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@004.png" srcset="/img/load.gif" lazyload alt="Fiddler-HTTP协议-请求报文"></p><h4 id="2-响应报文"><a href="#2-响应报文" class="headerlink" title="(2) 响应报文"></a>(2) 响应报文</h4><ul><li>HTTP的响应报文是指客户端发起HTTP请求后，服务器响应给客户端的报文。</li><li>组成<ul><li>状态行：响应行，HTTP协议版本 + 空格 + 状态码 + 空格 + 状态码描述。<ul><li>HTTP协议版本：必须与请求报文的协议版本保持一致。</li><li>状态码：HTTP Status Code，用以表示网页服务器超文本传输协议响应状态的3位数字代码。<ul><li>1XX：信息，服务器收到请求，需请求者继续执行操作。</li><li>2XX：成功，操作被成功接收并处理，例如状态码200。</li><li>3XX：重定向，需进一步的操作以完成请求，例如304。</li><li>4XX：客户端错误，请求包含语法错误或无法完成请求。</li><li>5XX：服务器错误，服务器在处理请求过程中发生错误。</li></ul></li><li>状态码描述：200 OK、301 Moved Permanently、302 Found、502 DNS Lookup Failed等。</li></ul></li><li>响应头：在HTTP响应消息中发送的HTTP头字段，包括服务器信息、响应时间等，类似于请求头。</li><li>空行：响应头的最后一行，表示响应头结束，接下来为响应数据，与请求报文一致。</li><li>响应体：响应数据或响应正文，用于存放需要返回给客户端的数据信息，同请求体。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@005.png" srcset="/img/load.gif" lazyload alt="Fiddler-HTTP协议-响应报文"></p><h4 id="3-URL组成"><a href="#3-URL组成" class="headerlink" title="(3) URL组成"></a>(3) URL组成</h4><ul><li>URL举例：<u>https</u>:&#x2F;&#x2F;<u>kaifa.baidu.com</u>&#x2F;<u>searchPage</u>?<u>wd&#x3D;fiddler&amp;hmsr&#x3D;aladdin</u>。</li><li>协议：协议类型，常见的有HTTP、HTTPS、FTP、SFTP、SMTP、POP3等，这里是HTTPS，与IP地址用<code>://</code>分隔。</li><li>IP地址：要访问的Web服务器的IP地址或主机名称，这里是kaifa.baidu.com，与端口号用<code>:</code>分隔，例如<a href="127.0.0.1:99">127.0.0.1:99</a>。</li><li>端口号：标识Web服务器正在监听的端口号，HTTP默认80，HTTPS默认443，这里默认443，与资源路径用<code>/</code>分隔。</li><li>资源路径：指定想要访问的资源具体路径，例如IMAGE、CSS、JS等资源，这里是searchPage，与查询参数用<code>?</code>分隔。</li><li>查询参数：向Web服务器发送额外的参数信息，键值对组成，这里是wd&#x3D;fiddler&amp;hmsr&#x3D;aladdin，参数之间用<code>&amp;</code>分隔。</li></ul><h1 id="2-工具面板"><a href="#2-工具面板" class="headerlink" title="2 工具面板"></a>2 工具面板</h1><ul><li>工具面板<ul><li>WinConfig、添加注释Comment、数据重放Replay、删除会话Remove、恢复断点执行Go、流模式Stream。</li><li>解码Decode、保留会话Keep、任意进程Any Process、快速查找Find、保存请求Save、倒计截图Screenshot。</li><li>计时器Timer、浏览器Browse、清除缓存Clear Cache、编解码TextWizard、窗口浮动Tearoff、在线Online。</li></ul></li></ul><p><img src="/../img/Fiddler/TPicon/TPicon@001.png" srcset="/img/load.gif" lazyload alt="工具面板"></p><h2 id="2-1-常用工具"><a href="#2-1-常用工具" class="headerlink" title="2-1 常用工具"></a>2-1 常用工具</h2><ul><li>常用工具<ul><li>WinConfig：点击<img src="/../img/Fiddler/TPicon/TPicon@002.png" srcset="/img/load.gif" lazyload alt="工具面板-WinConfig">，打开AppContainer Loopback Exemption Utility弹窗。</li><li>显示Windows内置运行的一些应用，默认情况下Fiddler无法抓取到这些内置应用的HTTP通讯包。</li><li>通过勾选弹窗对应的内置应用，点击Save Changes按钮，可以解除这些内置应用不能抓包的限制。</li><li>快捷键<code>Ctrl + WinConfig</code>可解除所有应用的限制，Exempt All为全选，Exempt None则是全取消。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@006.png" srcset="/img/load.gif" lazyload alt="工具面板-WinConfig"></p><h4 id="1-Comment"><a href="#1-Comment" class="headerlink" title="(1) Comment"></a>(1) Comment</h4><ul><li>测试人员在使用Fiddler测试API接口时，可以通过Comment注释功能直接将存在问题的请求添加注释。</li><li>当所有接口都测试完成后，将当前所有的session保存为一个*.saz文件，方便发送给开发人员排查问题。</li><li>选中存在问题的session会话，点击<img src="/../img/Fiddler/TPicon/TPicon@003.png" srcset="/img/load.gif" lazyload alt="工具面板-Comment">，填写存在的问题备注后，点击OK。</li></ul><p><img src="/../img/Fiddler/Fiddler@007.png" srcset="/img/load.gif" lazyload alt="工具面板-Comment"></p><h4 id="2-Replay"><a href="#2-Replay" class="headerlink" title="(2) Replay"></a>(2) Replay</h4><ul><li>选中当前存在的一个session会话，点击<img src="/../img/Fiddler/TPicon/TPicon@004.png" srcset="/img/load.gif" lazyload alt="工具面板-Replay">，可以向服务器重新发送一次选中的session请求。</li><li>快捷键<code>CTRL + Replay</code>重新发送一次请求，而不包含任何条件的请求头，例如：If-None-Match等。</li><li>快捷键<code>Shift + Replay</code>弹窗要求指定每个请求应被重新发送的次数，默认5次，OK后重新发送5次请求。</li></ul><p><img src="/../img/Fiddler/Fiddler@008.png" srcset="/img/load.gif" lazyload alt="工具面板-Replay"></p><h4 id="3-Remove"><a href="#3-Remove" class="headerlink" title="(3) Remove"></a>(3) Remove</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@005.png" srcset="/img/load.gif" lazyload alt="工具面板-Remove">，选对应选项，可删除列表中对应的会话。</li><li>选项说明<ul><li>Remove all：删除列表中的所有会话。</li><li>Images：删除列表中的所有图像类会话。</li><li>CONNECTs：删除列表中的所有CONNECT通道。</li><li>Non-200s：删除列表中所有HTTP响应码非200的会话。</li><li>Non-Browser：删除列表中所有不是来自浏览器的会话。</li><li>Complete &amp; Unmarked：删除列表中所有状态为正常结束或异常终止，没被标记且Comments没内容的会话。</li><li>Duplicate response bodies：删除列表中没有响应体，或者是响应体内容在更早的会话中已经被接收的会话。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@009.png" srcset="/img/load.gif" lazyload alt="工具面板-Remove"></p><h4 id="4-Go"><a href="#4-Go" class="headerlink" title="(4) Go"></a>(4) Go</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@006.png" srcset="/img/load.gif" lazyload alt="工具面板-Go">，可以恢复执行在Request请求，或Response响应断点处暂停的所有会话。</li><li>默认情况下直接点击会恢复所有会话的运行，快捷键<code>Shift + Go</code>仅恢复选中的会话。</li></ul><h4 id="5-Stream"><a href="#5-Stream" class="headerlink" title="(5) Stream"></a>(5) Stream</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@007.png" srcset="/img/load.gif" lazyload alt="工具面板-Stream">，开启Streaming Mode流模式。<ul><li>Fiddler一旦从远程服务器拿到了响应，会立即返回响应给客户端，这对于较低网络时间设定来说是非常重要的。</li><li>多数浏览器会在尚未完全下载HTML页时进行解析且并行下载所需资源，即使远程服务器还未完全传输该HTML。</li><li>访问Internet广播、音乐类站点时，通常使用永不结束的MP3数据流传递给客户端，这类特定场景也适合流模式。</li></ul></li><li>默认情况下，使用的是Buffering Mode缓冲模式。<ul><li>Fiddler会在数据返回客户端之前完全的缓冲响应。</li><li>用户有机会在客户端接收到响应之前修改响应内容。</li></ul></li><li>自动流模式<ul><li>Fiddler会自动使用流模式处理<code>video/*</code>和<code>audio/*</code>类型的响应，可开启或关闭设置。</li><li>菜单栏-&gt;Tools-&gt;Options-&gt;General-&gt;勾选Automatically stream audio &amp; video。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@010.png" srcset="/img/load.gif" lazyload alt="工具面板-Stream"></p><h4 id="6-Decode"><a href="#6-Decode" class="headerlink" title="(6) Decode"></a>(6) Decode</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@008.png" srcset="/img/load.gif" lazyload alt="工具面板-Decode">，直接对所有响应进行解码。</li><li>解码没有开启前，Fiddler右侧监控面板中可能提示“Response body is encoded. Click to decode”。</li><li>该提示说明当前响应的session会话已被编码，点击该提示信息可对当前响应的session会话进行解码。</li></ul><p><img src="/../img/Fiddler/Fiddler@011.png" srcset="/img/load.gif" lazyload alt="工具面板-Decode"></p><h4 id="7-Keep"><a href="#7-Keep" class="headerlink" title="(7) Keep"></a>(7) Keep</h4><ul><li>Fiddler的Web请求列表非无限，因此提供了保留会话Keep操作，可以让Web请求列表实时保持指定的session会话个数。</li><li>点击<img src="/../img/Fiddler/TPicon/TPicon@009.png" srcset="/img/load.gif" lazyload alt="工具面板-Keep">，选All sessions，保持所有的Web请求，选对应个数sessions，则保持对应个数的Web请求。</li></ul><h4 id="8-Any-Process"><a href="#8-Any-Process" class="headerlink" title="(8) Any Process"></a>(8) Any Process</h4><ul><li>默认情况下Fiddler将抓取所有进程的HTTP请求或响应，这会导致Web请求列表快速刷新，不方便查找所需的Web请求。</li><li>Any Process可以用来定位抓包，点击<img src="/../img/Fiddler/TPicon/TPicon@010.png" srcset="/img/load.gif" lazyload alt="工具面板-Any Process">，鼠标不放，将十字图标拖拽到指定进程的窗口中，右击则取消。</li></ul><h4 id="9-Find"><a href="#9-Find" class="headerlink" title="(9) Find"></a>(9) Find</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@011.png" srcset="/img/load.gif" lazyload alt="工具面板-Find">，支持依据查询条件快速查找会话列表请求，Find Sessions界面如下。</li><li>Find：输入需要查找的内容，例如baidu.com，查找所有包含baidu.com内容的请求。</li><li>Options<ul><li>Search：请求和响应、仅请求、仅响应、仅URLs，这四个中匹配条件。</li><li>Examine：标头和正文、仅标头、仅正文，这三个选项中进行检查匹配。</li><li>Match case(匹配时区分大小写)，Regular Expression(可使用正则匹配)。</li><li>Search binaries(搜索二进制)，Decode compressed content(解码压缩内容)。</li><li>Search only selected Sessions(仅搜索所选的会话)，Select matches(搜索匹配)。</li><li>Unmark old results(取消标记旧结果)，Result Highlight(匹配请求使用的高亮颜色)。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@012.png" srcset="/img/load.gif" lazyload alt="工具面板-Find"></p><h2 id="2-2-更多工具"><a href="#2-2-更多工具" class="headerlink" title="2-2 更多工具"></a>2-2 更多工具</h2><ul><li>更多工具<ul><li>保存请求Save：点击<img src="/../img/Fiddler/TPicon/TPicon@012.png" srcset="/img/load.gif" lazyload alt="工具面板-Save">，以SAZ文件形式保存请求，除快捷键保存外，还可菜单栏-&gt;File-&gt;Save中保存。<ul><li>All Sessions：所有抓取到的会话均保存到SAZ文件中。</li><li>Selected Sessions：将选中的会话保存到SAZ文件中。<ul><li>in ArchiveZip(SAZ归档文件)，as Text(保存到文本文件)。</li><li>as Text(Headers only)(仅保存会话的头部信息到文本文件)。</li></ul></li><li>Request：将所有会话的请求报文保存到SAZ文件中。<ul><li>Entire Request(将保存所有会话的请求报文，一个请求保存一个文件)。</li><li>Request Body(仅保存会话请求的正文部分，若没有正文则给出提示框)。</li></ul></li><li>Response：将所有会话的响应报文保存到SAZ文件中。<ul><li>Entire Response(将保存所有会话的响应报文，一个响应保存为一个文件)。</li><li>Response Body(仅保存会话响应报文的正文部分，若无正文则给出提示框)。</li><li>and Open as Local File(保存会话的响应报文到文件，然后自动打开该文件)。</li></ul></li></ul></li><li>倒计截图Screenshot：点击<img src="/../img/Fiddler/TPicon/TPicon@013.png" srcset="/img/load.gif" lazyload alt="工具面板-Screenshot">，支持当前Fiddler所在屏5秒倒计全屏截图，<code>Shift + Screenshot</code>键立即截图。</li><li>计时器Timer：点击<img src="/../img/Fiddler/TPicon/TPicon@014.png" srcset="/img/load.gif" lazyload alt="工具面板-Timer">，即开始计时，或停止计时，鼠标右键则可以将计时内容清除。</li><li>浏览器Browse：选中一会话点击<img src="/../img/Fiddler/TPicon/TPicon@015.png" srcset="/img/load.gif" lazyload alt="工具面板-Browse">，再任选浏览器打开，不支持多会话同时打开否则<code>about:blank</code>。</li></ul></li></ul><h4 id="1-Clear-Cache"><a href="#1-Clear-Cache" class="headerlink" title="(1) Clear Cache"></a>(1) Clear Cache</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@016.png" srcset="/img/load.gif" lazyload alt="工具面板-Clear Cache">，清除WinINET缓存，快捷键<code>Ctrl + Clear Cache</code>删除持久性Cookies。</li><li>WinINET缓存，分为文件缓存和URL缓存。<ul><li>Microsoft Windows操作系统中Internet Explorer和一些应用程序如Outlook，使用的一种缓存机制。</li><li>可以缓存从Internet或本地网络下载的内容，包括网页、图片、脚本等，用来提高后续访问的速度。</li><li>WinINET缓存只能缓存HTTP和HTTPS协议的内容，并不支持缓存FTP和Gopher等其他协议的内容。</li></ul></li><li>持久性Cookies<ul><li>一种Web浏览器中常用的数据存储机制，与浏览器会话无关，可在多个浏览器会话之间保留。</li><li>持久性Cookies可以设置过期时间，当Cookie没有过期时，用户下次打开浏览器仍然可以使用。</li><li>生命周期取决于Cookie的失效时间和用户浏览器的设置。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@013.png" srcset="/img/load.gif" lazyload alt="工具面板-Clear Cache"></p><h4 id="2-TextWizard"><a href="#2-TextWizard" class="headerlink" title="(2) TextWizard"></a>(2) TextWizard</h4><ul><li>用来对文本进行编码和解码，支持多种编码，有Base64、Base64URL、URLEncode、URLDecode、SHA256等。</li><li>例如：使用MD5对字符串“Hello Fiddler!”进行编码，点击<img src="/../img/Fiddler/TPicon/TPicon@017.png" srcset="/img/load.gif" lazyload alt="工具面板-TextWizard">，打开TextWizard工具，操作如下。</li></ul><p><img src="/../img/Fiddler/Fiddler@014.png" srcset="/img/load.gif" lazyload alt="工具面板-TextWizard"></p><h4 id="3-Tearoff"><a href="#3-Tearoff" class="headerlink" title="(3) Tearoff"></a>(3) Tearoff</h4><ul><li>点击<img src="/../img/Fiddler/TPicon/TPicon@018.png" srcset="/img/load.gif" lazyload alt="工具面板-Tearoff">，支持将监控面板以窗口浮动形式进行显示。</li></ul><p><img src="/../img/Fiddler/Fiddler@015.png" srcset="/img/load.gif" lazyload alt="工具面板-Tearoff"></p><h4 id="4-Online"><a href="#4-Online" class="headerlink" title="(4) Online"></a>(4) Online</h4><ul><li>将鼠标移动到<img src="/../img/Fiddler/TPicon/TPicon@019.png" srcset="/img/load.gif" lazyload alt="工具面板-Online">，将显示当前机器的网络信息，有IP地址、MAC地址等。</li></ul><p><img src="/../img/Fiddler/Fiddler@016.png" srcset="/img/load.gif" lazyload alt="工具面板-Online"></p><h1 id="3-会话面板"><a href="#3-会话面板" class="headerlink" title="3 会话面板"></a>3 会话面板</h1><ul><li>会话面板<ul><li>会话属性<ul><li>#(从1开始生成的请求id)、Result(http响应结果的编码)、Protocol(会话使用的协议，如http、https、ftp)。</li><li>Host(请求发送到服务器的主机名)、URL(服务器的路径或文件)、Body(响应body的字节数，以bytes为单位)。</li><li>Caching(响应的有效期或Cache-Control标头的值)、Content-Type(响应Content-Type标头的值)。</li><li>Process(发起流量的本地Windows进程)、Comments(注释)、Custom(自定义，可设置脚本的文本)。</li></ul></li><li>会话图标<ul><li><img src="/../img/Fiddler/SPicon/SPicon@001.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标01">(请求正发送到服务器)、<img src="/../img/Fiddler/SPicon/SPicon@002.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标02">(响应正从服务器读取)、<img src="/../img/Fiddler/SPicon/SPicon@003.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标03">(请求在断点处暂停)、<img src="/../img/Fiddler/SPicon/SPicon@004.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标04">(响应在断点处暂停)。</li><li><img src="/../img/Fiddler/SPicon/SPicon@005.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标05">(响应没有body)、<img src="/../img/Fiddler/SPicon/SPicon@006.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标06">(请求使用post方法)、<img src="/../img/Fiddler/SPicon/SPicon@007.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标07">(请求使用connect方法，建立一个用于https流量的隧道)。</li><li><img src="/../img/Fiddler/SPicon/SPicon@008.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标08">(响应是一张图片)、<img src="/../img/Fiddler/SPicon/SPicon@009.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标09">(响应是一个js脚本)、<img src="/../img/Fiddler/SPicon/SPicon@010.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标10">(响应是一个css，即叠加样式表)、<img src="/../img/Fiddler/SPicon/SPicon@011.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标11">(响应是一个xml)。</li><li><img src="/../img/Fiddler/SPicon/SPicon@012.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标12">(响应是一个json)、<img src="/../img/Fiddler/SPicon/SPicon@013.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标13">(响应是一种字体)、<img src="/../img/Fiddler/SPicon/SPicon@014.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标14">(通用的成功响应)、<img src="/../img/Fiddler/SPicon/SPicon@015.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标15">(响应是使用缓存版本304重定向)。</li><li><img src="/../img/Fiddler/SPicon/SPicon@016.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标16">(响应是300、301、302、303、307重定向)、<img src="/../img/Fiddler/SPicon/SPicon@017.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标17">(响应是对客户端凭据的请求)、<img src="/../img/Fiddler/SPicon/SPicon@018.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标18">(响应是服务器错误)。</li><li><img src="/../img/Fiddler/SPicon/SPicon@019.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标19">(会话被客户端、Fiddler或服务器中止)、<img src="/../img/Fiddler/SPicon/SPicon@020.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标20">(响应的Content-Type值为text&#x2F;html)、<img src="/../img/Fiddler/SPicon/SPicon@021.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标21">(响应是视频文件)。</li><li><img src="/../img/Fiddler/SPicon/SPicon@022.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标22">(响应Content-Type为application&#x2F;octet-stream)、<img src="/../img/Fiddler/SPicon/SPicon@023.png" srcset="/img/load.gif" lazyload alt="会话面板-会话图标23">(请求要求服务器切换协议，服务器已确认切换准备)。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@017.png" srcset="/img/load.gif" lazyload alt="会话面板"></p><h1 id="4-监控面板"><a href="#4-监控面板" class="headerlink" title="4 监控面板"></a>4 监控面板</h1><ul><li>监控面板<ul><li>Statistics(统计选项卡)、Inspectors(检查器选项卡)、AutoResponder(自动响应选项卡)、Composer(组合器)。</li><li>Fiddler Orchestra Beta(新版新增功能，用于远程抓包)、FiddlerScript(编辑器与脚本库)、Log(日志选项卡)。</li><li>Filters(过滤器)、TimeLine(时间轴选项卡)。</li></ul></li></ul><h2 id="4-1-Statistics"><a href="#4-1-Statistics" class="headerlink" title="4-1 Statistics"></a>4-1 Statistics</h2><ul><li>Statistics<ul><li>显示当前会话的基本信息，最上方显示文本信息，最下方以饼图形式按MIME类型显示流量。</li><li>饼图：默认不显示，点Show Chart显示。<ul><li>Collapse Chart支持隐藏饼图，饼图的切片是各个MIME类型及Headers的字节数。</li><li>Copy this chart可以把饼图作为位图拷贝到剪贴板，进而粘贴到报表或ppt演示中。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@018.png" srcset="/img/load.gif" lazyload alt="监控面板-Statistics"></p><h4 id="1-单会话"><a href="#1-单会话" class="headerlink" title="(1) 单会话"></a>(1) 单会话</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">Request Count:  1 ------------------------------------ 选中会话的个数<br>Bytes Sent:     2,047   (headers:2,047; body:0) ------ HTTP请求头和请求体中向外发送的字节总数<br>Bytes Received: 96,052  (headers:794; body:95,258) --- HTTP请求头和请求体中接收到的所有字节数<br><br><span class="hljs-section">ACTUAL PERFORMANCE ----------------------------------- 请求实际执行情况</span><br><span class="hljs-section">--------------</span><br>ClientConnected:      11:35:43.234<br>ClientBeginRequest:   11:35:43.346<br>GotRequestHeaders:    11:35:43.346<br>ClientDoneRequest:    11:35:43.346<br>Determine Gateway:    0ms<br>DNS Lookup:           0ms ------------ 选中会话解析DNS所花费的时间的总和，DNS缓存或所有连接都已建立，则不需要DNS解析<br>TCP/IP Connect:       0ms ------------ 选中会话建立TCP/IP连接所花费的时间总和，所有请求都已建立连接，则不需要TCP/IP连接<br>HTTPS Handshake:      0ms ------------ 选中会话在HTTPS握手上所花费的时间总和<br>ServerConnected:      11:35:43.262 --- 所有会话都是HTTP，不需解密，或都发生在已建立安全信任的连接上，则不存在HTTPS握手<br>FiddlerBeginRequest:  11:35:43.346<br>ServerGotRequest:     11:35:43.347<br>ServerBeginResponse:  11:35:43.366<br>GotResponseHeaders:   11:35:43.366<br>ServerDoneResponse:   11:35:43.421<br>ClientBeginResponse:  11:35:43.421<br>ClientDoneResponse:   11:35:43.421<br><br>  Overall Elapsed:  0:00:00.074 ---------------------- 已用总时间<br><br><span class="hljs-section">RESPONSE BYTES (by Content-Type) --------------------- 响应字节数(按Content-Type分组统计)</span><br><span class="hljs-section">--------------</span><br>text/html: 95,258<br>~headers~: 794<br><br><br><span class="hljs-section">ESTIMATED WORLDWIDE PERFORMANCE ---------------------- 选中的流量在不同地区和连接方式下所需时间的初步估计</span><br><span class="hljs-section">--------------</span><br>The following are VERY rough estimates of download times when hitting servers based in Seattle.<br><br>US West Coast (Modem - 6KB/sec) ---------------------- 该值是根据选中会话的个数和大小计算的<br>  RTT:      0.10s<br>  Elapsed:  16.10s<br><br>Japan / Northern Europe (Modem) ---------------------- 实际网络性能受多因素影响，因而该值可能不准确<br>  RTT:      0.15s<br>  Elapsed:  16.15s<br><br>China (Modem)<br>  RTT:      0.45s<br>  Elapsed:  16.45s<br><br>US West Coast (DSL - 30KB/sec)<br>  RTT:      0.10s<br>  Elapsed:  3.10s<br><br>Japan / Northern Europe (DSL)<br>  RTT:      0.15s<br>  Elapsed:  3.15s<br><br>China (DSL)<br>  RTT:      0.45s<br>  Elapsed:  3.45s<br><br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><br>Learn more about HTTP performance at http://fiddler2.com/r/?HTTPPERF<br></code></pre></td></tr></table></figure><h4 id="2-单通道"><a href="#2-单通道" class="headerlink" title="(2) 单通道"></a>(2) 单通道</h4><ul><li>单个CONNECT通道，会显示在该通道上发送和接收的字节数，除非配置为HTTPS加密方式。</li><li>配置为HTTPS加密方式的情况下，需在Web会话列表已解密的HTTPS会话中查看字节数信息。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">Request Count:  7 ------------------------------------ 选中的请求数<br>Unique Hosts:   5 ------------------------------------ 流量流向的独立目标主机数，若都发送到相同服务器上，则不显示<br>Bytes Sent:     5,745 (headers:5,513; body:232) ------ HTTP请求头和请求体中向外发送的字节总数<br>Bytes Received: 7,470 (headers:2,319; body:5,151) ---- HTTP请求头和请求体中接收到的所有字节数<br><br><span class="hljs-section">ACTUAL PERFORMANCE ----------------------------------- 实际执行情况</span><br><span class="hljs-section">--------------</span><br>Requests started at:          14:55:26.437 ----------- Fiddler接收到的第一个请求的第一个字节时间点<br>Responses completed at:       14:55:44.471 ----------- Fiddler发送到客户端的最后一个响应的最后一个字节时间点<br>Sequence (clock) duration:    00:00:18.033 ----------- 第一个请求开始到最后一个响应结束之间的间隔时间<br>Aggregate Session duration:   00:00:00.184 ----------- 所有选中的会话从请求到响应之间的时间的和<br>DNS Lookup time:              1ms -------------------- 会话通常是并行运行的，Aggregate结果可能比Sequence时间长<br>TCP/IP Connect duration:      21ms ------------------- 会话从开始到结束之间若包含空闲时间，Aggregate也可能比Sequence时间短<br>HTTPS Handshake duration:     23ms<br><br><span class="hljs-section">RESPONSE CODES --------------------------------------- 选中会话中各个HTTP响应码的计数</span><br><span class="hljs-section">--------------</span><br>HTTP/200:   6<br>HTTP/204:   1<br><br><span class="hljs-section">RESPONSE BYTES (by Content-Type) --------------------- 响应字节数(按Content-Type分组统计)</span><br><span class="hljs-section">--------------</span><br><span class="hljs-code">       image/png: 4,868</span><br><span class="hljs-code">       ~headers~: 2,319</span><br><span class="hljs-code">   image/svg+xml: 184</span><br><span class="hljs-code">       image/gif: 86</span><br><span class="hljs-code">application/json: 13</span><br><span class="hljs-code"></span><br><span class="hljs-section">REQUESTS PER HOST</span><br><span class="hljs-section">--------------</span><br><span class="hljs-code">         localhost: 2</span><br><span class="hljs-code">   pub.idqqimg.com: 2</span><br><span class="hljs-code">       docs.qq.com: 1</span><br><span class="hljs-code">      aegis.qq.com: 1</span><br><span class="hljs-code">report.idqqimg.com: 1</span><br><span class="hljs-code"></span><br><br><span class="hljs-section">ESTIMATED WORLDWIDE PERFORMANCE ---------------------- 选中的流量在不同地区和连接方式下所需时间的初步估计</span><br><span class="hljs-section">--------------</span><br>The following are VERY rough estimates of download times when hitting servers based in Seattle.<br><br>US West Coast (Modem - 6KB/sec) ---------------------- 该值是根据选中会话的个数和大小计算的<br>  RTT:      0.70s<br>  Elapsed:  2.70s<br><br>Japan / Northern Europe (Modem) ---------------------- 实际网络性能受多因素影响，因而该值可能不准确<br>  RTT:      1.05s<br>  Elapsed:  3.05s<br><br>China (Modem)<br>  RTT:      3.15s<br>  Elapsed:  5.15s<br><br>US West Coast (DSL - 30KB/sec)<br>  RTT:      0.70s<br>  Elapsed:  0.70s<br><br>Japan / Northern Europe (DSL)<br>  RTT:      1.05s<br>  Elapsed:  1.05s<br><br>China (DSL)<br>  RTT:      3.15s<br>  Elapsed:  3.15s<br><br><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><span class="hljs-strong">____</span><br>Learn more about HTTP performance at http://fiddler2.com/r/?HTTPPERF<br></code></pre></td></tr></table></figure><h2 id="4-2-Inspectors"><a href="#4-2-Inspectors" class="headerlink" title="4-2 Inspectors"></a>4-2 Inspectors</h2><ul><li>Inspectors<ul><li>用于显示Web会话列表中选定会话的请求和响应信息，位于监控面板选项卡处，也有独立的Inspect Session窗口。</li><li>Inspect Session窗口可以在会话面板中，选中需要打开请求或响应信息的会话，鼠标右键Inspect in New Window。</li><li>Fiddler会根据每个请求和响应的类型，自动选择合适的Inspectors视图，例如<code>image/*</code>类型显示ImageView视图。</li><li>右击请求或响应的Inspector选项卡，会显示三个选项菜单。<ul><li>Inspector Properties：显示Inspector提供的自身信息。</li><li>Copy as Image：将当前Inspector复制成图片，粘贴到其他地方使用。</li><li>Hide Inspector：从Inspectors选项卡中隐藏该Inspector，支持恢复。</li></ul></li><li>Inspectors默认情况下是只读模式Readonly，除非该会话停止在某个断点处。</li><li>只要当前会话处于未锁定状态，就可以选中后鼠标右键Unlock For Editing进行编辑，编辑模式是白色背景显示。</li><li>默认的只读模式是淡蓝色背景，菜单栏-&gt;Tools-&gt;Options-&gt;Appearance-&gt;Set Readonly Color可更改背景色。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@019.png" srcset="/img/load.gif" lazyload alt="监控面板-Inspectors"></p><h4 id="1-Inspector-Properties"><a href="#1-Inspector-Properties" class="headerlink" title="(1) Inspector Properties"></a>(1) Inspector Properties</h4><p><img src="/../img/Fiddler/Fiddler@020.png" srcset="/img/load.gif" lazyload alt="监控面板-Inspectors-Inspector Properties"></p><h4 id="2-Hide-Inspector"><a href="#2-Hide-Inspector" class="headerlink" title="(2) Hide Inspector"></a>(2) Hide Inspector</h4><p><img src="/../img/Fiddler/Fiddler@021.png" srcset="/img/load.gif" lazyload alt="监控面板-Inspectors-Hide Inspector"></p><h4 id="3-Hide-Inspector恢复"><a href="#3-Hide-Inspector恢复" class="headerlink" title="(3) Hide Inspector恢复"></a>(3) Hide Inspector恢复</h4><ul><li>菜单栏-&gt;View-&gt;Tabs-&gt;Preferences&gt;fiddler.inspectors.hidelist的value改为True或False，保存后重启。</li></ul><p><img src="/../img/Fiddler/Fiddler@022.png" srcset="/img/load.gif" lazyload alt="监控面板-Inspectors-Hide Inspector恢复"></p><h2 id="4-3-AutoResponder"><a href="#4-3-AutoResponder" class="headerlink" title="4-3 AutoResponder"></a>4-3 AutoResponder</h2><ul><li>AutoResponder<ul><li>支持创建规则，可在响应请求时自动触发，常见例子是返回之前捕捉的响应，而不需要访问服务器。</li><li>Enable rules：用来控制是否激活自动响应选项卡。</li><li>Unmatched requests passthrough：用来控制会话不匹配给定规则时会发生的情况。<ul><li>如果勾选，则不匹配的请求会正常发送到服务器。</li><li>如果不勾选，那么Fiddler会为所有与该规则完全不匹配的HTTP请求，生成响应404 Not Found。</li><li>若客户端发送条件请求包含If-None-Match或If-Modified-Since，返回响应304 Not Modified。</li></ul></li><li>Enable Latency<ul><li>用来控制匹配某个规则的请求是立即执行，还是延迟Latency字段中所指定的毫秒数。</li><li>不勾选Latency字段就不显示，勾选可准确地模拟服务器实际响应，取消可提升性能。</li></ul></li><li>Add Rule：点击该按钮添加一个新的AutoResponder规则。</li><li>Import<ul><li>支持导入SAZ文件，导入的每个会话会被用于规则列表生成新规则。</li><li>还可以导入FARX文件，包含从AutoResponder选项卡中导出的规则。</li></ul></li><li>中间是规则列表<ul><li>If request matches：匹配条件，用于判断接收到的请求是否匹配该规则，复选框控制规则是否选中。</li><li>then respond with：规则匹配时所要采取的操作，即返回哪些数据给请求，可指定本地文件或其他。</li><li>Latency：勾选Enable Latency时才出现，用来说明规则的延迟时间。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@023.png" srcset="/img/load.gif" lazyload alt="监控面板-AutoResponder"></p><h4 id="1-Rule-Editor"><a href="#1-Rule-Editor" class="headerlink" title="(1) Rule Editor"></a>(1) Rule Editor</h4><ul><li>底部的Rule Editor用来调整规则的匹配条件和返回，Test支持根据选中的样本URI测试匹配条件。<ul><li>URL Pattern：设置匹配公式。</li><li>Test URL：设置测试的网址。</li><li>Save Changes：将条件替换为Rule Editor的第一行匹配条件内容。</li></ul></li><li>Match only once表示只匹配一次，Save为更改规则后，更新规则内容。</li><li>Rule Editor第二行，设置返回。<ul><li>200_FiddlerGif.dat(返回一个gif图片给客户端)、200_SimpleHTML.dat(返回一个简单的HTML报文)。</li><li>200_TransPixel.dat(返回一个内置的位图)、204_NoContent.dat(返回状态码为204且无内容的报文)。</li><li>302_Redirect.dat(即将重定向到Fiddler官网)、303_RedirectWithGet.dat(即将重定向到Fiddler官网)。</li><li>304_NotModified.dat(返回状态码为304，且长度为0的报文)。</li><li>307_RedirectWithMethod.dat(返回状态码为307的响应报文)。</li><li>401_AuthBasic.dat(返回状态码为401，且基础权限验证失败的响应报文，用户没有访问权限，需身份认证)。</li><li>401_AuthDigest.dat(返回状态码为401，且摘要权限验证失败的响应报文)。</li><li>403_AuthDeny.dat(返回状态码403，没有访问权限错误信息的响应报文)。</li><li>404_Plain.dat(返回HTML文件不存在的响应报文)。</li><li>407_ProxyAuthBasic.dat(返回一个代理服务未通过基础权限认证的响应报文)。</li><li>502_Unreachable.dat(返回一个状态码为502，并且服务器不可用的响应报文)。</li><li>*bpu(为当前匹配的请求添加请求断点)。</li><li>*bpafter(为当前匹配的请求添加响应断点)、*exit(停止正在处理的规则)。</li><li>*drop(不发送响应，马上关闭客户端连接，TCP&#x2F;I层角度看，该连接是优雅断开的，向客户端返回FIN)。</li><li>*reset(不发送响应，马上关闭客户端连接，TCP&#x2F;I层角度看，该连接是粗暴断开的，向客户端返回RST)。</li><li>*delay:100(为当前匹配的请求添加100毫秒的延迟，支持依据需求，将该延迟改为想要延迟的具体时间)。</li><li>*ReplyWithTunnel(使用隧道进行回复)。</li><li>*CORSPreflightAllow<ul><li>可确保服务器对CORS标准知情，保护不支持CORS的旧服务器。</li><li>借助Access-Control-Allow-Origin响应头字段允许跨域AJAX。</li><li>非简单请求CORS机制跨域会首先进行preflight(Options请求)，该请求成功后才发送真正的请求。</li></ul></li><li>*flag:ui-backcolor&#x3D;#FFD700(将当前匹配的请求在Web请求列表中添加背景颜色，默认黄色背景)。</li><li>*header:HeaderName&#x3D;NewValue(添加头字段，字段名HeaderName，字段值NewValue，可依据需求设置)。</li><li>*redir:<a href="http://www.example.com/">http://www.example.com</a>(返回指向目标URL的307重定向响应，前缀确保客户端知道请求发送到哪)。</li><li>*script:FiddlerScriptFunctionName(为匹配的请求调用FiddlerScript中指定的函数)。</li><li><a href="http://www.example.com/">http://www.example.com</a>(将该地址的响应作为客户端响应，有效地把请求重定向到指定URL)。</li><li>Create New Response…(输入文件名，在Fiddler指定的目录下查找该文件信息)。</li><li>Find a file…(选择本地一个文件，例如文本、图片等，作为响应返回给客户端)。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@024.png" srcset="/img/load.gif" lazyload alt="监控面板-AutoResponder-Rule Editor"></p><h4 id="2-Rule右键菜单"><a href="#2-Rule右键菜单" class="headerlink" title="(2) Rule右键菜单"></a>(2) Rule右键菜单</h4><ul><li>Remote(移除规则)、Promote(将选中的规则向上移动)、Demote(将选中的规则向下移动)。</li><li>Clone(克隆一个选中的规则到规则框中)、Set Latency(设置响应的延迟时间，单位为毫秒)。</li><li>Set Comments(设置注释来提示当前规则的作用)、Edit Response(编辑当前规则设置的响应文件)。</li><li>Generate File(生成响应文件)、Edit File With(将匹配到的响应保存为本地文件并用编辑器打开)。</li><li>Open Url(使用默认的网页浏览器打开匹配条件中的网址)、Find(规则框中寻找字符串，高亮显示)。</li><li>Export All(导出当前规则为farx的文件)。</li></ul><p><img src="/../img/Fiddler/Fiddler@025.png" srcset="/img/load.gif" lazyload alt="监控面板-AutoResponder-Rule右键菜单"></p><h4 id="3-访问新浪实战"><a href="#3-访问新浪实战" class="headerlink" title="(3) 访问新浪实战"></a>(3) 访问新浪实战</h4><ul><li>建立一个规则，访问新浪官网，使其返回的是百度搜索页面。<ul><li>访问<a href="https://www.baidu.com/">百度</a>，复制源码保存为本地baidu.html文件，浏览器事先打开<a href="https://www.sina.com.cn/">新浪网</a>，确保Fiddler正常抓包。</li><li>会话面板选中新浪网的请求会话-&gt;AutoResponder-&gt;Add Rule-&gt;Rule Editor第二行Find a File。</li><li>选择已保存到本地的baidu.html文件-&gt;勾选Enable rules-&gt;浏览器再次请求<a href="https://www.sina.com.cn/">新浪网</a>页面进行查看。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@026.png" srcset="/img/load.gif" lazyload alt="监控面板-AutoResponder-访问新浪实战"></p><h2 id="4-4-Composer"><a href="#4-4-Composer" class="headerlink" title="4-4 Composer"></a>4-4 Composer</h2><ul><li>Composer<ul><li>支持手动构建和发送HTTP、HTTPS和FTP请求，点击Execute按钮将请求发送到服务器端。</li><li>可以从Web会话列表中拖拽会话到Composer选项卡中，将该Session的请求复制到用户界面。</li></ul></li></ul><h4 id="1-Parsed"><a href="#1-Parsed" class="headerlink" title="(1) Parsed"></a>(1) Parsed</h4><ul><li>支持为每个请求组件使用独立的输入框构建请求。<ul><li>HTTP方法：GET、POST、PUT、HEAD、TRACE、DELETE等。</li><li>请求的绝对URL，必须以<code>http://</code>、<code>https://</code>或<code>ftp://</code>开头。</li><li>指定请求的HTTP协议版本，通常是HTTP&#x2F;1.1。</li></ul></li><li>若当前的请求方法不支持请求体，例如GET方法，则在请求体输入框输入文本时会显示红色背景。</li></ul><p><img src="/../img/Fiddler/Fiddler@027.png" srcset="/img/load.gif" lazyload alt="监控面板-Composer-Parsed"></p><h4 id="2-Upload-file"><a href="#2-Upload-file" class="headerlink" title="(2) Upload file"></a>(2) Upload file</h4><ul><li>Parsed选项卡上有一个Upload file上传文件按钮。</li><li>请求方法是PUT只能选一个文件，请求方法是POST则可以选多个文件。</li><li>上传文件后(指定PUT或POST)，Composer可创建包含适当格式的请求。<ul><li>使用PUT方法执行文件上传时，请求体通常包含文件的原始内容。</li><li>使用POST方法上传时，通常会用Content-Type值格式化请求体。</li></ul></li><li>请求执行时，请求体中的所有<code>@INCLUDE</code>引用会替换成指定文件的内容。</li></ul><p><img src="/../img/Fiddler/Fiddler@028.png" srcset="/img/load.gif" lazyload alt="监控面板-Composer-Upload file"></p><h4 id="3-Raw"><a href="#3-Raw" class="headerlink" title="(3) Raw"></a>(3) Raw</h4><ul><li>提供了简单的文本框，可以在该文本框中输入合适的HTTP请求。</li><li>如果输入的请求文本格式不对，点击Execute按钮不会发起请求。</li><li>Raw选项卡使用较少，多以Parsed选项卡为准。</li></ul><p><img src="/../img/Fiddler/Fiddler@029.png" srcset="/img/load.gif" lazyload alt="监控面板-Composer-Raw"></p><h4 id="4-Scratchpad"><a href="#4-Scratchpad" class="headerlink" title="(4) Scratchpad"></a>(4) Scratchpad</h4><ul><li>用于存储请求集合，如果要发出请求，选择对应的请求文本，并点击Execute按钮执行即可。</li></ul><p><img src="/../img/Fiddler/Fiddler@030.png" srcset="/img/load.gif" lazyload alt="监控面板-Composer-Scratchpad"></p><h4 id="5-Options"><a href="#5-Options" class="headerlink" title="(5) Options"></a>(5) Options</h4><ul><li>Inspect Session：勾选该项，点击Execute按钮执行请求时会跳转到Inspectors选项卡，可查看请求结果。</li><li>Fix Content- Length header<ul><li>控制Composer是否自动添加或修改Content-Length请求头，表示请求体的大小。</li><li>在多数情况下，缺少适当的Content-Length请求会Hang住或导致HTTP响应出错。</li></ul></li><li>Follow Redirects<ul><li>控制Composer是否自动使用响应的Location头，遵循HTTP&#x2F;3xx重定向。</li><li>如果勾选该项，Composer选项卡在失败之前最多会执行10次3xx重定向。</li></ul></li><li>Automatically Authenticate<ul><li>控制Composer是否自动响应服务器的HTTP&#x2F;401或HTTP&#x2F;407认证需求。</li><li>如果勾选该项，会使用Fiddler所运行账户的Windows证书自动响应这些问题。</li><li>且需要提供不同的证书集，设置Preferences的fiddler.composer.autoauth值。</li><li>若服务器需要的证书和提供方的证书不同，请求会失败，通常返回响应HTTP&#x2F;403。</li></ul></li><li>Tear off<ul><li>从监控面板窗口删除Composer选项卡，并将其作为独立的悬浮窗口打开查看。</li><li>勾选Inspect Session，点击按钮，支持同时查看Composer和Inspector选项卡。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@031.png" srcset="/img/load.gif" lazyload alt="监控面板-Composer-Options"></p><h4 id="6-序列化请求"><a href="#6-序列化请求" class="headerlink" title="(6) 序列化请求"></a>(6) 序列化请求</h4><ul><li>模拟某些场景，发送多个请求，这些请求除了某个有序的数字外，其他完全相同。</li><li>例如Flask实现的一个简单网页展示图片信息程序，图片名称基本一致，序号不同。</li><li>利用Fiddler的发送序列化请求，逐一访问image-001.png到image-007.png的图片。<ul><li>启动Flask小程序，在Composer中输入URL地址，序号部分使用<code>#</code>号代替。</li><li>本地小程序，URL地址为：<a href="http://127.0.0.1:5000/image/image-#.png">http://127.0.0.1:5000/image/image-#.png</a>。</li><li>点击Execute按钮执行请求，此时Fiddler要求输入序号开始值，输入001。</li><li>OK-&gt;再输入序号结束值007-&gt;OK-&gt;Fiddler会自动计算序列且发起请求。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@032.png" srcset="/img/load.gif" lazyload alt="监控面板-Composer-序列化请求"></p><h5 id="✧-程序目录"><a href="#✧-程序目录" class="headerlink" title="✧ 程序目录"></a>✧ 程序目录</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">-</span> /static<br><span class="hljs-bullet">  -</span> /images<br><span class="hljs-bullet">    -</span> image-001.png<br><span class="hljs-bullet">    -</span> image-002.png<br><span class="hljs-bullet">    -</span> image-003.png<br><span class="hljs-bullet">    -</span> image-004.png<br><span class="hljs-bullet">    -</span> image-005.png<br><span class="hljs-bullet">    -</span> image-006.png<br><span class="hljs-bullet">    -</span> image-007.png<br><span class="hljs-bullet">-</span> /templates<br><span class="hljs-bullet">  -</span> image.html<br><span class="hljs-bullet">-</span> image.py                                                    # 命令窗口执行python image.py<br></code></pre></td></tr></table></figure><h5 id="✧-image-py"><a href="#✧-image-py" class="headerlink" title="✧ image.py"></a>✧ image.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, url_for, send_file<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_metadata</span>(<span class="hljs-params">file_path</span>):<br>    size = os.path.getsize(file_path)                         <span class="hljs-comment"># 获取文件大小，单位字节</span><br>    mtime = os.path.getmtime(file_path)                       <span class="hljs-comment"># 获取文件最近修改时间</span><br>    modified_time = datetime.datetime.fromtimestamp(mtime).strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    ctime = os.path.getctime(file_path)                       <span class="hljs-comment"># 获取文件创建时间</span><br>    created_time = datetime.datetime.fromtimestamp(ctime).strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>    <span class="hljs-keyword">return</span> size, modified_time, created_time<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    image_names = [<span class="hljs-string">&#x27;image-001.png&#x27;</span>, <span class="hljs-string">&#x27;image-002.png&#x27;</span>, <span class="hljs-string">&#x27;image-003.png&#x27;</span>,<br>                   <span class="hljs-string">&#x27;image-004.png&#x27;</span>, <span class="hljs-string">&#x27;image-005.png&#x27;</span>, <span class="hljs-string">&#x27;image-006.png&#x27;</span>,<br>                   <span class="hljs-string">&#x27;image-007.png&#x27;</span>]<br>    image_info_list = []                                      <span class="hljs-comment"># 获取所有图片文件的元数据</span><br>    <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> image_names:<br>        file_path = os.path.join(app.static_folder, <span class="hljs-string">&#x27;images&#x27;</span>, image_name)<br>        size, modified_time, created_time = get_metadata(file_path)<br>        show_image = url_for(<span class="hljs-string">&#x27;show_image&#x27;</span>, image_name=image_name)<br>        image_info_list.append(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: image_name,<br>                                <span class="hljs-string">&#x27;modified_time&#x27;</span>: modified_time,<br>                                <span class="hljs-string">&#x27;created_time&#x27;</span>: created_time,<br>                                <span class="hljs-string">&#x27;size&#x27;</span>: size,<br>                                <span class="hljs-string">&#x27;show_image&#x27;</span>: show_image&#125;)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;image.html&#x27;</span>, image_info_list=image_info_list)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/image/&lt;string:image_name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_image</span>(<span class="hljs-params">image_name</span>):<br>    current_dir = os.path.dirname(os.path.abspath(__file__))  <span class="hljs-comment"># 确定要下载的文件路径</span><br>    file_path = current_dir + <span class="hljs-string">&#x27;\\static\\images\\&#x27;</span> + image_name<br>    <span class="hljs-built_in">print</span>(file_path)<br><br>    <span class="hljs-keyword">if</span> os.path.isfile(file_path):                             <span class="hljs-comment"># 如果该文件存在，则返回它</span><br>        _, ext = os.path.splitext(file_path)                  <span class="hljs-comment"># 确定文件的扩展名和MIME类型</span><br>        mime_type = &#123;<br>            <span class="hljs-string">&#x27;.png&#x27;</span>: <span class="hljs-string">&#x27;image/png&#x27;</span>,<br>            <span class="hljs-string">&#x27;.jpg&#x27;</span>: <span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<br>            <span class="hljs-string">&#x27;.gif&#x27;</span>: <span class="hljs-string">&#x27;image/gif&#x27;</span><br>        &#125;.get(ext.lower(), <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)<br>        <span class="hljs-keyword">return</span> send_file(file_path, as_attachment=<span class="hljs-literal">False</span>, mimetype=mime_type)<br>    <span class="hljs-keyword">else</span>:                                                     <span class="hljs-comment"># 否则返回一个错误信息</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Error! The requested file does not exist.&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="✧-image-html"><a href="#✧-image-html" class="headerlink" title="✧ image.html"></a>✧ image.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图片展示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/5.1.0/css/bootstrap.min.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;css/gallery.css&#x27;) &#125;&#125;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span>Image Gallery<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Image Name<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Last Modified Time<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Created Time<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>File Size<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Show Link<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>          &#123;% for image_info in image_info_list %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;text-center&quot;</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; image_info[&#x27;name&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; image_info[&#x27;modified_time&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; image_info[&#x27;created_time&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; image_info[&#x27;size&#x27;] &#125;&#125; bytes<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;show_image&#x27;, image_name=image_info[&#x27;name&#x27;]) &#125;&#125;&quot;</span>&gt;</span>Show<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>          &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-5-Orchestra"><a href="#4-5-Orchestra" class="headerlink" title="4-5 Orchestra"></a>4-5 Orchestra</h2><ul><li>Orchestra<ul><li>抓取APP流量原理：APP连接到Orchestra服务后，Orchestra正常转发流量的同时再复制一份流量给Fiddler。</li><li>Fiddler-&gt;Orchestra-&gt;<code>Download Fiddler Orchestra client for Windows, Mac and Linux</code>-&gt;解压文件。</li><li>在当前解压的目录中，鼠标右键Git Bash Here-&gt;输入<code>dotnet FiddlerOrchestra.Client.NetCore.dll</code>回车。</li><li>若显示以下内容，则<a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/2.0">下载安装.NET Core 2.0</a>-&gt;另起一个Git Bash Here，输入命令回车，启动Orchestra客户端。</li></ul></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Cmd">$ dotnet FiddlerOrchestra.Client.NetCore.dll                  # 缺少.<span class="hljs-built_in">NET</span> Core <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br>It was <span class="hljs-keyword">not</span> possible to <span class="hljs-built_in">find</span> any compatible framework version<br>The framework &#x27;Microsoft.NETCore.App&#x27;, version &#x27;<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>&#x27; (x64) was <span class="hljs-keyword">not</span> found.<br>  - The following frameworks were found:<br>      <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">6</span> <span class="hljs-built_in">at</span> [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]<br>You can resolve the problem by installing the specified framework and/or SDK.<br>The specified framework can be found <span class="hljs-built_in">at</span>:<br>  - https://aka.ms/dotnet-core-applaunch?framework=Microsoft.NETCore.App&amp;framework_version=<span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>  &amp;arch=x64&amp;rid=win10-x64<br><br># 正常启动Fiddler Orchestra Beta客户端，具体操作可以参考[https://zhuanlan.zhihu.com/p/<span class="hljs-number">551401338</span>]<br>$ dotnet FiddlerOrchestra.Client.NetCore.dll                  # 启动后不关，后面配置Orchestra有用<br>Hosting environment: Production<br>Content root <span class="hljs-built_in">path</span>: D:\Program\FiddlerOrchestra<br>Now listening on: http://localhost:<span class="hljs-number">8800</span><br>Application started. Press Ctrl+C to shut down.<br>...<br></code></pre></td></tr></table></figure><h4 id="1-连接客户端"><a href="#1-连接客户端" class="headerlink" title="(1) 连接客户端"></a>(1) 连接客户端</h4><ul><li>管理员身份运行Fiddler-&gt;Orchestra-&gt;点Start启动监听-&gt;配置Orchestra客户端，访问<a href="http://localhost:8800/">http://localhost:8800</a>。</li><li>Orchestra Connection-&gt;IP Address为127.0.0.1，Port为3636，Private key即Fiddler中的密钥-&gt;点击Connect。</li><li>Fiddler与Orchestra客户端连接成功，则Private key无法修改，Connect变Disconnect，Orchestra界面显示连接详细。</li></ul><p><img src="/../img/Fiddler/Fiddler@033.png" srcset="/img/load.gif" lazyload alt="监控面板-Orchestra-连接客户端"></p><h4 id="2-配置证书下载"><a href="#2-配置证书下载" class="headerlink" title="(2) 配置证书下载"></a>(2) 配置证书下载</h4><ul><li><a href="http://localhost:8800/">http://localhost:8800</a>-&gt;HTTPS Root Certificate-&gt;Generate root certificate as PKCS#12 file-&gt;创建及下载证书。</li><li>将下载的证书<code>fiddler-orchestra-root-certificate.p12</code>存放到指定位置-&gt;HTTPS Root Certificate页面进行加载。</li><li>点击Load root certificate from PKCS#12 file-&gt;页面的顶部将显示<code>Success：HTTPS root certificate is loaded</code>。</li></ul><p><img src="/../img/Fiddler/Fiddler@034.png" srcset="/img/load.gif" lazyload alt="监控面板-Orchestra-配置证书下载"></p><h4 id="3-启动全部服务"><a href="#3-启动全部服务" class="headerlink" title="(3) 启动全部服务"></a>(3) 启动全部服务</h4><ul><li>启动全部服务：Proxy-&gt;勾选Allow remote clients to connect-&gt;Start。</li><li>HTTP Reverse Proxy-&gt;勾选Allow remote clients to connect-&gt;Start。</li><li>HTTPS Reverse Proxy-&gt;<code>File path</code>输入证书<code>fiddler-orchestra-root-certificate.p12</code>的路径-&gt;Start。</li><li>常用的代理服务器<ul><li>Proxy<ul><li>正向代理，是客户端与目标服务器之间的中间代理服务器。</li><li>将客户端请求转发到目标服务器，并将响应返回给客户端。</li><li>例如：某些国家因特网接入受限，或被限制访问某些网站时，使用正向代理绕过封锁。</li></ul></li><li>HTTP Reverse Proxy<ul><li>反向代理，是服务器端的代理服务器。</li><li>将客户端请求转发到内部网络的后端服务器，然后将响应返回给客户端。</li><li>隐藏在服务器端，由服务器的管理员配置，客户端无法感知代理的存在。</li><li>HTTP反向代理常用于负载均衡、缓存加速和安全防护等方面。</li></ul></li><li>HTTPS Reverse Proxy<ul><li>SSL&#x2F;TLS反向代理，是一种基于加密的反向代理，用于安全传输Web页面和其他数据。</li><li>与HTTP反向代理类似，但在连接客户端和服务器之间的通信时采用SSL&#x2F;TLS协议加密。</li><li>有效地保护Web接口的安全性，避免敏感信息，如用户名和密码等，在传输过程中被窃取和篡改。</li></ul></li></ul></li></ul><h4 id="4-与手机端连接"><a href="#4-与手机端连接" class="headerlink" title="(4) 与手机端连接"></a>(4) 与手机端连接</h4><ul><li>点击Fiddler Orchestra Beta选项卡中的Download Fiddler Orchestra client for Android，下载安装到手机端。</li><li>Fiddler-&gt;菜单栏-&gt;Tools-&gt;Options-&gt;Connections选项中的Allow remote computers to connect保持勾选。</li><li>Fiddler Orchestra Beta客户端与手机端建立连接，要求客户端和手机端在同一局域网内(使用相同WiFi网络)。</li><li>打开手机端的Fiddler Orchestra Beta客户端，在Orchestra Connection页面分别输入IP地址、端口号、Key值。<ul><li>IP地址：Fiddler的工具面板Online查看到的IP地址，也可命令窗口输入<code>ipconfig</code>查看IPv4地址。</li><li>端口号：这里应该是指<a href="http://localhost:8800/">http://localhost:8800</a>的Proxy页面设置的<code>Listen on port</code>，默认是8866。</li><li>Key值<ul><li>电脑端的Fiddler Orchestra Beta客户端中生成的SSL密钥(具体在哪没找到，与手机端连接失败)。</li><li>Fiddler-&gt;菜单栏-&gt;Tools-&gt;Options-&gt;HTTPS-&gt;certificates generated by CertEnroll engine。</li></ul></li></ul></li><li>手机端与电脑端建立连接，除了使用USB数据线进行操作，还支持无线连接(保证两端处于同一WiFi环境下)。</li></ul><h2 id="4-6-FiddlerScript"><a href="#4-6-FiddlerScript" class="headerlink" title="4-6 FiddlerScript"></a>4-6 FiddlerScript</h2><ul><li>FiddlerScript<ul><li>Fiddler上的一个addon插件，或说是一个hook文件，实现了<code>Go to</code>的九大事件。</li><li>很多设置菜单，也是在这个脚本中编写的，支持自定义修改，例如User-Agents。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@035.png" srcset="/img/load.gif" lazyload alt="监控面板-FiddlerScript"></p><h4 id="1-语言模式"><a href="#1-语言模式" class="headerlink" title="(1) 语言模式"></a>(1) 语言模式</h4><ul><li>FiddlerScript有C#和JScript.NET这两种开发语言模式，可依据偏好设置。</li><li>切换语言：菜单栏-&gt;Tools-&gt;Options-&gt;Scripting-&gt;Language一栏可选。</li><li>对应Fiddler安装目录Scripts文件夹中的SampleRules.cs(C#)和SampleRules.js(JScript.NET)。</li></ul><p><img src="/../img/Fiddler/Fiddler@036.png" srcset="/img/load.gif" lazyload alt="监控面板-FiddlerScript-语言模式"></p><h4 id="2-编辑模式"><a href="#2-编辑模式" class="headerlink" title="(2) 编辑模式"></a>(2) 编辑模式</h4><ul><li>监控面板的FiddlerScript选项卡，支持文本编辑，<code>Save Script</code>保存文本。</li><li>菜单栏-&gt;Rules-&gt;Customize Rules-&gt;弹窗Fiddler ScriptEditor进行编辑。</li><li>若脚本写错，或改乱无法正确保存，可在菜单栏-&gt;Tools-&gt;Reset Script重置脚本内容。</li></ul><p><img src="/../img/Fiddler/Fiddler@037.png" srcset="/img/load.gif" lazyload alt="监控面板-FiddlerScript-编辑模式"></p><h2 id="4-7-Log"><a href="#4-7-Log" class="headerlink" title="4-7 Log"></a>4-7 Log</h2><ul><li>Log<ul><li>Fiddler的Log选项卡收集日志消息字符串，这些字符串由扩展、FiddlerScript或Fiddler本身生成。</li><li>记录应用事件(保存为SAZ文件)，以及系统事件的响应通知，例如：系统的网络连接丢失或恢复。</li><li>在Log选项卡页面，鼠标右键显示的一些命令说明。<ul><li>Copy：把选中的文本复制到剪贴板。</li><li>Send to Session List：将事件日志作为会话保存到Web会话列表。</li><li>Save to File：将当前日志保存到磁盘文件中，以纯文本(.txt)或富文本(.rtf)格式保存。</li><li>Clear：清空Log选项卡中的所有文本。</li></ul></li><li>Log选项卡支持简单的宏命令，可以从QuickExec命令输入栏中调用这些命令。<ul><li><code>log @Log.Clear</code>：清空日志。</li><li><code>log @Log.Save</code>：在Web会话列表中生成新的会话，响应体包含Log选项卡的文本内容。</li><li><code>log &quot;@Log.Export(\&quot;filename\&quot;)&quot;</code>：将Log选项卡文本保存到系统桌面的.rtf文件中。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@038.png" srcset="/img/load.gif" lazyload alt="监控面板-Log"></p><h2 id="4-8-Filters"><a href="#4-8-Filters" class="headerlink" title="4-8 Filters"></a>4-8 Filters</h2><ul><li>Filters<ul><li>过滤器提供了非常方便地将简单的过滤规则，应用到正在捕捉的数据会话流上的方法。</li><li>Filters上的所有操作都可以在FiddlerScript中模拟，简单任务直接使用过滤满足即可。</li><li>功能包括：隐藏&#x2F;显示会话、添加会话标识、断点调试、阻断发送请求、修改数据头等。</li><li>过滤器还可以为隐藏的会话提供代理功能，即使在Web会话列表中并没有显示这些会话。</li><li>Use Filters：是否开启过滤器。</li><li>Actions：支持把当前选中的过滤器作为过滤集，并对之前捕捉到的数据流应用当前过滤规则。<ul><li>Run Filterset now：立即运行过滤器设置。</li><li>Load Filterset：加载过滤器设置。</li><li>Save Filterset：保存过滤器设置。</li></ul></li><li>修改过滤器后，需执行Actions的<code>Run Filterset now</code>按钮，使修改后的过滤器配置立即生效。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@039.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters"></p><h4 id="1-Hosts"><a href="#1-Hosts" class="headerlink" title="(1) Hosts"></a>(1) Hosts</h4><ul><li>区域过滤(Zone Filter)<ul><li>Show only Intranet Hosts：只列出属于局域网的会话。</li><li>Show only Internet Hosts：只列出属于互联网的会话。</li></ul></li><li>主机过滤(Host Filter)<ul><li>Hide the following Hosts：隐藏Hosts输入框输入的主机。</li><li>Show only the following Hosts：仅显示Hosts输入框输入的主机。</li><li>Flag the following Hosts：在Web会话列表中加粗显示Hosts输入框输入的主机所有会话。</li></ul></li><li>Hosts输入框不会通过通配符自动匹配子域名，若设置了<code>Show only the following Hosts</code>。</li><li>并且列表中只有<code>xxx.com</code>，则无法看到<code>www.xxx.com</code>网站下的数据流，需改成<code>*.xxx.com</code>。</li><li>若想看根目录<code>xxx.com</code>下的数据流，将通配符改成<code>*xxx.com</code>的形式，多个host用分号隔开。</li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@001.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Hosts"></p><h4 id="2-Client-Process"><a href="#2-Client-Process" class="headerlink" title="(2) Client Process"></a>(2) Client Process</h4><ul><li>客户端进程用于控制进程的数据流，应用程序只有和Fiddler运行在相同的主机时才能做出判断。</li><li>Show only traffic from：只显示选中进程下的数据流(注意：下拉列表包含了当前系统中，正在运行的所有进程)。</li><li>Show only Internet Explorer：只显示进程名以IE开头，或请求的User-Agent包含<code>compatible; MSIE</code>的数据流。</li><li>Hide traffic from Service Host：隐藏来自进程<code>svchost.exe</code>的数据流，该进程是一个系统进程。</li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@002.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Client Process"></p><h4 id="3-Request-Headers"><a href="#3-Request-Headers" class="headerlink" title="(3) Request Headers"></a>(3) Request Headers</h4><ul><li>Show only if URL contains：支持基于URL隐藏请求，仅显示感兴趣的请求。</li><li>Hide if URL contains<ul><li>支持基于URL显示请求，仅隐藏某些请求，可以使用前缀<code>EXACT</code>来限定大小写敏感。</li><li><code>EXACT:www.example.com/api</code>，<code>REGEX:(?insx).*\.(gif|png|jpg)$</code>只显示图片。</li></ul></li><li>Flag requests with headers：支持指定HTTP请求头名称，如果会话列表中存在，则加粗显示。</li><li>Delete request headers：支持指定HTTP请求头名称，如果包含该请求头，那么删除该请求头。</li><li>Set request header：支持创建指定名称和取值的HTTP请求头，或将请求头更新为指定的取值。</li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@003.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Request Headers"></p><h4 id="4-Breakpoints"><a href="#4-Breakpoints" class="headerlink" title="(4) Breakpoints"></a>(4) Breakpoints</h4><ul><li>断点选项框支持对包含给定属性的请求或响应设置断点。</li><li>Break request on POST：为所有的POST请求设置断点。</li><li>Break request on GET with query string：为所有方法为GET且URL包含查询串的请求设置断点。</li><li>Break on XMLHttpRequest：对所有能够确定是通过XMLHttpRequest对象发送的请求设置断点。<ul><li>通过查找请求头是否为<code>X-Requested-With</code>来实现的，该请求头由jQuery框架添加。</li><li>还会检查请求头是否为<code>X-Download-Initiator</code>，IE10及更高版本可配置该请求头。</li></ul></li><li>Break response on Content-Type：为所有响应头Content-Type中包含指定文本的响应设置断点。</li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@004.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Breakpoints"></p><h4 id="5-Response-Status-Code"><a href="#5-Response-Status-Code" class="headerlink" title="(5) Response Status Code"></a>(5) Response Status Code</h4><ul><li>Hide success(2xx)：隐藏状态码在200到299之间的响应。</li><li>Hide non-2xx：指隐藏状态码不在200到299之间的响应。</li><li>Hide Authentication demands(401,407)：隐藏状态码为401，和407的响应。</li><li>Hide redirects(300,301,302,303,307)：隐藏对请求进行重定向的响应。</li><li>Hide Not Modified(304)：隐藏请求中状态码为304的响应，表示客户端缓存的实体是有效的。</li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@005.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Response Status Code"></p><h4 id="6-Response-Type-and-Size"><a href="#6-Response-Type-and-Size" class="headerlink" title="(6) Response Type and Size"></a>(6) Response Type and Size</h4><ul><li>下拉框选项<ul><li>Show all Content-Types(显示所有响应，不过滤)、Show only IMAGE&#x2F;*(只显示图片类型的响应)。</li><li>Show only HTML(只显示HTML文档的响应)、Show only TEXT&#x2F;CSS(只显示CSS层叠样式表的响应)。</li><li>Show only SCRIPTS(只显示脚本类型的响应)、Show only XML(只显示XML类型的响应)。</li><li>Show only JSON(只显示JSON类型的响应)、Hide IMAGE&#x2F;*(代表只隐藏图片类型的响应)。</li></ul></li><li>其他勾选框<ul><li>Hide smaller than：隐藏响应体小于指定字节数的响应。</li><li>Hide larger than：隐藏响应体大于指定字节数的响应。</li><li>Time HeatMap：基于服务器返回给定响应所需的时间为每个会话设置背景颜色。</li><li>Block scriptfile：如果返回的响应头指定Content-Type为脚本，返回404响应。</li><li>Block imagefile：如果返回的响应头指定Content-Type为图像，返回404响应。</li><li>Block SWF file：如果返回的响应头指定Content-Type为Flash，返回404响应(即application&#x2F;x-shockwave-flash)。</li><li>Block CSS file：如果返回的响应头指定Content-Type为CSS，返回404响应。</li></ul></li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@006.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Response Type and Size"></p><h4 id="7-Response-Headers"><a href="#7-Response-Headers" class="headerlink" title="(7) Response Headers"></a>(7) Response Headers</h4><ul><li>Flag responses that set cookies：以粗体显示所有响应头包含Set-Cookie的响应。</li><li>Flag responses with headers：支持指定HTTP响应头名称，如果响应中该HTTP头存在，以粗体显示。</li><li>Delete response headers：支持指定HTTP响应头名称，如果存在该响应头名称，会从响应头中删去。</li><li>Set response header：支持创建或更新HTTP响应头，可自定义设置取值。</li></ul><p><img src="/../img/Fiddler/CPicon/CPicon@007.png" srcset="/img/load.gif" lazyload alt="监控面板-Filters-Response Headers"></p><h2 id="4-9-TimeLine"><a href="#4-9-TimeLine" class="headerlink" title="4-9 TimeLine"></a>4-9 TimeLine</h2><ul><li>TimeLine<ul><li>支持使用瀑布模型查看选中的会话，对于性能分析和理解请求之间的关联很有帮助。</li><li>主要内容即数据流视图，上方显示标题，显示传输时间轴模式(Transfer Timeline)。</li><li>右上方有一个Help帮助链接，点击该链接可在浏览器中打开关于该功能的帮助信息。</li><li>鼠标右键选项<ul><li>AutoScale Chart：自动缩放图表，水平自适应调节图形宽度。</li><li>Copy Chart：复制图表，支持将图形以位图格式拷贝到剪贴板。</li><li>Mode：控制图形显示模式。<ul><li>Timeline：时间轴模式，通过时间轴线条显示每个会话，用彩色条表示时间段。</li><li>Client Pipe Map：客户端管道模式。<ul><li>显示每个时间轴的客户端进程和Fiddler之间的连接。</li><li>多个Session之间重用的连接将会以多种彩色条显示。</li></ul></li><li>Server Pipe Map：服务端管道模式。<ul><li>显示每个时间轴的Fiddler和上游服务器之间的连接。</li><li>多个Session之间重用的连接将会以多种彩色条显示。</li></ul></li></ul></li></ul></li><li>客户端和服务端管道模式显示客户端和服务器之间如何复用连接，有助于判断性能瓶颈。</li><li>时间轴选项卡不显示任何CONNECT通道，即在会话列表中Host显示为Tunnel to的会话。</li><li>因为通道的数据流可能是模糊的，也可能是由一个或多个解密的HTTPS Web会话项跟踪。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@040.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-传输时间轴"></p><h4 id="1-传输时间轴"><a href="#1-传输时间轴" class="headerlink" title="(1) 传输时间轴"></a>(1) 传输时间轴</h4><ul><li>每行显示一个会话，最左边是文件名，将鼠标放到任意行上方，底部的状态栏将显示该项的更多信息。</li><li>双击某行会跳转到Inspectors选项卡，显示该会话的详细信息。</li><li>如果双击的同时按SHIFT键，会在新的窗口显示该会话的信息。</li><li>条形栏颜色由响应的MIME类型决定：图像浅绿色，JavaScript深绿色，CSS紫色，其他类型蓝色。</li><li>传输条形栏在客户端开始向Fiddler发送请求时开始绘制，当发送回客户端的响应收到后完成绘制。</li><li>条形栏中黑色竖线表示接收到服务端响应的第一个字节时间，前面的两个小圆圈表示会话是否是复用连接进行传输。<ul><li>绿色的圆圈表示连接是复用的，红色的圆圈表示连接是新创建的。</li><li>上方的圆圈表示客户端到Fiddler之间的连接，而下方的圆圈表示Fiddler到服务器之间的连接。</li></ul></li><li>条形栏用阴影线表示缓存模式，HTTP响应被Fiddler缓存，会话在完成前不会开始下载图片，缓存将改变瀑布模型。</li><li>条形栏用平滑线表示流模式，Fiddler将数据流式地转发给客户端，Stream模式每次下载的数据将直接返回给客户端。</li><li>条形栏后面的图标说明<ul><li>红色X图标：表示服务器发送了请求头<code>Connection: close</code>。</li><li>对于HTTP&#x2F;1.0类型的响应，指发送请求头<code>Connection: Keep-Alive</code>失败，阻止后续请求重用该连接。</li><li>灰色箭头：表示服务器响应是状态码302重定向。</li><li>红色感叹号：表示服务器返回4xx，或5xx错误码。</li></ul></li></ul><h5 id="✧-缓存模式"><a href="#✧-缓存模式" class="headerlink" title="✧ 缓存模式"></a>✧ 缓存模式</h5><p><img src="/../img/Fiddler/GMico/GMico@001.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-传输时间轴-缓存模式"></p><h5 id="✧-流模式"><a href="#✧-流模式" class="headerlink" title="✧ 流模式"></a>✧ 流模式</h5><p><img src="/../img/Fiddler/GMico/GMico@002.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-传输时间轴-流模式"></p><h5 id="✧-图标说明"><a href="#✧-图标说明" class="headerlink" title="✧ 图标说明"></a>✧ 图标说明</h5><p><img src="/../img/Fiddler/GMico/GMico@003.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-传输时间轴-图标说明"></p><h4 id="2-客户端管道"><a href="#2-客户端管道" class="headerlink" title="(2) 客户端管道"></a>(2) 客户端管道</h4><ul><li>Client Pipe Map模式下，显示每个时间轴的客户端进程和Fiddler之间的连接。</li><li>左侧显示连接标识符，包括：进程名称、进程ID、客户端的端口号。<ul><li>例如：连接标识符360se:7668(p58566)，客户端为360se，进程编号7668，端口号58566。</li><li>同一进程同一端口号的会话，将在同一条形栏中显示，同一进程不同端口号则多个栏目显示。</li></ul></li></ul><p><img src="/../img/Fiddler/GMico/GMico@004.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-客户端管道"></p><h4 id="3-服务端管道"><a href="#3-服务端管道" class="headerlink" title="(3) 服务端管道"></a>(3) 服务端管道</h4><ul><li>Server Pipe Map模式下，显示每个时间轴的Fiddler和上游服务器之间的连接。</li><li>左侧显示连接标识符，包括：Fiddler端的端口号、目标主机名。<ul><li>例如：p58571-&gt;localhost:4000，Fiddler使用端口58571连接到localhost的4000端口。</li><li>一条形栏代表一个连接，一个连接支持被多个会话复用，下图选择的会话都属于两两复用。</li></ul></li></ul><p><img src="/../img/Fiddler/GMico/GMico@005.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-服务端管道"></p><h4 id="4-做性能分析"><a href="#4-做性能分析" class="headerlink" title="(4) 做性能分析"></a>(4) 做性能分析</h4><ul><li>时间轴是一种对应用程序使用网络的富信息视图表示。<ul><li>依据条形栏的长短可以找出响应快慢的请求：越短响应越快，越长响应越慢。</li><li>浏览器开启线程数有限，默认请求数为6个，由于连接限制也会带来性能瓶颈。</li><li>若有红色X图标，表示服务器发送了请求头<code>Connection: close</code>，阻止后续请求重用该连接。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@041.png" srcset="/img/load.gif" lazyload alt="监控面板-TimeLine-做性能分析"></p><h1 id="5-状态面板"><a href="#5-状态面板" class="headerlink" title="5 状态面板"></a>5 状态面板</h1><ul><li>状态面板<ul><li>启用&#x2F;禁用抓包Capturing：<img src="/../img/Fiddler/SBicon/SBicon@001.png" srcset="/img/load.gif" lazyload alt="状态面板-启用/禁用抓包Capturing">表示正在抓包，鼠标单击图标，切换成空白则表示禁用抓包。</li><li>点击<img src="/../img/Fiddler/SBicon/SBicon@002.png" srcset="/img/load.gif" lazyload alt="状态面板-正在捕获的进程All Processes">，选择抓取HTTP数据报文的选项。<ul><li>All Processes：抓取所有进程的报文。</li><li>Web Browsers：仅抓取浏览器进程的报文。</li><li>Non-Browser：仅抓取非浏览器进程的报文，国内一些非主流浏览器可能不会被当做浏览器进程。</li><li>Hide All：过滤掉所有进程的HTTP报文，和禁用抓包效果一致，即在会话列表中不显示任何会话。</li></ul></li><li>断点：调试器的功能之一，支持让程序中断在需要的地方，从而方便其分析。<ul><li>全局请求断点<img src="/../img/Fiddler/SBicon/SBicon@003.png" srcset="/img/load.gif" lazyload alt="状态面板-全局请求断点">：将用户请求发送给服务器之前，打一个全局请求断点，可对请求进行修改。</li><li>全局响应断点<img src="/../img/Fiddler/SBicon/SBicon@004.png" srcset="/img/load.gif" lazyload alt="状态面板-全局响应断点">：将服务器的响应发送到客户端之前，打一个全局响应断点，可以修改响应。</li><li>取消断点<ul><li>逐个释放断点：选中被打断点的请求，点击监控面板中的按钮<img src="/../img/Fiddler/SBicon/SBicon@005.png" srcset="/img/load.gif" lazyload alt="监控面板-Run to Completion">。</li><li>释放全部断点：点击工具面板中的恢复断点执行按钮<img src="/../img/Fiddler/SBicon/SBicon@006.png" srcset="/img/load.gif" lazyload alt="工具面板-Go">，即可释放全部断点。</li></ul></li></ul></li><li>会话数<img src="/../img/Fiddler/SBicon/SBicon@007.png" srcset="/img/load.gif" lazyload alt="状态面板-Number of sessions">，显示了当前抓取的总会话数(右侧数值)，以及选中的会话数(左侧数值)。</li><li>状态信息<ul><li><img src="/../img/Fiddler/SBicon/SBicon@008.png" srcset="/img/load.gif" lazyload alt="状态面板-Status Information">，默认显示选中的第一个会话的URL。</li><li>还支持显示操作结果的概要信息，例如：加载文件、保存SAZ文件等。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@042.png" srcset="/img/load.gif" lazyload alt="状态面板"></p><h1 id="6-命令输入栏"><a href="#6-命令输入栏" class="headerlink" title="6 命令输入栏"></a>6 命令输入栏</h1><ul><li>命令输入栏<ul><li>Fiddler处于活动状态时，<code>Alt+Q</code>快捷键可以把光标快速定位到QuickExec命令输入框。</li><li>Fiddler没有处于活动状态时，使用<code>CTRL+ALT+F</code>激活窗口，再使用<code>Alt+Q</code>快捷键定位。</li><li>当光标定位在QuickExec命令输入框时，<code>CTRL+I</code>键会把选中的第一个会话URL插入到命令输入框中。</li><li>还可以选中多个会话，一起拖动到QuickExec命令输入框中释放，此时选中的会话URL都将插入其中。</li><li>支持从系统任意位置处拖动一个或多个文件到QuickExec命令输入框中释放，输入框将显示文件路径。</li><li>在QuickExec命令输入框中输入<code>help</code>回车，将自动打开浏览器，关于QuickExce的在线命令帮助文档。<ul><li><code>start</code>开启抓包，<code>stop</code>停止抓包，<code>quit</code>关闭Fiddler。</li><li><code>cls</code>或<code>clear</code>清理会话列表，<code>hide</code>将Fiddler最小化到任务栏的托盘上。</li><li>文本查找：<code>?searchtext</code>，高亮显示会话列表包含<code>searchtext</code>文本的会话。</li><li>匹配主机：<code>@host</code>，高亮显示会话列表中请求主机名包含<code>host</code>的会话，例如<code>@sougo.com</code>。</li><li>状态或方法过滤：<code>=404</code>或<code>=POST</code>，高亮显示会话列表中等于指定状态码或指定方法的会话。</li><li>响应大小过滤：<code>&gt;size</code>，高亮显示会话列表中响应大小大于<code>size</code>字节的会话，<code>&lt;size</code>反之。</li><li>执行DNS查找：<code>!dns www.baidu.com</code>，对百度首页执行DNS查找并在Log选项卡上显示结果。</li><li>突出显示会话：<code>bold sometext</code>，后续抓到包含<code>sometext</code>字符串的会话加粗显示，<code>bold</code>回车取消。</li><li>断点<ul><li><code>bpv method</code>，将在抓到方法为<code>method</code>的会话上添加请求断点，<code>bpv</code>回车取消操作。</li><li><code>bps status</code>，将在抓到状态为<code>status</code>的会话上添加响应断点，<code>bps</code>回车取消操作。</li><li><code>bpu sometext</code>，将在抓到包含<code>sometext</code>字符串的URI会话上添加请求断点，<code>bpu</code>回车取消操作。</li><li><code>bpafter sometext</code>，将在抓到包含<code>sometext</code>字符串的会话上添加响应断点，<code>bpafter</code>回车取消。</li><li><code>g</code>或<code>go</code>，恢复所有断点会话。</li></ul></li><li>过滤<ul><li><code>select sometext</code>，将选择响应Content-Type头包含指定的<code>sometext</code>字符串的任何会话。</li><li>支持其他过滤方式，提供两个内置变量<code>@Request</code>和<code>@Response</code>对象，支持过滤其他头字段。</li><li>例：<code>select @Request.User-Agent Mozilla</code>选择所有用户User-Agent包含Mozilia的会话。</li></ul></li><li>会话备份：<code>dump</code>，将所有会话转储到系统盘中的zip存档，路径在状态面板的状态信息栏中可见。</li><li>替换URL：<code>urlreplace str1 str2</code>，将抓到会话的URL中<code>str1</code>替换成<code>str2</code>，<code>urlreplace</code>回车取消。</li><li>监听额外端口：<code>!listen *PORT [CERTHOSTNAME]*</code>，例如<code>!listen 8889</code>、<code>!listen 4000 localhost</code>。</li><li>条件隐藏：<code>allbut text</code>或<code>keeponly text</code>，隐藏响应会话的Content-Type中未包含<code>text</code>的所有会话。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@043.png" srcset="/img/load.gif" lazyload alt="命令输入栏"></p><h1 id="7-应用快捷键"><a href="#7-应用快捷键" class="headerlink" title="7 应用快捷键"></a>7 应用快捷键</h1><ul><li>应用快捷键<ul><li>任何情况下都可使用系统级别的热键<code>Ctrl + Alt + F</code>激活Fiddler，还提供了其他热键(略)。</li><li>全局热键支持自定义修改，菜单栏-&gt;Tools-&gt;Options-&gt;General-&gt;Systemwide Hostkey。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@044.png" srcset="/img/load.gif" lazyload alt="应用快捷键"></p><h1 id="8-Fiddler插件"><a href="#8-Fiddler插件" class="headerlink" title="8 Fiddler插件"></a>8 Fiddler插件</h1><ul><li>Fiddler插件<ul><li><a href="https://www.telerik.com/fiddler/add-ons">https://www.telerik.com/fiddler/add-ons</a>：提供了很多常用的Fiddler插件。</li><li>性能相关：neXpert(性能报告生成器，免费)、StresStimulus(负载能力测试扩展支持，试用)。</li><li>安全相关<ul><li>x5s(评估网站漏洞，包括跨站脚本错误，开源)、Ammonite(监测常见的网站漏洞，试用)。</li><li>Watcher(被动安全审计器，开源)、intruder21(支持对Web应用程序执行模糊测试，免费)。</li></ul></li><li>其他插件<ul><li>Javascript Formatter(可格式化JavaScript)、Gallery(显示选中会话中的所有图片)。</li><li>Traffic Differ(对比捕获的两套流量)、PDF View(PDF检查器，生成PDF文件预览)。</li><li>Content Blocker(内容拦截器)、Show Image Bloat(扫描图像文件以查找不必要的嵌入元数据)。</li><li>Willow(统计数据包、修改Host、请求重定向、编码转换、低网速模拟、慢速网络模拟可视化等)。</li></ul></li></ul></li></ul><h2 id="8-1-Willow"><a href="#8-1-Willow" class="headerlink" title="8-1 Willow"></a>8-1 Willow</h2><ul><li>Willow<ul><li>官网：<a href="http://qzonetouch.github.io/commonWidget/willow">http://qzonetouch.github.io/commonWidget/willow</a>。</li><li>插件功能<ul><li>修改Host、断点调试、统计数据包、编码转换、过滤HTTP请求。</li><li>环境切换、请求重定向、低网速模拟、慢速网络模拟可视化等等。</li></ul></li><li>点击当前版本进行下载，解压<code>WillowSetup-1.5.2.zip</code>，安装插件前先关闭Fiddler软件。</li><li>使用Willow创建三个项目，分别为开发&#x2F;测试&#x2F;正式环境，通过项目复选框可快速在三个环境之间进行切换。</li><li>真实项目中可能有几十上百个规则，分环境管理十分方便，避免了手动点击规则进行环境切换的繁杂操作。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@045.png" srcset="/img/load.gif" lazyload alt="Fiddler插件-Willow"></p><h2 id="8-2-Gallery"><a href="#8-2-Gallery" class="headerlink" title="8-2 Gallery"></a>8-2 Gallery</h2><ul><li>Gallery<ul><li>下载：<a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlergallerysetup.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlergallerysetup.exe</a>。</li><li>支持显示所选会话中的所有图像缩略图，还提供了带有可选图像效果的全屏幻灯片显示模式。</li><li>选多个响应是图片的sessions会话，Gallery选项卡将以缩略图形式展示选中的所有会话图片。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@046.png" srcset="/img/load.gif" lazyload alt="Fiddler插件-Gallery"></p><h2 id="8-3-PDF-View"><a href="#8-3-PDF-View" class="headerlink" title="8-3 PDF View"></a>8-3 PDF View</h2><ul><li>PDF View<ul><li>下载：<a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlerpdfviewsetup.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlerpdfviewsetup.exe</a>。</li><li>浏览器访问一个在线的PDF文件地址，打开Fiddler，会话面板中找到该请求，查看监控面板。</li><li>选择Inspectors选项卡，点击响应中的PDFView选项卡就可以预览了(个人感觉插件不太好用)。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@047.png" srcset="/img/load.gif" lazyload alt="Fiddler插件-PDF View"></p><h2 id="8-4-Traffic-Differ"><a href="#8-4-Traffic-Differ" class="headerlink" title="8-4 Traffic Differ"></a>8-4 Traffic Differ</h2><ul><li>Traffic Differ<ul><li>下载：<a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlersazdiffsetup.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlersazdiffsetup.exe</a>。</li><li>现实开发中，网站优化前保存一完整的会话序列，优化后再保存一个，通过对比看优化作用。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@048.png" srcset="/img/load.gif" lazyload alt="Fiddler插件-Traffic Differ"></p><h2 id="8-5-Show-Image-Bloat"><a href="#8-5-Show-Image-Bloat" class="headerlink" title="8-5 Show Image Bloat"></a>8-5 Show Image Bloat</h2><ul><li>Show Image Bloat<ul><li>下载：<a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlershowimagebloat.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlershowimagebloat.exe</a>。</li><li>查找不必要的嵌入元数据，这些数据通常是编辑的过程产物，会增大文件大小并降低网站的速度。</li><li>菜单栏-&gt;Rules-&gt;单击Show Image Bloat，开启扫描图像文件，以查找不必要的嵌入元数据功能。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@049.png" srcset="/img/load.gif" lazyload alt="Fiddler插件-Show Image Bloat"></p><h2 id="8-6-Javascript-Formatter"><a href="#8-6-Javascript-Formatter" class="headerlink" title="8-6 Javascript Formatter"></a>8-6 Javascript Formatter</h2><ul><li>Javascript Formatter<ul><li>下载：<a href="https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlerjsformatsetup.exe">https://telerik-fiddler.s3.amazonaws.com/fiddler/addons/fiddlerjsformatsetup.exe</a>。</li><li>支持格式化JavaScript，会话面板中选择一个JavaScript会话，右键点Make JavaScript Pretty。</li><li>右侧监控面板-&gt;Inspectors选项卡-&gt;在响应部分选SyntaxView-&gt;此时压缩的Js代码已格式化。</li><li>或菜单栏-&gt;Rules-&gt;单击Make JavaScript Pretty，开启当前选中的JavaScript会话格式化功能。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@050.png" srcset="/img/load.gif" lazyload alt="Fiddler插件-Javascript Formatter"></p><h1 id="9-Fiddler抓包"><a href="#9-Fiddler抓包" class="headerlink" title="9 Fiddler抓包"></a>9 Fiddler抓包</h1><ul><li>Fiddler抓包<ul><li>HTTPS，Hyper Text Transfer Protocol over SecureSocket Layer，HTTP+TLS&#x2F;SSL协议构建。</li><li>通过数字证书、加密算法、非对称密钥等技术完成互联网数据传输加密、身份认证的网络协议。</li><li>设计目标：数据保密性、数据完整性、身份校验安全性，因此，Fiddler抓包的关键点就是证书。</li><li>抓包原理<ul><li>Fiddler是浏览器的服务器，也是服务器的客户端。<ul><li>没有Fiddler时，浏览器拥有的公有证书来自服务器，服务器保存私有证书。</li><li>服务器使用私有证书对数据进行加密，浏览器使用公有证书对数据进行解密。</li></ul></li><li>Fiddler作为代理时，客户端拥有的公有证书来自Fiddler，Fiddler同时拥有私有和公有证书。<ul><li>请求：浏览器使用Fiddler公有证书将数据加密，发送给Fiddler。</li><li>Fiddler使用私有证书解密，将内容采用服务器的公有证书再次加密。</li><li>内容加密后再发送给服务器，服务器使用自己的私有证书再进行解密。</li><li>响应：服务器使用私有证书对响应数据加密，然后发送给Fiddler。</li><li>Fiddler将收到的数据使用服务器的公有证书解密，再次使用自己的私有证书加密。</li><li>加密后发送给浏览器，浏览器收到后使用Fiddler的公有证书进行解密，展示内容。</li></ul></li></ul></li></ul></li></ul><h2 id="9-1-PC端抓包"><a href="#9-1-PC端抓包" class="headerlink" title="9-1 PC端抓包"></a>9-1 PC端抓包</h2><ul><li>PC端抓包<ul><li>配置及安装证书：菜单栏-&gt;Tools-&gt;Options-&gt;HTTPS。</li><li>勾选Capture HTTPS CONNECTs、Decrypt HTTPs traffic。<ul><li>Capture HTTPS CONNECTs：是否要抓取HTTPS连接。</li><li>HTTPS连接默认隐藏：菜单栏-&gt;Rules-&gt;Hide CONNECTs是否被勾选了。</li><li>Decrypt HTTPs traffic：对接收到的HTTPS流量尝试使用Fiddler证书解码。</li></ul></li><li>菜单栏-&gt;Tools-&gt;Options-&gt;HTTPS-&gt;Actions-&gt;Open Windows Certificate Manager。</li><li>certmgr-&gt;操作-&gt;查找证书-&gt;包含Fiddler-&gt;立即查找，若有证书说明可以抓HTTPS包。</li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@051.png" srcset="/img/load.gif" lazyload alt="Fiddler抓包-PC端抓包"></p><h2 id="9-2-APP抓包"><a href="#9-2-APP抓包" class="headerlink" title="9-2 APP抓包"></a>9-2 APP抓包</h2><ul><li>APP抓包<ul><li>配置Fiddler：菜单栏-&gt;Tools-&gt;Options-&gt;Connections-&gt;Allow remote computers to connect。</li><li>弹窗Enabling Remote Access-&gt;确定，USB线连接手机端和电脑端，同时开启手机端的开发者选项。</li><li>Fiddler查看工具面板中Online的IP地址，确保电脑和手机的WiFi在同一局域网下，开启手机端代理。</li><li>进入手机端的WiFi设置-&gt;代理改为手动，主机名是Online查看到的IP地址，端口则为8888(自定义)。</li><li>打开手机端的浏览器，输入Online的IP地址+端口8888，回车下载FiddlerRoot certificate，安装证书。</li><li>注：对于现在的手机端APP，大多使用SSL Pinning技术，Fiddler已很难抓取到HTTPS包了。<ul><li>Android：使用Xposed Magisk模块或Frida等工具来绕过SSL Pinning技术。</li><li>iOS：采用插入证书、重签名、Frida Hook的方式来绕过SSL Pinning技术。</li><li>上述方法都具风险性，需谨慎使用并遵守法律法规，可在APP中集成调试工具进行调试。</li></ul></li></ul></li></ul><p><img src="/../img/Fiddler/Fiddler@052.png" srcset="/img/load.gif" lazyload alt="Fiddler抓包-APP抓包"></p>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fiddler</tag>
      
      <tag>HTTP调试代理工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JMeter</title>
    <link href="/2022/01/05/ce-shi-gong-ju/tt01-jmeter/"/>
    <url>/2022/01/05/ce-shi-gong-ju/tt01-jmeter/</url>
    
    <content type="html"><![CDATA[<p>JMeter是Apche公司使用Java平台开发的一款测试工具，用于接口测试、性能测试、压力测试、数据库测试、Java程序测试。</p><span id="more"></span><h1 id="1-工具安装"><a href="#1-工具安装" class="headerlink" title="1 工具安装"></a>1 工具安装</h1><ul><li>工具安装<ul><li>Win10 1709秋季创意者更新64位正式版(零售版)：<a href="ed2k://|file|cn_windows_10_multi-edition_version_1709_updated_sept_2017_x64_dvd_100090804.iso|4740610048|37051C54894776826823DAEBDD03F1DC|/">Win10-1709-Chinese(Simplified)-x64.iso（迅雷下载）</a>。</li><li>环境依赖：<a href="http://xz.w10a.com/small/jdk8_8u331_windows_x64.zip">JDK-1.8-Win-x64.zip</a>，命令窗口下<code>java -version</code>、<code>java</code>、<code>javac</code>验证。<ul><li>PATH：..\jdk1.8.0_331\bin</li><li>JAVA_HOME：..\jdk1.8.0_331</li><li>CLASSPATH：..\jdk1.8.0_331\lib;..\jdk1.8.0_331\lib\tools.jar</li></ul></li><li><a href="https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.1.zip">Apache-JMeter-5.1.zip</a>：下载安装包后，将其解压到本地自定义路径，再进行环境配置。<ul><li>JMETER_HOME：C:\Program Files\Java\apache-jmeter-5.1</li><li>CLASSPATH：..\apache-jmeter-5.1\lib\jorphan.jar;..\apache-jmeter-5.1\lib\ext\ApacheJMeter_core.jar</li><li>启动JMeter，双击<code>..\apache-jmeter-5.1\bin\jmeter.bat</code>文件，如果位于系统盘，最好以管理员身份启动。</li></ul></li><li><a href="https://www.zentao.net/dl/zentao/18.0/ZenTaoPMS.18.0.win64.exe">禅道开源版18.0</a>：下载安装后进入xampp目录中，再双击start.exe启动(账号Admin，密码123456，改为Aa12345)。</li></ul></li></ul><h2 id="1-1-目录介绍"><a href="#1-1-目录介绍" class="headerlink" title="1-1 目录介绍"></a>1-1 目录介绍</h2><ul><li>目录介绍<ul><li>bin目录、licenses目录(证书目录)、docs目录(接口文档目录)、extras目录(扩展插件目录)。<ul><li>examples：CSV样例。</li><li>jmeter.log：运行日志文件。</li><li>jmeter.sh：Linux的启动文件。</li><li>jmeter.bat：Windows的启动文件。</li><li>jmeter.properties：系统配置文件。</li><li>jmeter-serrver：Linux分布式测试要用到的服务器配置。</li><li>jmeter-server.bat：Windows分布式测试要用到的服务器配置。</li></ul></li><li>lib目录(所用到的插件目录)：ext(存放JMeter依赖的核心jar包)、junit(存放junit测试脚本)。</li><li>printable_docs目录：usermanual(用户手册)、component_reference.html(核心元件帮助文档)。</li></ul></li></ul><p><img src="/../../img/JMeter/JMeter@001.jpg" srcset="/img/load.gif" lazyload alt="工具安装-目录介绍"></p><h2 id="1-2-永久汉化"><a href="#1-2-永久汉化" class="headerlink" title="1-2 永久汉化"></a>1-2 永久汉化</h2><ul><li>永久汉化<ul><li>记事本或VSCode等编辑文本工具打开<code>..\apache-jmeter-5.1\bin\jmeter.properties</code>文件。</li><li><code>CTRL+F</code>搜索<code>#language=en</code>，在底下一行添加<code>language=zh_CN</code>，保存后重启JMeter就可以了。</li></ul></li></ul><p><img src="/../../img/JMeter/JMeter@002.jpg" srcset="/img/load.gif" lazyload alt="工具安装-永久汉化"></p><h2 id="1-3-基本使用"><a href="#1-3-基本使用" class="headerlink" title="1-3 基本使用"></a>1-3 基本使用</h2><ul><li>基本使用<ul><li>基本要素：测试计划、线程组、组件(配置元件、前置处理器、定时器、后置处理器、断言、监听器)、控制器。</li><li>元件与组件<ul><li>元件：例如HTTP请求、事务控制器、响应断言等都是一个个元件。</li><li>组件：一组元件的集合，容器中可实现单独的某功能，例如取样器。</li></ul></li><li>组件介绍<ul><li>配置元件：用于提供对静态数据的支持。</li><li>断言：用于检查测试中得到的响应数据等是否符合预期。</li><li>监听器：对测试结果进行处理和可视化展示的系列组件。</li><li>取样器：向服务器发送请求(支持不同协议的请求)，记录响应信息。</li><li>前置处理器：用于实际请求之前，对即将发出的请求进行特殊处理。</li><li>后置处理器：用于对取样器发出请求后得到的服务器响应进行处理。</li><li>逻辑控制器<ul><li>一类用于控制测试计划执行过程中节点的逻辑执行顺序。</li><li>一类用于对测试计划中的脚本进行运行时控制或分组，方便统计执行结果。</li></ul></li><li>定时器：在操作前设置等待时间，例如取样器与取样器之间设置一个等待时间。</li></ul></li></ul></li></ul><p><img src="/../../img/JMeter/JMeter@003.jpg" srcset="/img/load.gif" lazyload alt="工具安装-基本使用"></p><h2 id="1-4-组件作用域"><a href="#1-4-组件作用域" class="headerlink" title="1-4 组件作用域"></a>1-4 组件作用域</h2><ul><li>组件作用域<ul><li>原则：以取样器为核心，取样器没有作用域。<ul><li>逻辑控制器：只对子节点的取样器和逻辑控制器起作用。</li><li>其他组件<ul><li>如果父节点是取样器，只对父节点(取样器)起作用。</li><li>如果父节点非取样器，则该作用域是其父节点下的其他所有后代节点，包括子节点，以及子子节点等。</li></ul></li></ul></li><li>执行顺序<ul><li>同一作用域下相同组件的执行顺序：从上到下依次执行。</li><li>同一作用域下不同组件的执行顺序：配置元件&gt;前置处理器&gt;定时器&gt;取样器&gt;后置处理器&gt;断言&gt;监听器。</li></ul></li><li>运行原理<ul><li>通过线程组来驱动多个线程运行测试脚本，对被测服务器发起负载，每个负载机上都可以运行多个线程组。</li><li>运行场景<ul><li>GUI模式：界面模式，主要用于前期创建编写或调试JMeter测试脚本的。</li><li>命令行模式：对负载机的资源消耗会更小，用于实现高并发和压力测试。</li></ul></li></ul></li></ul></li></ul><h4 id="1-取样器作用域"><a href="#1-取样器作用域" class="headerlink" title="(1) 取样器作用域"></a>(1) 取样器作用域</h4><p><img src="/../../img/JMeter/JMeter@004.jpg" srcset="/img/load.gif" lazyload alt="工具安装-组件作用域-取样器作用域"></p><h4 id="2-线程组作用域"><a href="#2-线程组作用域" class="headerlink" title="(2) 线程组作用域"></a>(2) 线程组作用域</h4><p><img src="/../../img/JMeter/JMeter@005.jpg" srcset="/img/load.gif" lazyload alt="工具安装-组件作用域-线程组作用域"></p><h4 id="3-测试计划作用域"><a href="#3-测试计划作用域" class="headerlink" title="(3) 测试计划作用域"></a>(3) 测试计划作用域</h4><p><img src="/../../img/JMeter/JMeter@006.jpg" srcset="/img/load.gif" lazyload alt="工具安装-组件作用域-测试计划作用域"></p><h4 id="4-逻辑控制器作用域"><a href="#4-逻辑控制器作用域" class="headerlink" title="(4) 逻辑控制器作用域"></a>(4) 逻辑控制器作用域</h4><p><img src="/../../img/JMeter/JMeter@007.jpg" srcset="/img/load.gif" lazyload alt="工具安装-组件作用域-逻辑控制器作用域"></p><h4 id="5-组件叠加对其影响"><a href="#5-组件叠加对其影响" class="headerlink" title="(5) 组件叠加对其影响"></a>(5) 组件叠加对其影响</h4><p><img src="/../../img/JMeter/JMeter@008.jpg" srcset="/img/load.gif" lazyload alt="工具安装-组件作用域-组件叠加对其影响"></p><h4 id="6-配置元件叠加影响"><a href="#6-配置元件叠加影响" class="headerlink" title="(6) 配置元件叠加影响"></a>(6) 配置元件叠加影响</h4><p><img src="/../../img/JMeter/JMeter@009.jpg" srcset="/img/load.gif" lazyload alt="工具安装-组件作用域-配置元件叠加影响"></p><h1 id="2-HTTP请求"><a href="#2-HTTP请求" class="headerlink" title="2 HTTP请求"></a>2 HTTP请求</h1><ul><li>HTTP请求<ul><li>配置说明<ul><li>端口号：没有可以不填，http协议默认端口号为80，httpd默认端口号为443。</li><li>请求方法<ul><li>GET(请求参数在URL里)：直接在“路径”后带参<code>/?key=value&amp;key=value</code>，也可在“参数”列表中添加参数。</li><li>POST(请求参数在请求体里)：在“消息体数据”中添加请求体，若为form表单格式，可在“参数”列表中添加。</li></ul></li></ul></li><li>示例：编写脚本访问百度。<ul><li>URL&#x3D;<a href="http://www.baidu.com/S">http://www.baidu.com/S</a>，参数<code>wd=test</code>(form表单)。</li><li>JMeter脚本需使用到的元件包含：HTTP请求、察看结果树。</li><li>案例1：GET请求，路径传递参数。</li><li>案例2：GET请求，参数列表传递参数。</li><li>案例3：POST请求，参数列表传递参数。</li><li>案例4：POST请求，请求体数据传递参数。</li></ul></li></ul></li></ul><h2 id="2-1-路径传参"><a href="#2-1-路径传参" class="headerlink" title="2-1 路径传参"></a>2-1 路径传参</h2><p><img src="/../../img/JMeter/JMeter@010.jpg" srcset="/img/load.gif" lazyload alt="HTTP请求-路径传参"></p><h2 id="2-2-参数列表传参-GET"><a href="#2-2-参数列表传参-GET" class="headerlink" title="2-2 参数列表传参(GET)"></a>2-2 参数列表传参(GET)</h2><p><img src="/../../img/JMeter/JMeter@011.jpg" srcset="/img/load.gif" lazyload alt="HTTP请求-参数列表传参(GET)"></p><h2 id="2-3-参数列表传参-POST"><a href="#2-3-参数列表传参-POST" class="headerlink" title="2-3 参数列表传参(POST)"></a>2-3 参数列表传参(POST)</h2><p><img src="/../../img/JMeter/JMeter@012.jpg" srcset="/img/load.gif" lazyload alt="HTTP请求-参数列表传参(POST)"></p><h2 id="2-4-请求体数据传参"><a href="#2-4-请求体数据传参" class="headerlink" title="2-4 请求体数据传参"></a>2-4 请求体数据传参</h2><p><img src="/../../img/JMeter/JMeter@013.jpg" srcset="/img/load.gif" lazyload alt="HTTP请求-请求体数据传参"></p><h1 id="3-参数化设置"><a href="#3-参数化设置" class="headerlink" title="3 参数化设置"></a>3 参数化设置</h1><ul><li>参数化设置<ul><li>根据需求动态获取数据并进行赋值的过程，参数化变量用<code>$&#123;name&#125;</code>表示。</li><li>常用的方式<ul><li>函数助手：适用于值在一定区间无规律且随机的情况。</li><li>用户参数：适用于取值范围小的参数(少量测试数据)。</li><li>用户定义的变量：并非做参数化使用，而是用来定义全局变量。</li><li>CSV数据文件设置：支持读取外部数据，适用于大量数据测试。</li></ul></li></ul></li></ul><h2 id="3-1-函数助手"><a href="#3-1-函数助手" class="headerlink" title="3-1 函数助手"></a>3-1 函数助手</h2><ul><li>函数助手<ul><li>位于任务栏的工具中，适用于值在一定区间无规律且随机的情况，例如：价格、数量等。</li><li>示例：实现HTTP请求的名称带有随机值，需使用到的元件包含HTTP请求、察看结果树。</li></ul></li></ul><h4 id="1-取值设置"><a href="#1-取值设置" class="headerlink" title="(1) 取值设置"></a>(1) 取值设置</h4><p><img src="/../../img/JMeter/JMeter@014.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-函数助手-取值设置"></p><h4 id="2-结果分析"><a href="#2-结果分析" class="headerlink" title="(2) 结果分析"></a>(2) 结果分析</h4><p><img src="/../../img/JMeter/JMeter@015.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-函数助手-结果分析"></p><h2 id="3-2-用户参数"><a href="#3-2-用户参数" class="headerlink" title="3-2 用户参数"></a>3-2 用户参数</h2><ul><li>用户参数<ul><li>适用于取值范围小的参数(少量测试数据)，元件位于“前置处理器”中。</li><li>在用户参数中添加变量后，需要在父节点“HTTP请求”的参数列表中引用相应的变量。</li><li>并且每个线程会一直使用一组数据，需在“线程组”中设置与用户数一致的“线程数”。</li><li>示例：实现禅道批量用户登录，需使用到的元件包含HTTP请求、用户参数、察看结果树。</li></ul></li></ul><h4 id="1-添加变量"><a href="#1-添加变量" class="headerlink" title="(1) 添加变量"></a>(1) 添加变量</h4><p><img src="/../../img/JMeter/JMeter@016.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-用户参数-添加变量"></p><h4 id="2-参数设置"><a href="#2-参数设置" class="headerlink" title="(2) 参数设置"></a>(2) 参数设置</h4><p><img src="/../../img/JMeter/JMeter@017.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-用户参数-参数设置"></p><h2 id="3-3-用户定义的变量"><a href="#3-3-用户定义的变量" class="headerlink" title="3-3 用户定义的变量"></a>3-3 用户定义的变量</h2><ul><li>用户定义的变量<ul><li>并非用来做HTTP请求参数化，而是用来定义全局变量，例如参数化文件路径、HOST、URL等。</li><li>创建在“线程组”下，则在线程组内生效，如果创建在“测试计划”下，则对所有线程组生效。</li><li>示例：实现HTTP请求的IP参数化，需使用到的元件包含用户定义的变量、HTTP请求、察看结果树。</li></ul></li></ul><h4 id="1-添加变量-1"><a href="#1-添加变量-1" class="headerlink" title="(1) 添加变量"></a>(1) 添加变量</h4><p><img src="/../../img/JMeter/JMeter@018.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-用户定义的变量-添加变量"></p><h4 id="2-参数设置-1"><a href="#2-参数设置-1" class="headerlink" title="(2) 参数设置"></a>(2) 参数设置</h4><p><img src="/../../img/JMeter/JMeter@019.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-用户定义的变量-参数设置"></p><h4 id="3-结果分析"><a href="#3-结果分析" class="headerlink" title="(3) 结果分析"></a>(3) 结果分析</h4><p><img src="/../../img/JMeter/JMeter@020.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-用户定义的变量-结果分析"></p><h2 id="3-4-CSV数据文件设置"><a href="#3-4-CSV数据文件设置" class="headerlink" title="3-4 CSV数据文件设置"></a>3-4 CSV数据文件设置</h2><ul><li>CSV数据文件设置<ul><li>支持读取外部数据，适用于大量数据测试，元件位于“配置元件”中。</li><li>线程共享模式：指多个线程对文件数据取值顺序模式，JMeter提供了三种模式。<ul><li>例如：脚本有2个线程组，各有2个线程，文件内有5行数据，脚本运行时，将如下循环往复取值。</li><li>所有线程：如果脚本有多个线程组，在这种模式下，各线程组的所有线程也要依次唯一顺序取值。<br><img src="/../../img/JMeter/JMeter@021.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-线程共享模式-所有线程"></li><li>当前线程组：各个线程组之间隔离，线程组内的线程顺序唯一取值。<br><img src="/../../img/JMeter/JMeter@022.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-线程共享模式-当前线程组"></li><li>当前线程：每个线程独立，顺序唯一取值。<br><img src="/../../img/JMeter/JMeter@023.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-线程共享模式-当前线程"></li></ul></li><li>示例：实现禅道批量用户登录，需使用到的元件包含HTTP请求、CSV数据文件设置、察看结果树。</li></ul></li></ul><h4 id="1-userinfo-txt"><a href="#1-userinfo-txt" class="headerlink" title="(1) userinfo.txt"></a>(1) userinfo.txt</h4><p><img src="/../../img/JMeter/JMeter@024.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-userinfo.txt"></p><h4 id="2-设置CSV数据文件"><a href="#2-设置CSV数据文件" class="headerlink" title="(2) 设置CSV数据文件"></a>(2) 设置CSV数据文件</h4><p><img src="/../../img/JMeter/JMeter@025.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-设置CSV数据文件"></p><h4 id="3-HTTP请求参数配置"><a href="#3-HTTP请求参数配置" class="headerlink" title="(3) HTTP请求参数配置"></a>(3) HTTP请求参数配置</h4><p><img src="/../../img/JMeter/JMeter@026.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-HTTP请求参数配置"></p><h4 id="4-察看结果树进行分析"><a href="#4-察看结果树进行分析" class="headerlink" title="(4) 察看结果树进行分析"></a>(4) 察看结果树进行分析</h4><p><img src="/../../img/JMeter/JMeter@027.jpg" srcset="/img/load.gif" lazyload alt="参数化设置-CSV数据文件设置-察看结果树分析"></p><h1 id="4-常用的断言"><a href="#4-常用的断言" class="headerlink" title="4 常用的断言"></a>4 常用的断言</h1><ul><li>常用的断言<ul><li>响应断言：对HTTP请求的任意格式响应结果进行断言。</li><li>JSON断言：HTTP响应结果是JSON格式时，使用JSON断言。</li><li>断言持续时间：检查HTTP请求的响应数据是否超出要求范围。</li></ul></li></ul><h2 id="4-1-响应断言"><a href="#4-1-响应断言" class="headerlink" title="4-1 响应断言"></a>4-1 响应断言</h2><ul><li>响应断言<ul><li>对响应结果中的文本内容进行断言，例如结果是否包含指定的值，或是否等于指定的值。</li><li>适用于各种返回类型的响应结果，例如text、html、application&#x2F;json、application&#x2F;xml等。</li><li>示例：发送请求到“<a href="https://www.baidu.com/">https://www.baidu.com</a>”。<ul><li>检查响应数据是否包含“百度一下，你就知道”。</li><li>使用的元件：HTTP请求、响应断言、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-百度响应"><a href="#1-百度响应" class="headerlink" title="(1) 百度响应"></a>(1) 百度响应</h4><p><img src="/../../img/JMeter/JMeter@028.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-响应断言-百度响应"></p><h4 id="2-断言操作"><a href="#2-断言操作" class="headerlink" title="(2) 断言操作"></a>(2) 断言操作</h4><p><img src="/../../img/JMeter/JMeter@029.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-响应断言-断言操作"></p><h4 id="3-结果分析-1"><a href="#3-结果分析-1" class="headerlink" title="(3) 结果分析"></a>(3) 结果分析</h4><p><img src="/../../img/JMeter/JMeter@030.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-响应断言-结果分析"></p><h4 id="4-解决乱码"><a href="#4-解决乱码" class="headerlink" title="(4) 解决乱码"></a>(4) 解决乱码</h4><ul><li>解决乱码<ul><li>问题分析：响应页面没有做编码处理，JMeter默认按照ISO-8859-1编码格式进行解析。</li><li>解决乱码方法<ul><li>更改JMeter文件配置<ul><li>找到<code>..\apache-jmeter-5.1\bin\jmeter.properties</code>文件，<code>CTRL+F</code>搜索<code>#sampleresult.default</code>。</li><li>在<code>#sampleresult.default</code>底下添加<code>sampleresult.default.encoding=UTF-8</code>，保存后重启JMeter。</li></ul></li><li>添加HTTP信息头管理器：F12开发者工具&gt;NetWork&gt;Requests Table&gt;Name&gt;Headers&gt;Request Headers。</li><li>添加BeanShell后置处理程序：“script”中添加脚本<code>prev.setDataEncoding(&quot;utf-8&quot;)</code>，保存后再次执行。</li></ul></li></ul></li></ul><h5 id="✧-jmeter-properties"><a href="#✧-jmeter-properties" class="headerlink" title="✧ jmeter.properties"></a>✧ jmeter.properties</h5><p><img src="/../../img/JMeter/JMeter@031.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-响应断言-解决乱码-jmeter.properties"></p><h5 id="✧-HTTP信息头管理器"><a href="#✧-HTTP信息头管理器" class="headerlink" title="✧ HTTP信息头管理器"></a>✧ HTTP信息头管理器</h5><p><img src="/../../img/JMeter/JMeter@032.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-响应断言-解决乱码-HTTP信息头管理器"></p><h5 id="✧-BeanShell后置处理程序"><a href="#✧-BeanShell后置处理程序" class="headerlink" title="✧ BeanShell后置处理程序"></a>✧ BeanShell后置处理程序</h5><p><img src="/../../img/JMeter/JMeter@033.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-响应断言-解决乱码-BeanShell后置处理程序"></p><h2 id="4-2-JSON断言"><a href="#4-2-JSON断言" class="headerlink" title="4-2 JSON断言"></a>4-2 JSON断言</h2><ul><li>JSON断言<ul><li>用于断言某个字段值是否等于指定的值，只能针对响应结果为applicaton&#x2F;json格式进行断言。</li><li>JSON常用数据结构格式<ul><li>Object：<code>&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3&#125;</code>。</li><li>Array：<code>&#123;&#39;A&#39;: [&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;, &#123;&#39;a&#39;: 3, &#39;b&#39;: 4&#125;], &#39;B&#39;: [&#123;&#39;a&#39;: 5, &#39;b&#39;: 6&#125;, &#123;&#39;a&#39;: 7, &#39;b&#39;: 8&#125;]&#125;</code>。</li></ul></li><li>JSONPath<ul><li>可方便地从JSON数据结构中发现和提取数据，无论对象(Object)还是数组(Array)，“根成员对象”总被称为<code>$</code>。</li><li>表达式有dot–notation(<code>.</code>号)和bracket–notation(<code>[]</code>号)两种不同表示风格，如<code>$.A[0].a</code>、<code>$[&#39;A&#39;][0][&#39;a&#39;]</code>。</li></ul></li><li>示例：天气查询(<a href="https://www.free-api.com/doc/319">https://www.free-api.com/doc/319</a>)。<ul><li>检查响应数据中的city是否为当地城市，例如当前所在的城市是厦门。</li><li>JMeter脚本需使用到的元件包含HTTP请求、JSON断言、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-HTTP请求"><a href="#1-HTTP请求" class="headerlink" title="(1) HTTP请求"></a>(1) HTTP请求</h4><p><img src="/../../img/JMeter/JMeter@034.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-JSON断言-HTTP请求"></p><h4 id="2-断言配置"><a href="#2-断言配置" class="headerlink" title="(2) 断言配置"></a>(2) 断言配置</h4><p><img src="/../../img/JMeter/JMeter@035.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-JSON断言-断言配置"></p><h4 id="3-察看结果树"><a href="#3-察看结果树" class="headerlink" title="(3) 察看结果树"></a>(3) 察看结果树</h4><p><img src="/../../img/JMeter/JMeter@036.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-JSON断言-察看结果树"></p><h2 id="4-3-断言持续时间"><a href="#4-3-断言持续时间" class="headerlink" title="4-3 断言持续时间"></a>4-3 断言持续时间</h2><ul><li>断言持续时间<ul><li>用于检查HTTP请求的响应时间是否超过预期值，该响应时间是性能测试中较常关注的一个性能指标。</li><li>示例：发送请求到“<a href="https://www.baidu.com/">https://www.baidu.com</a>”。<ul><li>检查响应时间是否小于100ms，或小于200ms(响应时间在100-200ms)。</li><li>JMeter脚本需使用到的元件包含HTTP请求、断言持续时间、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-HTTP请求-1"><a href="#1-HTTP请求-1" class="headerlink" title="(1) HTTP请求"></a>(1) HTTP请求</h4><p><img src="/../../img/JMeter/JMeter@037.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-断言持续时间-HTTP请求"></p><h4 id="2-持续时间设置"><a href="#2-持续时间设置" class="headerlink" title="(2) 持续时间设置"></a>(2) 持续时间设置</h4><p><img src="/../../img/JMeter/JMeter@038.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-断言持续时间-持续时间设置"></p><h4 id="3-察看结果分析"><a href="#3-察看结果分析" class="headerlink" title="(3) 察看结果分析"></a>(3) 察看结果分析</h4><p><img src="/../../img/JMeter/JMeter@039.jpg" srcset="/img/load.gif" lazyload alt="常用的断言-断言持续时间-察看结果分析"></p><h1 id="5-JMeter关联"><a href="#5-JMeter关联" class="headerlink" title="5 JMeter关联"></a>5 JMeter关联</h1><ul><li>JMeter关联<ul><li>JSON提取法：针对JSON格式的响应结果数据进行提取。</li><li>XPath提取法：根据HTML格式的响应结果数据进行提取。</li><li>正则表达式提取法：根据正则表达式对响应结果数据进行提取。</li><li>提取器功能：提取响应结果内容，实现从上一个返回体中获取下一个请求体中需要的数据。</li></ul></li></ul><h2 id="5-1-JSON提取器"><a href="#5-1-JSON提取器" class="headerlink" title="5-1 JSON提取器"></a>5-1 JSON提取器</h2><ul><li>JSON提取器<ul><li>示例：提取天气查询接口的province信息，作为参数在访问百度首页时传递。<ul><li>百度首页：<a href="https://www.baidu.com/s?wd">https://www.baidu.com/s?wd</a>。</li><li>天气查询：<a href="https://www.free-api.com/doc/319">https://www.free-api.com/doc/319</a>。</li><li>元件包含HTTP请求、JSON提取器、HTTP信息头管理器、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-天气查询"><a href="#1-天气查询" class="headerlink" title="(1) 天气查询"></a>(1) 天气查询</h4><p><img src="/../../img/JMeter/JMeter@040.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-JSON提取器-天气查询"></p><h4 id="2-提取器设置"><a href="#2-提取器设置" class="headerlink" title="(2) 提取器设置"></a>(2) 提取器设置</h4><p><img src="/../../img/JMeter/JMeter@041.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-JSON提取器-提取器设置-设置"></p><ul><li>将JSON提取器中已定义好的province变量名，以参数形式传递到“百度搜索”这一“HTTP请求”元件中。</li></ul><p><img src="/../../img/JMeter/JMeter@042.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-JSON提取器-提取器设置-关联百度搜索"></p><ul><li>百度通常带有网站安全验证，此时添加一个“HTTP信息头管理器”，更能模拟人为操作，安全校验不易识别。</li></ul><p><img src="/../../img/JMeter/JMeter@043.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-JSON提取器-提取器设置-HTTP信息头管理器"></p><h4 id="3-察看结果树-1"><a href="#3-察看结果树-1" class="headerlink" title="(3) 察看结果树"></a>(3) 察看结果树</h4><p><img src="/../../img/JMeter/JMeter@044.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-JSON提取器-察看结果树"></p><h2 id="5-2-XPath提取器"><a href="#5-2-XPath提取器" class="headerlink" title="5-2 XPath提取器"></a>5-2 XPath提取器</h2><ul><li>XPath提取器<ul><li>示例：提取W3Schools首页的title，作为参数在访问百度首页时传递。<ul><li>百度首页：<a href="https://www.baidu.com/s?wd">https://www.baidu.com/s?wd</a>。</li><li>W3Schools：<a href="https://www.w3schools.com/">https://www.w3schools.com/</a>。</li><li>元件包含HTTP请求、XPath提取器、HTTP信息头管理器、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-W3Schools"><a href="#1-W3Schools" class="headerlink" title="(1) W3Schools"></a>(1) W3Schools</h4><p><img src="/../../img/JMeter/JMeter@045.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-XPath提取器-W3Schools"></p><h4 id="2-提取器设置-1"><a href="#2-提取器设置-1" class="headerlink" title="(2) 提取器设置"></a>(2) 提取器设置</h4><p><img src="/../../img/JMeter/JMeter@046.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-XPath提取器-提取器设置"></p><h4 id="3-察看结果树-2"><a href="#3-察看结果树-2" class="headerlink" title="(3) 察看结果树"></a>(3) 察看结果树</h4><p><img src="/../../img/JMeter/JMeter@047.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-XPath提取器-察看结果树"></p><h2 id="5-3-正则表达式提取器"><a href="#5-3-正则表达式提取器" class="headerlink" title="5-3 正则表达式提取器"></a>5-3 正则表达式提取器</h2><ul><li>正则表达式提取器<ul><li>示例：提取W3Schools首页的title，作为参数在访问百度首页时传递。<ul><li>百度首页：<a href="https://www.baidu.com/s?wd">https://www.baidu.com/s?wd</a>。</li><li>W3Schools：<a href="https://www.w3schools.com/">https://www.w3schools.com/</a>。</li><li>元件包含HTTP请求、正则表达式提取器、HTTP信息头管理器、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-提取器设置"><a href="#1-提取器设置" class="headerlink" title="(1) 提取器设置"></a>(1) 提取器设置</h4><p><img src="/../../img/JMeter/JMeter@048.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-正则表达式提取器-提取器设置"></p><h4 id="2-察看结果树"><a href="#2-察看结果树" class="headerlink" title="(2) 察看结果树"></a>(2) 察看结果树</h4><p><img src="/../../img/JMeter/JMeter@049.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-正则表达式提取器-察看结果树"></p><h2 id="5-4-不同线程组的关联"><a href="#5-4-不同线程组的关联" class="headerlink" title="5-4 不同线程组的关联"></a>5-4 不同线程组的关联</h2><ul><li>不同线程组的关联<ul><li>当有关联关系的两个请求在不同线程组时，定义全局变量来进行关联。</li><li>JMeter属性的配置函数与执行：都位于函数助手中。<ul><li><code>__setProperty</code>：通过BeanShell取样器将值保存成JMeter属性。</li><li><code>__property</code>：在其他线程组中使用property函数读取JMeter属性。</li></ul></li><li>示例：提取，作为参数在访问百度首页时传递。<ul><li>线程组1：发送请求，获取天气查询接口的province信息，<a href="https://www.free-api.com/doc/319">https://www.free-api.com/doc/319</a>。</li><li>线程组2：请求百度，<a href="https://www.baidu.com/s?wd">https://www.baidu.com/s?wd</a>，将上述获取的province信息作为参数传递。</li><li>使用元件包含HTTP请求、JSON提取器、BeanShell取样器、HTTP信息头管理器、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-保存属性值"><a href="#1-保存属性值" class="headerlink" title="(1) 保存属性值"></a>(1) 保存属性值</h4><p><img src="/../../img/JMeter/JMeter@050.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-不同线程组的关联-保存属性值"></p><h4 id="2-读取传递值"><a href="#2-读取传递值" class="headerlink" title="(2) 读取传递值"></a>(2) 读取传递值</h4><p><img src="/../../img/JMeter/JMeter@051.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-不同线程组的关联-读取传递值"></p><h4 id="3-独立运行线程组"><a href="#3-独立运行线程组" class="headerlink" title="(3) 独立运行线程组"></a>(3) 独立运行线程组</h4><p><img src="/../../img/JMeter/JMeter@052.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-不同线程组的关联-独立运行线程组"></p><h4 id="4-察看结果树分析"><a href="#4-察看结果树分析" class="headerlink" title="(4) 察看结果树分析"></a>(4) 察看结果树分析</h4><p><img src="/../../img/JMeter/JMeter@053.jpg" srcset="/img/load.gif" lazyload alt="JMeter关联-不同线程组的关联-察看结果树分析"></p><h1 id="6-数据库的连接"><a href="#6-数据库的连接" class="headerlink" title="6 数据库的连接"></a>6 数据库的连接</h1><ul><li>数据库的连接<ul><li>以本地禅道MySQL数据库为例，建立数据库连接，需配置mysql-connector-j-xxx.jar驱动包。<ul><li><a href="https://dev.mysql.com/downloads/connector/j/">MySQL官网</a>：Select Operating System选择Platform Independent，点击zip包右侧的Download进行下载。</li><li>解压后将mysql-connector-j-8.0.32.jar文件复制到<code>..\apache-jmeter-5.1\lib</code>目录下，重启JMeter。</li></ul></li><li>JMeter连接数据库的脚本需要使用到的元件包含：JDBC连接配置、HTTP请求、察看结果树。</li></ul></li></ul><h2 id="6-1-引入包"><a href="#6-1-引入包" class="headerlink" title="6-1 引入包"></a>6-1 引入包</h2><p><img src="/../../img/JMeter/JMeter@054.jpg" srcset="/img/load.gif" lazyload alt="数据库的连接-引入包"></p><h2 id="6-2-JDBC连接配置"><a href="#6-2-JDBC连接配置" class="headerlink" title="6-2 JDBC连接配置"></a>6-2 JDBC连接配置</h2><ul><li>JDBC连接配置<ul><li>DB2：<code>jdbc:db2://localhost:端口/数据库名</code>。<ul><li>装有DB2客户端：<code>com.ibm.db2.jdbc.app.DB2.Driver</code>。</li><li>未装DB2客户端：<code>com.ibm.db2.jdbc.net.DB2.Driver</code>。</li></ul></li><li>Microsoft SQL Server<ul><li><code>jdbc:microsoft.sqlserver://localhost:端口;DatabaseName=数据库名</code></li><li>JDBC Driver class：<code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code>。</li></ul></li><li>MySQL：<code>jdbc:mysql://localhost:端口/数据库名</code>，<code>com.mysql.jdbc.Driver</code>。</li><li>PostgreSQL：<code>jdbc:postgresql://localhost/数据库名</code>、<code>org.postgresql.Driver</code>。</li><li>Sysbase：<code>jdbc:Sysbase://localhost:端口/数据库名</code>、<code>com.sysbase.jdbc.SybDriver</code>。</li><li>JDBC-ODBC：<code>jdbc:odbc:数据源名</code>(Database URL)、<code>sun.jdbc.odbc.jdbcOdbcDriver</code>。</li><li>Oracle(thin模式)：<code>jdbc:oracle:thin:@localhost:端口:SID</code>，<code>oracle.jdbc.OracleDriver</code>。</li></ul></li></ul><p><img src="/../../img/JMeter/JMeter@055.jpg" srcset="/img/load.gif" lazyload alt="数据库的连接-JDBC连接配置"></p><h2 id="6-3-JDBC请求设置"><a href="#6-3-JDBC请求设置" class="headerlink" title="6-3 JDBC请求设置"></a>6-3 JDBC请求设置</h2><p><img src="/../../img/JMeter/JMeter@056.jpg" srcset="/img/load.gif" lazyload alt="数据库的连接-JDBC请求设置"></p><h2 id="6-4-察看结果树分析"><a href="#6-4-察看结果树分析" class="headerlink" title="6-4 察看结果树分析"></a>6-4 察看结果树分析</h2><p><img src="/../../img/JMeter/JMeter@057.jpg" srcset="/img/load.gif" lazyload alt="数据库的连接-察看结果树分析"></p><h1 id="7-常规逻辑控制"><a href="#7-常规逻辑控制" class="headerlink" title="7 常规逻辑控制"></a>7 常规逻辑控制</h1><ul><li>常规逻辑控制<ul><li>如果控制器：用来控制测试元素是否运行。</li><li>循环控制器：可以同计数器，或CSV数据文件设置搭配使用。</li><li>ForEach控制器：与用户自定义变量，或正则表达式提取器搭配使用，读取返回结果中一系列相关的变量。</li></ul></li></ul><h2 id="7-1-如果控制器"><a href="#7-1-如果控制器" class="headerlink" title="7-1 如果控制器"></a>7-1 如果控制器</h2><ul><li>如果控制器<ul><li>JMeter语法格式：<code>&quot;$&#123;name&#125;&quot;==&quot;name&quot;</code>，不勾选<code>Interpret Condition as Variable Expression?</code>。</li><li>函数格式：<code>$&#123;_jexl3(&quot;$&#123;name&#125;&quot;==&quot;name&quot;)&#125;</code>，勾选<code>Interpret Condition as Variable Expression?</code>。</li><li>示例：使用“用户定义的变量”元件定义一个变量name，依据name值实现对应网站的访问。<ul><li>百度首页：<a href="https://www.baidu.com/">https://www.baidu.com/</a>。</li><li>W3SChools：<a href="https://www.w3schools.com/">https://www.w3schools.com/</a>。</li><li>脚本需要使用到的元件包含：用户定义的变量、如果控制器、HTTP请求、察看结果树。</li></ul></li></ul></li></ul><h4 id="1-定义变量"><a href="#1-定义变量" class="headerlink" title="(1) 定义变量"></a>(1) 定义变量</h4><p><img src="/../../img/JMeter/JMeter@058.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-如果控制器-定义变量"></p><h4 id="2-baidu控制器"><a href="#2-baidu控制器" class="headerlink" title="(2) baidu控制器"></a>(2) baidu控制器</h4><p><img src="/../../img/JMeter/JMeter@059.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-如果控制器-baidu控制器"></p><h4 id="3-w3schools控制器"><a href="#3-w3schools控制器" class="headerlink" title="(3) w3schools控制器"></a>(3) w3schools控制器</h4><p><img src="/../../img/JMeter/JMeter@060.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-如果控制器-w3schools控制器"></p><h2 id="7-2-循环控制器"><a href="#7-2-循环控制器" class="headerlink" title="7-2 循环控制器"></a>7-2 循环控制器</h2><ul><li>循环控制器<ul><li>线程组与循环控制器，循环次数的区别。<ul><li>线程组：对线程组下所有的“HTTP请求”都起作用。</li><li>循环控制器：只对该控制器下的“HTTP请求”起作用。</li></ul></li><li>线程组循环次数为M次，循环控制器为N次。<ul><li>循环控制器下的“HTTP请求”循环次数：M*N次。</li><li>非循环控制器下的“HTTP请求”循环次数：M次。</li></ul></li><li>示例：循环访问百度10次，元件包含循环控制器、HTTP请求、察看结果树。</li></ul></li></ul><h4 id="1-控制器设置"><a href="#1-控制器设置" class="headerlink" title="(1) 控制器设置"></a>(1) 控制器设置</h4><p><img src="/../../img/JMeter/JMeter@061.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-循环控制器-控制器设置"></p><h4 id="2-察看结果树-1"><a href="#2-察看结果树-1" class="headerlink" title="(2) 察看结果树"></a>(2) 察看结果树</h4><p><img src="/../../img/JMeter/JMeter@062.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-循环控制器-察看结果树"></p><h2 id="7-3-ForEach控制器"><a href="#7-3-ForEach控制器" class="headerlink" title="7-3 ForEach控制器"></a>7-3 ForEach控制器</h2><ul><li>ForEach控制器<ul><li>示例：一组关键字<code>&#123;&quot;value_1&quot;: &quot;C++&quot;, &quot;value_2&quot;: &quot;Java&quot;, &quot;value_3&quot;: &quot;Python&quot;&#125;</code>。</li><li>要求：将这组关键字通过使用“用户定义的变量”元件存储，依次取值并在百度进行索引。</li><li>元件包含：用户定义的变量、ForEach控制器、HTTP请求、HTTP信息头管理器、察看结果树。</li></ul></li></ul><h4 id="1-定义变量-1"><a href="#1-定义变量-1" class="headerlink" title="(1) 定义变量"></a>(1) 定义变量</h4><p><img src="/../../img/JMeter/JMeter@063.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-ForEach控制器-定义变量"></p><h4 id="2-控制器设置"><a href="#2-控制器设置" class="headerlink" title="(2) 控制器设置"></a>(2) 控制器设置</h4><p><img src="/../../img/JMeter/JMeter@064.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-ForEach控制器-控制器设置"></p><h4 id="3-察看结果树-3"><a href="#3-察看结果树-3" class="headerlink" title="(3) 察看结果树"></a>(3) 察看结果树</h4><p><img src="/../../img/JMeter/JMeter@065.jpg" srcset="/img/load.gif" lazyload alt="常规逻辑控制-ForEach控制器-察看结果树"></p>]]></content>
    
    
    <categories>
      
      <category>测试工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JMeter</tag>
      
      <tag>Apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Tkinter</title>
    <link href="/2021/12/05/python/python15-python-tkinter/"/>
    <url>/2021/12/05/python/python15-python-tkinter/</url>
    
    <content type="html"><![CDATA[<p>Tkinter是Python内置的图形界面开发库，不需要额外安装，支持多平台，简单实用，运行速度快，是非常流行的图形界面库。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tkinter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Django</title>
    <link href="/2021/11/02/python/python14-python-django/"/>
    <url>/2021/11/02/python/python14-python-django/</url>
    
    <content type="html"><![CDATA[<p>Django由Lawrence Journal-World于2003年发明，首次向公众发布是在2005年7月，是一个后端服务器Web框架，免费开源。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Flask</title>
    <link href="/2021/10/10/python/python13-python-flask/"/>
    <url>/2021/10/10/python/python13-python-flask/</url>
    
    <content type="html"><![CDATA[<p>用Python编写的Web应用程序框架，基于Werkzeug WSGI工具包和Jinja2模板引擎，由Armin Ronacher带领Pocco团队开发。</p><span id="more"></span><h1 id="1-微框架"><a href="#1-微框架" class="headerlink" title="1 微框架"></a>1 微框架</h1><ul><li>微框架<ul><li>WSGI：Web服务器的网关接口，Web服务器和Web应用程序之间通用接口的规范。</li><li>Werkzeug：一个WSGI工具包，实现了请求、响应对象和实用函数，能在上面构建Web框架。</li><li>jinja2：Python的一个流行模板引擎，Web模板系统将模板与特定数据源组合以呈现动态网页。</li><li>命令窗口下使用PIP进行安装：<code>pip install Flask</code>，测试是否安装成功，新建hello.py文件。<ul><li><code>app.route(rule, options)</code><ul><li>route()函数是一个装饰器，告诉应用程序哪个URL应该调用相关的函数。</li><li>rule表示与该函数的URL绑定，options是转发给基础rule对象的参数列表。</li></ul></li><li><code>app.run(host, port, debug, options)</code><ul><li>host：主机名，默认为127.0.0.1(localhost)，设为0.0.0.0以使服务器在外部可用。</li><li>port：端口号，默认值为5000。</li><li>debug：默认false，设为true提供调试信息。</li><li>options：要转发到底层的Werkzeug服务器。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask       <span class="hljs-comment"># hello.py文件，导入Flask模块验证测试</span><br><br>app = Flask(__name__)         <span class="hljs-comment"># Flask构造函数使用当前模块__name的名称作为参数</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)               </span><span class="hljs-comment"># Flask类的route()函数是一个装饰器，告诉应用程序哪个URL应调用相关的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():            <span class="hljs-comment"># &#x27;/&#x27;URL与函数绑定，浏览器访问[127.0.0.1:5000]时，显示&#x27;Hello World!&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello World!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    <span class="hljs-comment"># Flask中文网：https://flask.net.cn/</span><br>    app.run()                 <span class="hljs-comment"># Flask类的run()方法是在本地开发服务器上运行应用程序</span><br></code></pre></td></tr></table></figure><h2 id="1-1-验证测试"><a href="#1-1-验证测试" class="headerlink" title="1-1 验证测试"></a>1-1 验证测试</h2><ul><li>验证测试<ul><li>命令窗口进入hello.py文件对应的目录中，<code>python hello.py</code>执行命令。</li><li>在浏览器的任务栏中输入“<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>”，回车进行查看。</li></ul></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Powershell">python hello.py<br><br> * Serving Flask app <span class="hljs-string">&quot;hello&quot;</span> (lazy loading)<br> * Environment: production<br>   WARNING: This is a development server. <span class="hljs-keyword">Do</span> not use it <span class="hljs-keyword">in</span> a production deployment.     <br>   Use a production WSGI server instead.<br> * Debug mode: off<br> * Running on http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5000</span>/ (Press CTRL+C to quit)<br><br><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> - - [<span class="hljs-number">01</span>/<span class="hljs-type">Oct</span>/<span class="hljs-number">2023</span> <span class="hljs-number">17</span>:<span class="hljs-number">07</span>:<span class="hljs-number">14</span>] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> <span class="hljs-number">200</span> -<br></code></pre></td></tr></table></figure><h2 id="1-2-调试模式"><a href="#1-2-调试模式" class="headerlink" title="1-2 调试模式"></a>1-2 调试模式</h2><ul><li>调试模式<ul><li>当应用程序处于开发状态时，如果代码进行了更改，则需要每次都重启更新，操作十分不便。</li><li>为了避免频繁手动重启更新，可以开启调试模式，如果代码更改了，服务器将自行重新加载。</li><li>调试模式还提供了一个有用的调试器，用于跟踪应用程序中的错误，有两种语法格式的书写。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():            <span class="hljs-comment"># 浏览器访问[127.0.0.1:5000]时，显示&#x27;Hello World!&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello World!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">True</span>          <span class="hljs-comment"># 调试模式下，若代码更改，服务器将自行重新加载</span><br>    app.run()                 <span class="hljs-comment"># 还提供了一个有用的调试器来跟踪应用程序中的错误</span><br>    <span class="hljs-comment"># app.run(debug=True)     # 或将run与debug写成一个函数带参形式</span><br></code></pre></td></tr></table></figure><h2 id="1-3-路由技术"><a href="#1-3-路由技术" class="headerlink" title="1-3 路由技术"></a>1-3 路由技术</h2><ul><li>路由技术<ul><li>route()装饰器用于将URL与函数进行绑定，可直接访问想访问的页面，不用再从主页开始导航了。</li><li>若URL‘&#x2F;hello’规则绑定到hello_world()函数，则浏览器访问“<a href="http://localhost:5000/hello">http://localhost:5000/hello</a>”。</li><li>add_url_rule()函数也可以用于将URL与函数进行绑定。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello&#x27;</span></span>)          </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/hello]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello World!&lt;/center&gt;&#x27;</span><br><br><br>app.add_url_rule(             <span class="hljs-comment"># 访问[http://127.0.0.1:5000/]，可替代route()装饰器</span><br>    <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>, hello_world<br>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="1-URL构建"><a href="#1-URL构建" class="headerlink" title="(1) URL构建"></a>(1) URL构建</h4><ul><li>变量规则<ul><li>route()装饰器通过向规则参数添加变量部分，可动态构建URL：<code>route(/&lt;name&gt;/&lt;variable-name&gt;)</code>。</li><li>除默认字符串变量部分外，还可使用转换器构建规则：int、float、path(接受用作目录分隔符的斜杠)。<ul><li>字符串变量：若访问“<a href="http://127.0.0.1:5000/hello/Aha">http://127.0.0.1:5000/hello/Aha</a>”，显示“Hello Aha!”。</li><li>int整数：若访问“<a href="http://127.0.0.1:5000/blog/27">http://127.0.0.1:5000/blog/27</a>”，显示“Blog Number 27.”。</li><li>float浮点数：若访问“<a href="http://127.0.0.1:5000/rev/2.7">http://127.0.0.1:5000/rev/2.7</a>”，显示“Revision Number 2.700000.”。</li><li>path目录分隔符<ul><li>若访问“<a href="http://127.0.0.1:5000/python/">http://127.0.0.1:5000/python/</a>”，显示“Not Found”。</li><li>若访问“<a href="http://127.0.0.1:5000/python">http://127.0.0.1:5000/python</a>”，显示“Hello Python.”。</li><li>访问“<a href="http://127.0.0.1:5000/golang">http://127.0.0.1:5000/golang</a>”和“<a href="http://127.0.0.1:5000/golang/">http://127.0.0.1:5000/golang/</a>”都可以正常显示。</li></ul></li></ul></li></ul></li><li>url_for()函数，接受函数名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于URL的变量部分。<ul><li>若访问“<a href="http://localhost:5000/user/admin">http://localhost:5000/user/admin</a>”，显示“Hello Admin.”。</li><li>若访问“<a href="http://localhost:5000/user/mvl">http://localhost:5000/user/mvl</a>”，显示“Hello mvl as Guest.”。</li></ul></li></ul><h5 id="✧-字符串变量"><a href="#✧-字符串变量" class="headerlink" title="✧ 字符串变量"></a>✧ 字符串变量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>(<span class="hljs-params">name</span>):        <span class="hljs-comment"># 访问[http://127.0.0.1:5000/hello/Aha]，显示&#x27;Hello Aha!&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello %s!&lt;/center&gt;&#x27;</span> % name<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="✧-整数与浮点"><a href="#✧-整数与浮点" class="headerlink" title="✧ 整数与浮点"></a>✧ 整数与浮点</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/blog/&lt;int:postID&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_blog</span>(<span class="hljs-params">postID</span>):        <span class="hljs-comment"># 访问[http://localhost:5000/blog/27]，显示&#x27;Blog Number 27.&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Blog Number %d.&lt;/center&gt;&#x27;</span> % postID<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/rev/&lt;float:revNo&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">revision</span>(<span class="hljs-params">revNo</span>):          <span class="hljs-comment"># 访问[http://localhost:5000/rev/2.7]，显示&#x27;Revision Number 2.700000.&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Revision Number %f.&lt;/center&gt;&#x27;</span> % revNo<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="✧-目录分隔符"><a href="#✧-目录分隔符" class="headerlink" title="✧ 目录分隔符"></a>✧ 目录分隔符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/python&#x27;</span></span>)         </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/python/]，显示&#x27;Not Found&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_python</span>():           <span class="hljs-comment"># 访问[http://127.0.0.1:5000/python]，显示&#x27;Hello Python.&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello Python.&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/golang/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_golang</span>():           <span class="hljs-comment"># 访问[http://127.0.0.1:5000/golang]或[http://127.0.0.1:5000/golang/]</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello Golang.&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="✧-url-for-函数"><a href="#✧-url-for-函数" class="headerlink" title="✧ url_for()函数"></a>✧ url_for()函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_for<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span></span>)          </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/admin]，显示&#x27;Hello Admin.&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_admin</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello Admin.&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/guest/&lt;guest&gt;&#x27;</span></span>)  </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/guest/Admin]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_guest</span>(<span class="hljs-params">guest</span>):       <span class="hljs-comment"># 显示&#x27;Hello Admin as Guest.&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello %s as Guest.&lt;/center&gt;&#x27;</span> % guest<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)    </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/user/admin]，显示&#x27;Hello Admin.&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_user</span>(<span class="hljs-params">name</span>):         <span class="hljs-comment"># 接受来自URL参数的值，检查接收的参数是否与admin匹配</span><br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;admin&#x27;</span>:       <span class="hljs-comment"># 匹配则重定向到hello_admin()函数</span><br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;hello_admin&#x27;</span>))<br>    <span class="hljs-keyword">else</span>:                     <span class="hljs-comment"># 否则重定向到hello_guest()函数，显示&#x27;Hello &lt;name&gt; as Guest.&#x27;</span><br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;hello_guest&#x27;</span>, guest=name))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-请求方法"><a href="#2-请求方法" class="headerlink" title="(2) 请求方法"></a>(2) 请求方法</h4><ul><li>HEAD：和GET方法相同，但没有响应体。</li><li>GET：以未加密的形式将数据发送到服务器。</li><li>PUT：用上传的内容替换目标资源的所有当前表示。</li><li>DELETE：删除由URL给出的目标资源的所有当前表示。</li><li>POST：用于将HTML表单数据发送到服务器，接收的数据不由服务器缓存。</li><li>Flask路由默认响应GET请求，通过route()装饰器提供的方法参数更改请求。<ul><li>命令窗口下执行Python脚本开启开发服务器，浏览器打开post.html，输入test后提交。</li><li>此时浏览器跳转“<a href="http://localhost:5000/success/test">http://localhost:5000/success/test</a>”，页面显示“Welcom test.”。</li></ul></li></ul><h5 id="✧-post-py"><a href="#✧-post-py" class="headerlink" title="✧ post.py"></a>✧ post.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_for, request, render_template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)               </span><span class="hljs-comment"># 浏览器打开post.html，输入test后提交</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;post.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/success/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">success</span>(<span class="hljs-params">name</span>):            <span class="hljs-comment"># 此时浏览器跳转[http://localhost:5000/success/test]</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Welcome %s.&lt;/center&gt;&#x27;</span> % name<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>        user = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;success&#x27;</span>, name=user))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)              <span class="hljs-comment"># args是包含表单参数对及其对应值对的列表字典对象</span><br>        user = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;success&#x27;</span>, name=user))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h5 id="✧-post-html"><a href="#✧-post-html" class="headerlink" title="✧ post.html"></a>✧ post.html</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>请求方法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:5000/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>输入姓名<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-4-模板引擎"><a href="#1-4-模板引擎" class="headerlink" title="1-4 模板引擎"></a>1-4 模板引擎</h2><ul><li>模板引擎<ul><li>视图函数的主要作用是生成请求的响应，这是最简单的请求，Flask使用Jinja2这个模板引擎来渲染模板。</li><li>视图函数的两个作用是处理业务逻辑，以及返回响应内容，模板则是获取到视图函数的数据结果进行展示。</li><li>项目下创建templates文件夹，用于存放所有的模板文件，并且在templates目录下创建mould.html模板文件。</li></ul></li></ul><h4 id="1-mould-py"><a href="#1-mould-py" class="headerlink" title="(1) mould.py"></a>(1) mould.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)               </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    my_str = <span class="hljs-string">&#x27;Hello Flask.&#x27;</span>   <span class="hljs-comment"># 往mould.html模板中传入的数据</span><br>    my_int = <span class="hljs-number">27</span><br>    my_dict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">23</span>&#125;<br>    my_array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;mould.html&#x27;</span>,<br>                           my_str=my_str,<br>                           my_int=my_int,<br>                           my_dict=my_dict,<br>                           my_array=my_array<br>                           )<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-mould-html"><a href="#2-mould-html" class="headerlink" title="(2) mould.html"></a>(2) mould.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板引擎<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>模板HTML内容<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&#123;&#123; my_str &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&#123;&#123; my_int &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&#123;&#123; my_dict.name &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&#123;&#123; my_dict &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&#123;&#123; my_array &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="1-5-静态文件"><a href="#1-5-静态文件" class="headerlink" title="1-5 静态文件"></a>1-5 静态文件</h2><ul><li>静态文件<ul><li>Web应用程序通常需要静态文件，例如：JavaScript或CSS文件。</li><li>一般由应用程序的static文件夹提供，用于生成静态文件的URL。</li></ul></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&lt;!-- 项目目录结构 --&gt;<br><span class="hljs-bullet">-</span> static.py<br><span class="hljs-bullet">-</span> static<br><span class="hljs-bullet">    -</span> static.js<br><span class="hljs-bullet">-</span> templates<br><span class="hljs-bullet">    -</span> static.html<br>&lt;!-- 命令窗口下执行&#x27;python static.py&#x27;，访问[http://127.0.0.1:5000] --&gt;<br></code></pre></td></tr></table></figure><h4 id="1-static-js"><a href="#1-static-js" class="headerlink" title="(1) static.js"></a>(1) static.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-static-py"><a href="#2-static-py" class="headerlink" title="(2) static.py"></a>(2) static.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)               </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_static</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;static.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="3-static-html"><a href="#3-static-html" class="headerlink" title="(3) static.html"></a>(3) static.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>静态文件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;static.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;sayHello()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;你好呀！&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-核心内容"><a href="#2-核心内容" class="headerlink" title="2 核心内容"></a>2 核心内容</h1><ul><li>核心内容<ul><li>来自客户端网页的数据作为全局请求对象发送到服务器，为处理请求数据，应从Flask模块导入。</li><li>请求对象的属性<ul><li>args(解析查询字符串的内容，是问号之后URL的一部分)。</li><li>files(与上传文件有关的数据)、cookies(保存Cookie名称和值的字典对象)。</li><li>method(当前请求方法)、form(字典对象，包含表单参数及其值的键值对)。</li></ul></li></ul></li></ul><h2 id="2-1-表单展示"><a href="#2-1-表单展示" class="headerlink" title="2-1 表单展示"></a>2-1 表单展示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                     </span><span class="hljs-comment"># &#x27;/&#x27;URL呈现表单网页stufill.html</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stufill</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;stufill.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/stushow&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">stushow</span>():                      <span class="hljs-comment"># 填入的数据将发布到触发stushow()函数的&#x27;/stushow&#x27;URL</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:    <span class="hljs-comment"># 函数收集request.form中存在的表单数据，并将其发送给stushow.html</span><br>        stushow = request.form      <span class="hljs-comment"># 以字典对象的形式收集并将其转发到stushow.html，呈现在相应的网页上</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;stushow.html&#x27;</span>, result=stushow)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)             <span class="hljs-comment"># 访问[http://localhost:5000]，输入表单数据提交</span><br></code></pre></td></tr></table></figure><h4 id="1-stufill-html"><a href="#1-stufill-html" class="headerlink" title="(1) stufill.html"></a>(1) stufill.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据填写<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:5000/stushow&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;姓名&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>语文 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;语文&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>数学 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;数学&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>英语 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span> = <span class="hljs-string">&quot;英语&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span> = <span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span> = <span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-stushow-html"><a href="#2-stushow-html" class="headerlink" title="(2) stushow.html"></a>(2) stushow.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单展示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125; <span class="hljs-selector-tag">table</span> &#123;<span class="hljs-attribute">margin</span>: auto;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>    &#123;% for key, value in result.items() %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>&#123;&#123; key &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-2-Cookies"><a href="#2-2-Cookies" class="headerlink" title="2-2 Cookies"></a>2-2 Cookies</h2><ul><li>Cookies<ul><li>以文本形式存储于客户端，记录与跟踪用户数据，获得更好的访问者体验和网站统计信息，处理步骤如下。</li><li>设置cookie：默认是临时cookie，浏览器关闭立即失效，通过max_age设置有效期，单位是秒。</li><li>获取cookie：通过request.cookies的方式获取，返回的是一个字典，可以获取字典里的相应值。</li><li>删除cookie：这里删除只是让cookie过期，而非直接删除，通过delete_cookie()方式进行删除。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, make_response, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/set_cookies&#x27;</span></span>)          </span><span class="hljs-comment"># [127.0.0.1:5000/set_cookies]，F12查看Set-Cookie的value值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_cookies</span>():<br>    resp = make_response(<span class="hljs-string">&#x27;&lt;center&gt;success&lt;/center&gt;&#x27;</span>)<br>    resp.set_cookie(<span class="hljs-string">&#x27;flask&#x27;</span>, <span class="hljs-string">&#x27;flask&#x27;</span>, max_age=<span class="hljs-number">3600</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/get_cookies&#x27;</span></span>)          </span><span class="hljs-comment"># [http://127.0.0.1:5000/get_cookies]，页面输出cookies信息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookies</span>():<br>    cookie = request.cookies.get(<span class="hljs-string">&#x27;flask&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;&#x27;</span> + cookie + <span class="hljs-string">&#x27;&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete_cookies&#x27;</span></span>)       </span><span class="hljs-comment"># [http://127.0.0.1:5000/delete_cookies]，F12查看cookies已删(过期)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_cookies</span>():<br>    resp = make_response(<span class="hljs-string">&#x27;&lt;center&gt;del success&lt;/center&gt;&#x27;</span>)<br>    resp.delete_cookie(<span class="hljs-string">&#x27;flask&#x27;</span>)<br>    <span class="hljs-keyword">return</span> resp<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="2-3-会话工作"><a href="#2-3-会话工作" class="headerlink" title="2-3 会话工作"></a>2-3 会话工作</h2><ul><li>会话工作<ul><li>session，客户端登录到服务器并注销服务器的时间间隔，在会话中保存的数据会存储在服务器的临时目录中。</li><li>为每个客户端的会话分配会话ID，会话数据存储在cookie的顶部，服务器以加密方式对其进行签名。</li><li>Flask需要定义的secret_key进行加密，session也是一个字典对象，包含会话变量和关联值的键值对。<ul><li><code>Session[&#39;username&#39;] = &#39;admin&#39;</code>：设置username会话变量。</li><li><code>session.pop(&#39;username&#39;, None)</code>：释放username会话变量。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, redirect, url_for, request<br><br>app = Flask(__name__)               <span class="hljs-comment"># 访问[http://127.0.0.1:5000]，确保设置应用程序的secret_key</span><br>app.secret_key = <span class="hljs-string">&#x27;flask session&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                     </span><span class="hljs-comment"># 提示用户登录，未设置会话变量username</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        username = session[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;登录用户名：&#x27;</span> + username + <span class="hljs-string">&#x27;，&#x27;</span> + \<br>               <span class="hljs-string">&#x27;&lt;b&gt;&lt;a href=&quot;/logout&quot;&gt;点击这里退出&lt;/a&gt;&lt;/b&gt;&#x27;</span> + <span class="hljs-string">&#x27;。&lt;/center&gt;&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;您暂未登录，&lt;a href=&quot;/login&quot;&gt;&lt;/b&gt;&#x27;</span> + <span class="hljs-string">&#x27;点击这里登录&lt;/b&gt;&lt;/a&gt;&#x27;</span> + <span class="hljs-string">&#x27;。&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():                        <span class="hljs-comment"># login()视图函数，通过GET方法调用，打开一个登录表单</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:    <span class="hljs-comment"># 此时会话变量已设置，应用程序重定向到&#x27;/&#x27;，会话变量username被找到</span><br>        session[<span class="hljs-string">&#x27;username&#x27;</span>] = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &lt;form action=&#x27;&#x27; method=&#x27;POST&#x27; style=&quot;text-align:center;&quot;&gt;</span><br><span class="hljs-string">        &lt;p&gt;&lt;input type=&#x27;text&#x27; name=&#x27;username&#x27; /&gt;&lt;/p&gt;</span><br><span class="hljs-string">        &lt;p&gt;&lt;input type=&#x27;submit&#x27; value=&#x27;登录&#x27; /&gt;&lt;/p&gt;</span><br><span class="hljs-string">    &lt;/form&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout&#x27;</span></span>)               </span><span class="hljs-comment"># logout()视图函数，弹出username会话变量，&#x27;/&#x27;URL再次显示开始页面</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>    session.pop(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="2-4-Redirect"><a href="#2-4-Redirect" class="headerlink" title="2-4 Redirect"></a>2-4 Redirect</h2><ul><li>Redirect<ul><li>函数调用时返回一个响应对象，并将用户重定向到具有指定状态代码的另一目标位置。</li><li>redirect()重定向函数原型：<code>Flask.redirect(location, statuscode, response)</code>。</li><li>location(重定向响应的URL)、statuscode(发送到浏览器标头，默认302)、response(用于实例化响应)。</li><li>状态代码标准化<ul><li>HTTP_300_MULTIPLE_CHOICES、HTTP_301_MOVED_PERMANENTLY。</li><li>HTTP_302_FOUND、HTTP_303_SEE_OTHER、HTTP_304_NOT_MODIFIED。</li><li>HTTP_305_USE_PROXY、HTTP_306_RESERVED、HTTP_307_TEMPORARY_REDIRECT。</li></ul></li><li>示例：执行应用程序，访问“<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>”。<ul><li>输入用户名guest，F12查看，点击登录，返回“状态代码: 302 FOUND”。</li><li>输入用户名admin，点击登录，跳转至“<a href="http://127.0.0.1:5000/success">http://127.0.0.1:5000/success</a>”。</li></ul></li></ul></li></ul><h4 id="1-redirect-py"><a href="#1-redirect-py" class="headerlink" title="(1) redirect.py"></a>(1) redirect.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_for, render_template, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                     </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;redirect.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():                        <span class="hljs-comment"># redirect()函数用于在登录尝试失败时再次显示登录页面</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span> <span class="hljs-keyword">and</span> request.form[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;success&#x27;</span>))<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/success&#x27;</span></span>)              </span><span class="hljs-comment"># 输入admin，跳转到[http://127.0.0.1:5000/success]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">success</span>():                      <span class="hljs-comment"># 输入guest，F12查看返回&#x27;302 FOUND&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;登录成功！&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-redirect-html"><a href="#2-redirect-html" class="headerlink" title="(2) redirect.html"></a>(2) redirect.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>重定向<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;登录&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-5-错误代码"><a href="#2-5-错误代码" class="headerlink" title="2-5 错误代码"></a>2-5 错误代码</h2><ul><li>错误代码<ul><li>Flask类具有带错误代码的abort()函数：<code>Flask.abort(code)</code>。</li><li>400(错误请求)、401(未授权)、403(Forbidden资源不可用)、404(Not Found网页不存在)。</li><li>406(无法使用请求的内容特性响应请求的网页)、415(不支持的媒体类型)、429(请求过多)。</li><li>更改redirect.py代码，如下所示，执行程序，访问“<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>”。<ul><li>输入用户名guest，F12查看，点击登录，返回“状态代码: 401 UNAUTHORIZED”。</li><li>输入用户名admin，点击登录，跳转“<a href="http://127.0.0.1:5000/success">http://127.0.0.1:5000/success</a>”，登录成功。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_for, render_template, request, abort<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                     </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;redirect.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():                        <span class="hljs-comment"># 输入admin，跳转到[http://127.0.0.1:5000/success]</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;success&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">401</span>)<br>    <span class="hljs-keyword">else</span>:                           <span class="hljs-comment"># 输入guest，F12查看返回&#x27;401 UNAUTHORIZED&#x27;</span><br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;index&#x27;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/success&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">success</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;登录成功！&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="2-6-消息闪现"><a href="#2-6-消息闪现" class="headerlink" title="2-6 消息闪现"></a>2-6 消息闪现</h2><ul><li>消息闪现<ul><li>Flask提供了一个方法来使用闪现系统向用户反馈信息，可视图中创建消息，并在名为next的视图函数中呈现。</li><li>在一个请求结束时记录一个信息，并且在下次(且仅在下一次)求时访问，通常与布局模板结合使用以公开信息。</li><li><code>flash(message, category)</code>：将消息传递给下一个请求，该请求通常是一个模板。</li><li>message(要闪现的实际消息)、category(“error”、“info”或“warning”，可选)。</li><li><code>get_flashed_messages(with_categories, category_filter)</code>：会话中删除消息。</li><li>如果接收到的消息具有类别，则第一个参数是元组，第二个参数仅用于显示特定消息。</li><li>示例：执行程序，访问“<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>”，点击登录跳转到登录页面。<ul><li>用户名admin，密码1235，提交，显示“错误：无效用户名或密码，请重试！”。</li><li>重新输入用户名admin，密码admin，提交，跳回登录页面并显示“登录成功！”。</li></ul></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-comment">&lt;!-- 闪现在模板中接收消息 --&gt;</span><br>&#123;% with messages = get_flashed_messages() %&#125;<br>    &#123;% if messages %&#125;<br>        &#123;% for message in messages %&#125;<br>            &#123;&#123; message &#125;&#125;<br>        &#123;% endfor %&#125;<br>    &#123;% endif %&#125;<br>&#123;% endwith %&#125;<br></code></pre></td></tr></table></figure><h4 id="1-flash-py"><a href="#1-flash-py" class="headerlink" title="(1) flash.py"></a>(1) flash.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, flash, redirect, render_template, request, url_for<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;flask flash&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                     </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flash</span>():                    <span class="hljs-comment"># &#x27;/&#x27;URL显示登录页面的链接，没有消息闪现</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;flashmess.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flashlogin&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flash_login</span>():                  <span class="hljs-comment"># 显示登录表单，由&#x27;/&#x27;URL链接引导用户到&#x27;/flashlogin&#x27;</span><br>    error = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:    <span class="hljs-comment"># 视图函数验证用户名和密码，并闪现登录成功消息或创建error变量</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">or</span> request.form[<span class="hljs-string">&#x27;password&#x27;</span>] != <span class="hljs-string">&#x27;admin&#x27;</span>:<br>            error = <span class="hljs-string">&#x27;无效用户名或密码，请重试！&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            flash(<span class="hljs-string">&#x27;登录成功！&#x27;</span>)      <span class="hljs-comment"># 输入用户名admin，密码admin，则登录成功，否则失败提示</span><br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;get_flash&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;flashlogin.html&#x27;</span>, error=error)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-flashmess-html"><a href="#2-flashmess-html" class="headerlink" title="(2) flashmess.html"></a>(2) flashmess.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>消息闪现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    &#123;% with messages = get_flashed_messages() %&#125;<br>        &#123;% if messages %&#125;<br>            &#123;% for message in messages %&#125;<br>                <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            &#123;% endfor %&#125;<br>        &#123;% endif %&#125;<br>    &#123;% endwith %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>欢迎！<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;flash_login&#x27;) &#125;&#125;&quot;</span>&gt;</span>点击这里进行登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>。<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-flashlogin-html"><a href="#3-flashlogin-html" class="headerlink" title="(3) flashlogin.html"></a>(3) flashlogin.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125; <span class="hljs-selector-tag">table</span> &#123;<span class="hljs-attribute">margin</span>: auto;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:5000/flashlogin&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;username&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- &amp;nbsp; 半角不断行的空白格 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- &amp;ensp; 半角的空格 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- &amp;emsp; 全角的空格 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密<span class="hljs-symbol">&amp;emsp;</span>码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;password&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;提<span class="hljs-symbol">&amp;emsp;</span>交&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    &#123;% if error %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>错误：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    &#123;% endif %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-7-文件上传"><a href="#2-7-文件上传" class="headerlink" title="2-7 文件上传"></a>2-7 文件上传</h2><ul><li>文件上传<ul><li>需HTML表单，enctype属性设为“multipart&#x2F;form-data”，将文件发布到URL。</li><li>URL处理程序从<code>request.files[]</code>对象中提取文件，并将其保存到所需的位置。</li><li>每个上传的文件首先保存在服务器的临时位置中，然后再将其保存到最终位置上。</li><li>目标文件的名称可以是硬编码的，也可以从<code>request.files[]</code>对象的属性中获取。<ul><li><code>secure_filename()</code>：获取安全版本。</li><li><code>app.config[&#39;UPLOAD_FOLDER&#39;]</code>：定义上传文件夹的路径。</li><li><code>app.config[&#39;MAX_CONTENT_LENGTH&#39;]</code>：指定要上传文件大小的最大值(以字节为单位)。</li></ul></li></ul></li></ul><h4 id="1-upload-py"><a href="#1-upload-py" class="headerlink" title="(1) upload.py"></a>(1) upload.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)               <span class="hljs-comment"># 上传图片路径自定义，必须存在，否则报错</span><br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">&#x27;C:/Users/&lt;username&gt;/Pictures/&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span></span>)               </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/upload]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/uploaded&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">uploaded</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        f = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        <span class="hljs-built_in">print</span>(request.files)<br>        path = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], secure_filename(f.filename))<br>        <span class="hljs-built_in">print</span>(path)                 <span class="hljs-comment"># 注意：图片路径不含中文，中文打印识别不到</span><br>        f.save(path)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;文件上传成功！&lt;/center&gt;&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-upload-html"><a href="#2-upload-html" class="headerlink" title="(2) upload.html"></a>(2) upload.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:5000/uploaded&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-扩展功能"><a href="#3-扩展功能" class="headerlink" title="3 扩展功能"></a>3 扩展功能</h1><ul><li>扩展功能<ul><li>向Flask应用程序添加特定类型的支持，Flask Extension Registry(扩展注册表)是一个可用的扩展目录。</li><li>常用扩展包<ul><li>Flask-migrate(管理迁移数据库)、Flask-Admin(可扩展的管理接口框架)。</li><li>Flask-script(插入脚本)、Flask-Bable(提供国际化和本地化支持的翻译)。</li><li>Flask-Moment(本地化日期和时间)、Flask-Bootstrap(集成前端的Twitter Bootstrap框架)。</li><li>Flask-Session(Session存储方式指定)、Flask-OpenID(认证)、Flask-RESTful(开发REST API的工具)。</li><li>Flask-Mail(邮件)、Flask-WTF(表单)、Flask-SQLAlchemy(操作数据库)、Flask-Login(认证用户状态)。</li></ul></li><li>扩展通常命名为Flask-Foo或Foo-Flask，在PyPI搜索标记为“<a href="https://pypi.org/search/?c=Framework+::+Flask">FRAMEWORK::FLASK</a>”扩展包，通过PIP​下载。</li></ul></li></ul><h2 id="3-1-Mail"><a href="#3-1-Mail" class="headerlink" title="3-1 Mail"></a>3-1 Mail</h2><ul><li>Mail<ul><li>通过PIP命令安装Flask-Mail扩展：<code>pip install Flask-Mail</code>。</li><li>参数<ul><li>MAIL_SERVER-&gt;电子邮件服务器的名称或IP地址、MAIL_PORT-&gt;服务器的端口号。</li><li>MAIL_USERNAME-&gt;发件人的用户名、MAIL_DEFAULT_SENDER-&gt;设置默认发件人。</li><li>MAIL_PASSWORD-&gt;发件人的密码、MAIL_MAX_EMAILS-&gt;设置要发送的最大邮件数。</li><li>MAIL_ASCII_ATTACHMENTS-&gt;如果值设置为True，那么附加的文件名将转换为ASCII。</li><li>MAIL_USE_TLS-&gt;启用或禁用传输安全层加密、MAIL_USE_SSL-&gt;启用或禁用安全套接字层加密。</li><li>MAIL_DEBUG-&gt;默认调试状态、MAIL_SUPPRESS_SEND-&gt;app.testing设为True，则发送被抑制。</li></ul></li><li>重要类的定义<ul><li>Mail类：管理电子邮件消息传递需求，类构造函数为<code>flask-mail.Mail(app = None)</code>。<ul><li><code>send_message()</code>：发送消息的对象。</li><li><code>connect()</code>：打开与邮件主机的连接。</li><li><code>send()</code>：发送Message类对象的内容。</li></ul></li><li>Message类：封装一封电子邮件，类构造函数为<code>flask-mail.Message(subject, ...)</code>。<ul><li><code>attach()</code>：支持向邮件添加相关附件。</li><li><code>add_recipient()</code>：添加另一个收件人。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_mail <span class="hljs-keyword">import</span> Mail, Message                <span class="hljs-comment"># flask-mail模块导入Mail和Message类</span><br><br>app = Flask(__name__)                               <span class="hljs-comment"># 配置Flask-Mail</span><br><br>app.config[<span class="hljs-string">&#x27;MAIL_SERVER&#x27;</span>] = <span class="hljs-string">&#x27;smtp.126.com&#x27;</span>          <span class="hljs-comment"># 126电子邮件服务器的名称或IP地址</span><br>app.config[<span class="hljs-string">&#x27;MAIL_PORT&#x27;</span>] = <span class="hljs-number">25</span>                        <span class="hljs-comment"># 服务器的端口号</span><br>app.config[<span class="hljs-string">&#x27;MAIL_USERNAME&#x27;</span>] = <span class="hljs-string">&#x27;Id1@126.com&#x27;</span>         <span class="hljs-comment"># 发件人的用户名</span><br>app.config[<span class="hljs-string">&#x27;MAIL_PASSWORD&#x27;</span>] = <span class="hljs-string">&#x27;******&#x27;</span>              <span class="hljs-comment"># 发件人的密码(授权码)</span><br><span class="hljs-comment"># 并非使用邮箱密码而是授权码，注意授权码需重新获取，旧的不行，否则报错smtplib.SMTPAuthenticationError</span><br><span class="hljs-comment"># 将邮箱的安全验证级别降至最低，例如：设了邮箱登录二次验证(密码登录后需输入手机验证码)，将该功能关闭</span><br><span class="hljs-comment"># ssl.SSLError: [SSL: WRONG_VERSION_NUMBER] wrong version number (_ssl.c:1129)，MAIL_USE_SSL改为False</span><br>app.config[<span class="hljs-string">&#x27;MAIL_USE_SSL&#x27;</span>] = <span class="hljs-literal">False</span>                  <span class="hljs-comment"># 禁用安全套接字层加密</span><br>app.config[<span class="hljs-string">&#x27;MAIL_USE_TLS&#x27;</span>] = <span class="hljs-literal">False</span>                  <span class="hljs-comment"># 禁用传输安全层加密</span><br>mail = Mail(app)                                    <span class="hljs-comment"># 创建Mail类的实例</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                     </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/]即发送邮件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    msg = Message(<span class="hljs-string">&#x27;Flask-Mail测试&#x27;</span>, sender=<span class="hljs-string">&#x27;Id1@126.com&#x27;</span>, recipients=[<span class="hljs-string">&#x27;Id2@126.com&#x27;</span>])<br>    msg.body = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        Name：Dr.626</span><br><span class="hljs-string">        Description：测试Flask-Mail扩展是否生效。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    mail.send(msg)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;发送成功！&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="3-2-WTF"><a href="#3-2-WTF" class="headerlink" title="3-2 WTF"></a>3-2 WTF</h2><ul><li>WTF<ul><li>PIP命令安装Flask-WTF扩展：<code>pip install Flask-WTF</code>。</li><li>WTforms包中的标准表单字段<ul><li>DecimalField-&gt;显示带小数的数字文本字段、TextAreaField-&gt;<code>&lt;textarea&gt;</code>。</li><li>SelectField-&gt;选择表单元素、PasswordField-&gt;<code>&lt;input type=&#39;password&#39;&gt;</code>。</li><li>IntegerField-&gt;显示整数的文本字段、RadioField-&gt;<code>&lt;input type=&#39;radio&#39;&gt;</code>。</li><li>StringField-&gt;<code>&lt;input type=&#39;text&#39;&gt;</code>、SubmitField-&gt;<code>&lt;input type=&#39;submit&#39;&gt;</code>。</li><li>BooleanField-&gt;<code>&lt;input type=&#39;checkbox&#39;&gt;</code>。</li></ul></li><li>WTForms包中常用的验证器<ul><li>NumberRange-&gt;验证给定范围内输入字段中的数字、URL-&gt;验证在输入字段中输入的URL。</li><li>DataRequired-&gt;检查输入字段是否为空、Email-&gt;检查字段中的文本是否遵循电子邮件的ID约定。</li><li>IPAddress-&gt;输入字段中验证IP地址、Length-&gt;验证输入字段中的字符串长度是否在给定范围内。</li></ul></li></ul></li></ul><h4 id="1-form-py"><a href="#1-form-py" class="headerlink" title="(1) form.py"></a>(1) form.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> formnew <span class="hljs-keyword">import</span> ContactForm<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, flash<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;flask wtf&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/formfill&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)    </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/formfill]，填写数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">form_fill</span>():<br>    form = ContactForm()                            <span class="hljs-comment"># formnew.py中设置了name与email必填</span><br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> form.validate():                     <span class="hljs-comment"># 判断必填项是否全部填写，没有则提示，有则跳转页面</span><br>            flash(<span class="hljs-string">&#x27;请填写所有必填字段。&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;formfill.html&#x27;</span>, form=form)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;formsub.html&#x27;</span>)  <span class="hljs-comment"># 提交后跳转不过来，即使跳转成功URL仍为“/formfill”</span><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;formfill.html&#x27;</span>, form=form)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-formnew-py"><a href="#2-formnew-py" class="headerlink" title="(2) formnew.py"></a>(2) formnew.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> wtforms <span class="hljs-keyword">import</span> validators<br><span class="hljs-keyword">from</span> flask_wtf <span class="hljs-keyword">import</span> FlaskForm<br><span class="hljs-keyword">from</span> wtforms <span class="hljs-keyword">import</span> StringField, IntegerField, TextAreaField, SubmitField, RadioField, SelectField<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContactForm</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>):<br>    name = StringField(<span class="hljs-string">&#x27;姓名&#x27;</span>, [validators.DataRequired(message=<span class="hljs-string">&#x27;请输入你的姓名!&#x27;</span>)])<br>    sex = RadioField(<span class="hljs-string">&#x27;性别&#x27;</span>, choices=[(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>), (<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;女&#x27;</span>)])<br>    address = TextAreaField(<span class="hljs-string">&#x27;地址&#x27;</span>)<br>    email = StringField(<span class="hljs-string">&#x27;邮件&#x27;</span>,                     <span class="hljs-comment"># 校验邮箱是否必填，以及邮箱正确性</span><br>                        [validators.DataRequired(message=<span class="hljs-string">&#x27;请输入你的邮件地址!&#x27;</span>),<br>                         validators.Email(message=<span class="hljs-string">&#x27;请输入正确的邮件地址!&#x27;</span>)])<br>    age = IntegerField(<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>    <span class="hljs-comment"># language = SelectField(&#x27;语言&#x27;, choices=[&#x27;C#&#x27;, &#x27;CPP&#x27;, &#x27;Java&#x27;, &#x27;Python&#x27;, &#x27;Golang&#x27;])</span><br>    <span class="hljs-comment"># language上述写法，执行时可能报错ValueError: too many values to unpack (expected 2)</span><br>    language = SelectField(<br>        <span class="hljs-string">&#x27;语言&#x27;</span>,<br>        choices=[<br>            (<span class="hljs-string">&#x27;c#&#x27;</span>, <span class="hljs-string">&#x27;C#&#x27;</span>), (<span class="hljs-string">&#x27;cpp&#x27;</span>, <span class="hljs-string">&#x27;CPP&#x27;</span>), (<span class="hljs-string">&#x27;java&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>), <br>            (<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;Python&#x27;</span>), (<span class="hljs-string">&#x27;golang&#x27;</span>, <span class="hljs-string">&#x27;Golang&#x27;</span>)<br>        ],<br>        default=<span class="hljs-string">&#x27;python&#x27;</span>,<br>        render_kw=&#123;<span class="hljs-string">&quot;style&quot;</span>: <span class="hljs-string">&quot;width:180px;height:30px;&quot;</span>&#125;,<br>    )<br>    submit = SubmitField(<span class="hljs-string">&#x27;提交&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-formfill-html"><a href="#3-formfill-html" class="headerlink" title="(3) formfill.html"></a>(3) formfill.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单填写<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span>Flask-WTF表单<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://localhost:5000/formfill&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;POST&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>Flask-WTF表单<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- formnew.py的ContactForm类创建name字段时，会自动创建CSRF令牌的隐藏字段 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 防止跨站请求伪造攻击，CSRF令牌的隐藏字段，相当于如下脚本 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;input id=&quot;csrf_token&quot; name=&quot;csrf_token&quot; type=&quot;hidden&quot; /&gt; --&gt;</span><br>            &#123;&#123; form.hidden_tag() &#125;&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size:20px;font-weight:bold;text-align:center;&quot;</span>&gt;</span><br>                &#123;&#123; form.name.label &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.name(style=&#x27;width:170px;height:20px;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 这里貌似只校验了邮箱的正确性，必填项弹窗提示词都一致 --&gt;</span><br>                <span class="hljs-comment">&lt;!-- 并不是formnew.py文件中自定义的提示词 --&gt;</span><br>                &#123;% for message in form.name.errors %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-danger&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                &#123;&#123; form.sex.label &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.sex(style=&#x27;display:inline-block;text-align:center;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.address.label &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.address(style=&#x27;width:170px;height:20px;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.email.label &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.email(style=&#x27;width:170px;height:20px;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;% for message in form.email.errors %&#125;<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;alert alert-danger&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                &#123;% endfor %&#125;<br>                &#123;&#123; form.age.label &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.age(style=&#x27;width:170px;height:20px;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.language.label &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- &#123;&#123; form.language(style=&#x27;width:180px;height:30px;&#x27;) &#125;&#125;&lt;br&gt;&lt;br&gt; --&gt;</span><br>                &#123;&#123; form.language() &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>                &#123;&#123; form.submit(style=&#x27;width:50px;height:30px;&#x27;) &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-formsub-html"><a href="#4-formsub-html" class="headerlink" title="(4) formsub.html"></a>(4) formsub.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>提交显示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>信息提交成功！<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-Sijax"><a href="#3-3-Sijax" class="headerlink" title="3-3 Sijax*"></a>3-3 Sijax*</h2><ul><li>Sijax<ul><li>即Simple Ajax，可轻松地实现AJAX功能，PIP安装Flask-Sijax扩展：<code>pip install flask-sijax</code>。</li><li>Flask-Sijax是一个专门为Flask设计的Sijax扩展，提供了与Flask无缝集成的API，也是个轻量级的库。</li></ul></li></ul><h4 id="1-sijaxapp-py"><a href="#1-sijaxapp-py" class="headerlink" title="(1) sijaxapp.py"></a>(1) sijaxapp.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> flask_sijax<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, g, render_template<br><br>app = Flask(__name__)<br><br><span class="hljs-comment"># SIJAX_STATIC_PATH，要被镜像的Sijax javascript文件的静态路径，默认“/static/js/sijax/”</span><br><span class="hljs-comment"># SIJAX_JSON_URI，从中加载json2.js静态文件的URI，Sijax使用Json在浏览器和服务器之间传递数据</span><br>app.config[<span class="hljs-string">&#x27;SIJAX_STATIC_PATH&#x27;</span>] = <span class="hljs-string">&#x27;/static/js/sijax/&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SIJAX_JSON_URI&#x27;</span>] = <span class="hljs-string">&#x27;/static/js/sijax/json2.js&#x27;</span><br>flask_sijax.Sijax(app)                              <span class="hljs-comment"># static生成的路径不对(在根目录下)</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                     </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;center&gt;&lt;a href=&#x27;/app&#x27;&gt;跳转app页面&lt;/a&gt;&lt;/center&gt;&quot;</span><br><br><br><span class="hljs-meta">@flask_sijax.route(<span class="hljs-params">app, <span class="hljs-string">&#x27;/app&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hi</span>(<span class="hljs-params">obj_response</span>):<br>        obj_response.alert(<span class="hljs-string">&#x27;Hi there!&#x27;</span>)             <span class="hljs-comment"># 函数回复浏览器的方式</span><br>        <span class="hljs-keyword">if</span> g.sijax.is_sijax_request:                <span class="hljs-comment"># 不会弹窗显示“Hi there!”</span><br>            g.sijax.register_callback(<span class="hljs-string">&#x27;say_hi&#x27;</span>, say_hi)<br>        <span class="hljs-keyword">return</span> g.sijax.process_request()            <span class="hljs-comment"># 检测到Ajax请求时，Sijax会自行处理</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;sijaxapp.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-sijaxapp-html"><a href="#2-sijaxapp-html" class="headerlink" title="(2) sijaxapp.html"></a>(2) sijaxapp.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Flask-Sijax<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/sijax/sijax.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">g.sijax.get_js</span>()|safe &#125;&#125;</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Flask-Sijax<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript://&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;Sijax.request(&#x27;say_hi&#x27;);&quot;</span>&gt;</span>点击这里<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单击链接将向服务器发出一个Sijax请求，一个特殊的jQuery.ajax()请求 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 具体参看Flask-Sijax官网“https://pythonhosted.org/Flask-Sijax/” --&gt;</span><br>    <span class="hljs-comment">&lt;!-- GET http://127.0.0.1:5000/static/js/sijax/sijax.js net::ERR_ABORTED 404 (NOT FOUND) --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 请求失效了，Uncaught ReferenceError: Sijax is not defined at HTMLAnchorElement.onclick --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-4-SQLite"><a href="#3-4-SQLite" class="headerlink" title="3-4 SQLite"></a>3-4 SQLite</h2><ul><li>SQLite<ul><li>通过PIP命令安装SQLite扩展：<code>pip install sqlite3</code>。</li><li>SQLite是一种嵌入式数据库管理系统，易于使用无需配置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sqlite3                                       <span class="hljs-comment"># 实例操作前需要先创建数据库和数据表</span><br><br>conn = sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>)                <span class="hljs-comment"># 创建SQLite数据库和一个学生表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;成功打开数据库！&#x27;</span>)<br><br>conn.execute(<span class="hljs-string">&#x27;CREATE TABLE students (name TEXT, address TEXT, city TEXT, pin TEXT)&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;数据表创建成功！&#x27;</span>)<br>conn.close()<br></code></pre></td></tr></table></figure><h4 id="1-sqloper-py"><a href="#1-sqloper-py" class="headerlink" title="(1) sqloper.py"></a>(1) sqloper.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> sqlite3 <span class="hljs-keyword">as</span> sql                               <span class="hljs-comment"># 实例将学生信息添加到数据库中，并列表展示</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                     </span><span class="hljs-comment"># 显示[127.0.0.1:5000]主页，链接到sqlhome.html</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sql_home</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;sqlhome.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/sqlstu&#x27;</span></span>)                               </span><span class="hljs-comment"># 页面表单添加学生记录，链接到sqlstu.html</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new_stu</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;sqlstu.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/addrec&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)      </span><span class="hljs-comment"># 将表单记录插入数据库对应的表中</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_rec</span>():<br>    <span class="hljs-keyword">global</span> msg<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]             <span class="hljs-comment"># 这里并未做表单内容的校验</span><br>            address = request.form[<span class="hljs-string">&#x27;address&#x27;</span>]<br>            city = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>            pin = request.form[<span class="hljs-string">&#x27;pin&#x27;</span>]<br>            <span class="hljs-keyword">with</span> sql.connect(<span class="hljs-string">&quot;database.db&quot;</span>) <span class="hljs-keyword">as</span> con:<br>                cur = con.cursor()                  <span class="hljs-comment"># 打开database.db数据库</span><br>                cur.execute(<span class="hljs-string">&quot;INSERT INTO students (name, address, city, pin) \</span><br><span class="hljs-string">                            VALUES(?, ?, ?, ?)&quot;</span>, (name, address, city, pin))<br>                con.commit()                        <span class="hljs-comment"># 将数据插入数据库中并commit提交</span><br>                msg = <span class="hljs-string">&#x27;记录添加成功！&#x27;</span><br>        <span class="hljs-keyword">except</span>:<br>            con.rollback()<br>            msg = <span class="hljs-string">&#x27;插入操作有误！&#x27;</span><br>        <span class="hljs-keyword">finally</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;sqlres.html&quot;</span>, msg=msg)<br>            con.close()                             <span class="hljs-comment"># 关闭数据库连接，释放资源避免潜在的问题</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/sqllist&#x27;</span></span>)                              </span><span class="hljs-comment"># 从数据库中检索所有学生信息，并在页面展示</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sql_list</span>():<br>    con = sql.connect(<span class="hljs-string">&quot;database.db&quot;</span>)<br>    con.row_factory = sql.Row<br>    cur = con.cursor()<br>    cur.execute(<span class="hljs-string">&quot;SELECT * FROM students&quot;</span>)           <span class="hljs-comment"># 数据表记录查询语句</span><br>    rows = cur.fetchall()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;sqllist.html&#x27;</span>, rows=rows)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-sqlres-html"><a href="#2-sqlres-html" class="headerlink" title="(2) sqlres.html"></a>(2) sqlres.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>添加结果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;text-align: center;&#x27;</span>&gt;</span><br>    添加后的结果 : &#123;&#123; msg &#125;&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;\&quot;</span>&gt;</span>点击回到首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-sqlstu-html"><a href="#3-sqlstu-html" class="headerlink" title="(3) sqlstu.html"></a>(3) sqlstu.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单填写<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;&#123;&#123; url_for(&quot;add_rec&quot;) &#125;&#125;&#x27;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;POST&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;text-align: center;&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>姓名<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 30px;&#x27;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>地址<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;address&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 30px;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>城市<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;city&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 30px;&#x27;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>认证码<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;pin&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 30px;&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;提交&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-sqllist-html"><a href="#4-sqllist-html" class="headerlink" title="(4) sqllist.html"></a>(4) sqllist.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表展示<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125; <span class="hljs-selector-tag">table</span> &#123;<span class="hljs-attribute">margin</span>: auto;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>城市<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>认证码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        &#123;% for row in rows %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; row[&#x27;name&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; row[&#x27;address&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; row[&#x27;city&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; row[&#x27;pin&#x27;] &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span> = <span class="hljs-string">&quot;/&quot;</span>&gt;</span>点击回到首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-sqlhome-html"><a href="#5-sqlhome-html" class="headerlink" title="(5) sqlhome.html"></a>(5) sqlhome.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据操作<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;text-align: center;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sqlstu&quot;</span>&gt;</span>添加记录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/sqllist&quot;</span>&gt;</span>列表展示<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-5-SQLAlchemy"><a href="#3-5-SQLAlchemy" class="headerlink" title="3-5 SQLAlchemy"></a>3-5 SQLAlchemy</h2><ul><li>SQLAlchemy<ul><li>PIP命令安装Flask-SQLAlchemy扩展：<code>pip install flask-sqlalchemy</code>。</li><li>Flask-SQLAlchemy是Flask框架的一个扩展，提供了一种简单易用的方式来操作SQL数据库。</li><li>使用SQLAlchemy可轻松定义数据模型、查询数据并进行CRUD操作，不必编写原始SQL语句。</li><li>ORM，Object-Relational Mapping，对象关系映射，ORM API提供了执行CRUD操作的方法。<ul><li>大多数编程语言平台是面向对象的，而RDBMS服务器中的数据存储为表。</li><li>ORM将关系数据库表视为对象，把对象参数映射到底层RDBMS表结构中。</li></ul></li></ul></li></ul><h4 id="1-sqlaloper-py"><a href="#1-sqlaloper-py" class="headerlink" title="(1) sqlaloper.py"></a>(1) sqlaloper.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy             <span class="hljs-comment"># 支持添加、编辑、删除和查看学生信息</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, flash, url_for, redirect, render_template<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///students.sqlite3&#x27;</span><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;flask sqlalchemy&#x27;</span><br><br>db = SQLAlchemy(app)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">students</span>(db.Model):                           <span class="hljs-comment"># students类继承自db.Model类</span><br>    <span class="hljs-built_in">id</span> = db.Column(<span class="hljs-string">&#x27;id&#x27;</span>, db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    name = db.Column(db.String(<span class="hljs-number">100</span>))                <span class="hljs-comment"># 定义了id、name、city和address四个属性</span><br>    city = db.Column(db.String(<span class="hljs-number">50</span>))<br>    address = db.Column(db.String(<span class="hljs-number">200</span>))<br>    pincode = db.Column(db.String(<span class="hljs-number">10</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, city, address, pincode</span>):<br>        self.name = name                            <span class="hljs-comment"># 定义构造函数，使用四个参数初始化类实例的属性</span><br>        self.city = city<br>        self.address = address<br>        self.pincode = pincode                      <span class="hljs-comment"># 访问[http://127.0.0.1:5000]</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                     </span><span class="hljs-comment"># 主应用程序定义两个路由器，“/”和“/sqlalnew”</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqlal_show</span>():                                   <span class="hljs-comment"># 访问根路径时渲染sqlalshow.html并显示所有记录</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;sqlalshow.html&#x27;</span>, students=students.query.<span class="hljs-built_in">all</span>())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/sqlalnew&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)    </span><span class="hljs-comment"># 访问“/sqlalnew”路径时渲染sqlalnew.html模板</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqlal_new</span>():                                    <span class="hljs-comment"># 并允许用户添加新的记录到SQLite3数据库中</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:                    <span class="hljs-comment"># 表单校验，如果用户提交失败，则显示错误消息</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.form[<span class="hljs-string">&#x27;name&#x27;</span>] <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> request.form[<span class="hljs-string">&#x27;city&#x27;</span>] <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> request.form[<span class="hljs-string">&#x27;address&#x27;</span>]:<br>            flash(<span class="hljs-string">&#x27;请输入所有字段！&#x27;</span>, <span class="hljs-string">&#x27;error&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:                                       <span class="hljs-comment"># 用户提交成功，则将新记录添加到数据库中</span><br>            student = students(request.form[<span class="hljs-string">&#x27;name&#x27;</span>], request.form[<span class="hljs-string">&#x27;city&#x27;</span>],<br>                               request.form[<span class="hljs-string">&#x27;address&#x27;</span>], request.form[<span class="hljs-string">&#x27;pincode&#x27;</span>])<br>            db.session.add(student)                 <span class="hljs-comment"># session对象执行CRUD的插入映射表操作</span><br>            db.session.commit()<br>            flash(<span class="hljs-string">&#x27;记录添加成功！&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;sqlal_show&#x27;</span>))  <span class="hljs-comment"># 在任何情况下，都会将用户重定向回显示页面</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;sqlalnew.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> app.app_context():                         <span class="hljs-comment"># 创建一个应用程序上下文</span><br>        db.create_all()                             <span class="hljs-comment"># 调用db.create_all()函数以创建数据库表</span><br>    <br>    <span class="hljs-comment"># 若执行时报错ImportError: cannot import name &#x27;EVENT_TYPE_OPENED&#x27; from &#x27;watchdog.events&#x27;</span><br>    app.run(debug=<span class="hljs-literal">True</span>)                             <span class="hljs-comment"># 升级：pip install --upgrade watchdog</span><br></code></pre></td></tr></table></figure><h4 id="2-sqlalnew-html"><a href="#2-sqlalnew-html" class="headerlink" title="(2) sqlalnew.html"></a>(2) sqlalnew.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>表单填写<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;text-align: center;&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Flask-SQLAlchemy 实例<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-comment">&lt;!-- 水平线标签 --&gt;</span><br>    &#123;% for category, message in get_flashed_messages(with_categories = true) %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;alert alert-danger&#x27;</span>&gt;</span><br>            &#123;&#123; message &#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;&#123;&#123; request.path &#125;&#125;&#x27;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#x27;姓名&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 15px;&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;city&#x27;</span>&gt;</span>城市<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;city&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#x27;城市&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 15px;&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;address&#x27;</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;address&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#x27;地址&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 15px;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;pincode&#x27;</span>&gt;</span>认证码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;pincode&#x27;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&#x27;认证码&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 180px; height: 15px;&#x27;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;提交&#x27;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-sqlalshow-html"><a href="#3-sqlalshow-html" class="headerlink" title="(3) sqlalshow.html"></a>(3) sqlalshow.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据操作<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125; <span class="hljs-selector-tag">table</span> &#123;<span class="hljs-attribute">margin</span>: auto;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;sqlal_show&#x27;) &#125;&#125;&quot;</span>&gt;</span>Flask-SQLAlchemy 实例<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><span class="hljs-comment">&lt;!-- 水平线标签 --&gt;</span><br>    &#123;%- for message in get_flashed_messages() %&#125;<br>        &#123;&#123; message &#125;&#125;<br>    &#123;%- endfor %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>学生：(<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;sqlal_new&#x27;) &#125;&#125;&quot;</span>&gt;</span>新增<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>)<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>城市<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>地址<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>认证码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        &#123;% for student in students %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; student.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; student.city &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; student.address &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; student.pincode &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="4-即插视图"><a href="#4-即插视图" class="headerlink" title="4 即插视图"></a>4 即插视图</h1><ul><li>即插视图<ul><li>Pluggable Views，一种处理请求的类，可以根据不同的HTTP方法来执行不同的操作。</li><li>基本原则<ul><li>视图类必须继承自<code>flask.views.View</code>或其子类，例如：<code>flask.views.MethodView</code>。</li><li>可定义多个HTTP方法(例如：GET、POST、PUT、DELETE等)来处理不同类型的请求。</li><li>请求到达应用程序时，Flask将使用URL规则匹配器查找与该请求URL相对应的视图函数。</li><li>如果找到匹配的视图函数，创建该视图类的实例，并调用该类方法(GET等)来处理请求。</li><li>提供可选装饰器和钩子函数，以便在调用视图方法前后执行例如授权验证、日志记录等操作。</li><li>视图方法应该返回一个响应对象，通常是响应字符串，或者模板渲染结果，亦或是JSON数据。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask.views <span class="hljs-keyword">import</span> View<br><br>app = Flask(__name__)                           <span class="hljs-comment"># 访问[http://127.0.0.1:5000/hello]</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>(<span class="hljs-title class_ inherited__">View</span>):                         <span class="hljs-comment"># 定义了HelloWorld继承自View的即插视图类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dispatch_request</span>(<span class="hljs-params">self</span>):                 <span class="hljs-comment"># 实现dispatch_request方法，处理视图接收到的请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello, World!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-comment"># 用户访问“/hello”时创建HelloWorldView实例，并调用dispatch_request方法来响应请求，返回“Hello, World!”</span><br>app.add_url_rule(<span class="hljs-string">&#x27;/hello&#x27;</span>, view_func=HelloWorld.as_view(<span class="hljs-string">&#x27;Hello&#x27;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="4-1-方法调度"><a href="#4-1-方法调度" class="headerlink" title="4-1 方法调度"></a>4-1 方法调度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask.views <span class="hljs-keyword">import</span> MethodView<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>(<span class="hljs-title class_ inherited__">MethodView</span>):                   <span class="hljs-comment"># 访问[http://127.0.0.1:5000/hello]</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):                              <span class="hljs-comment"># 网页访问“/hello”，响应GET请求</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;GET请求&lt;/center&gt;&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self</span>):                             <span class="hljs-comment"># 应用程序启动后，使用JMeter模拟响应POST请求</span><br>        data = request.get_json()               <span class="hljs-comment"># 正确的JSON格式：&#123;&quot;name&quot;: &quot;John&quot;, &quot;surname&quot;: &quot;Doe&quot;&#125;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;POST请求返回的结果：<span class="hljs-subst">&#123;data&#125;</span>。&lt;/center&gt;&#x27;</span><br>        <span class="hljs-comment"># return jsonify(data)                  # JSON数据的所有属性名都必须使用双引号括起来</span><br><br><br><span class="hljs-comment"># 使用app.add_url_rule()方法将HelloWorld类附加到URL规则上，并将as_view()方法作为视图函数</span><br><span class="hljs-comment"># 为特定的HTTP请求方法指定处理函数，可以使用methods参数，发送POST请求时需设置Content-Type标头</span><br>app.add_url_rule(<span class="hljs-string">&#x27;/hello&#x27;</span>, view_func=HelloWorld.as_view(<span class="hljs-string">&#x27;GET-Request&#x27;</span>), methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br>app.add_url_rule(<span class="hljs-string">&#x27;/hello&#x27;</span>, view_func=HelloWorld.as_view(<span class="hljs-string">&#x27;POST-Request&#x27;</span>), methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:                      <span class="hljs-comment"># JMeter需设置信息头管理器</span><br>    app.run(debug=<span class="hljs-literal">True</span>)                         <span class="hljs-comment"># Content-Type为application/json; charset=UTF-8;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-装饰视图"><a href="#4-2-装饰视图" class="headerlink" title="4-2 装饰视图"></a>4-2 装饰视图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><span class="hljs-keyword">from</span> flask.views <span class="hljs-keyword">import</span> MethodView<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, g, render_template, session, request, redirect<br><br>app = Flask(__name__)                           <span class="hljs-comment"># 访问[http://127.0.0.1:5000/declogin]</span><br><br>app.secret_key = <span class="hljs-string">b&#x27;flask decorating views&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginView</span>(<span class="hljs-title class_ inherited__">MethodView</span>):                    <span class="hljs-comment"># LoginView是继承自MethodView基类的视图类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):                              <span class="hljs-comment"># 该类包含了一个get()方法和一个post()方法</span><br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;declogin.html&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self</span>):<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]     <span class="hljs-comment"># 若输入用户名admin，密码12345，则跳转dechello.html</span><br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]     <span class="hljs-comment"># 否则显示&#x27;错误：无效的用户名或密码！&#x27;</span><br><br>        <span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&#x27;12345&#x27;</span>:<br>            g.user = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: username&#125;<br>            session[<span class="hljs-string">&#x27;user&#x27;</span>] = g.user            <span class="hljs-comment"># 通过验证设置g.user</span><br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/dechello&#x27;</span>)        <span class="hljs-comment"># 重定向到受保护的页面</span><br>        <span class="hljs-keyword">else</span>:<br>            error = <span class="hljs-string">&#x27;错误：无效的用户名或密码！&#x27;</span><br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;declogin.html&#x27;</span>, error=error)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_required</span>(<span class="hljs-params">f</span>):                          <span class="hljs-comment"># login_required装饰器函数接受一个函数作为参数</span><br><span class="hljs-meta">    @wraps(<span class="hljs-params">f</span>)                                   </span><span class="hljs-comment"># 并返回一个新的函数，调用原始函数，登录或返回401</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decorated_function</span>(<span class="hljs-params">*args, **kwargs</span>):    <span class="hljs-comment"># 若未登录进行访问[http://127.0.0.1:5000/dechello]</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;user&#x27;</span>):             <span class="hljs-comment"># 则页面将显示&#x27;请登录后再进行访问！&#x27;</span><br>            <span class="hljs-keyword">return</span> unauthorized(<span class="hljs-string">&#x27;请登录后再进行访问！&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            g.user = session[<span class="hljs-string">&#x27;user&#x27;</span>]<br>            <span class="hljs-keyword">return</span> f(*args, **kwargs)<br><br>    <span class="hljs-keyword">return</span> decorated_function<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unauthorized</span>(<span class="hljs-params">message</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;decerror.html&#x27;</span>, message=message), <span class="hljs-number">401</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloView</span>(<span class="hljs-title class_ inherited__">MethodView</span>):<br>    decorators = [login_required]               <span class="hljs-comment"># 引用装饰器函数</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self</span>):<br>        message = <span class="hljs-string">&#x27;Hello, %s!&#x27;</span> % g.user[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;dechello.html&#x27;</span>, message=message)<br><br><br>app.add_url_rule(<span class="hljs-string">&#x27;/declogin&#x27;</span>, view_func=LoginView.as_view(<span class="hljs-string">&#x27;login&#x27;</span>))<br>app.add_url_rule(<span class="hljs-string">&#x27;/dechello&#x27;</span>, view_func=HelloView.as_view(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="1-declogin-html"><a href="#1-declogin-html" class="headerlink" title="(1) declogin.html"></a>(1) declogin.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>&#123;% if error %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; error &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>&#123;% endif %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;username&#x27;</span>&gt;</span>用户名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;username&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&#x27;password&#x27;</span>&gt;</span>密<span class="hljs-symbol">&amp;emsp;</span>码：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;password&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;提<span class="hljs-symbol">&amp;emsp;</span>交&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-dechello-html"><a href="#2-dechello-html" class="headerlink" title="(2) dechello.html"></a>(2) dechello.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎首页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;<span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;login&#x27;) &#125;&#125;&quot;</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-decerror-html"><a href="#3-decerror-html" class="headerlink" title="(3) decerror.html"></a>(3) decerror.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>错误页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">27px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#dc3545</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-3-API的方法视图"><a href="#4-3-API的方法视图" class="headerlink" title="4-3 API的方法视图*"></a>4-3 API的方法视图*</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> flask.views <span class="hljs-keyword">import</span> MethodView<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, redirect, url_for<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;flask method view of api&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAPI</span>(<span class="hljs-title class_ inherited__">MethodView</span>):                      <span class="hljs-comment"># GET查询、POST添加(或登录)、PUT修改、DELETE删除</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.load_users()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">load_users</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;apidata.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            self.users = json.load(f)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">save_users</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;apidata.json&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            json.dump(self.users, f, indent=<span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, user_name=<span class="hljs-literal">None</span></span>):              <span class="hljs-comment"># 根据user_name来获取用户的信息</span><br>        <span class="hljs-built_in">print</span>(request.method)<br>        <span class="hljs-keyword">if</span> user_name <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:                   <span class="hljs-comment"># 访问[http://127.0.0.1:5000/users/]</span><br>            user_all = [<br>                &#123;<span class="hljs-string">&#x27;id&#x27;</span>: user[<span class="hljs-string">&#x27;id&#x27;</span>], <span class="hljs-string">&#x27;name&#x27;</span>: user[<span class="hljs-string">&#x27;name&#x27;</span>], <span class="hljs-string">&#x27;age&#x27;</span>: user[<span class="hljs-string">&#x27;age&#x27;</span>], <span class="hljs-string">&#x27;email&#x27;</span>: user[<span class="hljs-string">&#x27;email&#x27;</span>]&#125; <br>                <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> self.users<br>            ]                                   <span class="hljs-comment"># 如果没有提供user_name，将展示所有用户信息</span><br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;apiusers.html&#x27;</span>, users=user_all)<br>        <span class="hljs-keyword">else</span>:                                   <span class="hljs-comment"># 如果提供user_name，只显示该用户信息</span><br>            user_sigle = <span class="hljs-built_in">next</span>((user <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> self.users <span class="hljs-keyword">if</span> user[<span class="hljs-string">&#x27;name&#x27;</span>] == user_name), <span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">if</span> user_sigle <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:              <span class="hljs-comment"># 例如访问[http://127.0.0.1:5000/users/Adam]</span><br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;apiusers.html&#x27;</span>, message=<span class="hljs-string">&#x27;没有找到用户，请先添加用户！&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;apiusers.html&#x27;</span>, users=[user_sigle])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self</span>):                             <span class="hljs-comment"># 添加新的用户信息</span><br>        <span class="hljs-built_in">print</span>(request.method)<br>        next_id = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">int</span>(user[<span class="hljs-string">&#x27;id&#x27;</span>]) <span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> self.users) + <span class="hljs-number">1</span><br>        name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        age = request.form.get(<span class="hljs-string">&#x27;age&#x27;</span>)           <span class="hljs-comment"># 添加用户，跳转到[http://127.0.0.1:5000/users/add/]</span><br>        email = request.form.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> age <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> email:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;apiadds.html&#x27;</span>)<br>        new_user = &#123;<span class="hljs-string">&#x27;id&#x27;</span>: next_id, <span class="hljs-string">&#x27;name&#x27;</span>: name, <span class="hljs-string">&#x27;age&#x27;</span>: age, <span class="hljs-string">&#x27;email&#x27;</span>: email&#125;<br>        self.users.append(new_user)<br>        next_id += <span class="hljs-number">1</span><br>        self.save_users()                       <span class="hljs-comment"># 将添加的用户信息写入apidata.json中</span><br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;user_get&#x27;</span>))    <span class="hljs-comment"># 重定向到用户列表页面</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self, user_name=<span class="hljs-literal">None</span></span>):              <span class="hljs-comment"># 更新指定用户的代码</span><br>        <span class="hljs-built_in">print</span>(request.method)                   <span class="hljs-comment"># 路由无论如何定义都无法请求到该请求！！！</span><br>        users = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> user: user[<span class="hljs-string">&#x27;name&#x27;</span>] == user_name, self.users))<br>        user = users[<span class="hljs-number">0</span>]                         <span class="hljs-comment"># 使用hidden input传递模拟put请求</span><br>        <span class="hljs-keyword">if</span> request.form.get(<span class="hljs-string">&#x27;_method&#x27;</span>) == <span class="hljs-string">&#x27;PUT&#x27;</span>: <br>            age = request.form.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br>            email = request.form.get(<span class="hljs-string">&#x27;email&#x27;</span>)<br>            user[<span class="hljs-string">&#x27;age&#x27;</span>] = age                   <span class="hljs-comment"># 更新用户信息</span><br>            user[<span class="hljs-string">&#x27;email&#x27;</span>] = email<br>            self.save_users()<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;user_get&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;apiedit.html&#x27;</span>, user_name=user_name)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self, user_name=<span class="hljs-literal">None</span></span>):           <span class="hljs-comment"># 删除指定用户的代码，修改与删除功能未实现！</span><br>        <span class="hljs-keyword">pass</span><br>        <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register_api</span>(<span class="hljs-params">view, endpoint, url, pk=<span class="hljs-string">&#x27;name&#x27;</span>, pk_type=<span class="hljs-string">&#x27;string&#x27;</span></span>):<br>    view_func = view.as_view(endpoint)<br>    app.add_url_rule(url, view_func=view_func, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br>    app.add_url_rule(url, view_func=view_func, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>])<br>    app.add_url_rule(<span class="hljs-string">&#x27;%s&lt;%s:%s&gt;&#x27;</span> % (url, pk_type, pk), view_func=view_func, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;PUT&#x27;</span>])<br><br><br>register_api(UserAPI, <span class="hljs-string">&#x27;user_get&#x27;</span>, <span class="hljs-string">&#x27;/users/&#x27;</span>, pk=<span class="hljs-string">&#x27;user_name&#x27;</span>)<br>register_api(UserAPI, <span class="hljs-string">&#x27;user_post&#x27;</span>, <span class="hljs-string">&#x27;/users/add/&#x27;</span>)<br>register_api(UserAPI, <span class="hljs-string">&#x27;user_put&#x27;</span>, <span class="hljs-string">&#x27;/users/edit/&#x27;</span>, pk=<span class="hljs-string">&#x27;user_name&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="1-apidata-json"><a href="#1-apidata-json" class="headerlink" title="(1) apidata.json"></a>(1) apidata.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">32</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test@126.com&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mike&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Mike@example.com&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Adminstator&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;27&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Adminstator@qq.com&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><h4 id="2-apiadds-html"><a href="#2-apiadds-html" class="headerlink" title="(2) apiadds.html"></a>(2) apiadds.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>添加用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;user_post&#x27;) &#125;&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return check()&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> name = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;name&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> age = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;age&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> email = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;email&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&#x27;&#x27;</span> || age === <span class="hljs-string">&#x27;&#x27;</span> || email === <span class="hljs-string">&#x27;&#x27;</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请先把信息填写完整，再进行提交！&#x27;</span>);</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;          <span class="hljs-comment">// 防止表单提交</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-apiedit-html"><a href="#3-apiedit-html" class="headerlink" title="(3) apiedit.html"></a>(3) apiedit.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>修改用户<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    &#123;% for user in users %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>修改用户“&#123;&#123; user.name &#125;&#125;”信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;user_put&#x27;, user_name=user.name) &#125;&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; user.age &#125;&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; user.email &#125;&#125;&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保存&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">formaction</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;user_get&#x27;) &#125;&#125;&quot;</span>&gt;</span><br>                    取消<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    &#123;% endfor %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-apiusers-html"><a href="#4-apiusers-html" class="headerlink" title="(4) apiusers.html"></a>(4) apiusers.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>用户信息<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">table</span> &#123;<span class="hljs-attribute">margin</span>: auto; <span class="hljs-attribute">border-collapse</span>: collapse;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">td</span>, <span class="hljs-selector-tag">th</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span>; <span class="hljs-attribute">text-align</span>: left;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">th</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#333</span>; <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>; <span class="hljs-attribute">text-align</span>: center;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">td</span> &#123;<span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>识别码<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% for user in users %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; user.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; user.email &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;user_put&#x27;, user_name=user.name) &#125;&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;PUT&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;user_post&#x27;) &#125;&#125;&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>添加用户<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="5-上下文作用域"><a href="#5-上下文作用域" class="headerlink" title="5 上下文作用域"></a>5 上下文作用域</h1><ul><li>上下文作用域<ul><li>应用上下文，Application Context。<ul><li>是整个Flask应用的上下文环境，用于在不同的线程中共享Flask的应用实例。</li><li>使用<code>app.app_context()</code>显式创建，也可通过Flask的方法和函数隐式创建。</li></ul></li><li>请求上下文，Request Context。<ul><li>是在每个HTTP请求中创建的上下文，包含了当前请求及其相关信息。</li><li>在处理请求的过程中，将创建一个请求上下文，然后将请求对象存储在全局变量request中。</li><li>可以访问到请求对象、会话对象和其他工具函数，例如：<code>url_for</code>、<code>render_template</code>等。</li></ul></li><li>测试上下文，Test Context。<ul><li>是在Flask进行单元测试时使用的上下文环境。</li><li>可使用<code>app.test_request_context()</code>显式创建，也可使用FlaskClient类隐式创建。</li><li>可以访问到Flask的应用实例、请求对象和响应对象，从而进行针对Flask应用的测试。</li><li>还可以访问Flask提供的测试工具函数，例如：<code>jsonify</code>、<code>make_response</code>等。</li></ul></li></ul></li></ul><h2 id="5-1-应用上下文"><a href="#5-1-应用上下文" class="headerlink" title="5-1 应用上下文"></a>5-1 应用上下文</h2><ul><li>应用上下文<ul><li>隐式创建，适用于大多情况。<ul><li>默认的创建方式，运行应用时每个请求都会隐式地创建应用上下文。</li><li>方便使用，不需要额外的代码就可以在Flask中访问g对象来共享数据。</li></ul></li><li>显式创建，适用于特殊场景。<ul><li>需要手动创建应用上下文对象，使用更加灵活，可以在请求之外的地方使用应用上下文对象。</li><li>例如测试Flask应用时，可能需要显式创建应用上下文来测试应用中的某部分，以确保正确性。</li></ul></li></ul></li></ul><h4 id="1-隐式创建"><a href="#1-隐式创建" class="headerlink" title="(1) 隐式创建"></a>(1) 隐式创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, g, current_app         <span class="hljs-comment"># 使用g对象来存储和共享应用上下文中的数据</span><br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># 定义一个路由函数index</span><br>    app_name = current_app.name                 <span class="hljs-comment"># 在视图函数中获取应用上下文的属性</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;应用名：&quot;</span>, app_name)<br><br>    g.username = <span class="hljs-string">&#x27;administrator&#x27;</span>                <span class="hljs-comment"># 访问根路径时使用g对象将用户名存储在应用上下文中</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;用户名：&quot;</span>, g.username)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello, Flask!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:                      <span class="hljs-comment"># 返回响应后，应用上下文将被弹出</span><br>    app.run(debug=<span class="hljs-literal">True</span>)                         <span class="hljs-comment"># 确保每个请求之间的数据隔离</span><br></code></pre></td></tr></table></figure><h4 id="2-显式创建"><a href="#2-显式创建" class="headerlink" title="(2) 显式创建"></a>(2) 显式创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, g<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">with</span> app.app_context():                         <span class="hljs-comment"># 通过使用上下文管理器来显式创建Flask应用上下文</span><br>    g.my_variable = <span class="hljs-literal">None</span>                        <span class="hljs-comment"># 设置全局变量默认值，将其传递到路由处理函数中</span><br><br><span class="hljs-meta">    @app.before_request</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_my_variable</span>():<br>        g.my_variable = <span class="hljs-string">&#x27;Hello, Flask!&#x27;</span>         <span class="hljs-comment"># 执行路由处理函数前，设置g.my_variable变量</span><br><br><span class="hljs-meta">    @app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)            </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_my_variable</span>():<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;<span class="hljs-subst">&#123;g.my_variable&#125;</span>&lt;/center&gt;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:                      <span class="hljs-comment"># 命令函数结束后，应用上下文将被弹出</span><br>    app.run(debug=<span class="hljs-literal">True</span>)                         <span class="hljs-comment"># 确保每个命令之间的数据隔离</span><br></code></pre></td></tr></table></figure><h2 id="5-2-请求上下文"><a href="#5-2-请求上下文" class="headerlink" title="5-2 请求上下文"></a>5-2 请求上下文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># 只在请求处理函数中才能使用request对象，否则抛出异常</span><br>    url = request.url                           <span class="hljs-comment"># 获取当前请求URL</span><br>    path = request.path                         <span class="hljs-comment"># 获取当前请求路径，request对象是Flask的全局变量</span><br>    method = request.method                     <span class="hljs-comment"># 获取当前请求方法</span><br>    headers = request.headers                   <span class="hljs-comment"># 获取当前请求头部信息</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;div style=&quot;text-align:center;&quot;&gt;&#x27;</span> \<br>           <span class="hljs-string">f&#x27;&lt;p&gt;Request Path: <span class="hljs-subst">&#123;path&#125;</span>&lt;/p&gt;&lt;p&gt;Request Method: <span class="hljs-subst">&#123;method&#125;</span>&lt;/p&gt;&#x27;</span> \<br>           <span class="hljs-string">f&#x27;&lt;p&gt;Request URL: <span class="hljs-subst">&#123;url&#125;</span>&lt;/p&gt;&lt;p&gt;Request Headers: <span class="hljs-subst">&#123;headers&#125;</span>&lt;/p&gt;&lt;/div&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="1-回调函数"><a href="#1-回调函数" class="headerlink" title="(1) 回调函数"></a>(1) 回调函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.before_request                             </span><span class="hljs-comment"># 在每个请求处理之前执行的回调函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">before_request</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; * 请求处理前---执行&#x27;</span>)<br><br><br><span class="hljs-meta">@app.after_request                              </span><span class="hljs-comment"># 在每个请求处理之后执行的回调函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">after_request</span>(<span class="hljs-params">response</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; * 请求处理后---执行&#x27;</span>)<br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-meta">@app.teardown_request                           </span><span class="hljs-comment"># 在每个请求处理完成并响应客户端后执行的回调函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_request</span>(<span class="hljs-params">exc</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; * 请求处理完成并响应客户端后---执行&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># 只在请求处理函数中才能使用request对象，否则抛出异常</span><br>    url = request.url                           <span class="hljs-comment"># 获取当前请求URL</span><br>    method = request.method                     <span class="hljs-comment"># 获取当前请求方法</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;div style=&quot;text-align:center;&quot;&gt;&#x27;</span> \<br>           <span class="hljs-string">f&#x27;&lt;p&gt;Request Method: <span class="hljs-subst">&#123;method&#125;</span>&lt;/p&gt;&lt;p&gt;Request URL: <span class="hljs-subst">&#123;url&#125;</span>&lt;/p&gt;&lt;/div&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="(2) 错误处理"></a>(2) 错误处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)             <span class="hljs-comment"># 定义一个路由，获取表单中的名字</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:                                <span class="hljs-comment"># 名字为空时使用ValueError抛出异常</span><br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Name is required.&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Message: Hello, <span class="hljs-subst">&#123;name&#125;</span>!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params">ValueError</span>)                   </span><span class="hljs-comment"># 触发错误处理机制，调用page_not_found</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_not_found</span>(<span class="hljs-params">error</span>):                      <span class="hljs-comment"># 404错误，属于页面错误</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(error)&#125;</span>&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="3-全局错误"><a href="#3-全局错误" class="headerlink" title="(3) 全局错误"></a>(3) 全局错误</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Hello, Flask!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/divide/&lt;int:num&gt;&#x27;</span></span>)                 </span><span class="hljs-comment"># 访问[http://127.0.0.1:5000/divide/0]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">num</span>):                                <span class="hljs-comment"># 若传递num为0，抛出异常</span><br>    result = <span class="hljs-number">100</span> / num                          <span class="hljs-comment"># 将被Flask全局错误处理捕获</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Result: <span class="hljs-subst">&#123;result&#125;</span>.&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params">Exception</span>)                    </span><span class="hljs-comment"># 捕获到异常，调用handle_exception</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_exception</span>(<span class="hljs-params">e</span>):                        <span class="hljs-comment"># 500页面错误，Internal server error</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;An error occurred: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="(4) 异常处理"></a>(4) 异常处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;DEBUG&#x27;</span>] = <span class="hljs-literal">True</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># 请求没有传递name参数，抛出ValueError</span><br>    name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:                                        <span class="hljs-comment"># 使用try...except语句处理异常</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:                            <span class="hljs-comment"># 使用raise语句手动触发ValueError异常</span><br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Name is missing.&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        app.logger.error(<span class="hljs-string">f&#x27;Error handling request: <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&lt;/center&gt;&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Message: Hello, <span class="hljs-subst">&#123;name&#125;</span>!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/bye&#x27;</span></span>)                              </span><span class="hljs-comment"># 手动抛出一个Exception异常</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bye</span>():                                      <span class="hljs-comment"># 访问[127.0.0.1:5000/bye]</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Oops, Something went wrong.&#x27;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        app.logger.error(<span class="hljs-string">f&#x27;Error handling request: <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Error: <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.before_request                             </span><span class="hljs-comment"># 在请求到达应用之前，记录请求日志</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">before_request</span>():<br>    app.logger.info(<span class="hljs-string">f&#x27;Request received: <span class="hljs-subst">&#123;request.method&#125;</span> <span class="hljs-subst">&#123;request.url&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-meta">@app.after_request                              </span><span class="hljs-comment"># 应用发送回答之前，记录HTTP响应代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">after_request</span>(<span class="hljs-params">response</span>):<br>    app.logger.info(<span class="hljs-string">f&#x27;Response sent: <span class="hljs-subst">&#123;response.status_code&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-meta">@app.teardown_request                           </span><span class="hljs-comment"># 请求的最后阶段，记录请求结束并打印错误信息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_request</span>(<span class="hljs-params">exception</span>):<br>    <span class="hljs-keyword">if</span> exception:<br>        app.logger.error(<span class="hljs-string">f&#x27;Error processing request: <span class="hljs-subst">&#123;exception&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        app.logger.info(<span class="hljs-string">&#x27;Request processing finished&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="5-日志记录"><a href="#5-日志记录" class="headerlink" title="(5) 日志记录"></a>(5) 日志记录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;DEBUG&#x27;</span>] = <span class="hljs-literal">True</span>                      <span class="hljs-comment"># 开启DEBUG模式</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># app.logger记录请求和应用程序状态</span><br>    app.logger.info(<span class="hljs-string">&#x27;Welcome request successful&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Message: Welcome to the Flask API!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/bye&#x27;</span></span>)                              </span><span class="hljs-comment"># 访问[127.0.0.1:5000/bye]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">bye</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:<br>        app.logger.error(<span class="hljs-string">&#x27;Name is missing in request&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Error: Name is missing.&lt;/center&gt;&#x27;</span><br>    app.logger.info(<span class="hljs-string">f&#x27;Hello request successful for name <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Message: Hello, <span class="hljs-subst">&#123;name&#125;</span>!&lt;center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="6-销毁回调"><a href="#6-销毁回调" class="headerlink" title="(6) 销毁回调"></a>(6) 销毁回调</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;DEBUG&#x27;</span>] = <span class="hljs-literal">True</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)        </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            &lt;form method=&quot;post&quot; style=&#x27;text-align: center;&#x27;&gt;</span><br><span class="hljs-string">                &lt;label for=&quot;name&quot;&gt;输入姓名&lt;/label&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;</span><br><span class="hljs-string">                &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="hljs-string">            &lt;/form&gt;</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Error: Name is missing.&lt;/center&gt;&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Message: Hello, <span class="hljs-subst">&#123;name&#125;</span>!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-meta">@app.before_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">before_request</span>():<br>    app.logger.info(<span class="hljs-string">f&#x27;Request received: <span class="hljs-subst">&#123;request.method&#125;</span> <span class="hljs-subst">&#123;request.url&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-meta">@app.after_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">after_request</span>(<span class="hljs-params">response</span>):<br>    app.logger.info(<span class="hljs-string">f&#x27;Response sent: <span class="hljs-subst">&#123;response.status_code&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-meta">@app.teardown_request                           </span><span class="hljs-comment"># 销毁回调，对请求结束后进行清理操作</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">teardown_request</span>(<span class="hljs-params">exception=<span class="hljs-literal">None</span></span>):           <span class="hljs-comment"># 请求结束时teardown_request函数将被自动调用</span><br>    <span class="hljs-keyword">if</span> exception:<br>        app.logger.error(<span class="hljs-string">f&#x27;Error processing request: <span class="hljs-subst">&#123;exception&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        app.logger.info(<span class="hljs-string">&#x27;Request processing finished&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="7-留意代理"><a href="#7-留意代理" class="headerlink" title="(7) 留意代理"></a>(7) 留意代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, current_app<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">worker</span>():<br>    <span class="hljs-keyword">with</span> app.app_context():                     <span class="hljs-comment"># 在新线程中打开应用程序上下文</span><br>        <span class="hljs-keyword">with</span> app.test_request_context():        <span class="hljs-comment"># 推送测试请求上下文</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求方法：&quot;</span> + request.method)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;应用名称：&quot;</span> + current_app._get_current_object().name)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># _get_current_object()可获取应用程序对象而非代理对象</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br>    t = threading.Thread(target=worker)<br>    t.start()<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello, Flask!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="5-3-测试上下文"><a href="#5-3-测试上下文" class="headerlink" title="5-3 测试上下文"></a>5-3 测试上下文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> unittest                                 <span class="hljs-comment"># test_context.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;TESTING&#x27;</span>] = <span class="hljs-literal">True</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            &lt;form method=&quot;post&quot; style=&#x27;text-align: center;&#x27;&gt;</span><br><span class="hljs-string">                &lt;label for=&quot;name&quot;&gt;输入姓名&lt;/label&gt;</span><br><span class="hljs-string">                &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot;&gt;</span><br><span class="hljs-string">                &lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="hljs-string">            &lt;/form&gt;</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = request.form.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Error: Name is missing.&lt;/center&gt;&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;Message: Hello, <span class="hljs-subst">&#123;name&#125;</span>!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestApp</span>(unittest.TestCase):               <span class="hljs-comment"># 定义了两个测试用例</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setUp</span>(<span class="hljs-params">self</span>):<br>        self.app = app.test_client()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_index_get</span>(<span class="hljs-params">self</span>):                   <span class="hljs-comment"># 一个测试请求主页时的行为</span><br>        response = self.app.get(<span class="hljs-string">&#x27;/&#x27;</span>)            <span class="hljs-comment"># 使用测试客户端来发送模拟请求</span><br>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)<br>        self.assertIn(<span class="hljs-string">b&#x27;&lt;form&#x27;</span>, response.data)  <span class="hljs-comment"># 并断言响应是否符合预期</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_index_post</span>(<span class="hljs-params">self</span>):                  <span class="hljs-comment"># 一个测试提交表单时的行为</span><br>        response = self.app.post(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)<br>        self.assertIn(<span class="hljs-string">b&#x27;&lt;center&gt;Error: Name is missing.&lt;/center&gt;&#x27;</span>, response.data)<br><br>        response = self.app.post(<span class="hljs-string">&#x27;/&#x27;</span>, data=&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>&#125;)<br>        self.assertEqual(response.status_code, <span class="hljs-number">200</span>)<br>        self.assertIn(<span class="hljs-string">b&#x27;&lt;center&gt;Message: Hello, Alice!&lt;/center&gt;&#x27;</span>, response.data)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:                      <span class="hljs-comment"># 命令python test_context.py执行该测试用例</span><br>    unittest.main()                             <span class="hljs-comment"># 都通过为OK，若其中任何一个失败，则FAILED</span><br></code></pre></td></tr></table></figure><h1 id="6-蓝图实现模块化"><a href="#6-蓝图实现模块化" class="headerlink" title="6 蓝图实现模块化"></a>6 蓝图实现模块化</h1><ul><li>蓝图实现模块化<ul><li>允许把不同的URL请求处理程序组成一个蓝图，用于管理应用程序的不同功能部分，使代码易于维护和扩展。</li><li>每个模块相互独立，可以单独测试和调试，每个蓝图都有自己的路由和视图，可在主应用程序中注册和卸载。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint                     <span class="hljs-comment"># module.py</span><br><br>blueprint = Blueprint(<span class="hljs-string">&#x27;blueprint&#x27;</span>, __name__)    <span class="hljs-comment"># Blueprint类的构造函数需蓝图名称和模块导入名称</span><br><br><br><span class="hljs-meta">@blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    num = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(num)<br>    variable = <span class="hljs-string">f&#x27;Hello, Flask! Num: <span class="hljs-subst">&#123;num&#125;</span>.&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;&lt;center&gt;<span class="hljs-subst">&#123;variable&#125;</span>&lt;/center&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="6-1-注册蓝图"><a href="#6-1-注册蓝图" class="headerlink" title="6-1 注册蓝图"></a>6-1 注册蓝图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask                         <span class="hljs-comment"># app.py</span><br><span class="hljs-keyword">from</span> module <span class="hljs-keyword">import</span> blueprint                    <span class="hljs-comment"># 与module.py关联</span><br><br>app = Flask(__name__)                           <span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><br>app.register_blueprint(blueprint)               <span class="hljs-comment"># 在主应用程序中注册该蓝图</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)                         <span class="hljs-comment"># 命令python app.py执行该应用</span><br></code></pre></td></tr></table></figure><h2 id="6-2-静态文件"><a href="#6-2-静态文件" class="headerlink" title="6-2 静态文件"></a>6-2 静态文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint                     <span class="hljs-comment"># module.py</span><br><br><span class="hljs-comment"># 使用蓝图对象的static_folder参数指定静态文件的文件夹为“static”</span><br><span class="hljs-comment"># static_url_path参数指定访问该文件夹的路径为“/static”，可放置任何静态文件，例如CSS、JavaScript或图像</span><br>blueprint = Blueprint(<span class="hljs-string">&#x27;blueprint&#x27;</span>, __name__, static_folder=<span class="hljs-string">&#x27;static&#x27;</span>, static_url_path=<span class="hljs-string">&#x27;/static&#x27;</span>)<br><br><span class="hljs-comment"># 通过以下方式在模板中引用上述指定的静态文件</span><br><span class="hljs-comment"># &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&#123;&#123;url_for(&#x27;blueprint.static&#x27;, filename=&#x27;style.css&#x27;)&#125;&#125;&quot;&gt;</span><br><span class="hljs-comment"># &lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123;url_for(&#x27;blueprint.static&#x27;, filename=&#x27;script.js&#x27;)&#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-comment"># &lt;img src=&quot;&#123;&#123;url_for(&#x27;blueprint.static&#x27;, filename=&#x27;image.jpg&#x27;)&#125;&#125;&quot; alt=&quot;Image&quot;&gt;</span><br><br><br><span class="hljs-meta">@blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello, Flask!&lt;/center&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="6-3-资源文件夹"><a href="#6-3-资源文件夹" class="headerlink" title="6-3 资源文件夹"></a>6-3 资源文件夹</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">&lt;!-- 项目目录结构 --&gt;<br><span class="hljs-bullet">-</span> app.py                                          &lt;!-- 内容不变 --&gt;<br><span class="hljs-bullet">-</span> module.py                                       &lt;!-- 修改文件 --&gt;<br><span class="hljs-bullet">-</span> static<br><span class="hljs-bullet">    -</span> data.json<br><span class="hljs-bullet">-</span> templates<br><span class="hljs-bullet">    -</span> index.html<br>&lt;!-- 命令窗口下执行&#x27;python app.py&#x27;，访问[http://127.0.0.1:5000] --&gt;<br></code></pre></td></tr></table></figure><h4 id="1-data-json"><a href="#1-data-json" class="headerlink" title="(1) data.json"></a>(1) data.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;My Website&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">30</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;male&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;john@example.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;phone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123-456-7890&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;street&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;123 Main St&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Los Angeles&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;state&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CA&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;zip&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;90012&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;interests&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;music&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;travel&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;movies&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-module-py"><a href="#2-module-py" class="headerlink" title="(2) module.py"></a>(2) module.py</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>blueprint = Blueprint(<span class="hljs-string">&#x27;blueprint&#x27;</span>, __name__,    <span class="hljs-comment"># root_path指定应用程序的根目录</span><br>                      static_folder=<span class="hljs-string">&#x27;static&#x27;</span>,<br>                      static_url_path=<span class="hljs-string">&#x27;/static&#x27;</span>,<br>                      template_folder=<span class="hljs-string">&#x27;templates&#x27;</span>,<br>                      root_path=os.path.abspath(os.path.dirname(__file__)))<br><br><br><span class="hljs-meta">@blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                           </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">with</span> blueprint.open_resource(<span class="hljs-string">&#x27;static/data.json&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = json.load(f)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, data=data)<br></code></pre></td></tr></table></figure><h4 id="3-index-html"><a href="#3-index-html" class="headerlink" title="(3) index.html"></a>(3) index.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>&#123;&#123; data.title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: Arial, Helvetica, sans-serif;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;  <span class="hljs-comment">/* 将页面内容居中显示 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>: blue;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;<span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5em</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">table</span> &#123;<span class="hljs-attribute">margin</span>: auto; <span class="hljs-attribute">border-collapse</span>: collapse;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:hover</span> &#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#f5f5f5</span>;&#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">td</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">8px</span>; <span class="hljs-attribute">text-align</span>: left; <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;&#123;data.name&#125;&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You are &#123;&#123;data.age&#125;&#125; years old, and your email is &#123;&#123;data.email&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>You live in &#123;&#123;data.address.city&#125;&#125;, &#123;&#123;data.address.state&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Interests are as follows<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        &#123;% for interest in data.interests %&#125;<br>            <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; interest &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>        &#123;% endfor %&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-4-蓝图构造URL"><a href="#6-4-蓝图构造URL" class="headerlink" title="6-4 蓝图构造URL"></a>6-4 蓝图构造URL</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, url_for, Flask<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>] = <span class="hljs-string">&#x27;localhost:5000&#x27;</span>    <span class="hljs-comment"># 设置SERVER_NAME配置</span><br>blueprint = Blueprint(<span class="hljs-string">&#x27;bp&#x27;</span>, __name__, url_prefix=<span class="hljs-string">&#x27;/my&#x27;</span>)<br><br><br><span class="hljs-meta">@blueprint.route(<span class="hljs-params"><span class="hljs-string">&#x27;/index&#x27;</span></span>)                      </span><span class="hljs-comment"># url_prefix指蓝图的URL前缀</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():                                    <span class="hljs-comment"># 访问[http://localhost:5000/my/index]</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello, Flask!&lt;/center&gt;&#x27;</span>     <span class="hljs-comment"># 访问[http://127.0.0.1:5000/my/index]无效</span><br><br><br>app.register_blueprint(blueprint)               <span class="hljs-comment"># 注册蓝图</span><br><br><span class="hljs-keyword">with</span> app.app_context():<br>    url = url_for(<span class="hljs-string">&#x27;bp.index&#x27;</span>)                   <span class="hljs-comment"># 使用蓝图构造URL</span><br>    <span class="hljs-built_in">print</span>(url)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h1 id="7-Flask与Shell结合"><a href="#7-Flask与Shell结合" class="headerlink" title="7 Flask与Shell结合"></a>7 Flask与Shell结合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, g<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.before_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">before_request</span>():<br>    g.request_start_time = time.time()          <span class="hljs-comment"># request_start_time变量记录请求开始时间</span><br><br><br><span class="hljs-meta">@app.after_request</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">after_request</span>(<span class="hljs-params">response</span>):                    <span class="hljs-comment"># 计算请求执行时间，并使用日志记录功能记录该时间</span><br>    request_time = time.time() - g.request_start_time<br>    app.logger.info(<span class="hljs-string">&#x27;Request Time: %f&#x27;</span>, request_time)<br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)                                 </span><span class="hljs-comment"># 访问[127.0.0.1:5000]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;center&gt;Hello, Flask!&lt;/center&gt;&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">with</span> app.app_context():                     <span class="hljs-comment"># 创建一个请求上下文来启动Flask应用程序</span><br>        app.run(debug=<span class="hljs-literal">True</span>)        <br><br><br><span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string"># 进入当前文件目录中，鼠标右击Git Bash Here，打开一个终端模拟器，进行以下交互式操作</span><br><span class="hljs-string"># 若报错Error: Could not locate a Flask application. Use ... in the current directory.</span><br><span class="hljs-string">$ export FLASK_APP=yourfilename                 # 注意：这里文件不需要扩展名</span><br><span class="hljs-string">$ flask shell</span><br><span class="hljs-string">Python 3.9.13 (main, Oct 25 2021, 23:51:50) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class="hljs-string">App: app</span><br><span class="hljs-string">Instance: D:\...\Flask\instance</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>app                                         # 返回Flask应用程序定义的对象</span><br><span class="hljs-string">&lt;Flask &#x27;app&#x27;&gt;</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>ctx = app.test_request_context()            # 创建一个测试请求上下文对象ctx</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>ctx.push()                                  # 将ctx推到栈中，以便访问上下文中的变量和对象</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>app.preprocess_request()                    # 激活预处理器函数，将在请求处理之前自动调用</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>app.process_response(app.response_class())  # 激活相应处理器函数，负责处理产生HTTP响应的内容</span><br><span class="hljs-string">&lt;Response 0 bytes [200 OK]&gt;</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>ctx.pop()                                   # 当测试请求上下文处理完毕后，需要将其从栈中弹出</span><br><span class="hljs-string"><span class="hljs-meta">&gt;&gt;&gt; </span>exit()                                      # 退出Shell会话</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python MongoDB</title>
    <link href="/2021/09/03/python/python12-python-mongodb/"/>
    <url>/2021/09/03/python/python12-python-mongodb/</url>
    
    <content type="html"><![CDATA[<p>MongoDB是一个基于分布式文件存储的数据库，由C++语言编写，旨在为Web应用提供可扩展的高性能数据存储解决方案。</p><span id="more"></span><h1 id="1-MongoDB"><a href="#1-MongoDB" class="headerlink" title="1 MongoDB"></a>1 MongoDB</h1><ul><li>MongoDB<ul><li>Python需要MongoDB驱动程序，用以访问MongoDB数据库，使用PyMongo驱动程序。</li><li>使用PIP进行下载并安装驱动，命令窗口输入：<code>python -m pip install pymongo</code>。</li><li>命令窗口下进入Python交互界面，输入<code>import pymongo</code>回车，没报错说明成功安装。</li><li>下载安装并配置MongoDB，参看“<a href="https://blog.csdn.net/yuan2019035055/article/details/123031732">MongoDB数据库入门到精通看这一篇就够了</a>”。</li></ul></li></ul><h2 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1-1 创建数据库"></a>1-1 创建数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br>mydic = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;Highway 37&#x27;</span>&#125;<br><br>x = mycol.insert_one(mydic)             <span class="hljs-comment"># 给customers集合插入数据</span><br><span class="hljs-built_in">print</span>(x)                                <span class="hljs-comment"># 只有给创建的数据库，创建集合及插入数据后，才能查询到该数据库</span><br></code></pre></td></tr></table></figure><h2 id="1-2-查询数据库"><a href="#1-2-查询数据库" class="headerlink" title="1-2 查询数据库"></a>1-2 查询数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br><span class="hljs-comment"># dbslists = myclient.database_names()  # 旧版使用    </span><br>dbslists = myclient.list_database_names()<br><br><span class="hljs-built_in">print</span>(dbslists)                         <span class="hljs-comment"># 返回数据库列表</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;mydatabase&#x27;</span> <span class="hljs-keyword">in</span> dbslists:            <span class="hljs-comment"># 按名称查询特定数据库</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The database &quot;mydatabase&quot; exists.&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-查集合方法"><a href="#1-3-查集合方法" class="headerlink" title="1-3 查集合方法"></a>1-3 查集合方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br><span class="hljs-comment"># collists = mydbs.collection_names()   # 旧版使用</span><br>collists = mydbs.list_collection_names()<br><br><span class="hljs-built_in">print</span>(collists)                         <span class="hljs-comment"># 返回集合列表</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;customers&#x27;</span> <span class="hljs-keyword">in</span> collists:             <span class="hljs-comment"># 按名称查询特定集合</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;The collection &quot;customers&quot; exists.&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-插入记录"><a href="#2-插入记录" class="headerlink" title="2 插入记录"></a>2 插入记录</h1><ul><li>插入记录<ul><li>不指定id字段时，MongoDB会自动添加一个，并给每个记录分配一个唯一的id。</li><li>插入单行记录：<code>insert_one()</code>。</li><li>插入多行记录：<code>insert_many()</code>，第一个参数是一个包含字典的列表。</li></ul></li></ul><h2 id="2-1-返回id字段"><a href="#2-1-返回id字段" class="headerlink" title="2-1 返回id字段"></a>2-1 返回id字段</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br>mydic = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>: <span class="hljs-string">&#x27;Lowstreet 27&#x27;</span>&#125;<br><br>x = mycol.insert_one(mydic)             <span class="hljs-comment"># 插入另一条数据</span><br><span class="hljs-built_in">print</span>(x.inserted_id)                    <span class="hljs-comment"># 返回id字段的值</span><br></code></pre></td></tr></table></figure><h2 id="2-2-多记录插入"><a href="#2-2-多记录插入" class="headerlink" title="2-2 多记录插入"></a>2-2 多记录插入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]         <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]             <span class="hljs-comment"># 创建名为customers的集合</span><br>mydic = [<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Amy&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Apple st 652&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Hannah&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Mountain 21&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Michael&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Valley 345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Sandy&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Ocean blvd 2&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Betty&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Green Grass 1&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Richard&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Sky st 331&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Susan&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;One way 98&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Vicky&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Yellow Garden 2&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ben&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Park Lane 38&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;William&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Central st 954&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Chuck&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Main Road 989&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Viola&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Sideway 1633&quot;</span>&#125;<br>]<br><br>x = mycol.insert_many(mydic)<br><span class="hljs-built_in">print</span>(x.inserted_ids)                  <span class="hljs-comment"># 返回插入的多行记录id值</span><br></code></pre></td></tr></table></figure><h2 id="2-3-插入指定id"><a href="#2-3-插入指定id" class="headerlink" title="2-3 插入指定id"></a>2-3 插入指定id</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]         <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]             <span class="hljs-comment"># 创建名为customers的集合</span><br>mydic = [<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Highway 37&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Lowstreet 27&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Amy&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Apple st 652&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Hannah&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Mountain 21&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Michael&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Valley 345&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Sandy&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Ocean blvd 2&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">7</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Betty&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Green Grass 1&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">8</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Richard&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Sky st 331&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">9</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Susan&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;One way 98&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Vicky&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Yellow Garden 2&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Ben&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Park Lane 38&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">12</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;William&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Central st 954&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">13</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Chuck&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Main Road 989&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">14</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Viola&quot;</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Sideway 1633&quot;</span>&#125;<br>]<br><br>x = mycol.insert_many(mydic)<br><span class="hljs-built_in">print</span>(x.inserted_ids)                  <span class="hljs-comment"># 返回插入的多行记录id值</span><br></code></pre></td></tr></table></figure><h1 id="3-查询记录"><a href="#3-查询记录" class="headerlink" title="3 查询记录"></a>3 查询记录</h1><ul><li>查询记录<ul><li>查集合中的第一条记录使用<code>find_one()</code>方法。</li><li>查集合中的所有记录则可以使用<code>find()</code>方法。<ul><li>参数一是一个查询对象，参数二是一个对象(可选)，描述要在结果中包含哪些字段。</li><li>当且仅当同一个对象中的其中一个值为id字段时，才能同时指定0和1值，否则报错。</li></ul></li><li>进行高级查询，可以使用修饰符作为查询对象中的值。</li><li>使用正则表达式进行过滤查询，只能用于查询字符串。</li><li><code>sort()</code>方法按升序或降序对结果进行排序(默认升序)，接受fieldname和direction参数。</li><li>通过使用<code>limit()</code>方法，定义需要返回记录的个数，限制查询结果返回对应个数的记录。</li></ul></li></ul><h2 id="3-1-单条记录"><a href="#3-1-单条记录" class="headerlink" title="3-1 单条记录"></a>3-1 单条记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>x = mycol.find_one()                    <span class="hljs-comment"># 查询集合中的第一个记录</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="3-2-所有记录"><a href="#3-2-所有记录" class="headerlink" title="3-2 所有记录"></a>3-2 所有记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find():                  <span class="hljs-comment"># 查询集合中的所有记录</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="3-3-指定记录"><a href="#3-3-指定记录" class="headerlink" title="3-3 指定记录"></a>3-3 指定记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]         <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]             <span class="hljs-comment"># 创建名为customers的集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find(&#123;&#125;, &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-number">1</span>&#125;):<br>    <span class="hljs-built_in">print</span>(x)                           <span class="hljs-comment"># 只返回名称和地址，不返回id值</span><br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> mycol.find(&#123;&#125;, &#123;<span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-number">0</span>&#125;):<br>    <span class="hljs-built_in">print</span>(y)                           <span class="hljs-comment"># 返回结果中排除地址</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Park Lane 38&quot;</span>&#125;<br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> mycol.find(myque):            <span class="hljs-comment"># 查找地址为“Park Lane 38”的记录</span><br>    <span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h2 id="3-4-高级查询"><a href="#3-4-高级查询" class="headerlink" title="3-4 高级查询"></a>3-4 高级查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: &#123;<span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>&#125;&#125;       <span class="hljs-comment"># 查找地址以S及往后字母开头的记录</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find(myque):<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="3-5-正则过滤"><a href="#3-5-正则过滤" class="headerlink" title="3-5 正则过滤"></a>3-5 正则过滤</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: &#123;<span class="hljs-string">&quot;$regex&quot;</span>: <span class="hljs-string">&quot;^S&quot;</span>&#125;&#125;   <span class="hljs-comment"># 仅查找地址为字母S开头的记录</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find(myque):<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="3-6-升序排序"><a href="#3-6-升序排序" class="headerlink" title="3-6 升序排序"></a>3-6 升序排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find().sort(<span class="hljs-string">&#x27;name&#x27;</span>):     <span class="hljs-comment"># 按名称字母顺序对结果进行升序排序</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="3-7-降序排序"><a href="#3-7-降序排序" class="headerlink" title="3-7 降序排序"></a>3-7 降序排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find().sort(<span class="hljs-string">&#x27;name&#x27;</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(x)                            <span class="hljs-comment"># 按名称字母顺序对结果进行(反向)降序排序</span><br></code></pre></td></tr></table></figure><h2 id="3-8-限制查询"><a href="#3-8-限制查询" class="headerlink" title="3-8 限制查询"></a>3-8 限制查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>result = mycol.find().limit(<span class="hljs-number">5</span>)          <span class="hljs-comment"># 限制结果只返回5条记录</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="4-修改记录"><a href="#4-修改记录" class="headerlink" title="4 修改记录"></a>4 修改记录</h1><ul><li>修改记录<ul><li>修改一条记录：<code>update_one()</code>。<ul><li>第一个参数是一个查询对象，定义要修改的记录。</li><li>若查询到多个记录，则只修改第一个出现的记录。</li><li>第二个参数是定义记录新值的对象。</li></ul></li><li>修改多条记录：<code>update_many()</code>。</li></ul></li></ul><h2 id="4-1-修改单条记录"><a href="#4-1-修改单条记录" class="headerlink" title="4-1 修改单条记录"></a>4-1 修改单条记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]         <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]             <span class="hljs-comment"># 创建名为customers的集合</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Valley 345&quot;</span>&#125;      <span class="hljs-comment"># 将地址“Valley 345”改为“Canyon 123”</span><br>mynew = &#123;<span class="hljs-string">&quot;$set&quot;</span>: &#123;<span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Canyon 123&quot;</span>&#125;&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find():<br>    <span class="hljs-built_in">print</span>(x)                           <span class="hljs-comment"># 查询修改前的记录</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;**************************************************************************************&#x27;</span>)<br><br>mycol.update_one(myque, mynew)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find():<br>    <span class="hljs-built_in">print</span>(x)                           <span class="hljs-comment"># 查询修改后的记录</span><br></code></pre></td></tr></table></figure><h2 id="4-2-修改多条记录"><a href="#4-2-修改多条记录" class="headerlink" title="4-2 修改多条记录"></a>4-2 修改多条记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]         <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]             <span class="hljs-comment"># 创建名为customers的集合</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: &#123;<span class="hljs-string">&quot;$regex&quot;</span>: <span class="hljs-string">&quot;^S&quot;</span>&#125;&#125;  <span class="hljs-comment"># 将地址以字母S开头的记录，name都改为“Minnie”</span><br>mynew = &#123;<span class="hljs-string">&quot;$set&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Minnie&quot;</span>&#125;&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find():<br>    <span class="hljs-built_in">print</span>(x)                           <span class="hljs-comment"># 查询修改前的记录</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;**************************************************************************************&#x27;</span>)<br><br>y = mycol.update_many(myque, mynew)<br><span class="hljs-built_in">print</span>(y.modified_count, <span class="hljs-string">&#x27;documents updated.&#x27;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycol.find():<br>    <span class="hljs-built_in">print</span>(x)                           <span class="hljs-comment"># 查询修改后的记录</span><br></code></pre></td></tr></table></figure><h1 id="5-删除记录"><a href="#5-删除记录" class="headerlink" title="5 删除记录"></a>5 删除记录</h1><ul><li>删除记录<ul><li>删除单个记录：<code>delete_one()</code>方法。<ul><li>第一个参数是一个查询对象，定义要删除的文档。</li><li>若找到多个文档，则只会删除第一个出现的文档。</li></ul></li><li>删除多个记录：<code>delete_many()</code>方法。<ul><li>第一个参数定义了要删除哪些文档的查询对象。</li><li>要删除所有记录，将空查询对象传递给该方法。</li></ul></li></ul></li></ul><h2 id="5-1-删除单个记录"><a href="#5-1-删除单个记录" class="headerlink" title="5-1 删除单个记录"></a>5-1 删除单个记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-string">&quot;Mountain 21&quot;</span>&#125;      <span class="hljs-comment"># 删除地址为“Mountain 21”的记录</span><br>mycol.delete_one(myque)<br></code></pre></td></tr></table></figure><h2 id="5-2-删除多个记录"><a href="#5-2-删除多个记录" class="headerlink" title="5-2 删除多个记录"></a>5-2 删除多个记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>myque = &#123;<span class="hljs-string">&quot;address&quot;</span>: &#123;<span class="hljs-string">&quot;$regex&quot;</span>: <span class="hljs-string">&quot;^S&quot;</span>&#125;&#125;   <span class="hljs-comment"># 删除地址以字母S开头的所有记录</span><br>x = mycol.delete_many(myque)<br><span class="hljs-built_in">print</span>(x.deleted_count, <span class="hljs-string">&#x27;documents deleted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-3-删除所有记录"><a href="#5-3-删除所有记录" class="headerlink" title="5-3 删除所有记录"></a>5-3 删除所有记录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]          <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]              <span class="hljs-comment"># 创建名为customers的集合</span><br><br>x = mycol.delete_many(&#123;&#125;)               <span class="hljs-comment"># 删除集合中的所有记录</span><br><span class="hljs-built_in">print</span>(x.deleted_count, <span class="hljs-string">&#x27;documents deleted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="6-删除集合"><a href="#6-删除集合" class="headerlink" title="6 删除集合"></a>6 删除集合</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pymongo<br><br>myclient = pymongo.MongoClient(<span class="hljs-string">&#x27;mongodb://localhost:27017/&#x27;</span>)<br>mydbs = myclient[<span class="hljs-string">&#x27;mydatabase&#x27;</span>]         <span class="hljs-comment"># 创建mydatabase数据库</span><br>mycol = mydbs[<span class="hljs-string">&#x27;customers&#x27;</span>]             <span class="hljs-comment"># 创建名为customers的集合</span><br><br>mycol.drop()                           <span class="hljs-comment"># 删除名为customers的集合</span><br><br><span class="hljs-comment"># collists = mydbs.collection_names()  # 旧版使用</span><br>collists = mydbs.list_collection_names()<br><span class="hljs-built_in">print</span>(collists)                        <span class="hljs-comment"># 查询该数据库剩余的集合列表</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python MySQL</title>
    <link href="/2021/08/06/python/python11-python-mysql/"/>
    <url>/2021/08/06/python/python11-python-mysql/</url>
    
    <content type="html"><![CDATA[<p>Python可用于数据库应用程序，当前较为流行的一个开源关系型数据库管理系统是MySQL，由瑞典MySQL AB公司1995年开发。</p><span id="more"></span><h1 id="1-MySQL"><a href="#1-MySQL" class="headerlink" title="1 MySQL"></a>1 MySQL</h1><ul><li>MySQL<ul><li>Python需一个MySQL驱动程序，用于访问MySQL数据库，这里使用MySQL Connector驱动程序。</li><li>下载安装MySQL连接器，命令窗口输入：<code>python -m pip install mysql-connector-python</code>。</li><li>命令窗口下进入Python交互界面，输入<code>import mysql.connector</code>回车，没有报错说明成功安装。</li><li>MySQL：创建数据库-&gt;<code>CREATE DATABASE &lt;database-name&gt;</code>、查看数据库-&gt;<code>SHOW DATABASES</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(    <span class="hljs-comment"># 创建连接</span><br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,                   <span class="hljs-comment"># 自定义本地MySQL端口号为3366</span><br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>              <span class="hljs-comment"># MySQL默认密码</span><br>)<br><br><span class="hljs-built_in">print</span>(mydb)<br></code></pre></td></tr></table></figure><h2 id="1-1-创建数据库"><a href="#1-1-创建数据库" class="headerlink" title="1-1 创建数据库"></a>1-1 创建数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;CREATE DATABASE mydatabase&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-2-查看数据库"><a href="#1-2-查看数据库" class="headerlink" title="1-2 查看数据库"></a>1-2 查看数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;SHOW DATABASES&#x27;</span>)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycursor:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="1-3-连接数据库"><a href="#1-3-连接数据库" class="headerlink" title="1-3 连接数据库"></a>1-3 连接数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span>           <span class="hljs-comment"># 尝试连接数据库，若不存在将报错</span><br>)<br></code></pre></td></tr></table></figure><h1 id="2-创建数据表"><a href="#2-创建数据表" class="headerlink" title="2 创建数据表"></a>2 创建数据表</h1><ul><li>创建数据表<ul><li>MySQL：<code>CREATE TABLE &lt;table-name&gt; (&lt;variable-name&gt; VARCHAR(255), ... , &lt;variable-name&gt; VARCHAR(255))</code>。</li><li>查看表使用的命令-&gt;<code>SHOW TABLES</code>。</li><li>表存在时添加主键-&gt;<code>ALTER TABLE &lt;table-name&gt; ADD COLUMN &lt;variable-name&gt; INT AUTO_INCREMENT PRIMARY KEY</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># 创建一个名为customers的数据表</span><br>mycursor.execute(<span class="hljs-string">&#x27;CREATE TABLE customers (name VARCHAR(255), address VARCHAR(255))&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-1-查看数据表"><a href="#2-1-查看数据表" class="headerlink" title="2-1 查看数据表"></a>2-1 查看数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;SHOW TABLES&#x27;</span>)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycursor:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="2-2-创建唯一键"><a href="#2-2-创建唯一键" class="headerlink" title="2-2 创建唯一键"></a>2-2 创建唯一键</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br><span class="hljs-comment"># mycursor.execute(&#x27;CREATE TABLE customers \</span><br><span class="hljs-comment">#                 (id INT AUTO_INCREMENT PRIMARY KEY, \</span><br><span class="hljs-comment">#                 name VARCHAR(255), address VARCHAR(255))&#x27;</span><br><span class="hljs-comment">#                  )</span><br><br><span class="hljs-comment"># 该表已存在的情况下，使用ALTER TABLE关键字进行ADD COLUMN</span><br>mycursor.execute(<span class="hljs-string">&#x27;ALTER TABLE customers ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="3-插入数据表"><a href="#3-插入数据表" class="headerlink" title="3 插入数据表"></a>3 插入数据表</h1><ul><li>插入数据表<ul><li>MySQL：<code>INSERT INTO &lt;table-name&gt; (&lt;variable-name&gt;, ..., &lt;variable-name&gt;) VALUES (%s, ..., %s)</code>。</li><li>数据表同时插入多行数据：<code>executemany()</code>方法的第二个参数是元组列表。</li><li>获取表插入最后一行的ID：<code>lastrowid</code>通过询问游标对象获取插入的行ID。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;INSERT INTO customers (name, address) VALUES (%s, %s)&#x27;</span><br>val = (<span class="hljs-string">&#x27;Lucy&#x27;</span>, <span class="hljs-string">&#x27;Highway 21&#x27;</span>)<br>mycursor.execute(sql, val)<br><br>mydb.commit()                      <span class="hljs-comment"># 需要commit，否则不会对表进行任何更改</span><br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;record inserted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-1-表插入多行"><a href="#3-1-表插入多行" class="headerlink" title="3-1 表插入多行"></a>3-1 表插入多行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;INSERT INTO customers (name, address) VALUES (%s, %s)&#x27;</span><br>val = [                            <span class="hljs-comment"># executemany()方法的第二个参数val是元组列表</span><br>    (<span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;Lowstreet 4&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-string">&#x27;Apple st 652&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Hannah&#x27;</span>, <span class="hljs-string">&#x27;Mountain 21&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Valley 345&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Sandy&#x27;</span>, <span class="hljs-string">&#x27;Ocean blvd 2&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Betty&#x27;</span>, <span class="hljs-string">&#x27;Green Grass 1&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Richard&#x27;</span>, <span class="hljs-string">&#x27;Sky st 331&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Susan&#x27;</span>, <span class="hljs-string">&#x27;One way 98&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Vicky&#x27;</span>, <span class="hljs-string">&#x27;Yellow Garden 2&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Ben&#x27;</span>, <span class="hljs-string">&#x27;Park Lane 38&#x27;</span>),<br>    (<span class="hljs-string">&#x27;William&#x27;</span>, <span class="hljs-string">&#x27;Central st 954&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Chuck&#x27;</span>, <span class="hljs-string">&#x27;Main Road 989&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Viola&#x27;</span>, <span class="hljs-string">&#x27;Sideway 1633&#x27;</span>)<br>]<br>mycursor.executemany(sql, val)<br><br>mydb.commit()<br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;was inserted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-2-获取插入ID"><a href="#3-2-获取插入ID" class="headerlink" title="3-2 获取插入ID"></a>3-2 获取插入ID</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;INSERT INTO customers (name, address) VALUES (%s, %s)&#x27;</span><br>val = (<span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Blue Village&#x27;</span>)<br>mycursor.execute(sql, val)<br><br>mydb.commit()                      <span class="hljs-comment"># 通过询问游标对象来获取插入的行ID</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1 record inserted, ID: &#x27;</span>, mycursor.lastrowid)<br></code></pre></td></tr></table></figure><h1 id="4-查询数据表"><a href="#4-查询数据表" class="headerlink" title="4 查询数据表"></a>4 查询数据表</h1><ul><li>查询数据表<ul><li>MySQL：<code>SELECT * FROM &lt;table-name&gt;</code>，只查询第一行数据可以使用<code>fetchone()</code>方法。</li><li>查询选择列-&gt;<code>SELECT &lt;variable-name&gt;, ..., &lt;variable-name&gt; FROM &lt;table-name&gt;</code>。</li><li>查询指定值-&gt;<code>SELECT * FROM &lt;table-name&gt; WHERE &lt;variable-name&gt; = &quot; &lt;value&gt; &quot;</code>。</li><li>通配符查询-&gt;<code>SELECT * FROM &lt;table-name&gt; WHERE &lt;variable-name&gt; LIKE &quot;%&lt;value&gt;%&quot;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;SELECT * FROM customers&#x27;</span>)<br>myresult = mycursor.fetchall()     <span class="hljs-comment"># 获取表所有行</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-1-查询选择列"><a href="#4-1-查询选择列" class="headerlink" title="4-1 查询选择列"></a>4-1 查询选择列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;SELECT name, address FROM customers&#x27;</span>)<br>myresult = mycursor.fetchall()     <span class="hljs-comment"># 获取name和address列数据</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-2-只查询一行"><a href="#4-2-只查询一行" class="headerlink" title="4-2 只查询一行"></a>4-2 只查询一行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;SELECT * FROM customers&#x27;</span>)<br>myresult = mycursor.fetchone()     <span class="hljs-comment"># 使用fetchone()方法获取第一行数据</span><br><span class="hljs-built_in">print</span>(myresult)<br></code></pre></td></tr></table></figure><h2 id="4-3-查询指定值"><a href="#4-3-查询指定值" class="headerlink" title="4-3 查询指定值"></a>4-3 查询指定值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;SELECT * FROM customers WHERE address = &quot;Park Lane 38&quot;&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-4-通配符查询"><a href="#4-4-通配符查询" class="headerlink" title="4-4 通配符查询"></a>4-4 通配符查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;SELECT * FROM customers WHERE address LIKE &quot;%way%&quot;&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-5-防SQL注入"><a href="#4-5-防SQL注入" class="headerlink" title="4-5 防SQL注入"></a>4-5 防SQL注入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;SELECT * FROM customers WHERE address = %s&#x27;</span><br>adr = (<span class="hljs-string">&#x27;Yellow Garden 2&#x27;</span>, )<br>mycursor.execute(sql, adr)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-6-数据表排序"><a href="#4-6-数据表排序" class="headerlink" title="4-6 数据表排序"></a>4-6 数据表排序</h2><ul><li>数据表排序<ul><li>升序-&gt;<code>SELECT * FROM &lt;table-name&gt; ORDER BY &lt;variable-name&gt;</code>。</li><li>降序-&gt;<code>SELECT * FROM &lt;table-name&gt; ORDER BY &lt;variable-name&gt; DESC</code>。</li></ul></li></ul><h4 id="1-升序排序"><a href="#1-升序排序" class="headerlink" title="(1) 升序排序"></a>(1) 升序排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;SELECT * FROM customers ORDER BY name&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h4 id="2-降序排序"><a href="#2-降序排序" class="headerlink" title="(2) 降序排序"></a>(2) 降序排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;SELECT * FROM customers ORDER BY name DESC&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-7-查询表记录"><a href="#4-7-查询表记录" class="headerlink" title="4-7 查询表记录"></a>4-7 查询表记录</h2><ul><li>查询表记录<ul><li>查询数据表的前五条记录-&gt;<code>SELECT * FROM &lt;table-name&gt; LIMIT 5</code>。</li><li>位置三开始返回五条记录-&gt;<code>SELECT * FROM &lt;table-name&gt; LIMIT 5 OFFSET 2</code>。</li></ul></li></ul><h4 id="1-查询前五条"><a href="#1-查询前五条" class="headerlink" title="(1) 查询前五条"></a>(1) 查询前五条</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;SELECT * FROM customers LIMIT 5&#x27;</span>)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h4 id="2-查指定五条"><a href="#2-查指定五条" class="headerlink" title="(2) 查指定五条"></a>(2) 查指定五条</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># 从位置3开始，返回5条记录</span><br>mycursor.execute(<span class="hljs-string">&#x27;SELECT * FROM customers LIMIT 5 OFFSET 2&#x27;</span>)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="4-8-关联数据表"><a href="#4-8-关联数据表" class="headerlink" title="4-8 关联数据表"></a>4-8 关联数据表</h2><ul><li>关联数据表<ul><li>将两个表关联-&gt;<code>INNER JOIN</code>。</li><li>主表为主左连接-&gt;<code>LEFT JOIN</code>。</li><li>副表为主右连接-&gt;<code>RIGHT JOIN</code>。</li></ul></li></ul><h4 id="1-创建两表"><a href="#1-创建两表" class="headerlink" title="(1) 创建两表"></a>(1) 创建两表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>mycursor.execute(<span class="hljs-string">&#x27;CREATE TABLE users \</span><br><span class="hljs-string">                (id INT AUTO_INCREMENT PRIMARY KEY, \</span><br><span class="hljs-string">                name VARCHAR(255), fav VARCHAR(255))&#x27;</span><br>                 )                 <span class="hljs-comment"># users表</span><br><br>mycursor.execute(<span class="hljs-string">&#x27;CREATE TABLE product \</span><br><span class="hljs-string">                (id INT AUTO_INCREMENT PRIMARY KEY, \</span><br><span class="hljs-string">                name VARCHAR(255))&#x27;</span><br>                 )                 <span class="hljs-comment"># product表</span><br></code></pre></td></tr></table></figure><h4 id="2-users数据"><a href="#2-users数据" class="headerlink" title="(2) users数据"></a>(2) users数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;INSERT INTO users (id, name, fav) VALUES (%s, %s, %s)&#x27;</span><br>val = [<br>    (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;154&#x27;</span>),<br>    (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;154&#x27;</span>),<br>    (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-string">&#x27;155&#x27;</span>),<br>    (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;Hannah&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>),<br>    (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>]<br>mycursor.executemany(sql, val)<br><br>mydb.commit()<br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;was inserted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-product数据"><a href="#3-product数据" class="headerlink" title="(3) product数据"></a>(3) product数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;INSERT INTO product (id, name) VALUES (%s, %s)&#x27;</span><br>val = [<br>    (<span class="hljs-number">154</span>, <span class="hljs-string">&#x27;Chocolate Heaven&#x27;</span>),<br>    (<span class="hljs-number">155</span>, <span class="hljs-string">&#x27;Tasty Lemons&#x27;</span>),<br>    (<span class="hljs-number">156</span>, <span class="hljs-string">&#x27;Vanilla Dreams&#x27;</span>)<br>]<br>mycursor.executemany(sql, val)<br><br>mydb.commit()<br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;was inserted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="4-将两个表关联"><a href="#4-将两个表关联" class="headerlink" title="(4) 将两个表关联"></a>(4) 将两个表关联</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># INNER JOIN只显示匹配的记录</span><br>sql = <span class="hljs-string">&#x27;SELECT users.name As user, product.name As favorite FROM users \</span><br><span class="hljs-string">       INNER JOIN product ON users.fav = product.id&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h4 id="5-左连接两个表"><a href="#5-左连接两个表" class="headerlink" title="(5) 左连接两个表"></a>(5) 左连接两个表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># LEFT JOIN显示所有用户</span><br>sql = <span class="hljs-string">&#x27;SELECT users.name As user, product.name As favorite FROM users \</span><br><span class="hljs-string">       LEFT JOIN product ON users.fav = product.id&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:                 <span class="hljs-comment"># users主表为主显示</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h4 id="6-右连接两个表"><a href="#6-右连接两个表" class="headerlink" title="(6) 右连接两个表"></a>(6) 右连接两个表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># RIGHT JOIN返回所有产品及收藏它们的用户</span><br>sql = <span class="hljs-string">&#x27;SELECT users.name As user, product.name As favorite FROM users \</span><br><span class="hljs-string">       RIGHT JOIN product ON users.fav = product.id&#x27;</span><br>mycursor.execute(sql)<br>myresult = mycursor.fetchall()<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:                 <span class="hljs-comment"># product副表为主显示</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="5-删除数据表"><a href="#5-删除数据表" class="headerlink" title="5 删除数据表"></a>5 删除数据表</h1><ul><li>删除数据表<ul><li>MySQL：删除数据库中现有的数据表-&gt;<code>DROP TABLE &lt;table-name&gt;</code>。</li><li>仅存在该表的情况下进行删除，避免报错-&gt;<code>DROP TABLE IF EXISTS &lt;table-name&gt;</code>。</li><li>删除表数据-&gt;<code>DELETE FROM &lt;table-name&gt; WHERE &lt;variable-name&gt; = &quot;&lt;value&gt;&quot;</code>。</li></ul></li></ul><h2 id="5-1-删除现有表"><a href="#5-1-删除现有表" class="headerlink" title="5-1 删除现有表"></a>5-1 删除现有表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># 创建一个名为test的数据表</span><br>mycursor.execute(<span class="hljs-string">&#x27;CREATE TABLE test (name VARCHAR(255), address VARCHAR(255))&#x27;</span>)<br>mycursor.execute(<span class="hljs-string">&#x27;SHOW TABLES&#x27;</span>)    <span class="hljs-comment"># 查询现有表</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycursor:<br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;******************&#x27;</span>)<br><br>sql = <span class="hljs-string">&#x27;DROP TABLE test&#x27;</span>            <span class="hljs-comment"># 删除刚创建的test表</span><br>mycursor.execute(sql)<br>mycursor.execute(<span class="hljs-string">&#x27;SHOW TABLES&#x27;</span>)    <span class="hljs-comment"># 查询现有表</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mycursor:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="5-2-仅存在时删"><a href="#5-2-仅存在时删" class="headerlink" title="5-2 仅存在时删"></a>5-2 仅存在时删</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;DROP TABLE IF EXISTS test&#x27;</span><br>mycursor.execute(sql)<br></code></pre></td></tr></table></figure><h2 id="5-3-删除表数据"><a href="#5-3-删除表数据" class="headerlink" title="5-3 删除表数据"></a>5-3 删除表数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()           <span class="hljs-comment"># 创建一个名为test的数据表</span><br>mycursor.execute(<span class="hljs-string">&#x27;CREATE TABLE test (name VARCHAR(255), address VARCHAR(255))&#x27;</span>)<br>mycursor.execute(<span class="hljs-string">&#x27;ALTER TABLE test ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY&#x27;</span>)<br>sql_insert = <span class="hljs-string">&#x27;INSERT INTO test (name, address) VALUES (%s, %s)&#x27;</span><br>val = [                            <span class="hljs-comment"># executemany()方法的第二个参数val是元组列表</span><br>    (<span class="hljs-string">&#x27;Peter&#x27;</span>, <span class="hljs-string">&#x27;Lowstreet 4&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Amy&#x27;</span>, <span class="hljs-string">&#x27;Apple st 652&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Hannah&#x27;</span>, <span class="hljs-string">&#x27;Mountain 21&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Michael&#x27;</span>, <span class="hljs-string">&#x27;Valley 345&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Sandy&#x27;</span>, <span class="hljs-string">&#x27;Ocean blvd 2&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Betty&#x27;</span>, <span class="hljs-string">&#x27;Green Grass 1&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Richard&#x27;</span>, <span class="hljs-string">&#x27;Sky st 331&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Susan&#x27;</span>, <span class="hljs-string">&#x27;One way 98&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Vicky&#x27;</span>, <span class="hljs-string">&#x27;Yellow Garden 2&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Ben&#x27;</span>, <span class="hljs-string">&#x27;Park Lane 38&#x27;</span>),<br>    (<span class="hljs-string">&#x27;William&#x27;</span>, <span class="hljs-string">&#x27;Central st 954&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Chuck&#x27;</span>, <span class="hljs-string">&#x27;Main Road 989&#x27;</span>),<br>    (<span class="hljs-string">&#x27;Viola&#x27;</span>, <span class="hljs-string">&#x27;Sideway 1633&#x27;</span>)<br>]<br>mycursor.executemany(sql_insert, val)<br>mydb.commit()                      <span class="hljs-comment"># 需要commit，否则不会对表进行任何更改</span><br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;was inserted.&#x27;</span>)<br>mycursor.execute(<span class="hljs-string">&#x27;SELECT * FROM test&#x27;</span>)<br>myresult = mycursor.fetchall()     <span class="hljs-comment"># 获取表所有行</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;************************************&#x27;</span>)<br><br>sql_delete = <span class="hljs-string">&#x27;DELETE FROM test WHERE address = &quot;Mountain 21&quot;&#x27;</span><br>mycursor.execute(sql_delete)       <span class="hljs-comment"># 删除表指定行数据</span><br>mydb.commit()                      <span class="hljs-comment"># 需要commit，否则不会对表进行任何更改</span><br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;record(s) deleted.&#x27;</span>)<br>mycursor.execute(<span class="hljs-string">&#x27;SELECT * FROM test&#x27;</span>)<br>myresult = mycursor.fetchall()     <span class="hljs-comment"># 获取表所有行</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myresult:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h2 id="5-4-防SQL注入"><a href="#5-4-防SQL注入" class="headerlink" title="5-4 防SQL注入"></a>5-4 防SQL注入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;DELETE FROM test WHERE address = %s&#x27;</span><br>adr = (<span class="hljs-string">&#x27;Yellow Garden 2&#x27;</span>, )<br>mycursor.execute(sql, adr)<br><br>mydb.commit()<br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;record(s) deleted.&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="6-修改数据表"><a href="#6-修改数据表" class="headerlink" title="6 修改数据表"></a>6 修改数据表</h1><ul><li>修改数据表<ul><li>MySQL：<code>UPDATE &lt;table-name&gt; SET &lt;variable-name&gt; = &quot;&lt;value1&gt;&quot; WHERE &lt;variable-name&gt; = &quot;&lt;value2&gt;&quot;</code>。</li><li>使用MySQL的UPDATE命令进行数据表数值的修改操作，其中value1为该数据表修改后的值，value2为修改前的值。</li></ul></li></ul><h2 id="6-1-表数值修改"><a href="#6-1-表数值修改" class="headerlink" title="6-1 表数值修改"></a>6-1 表数值修改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;UPDATE test SET address = &quot;Canyon 123&quot; WHERE address = &quot;Valley 345&quot;&#x27;</span><br>mycursor.execute(sql)<br><br>mydb.commit()                      <span class="hljs-comment"># 需要commit，否则不会对表进行任何更改</span><br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;record(s) affected.&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="6-2-防SQL注入"><a href="#6-2-防SQL注入" class="headerlink" title="6-2 防SQL注入"></a>6-2 防SQL注入</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> mysql.connector<br><br>mydb = mysql.connector.connect(<br>    host=<span class="hljs-string">&#x27;localhost&#x27;</span>,<br>    port=<span class="hljs-string">&#x27;3366&#x27;</span>,<br>    user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>    password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>    database=<span class="hljs-string">&#x27;mydatabase&#x27;</span><br>)<br><br>mycursor = mydb.cursor()<br>sql = <span class="hljs-string">&#x27;UPDATE test SET address = %s WHERE address = %s&#x27;</span><br>val = (<span class="hljs-string">&#x27;Green Grass 1&#x27;</span>, <span class="hljs-string">&#x27;Apple st 652&#x27;</span>)<br>mycursor.execute(sql, val)<br><br>mydb.commit()<br><span class="hljs-built_in">print</span>(mycursor.rowcount, <span class="hljs-string">&#x27;record(s) affected.&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 机器学习</title>
    <link href="/2021/07/04/python/python10-python-ji-qi-xue-xi/"/>
    <url>/2021/07/04/python/python10-python-ji-qi-xue-xi/</url>
    
    <content type="html"><![CDATA[<p>机器学习是一种分析数据并学习预测结果的程序，是让计算机从研究数据和统计数据中学习，是迈向人工智能(AI)方向的一步。</p><span id="more"></span><h1 id="1-机器学习"><a href="#1-机器学习" class="headerlink" title="1 机器学习"></a>1 机器学习</h1><ul><li>机器学习<ul><li>数据类型三大类：数值的、绝对的、序数。<ul><li>数值数据是数字，两个类别：离散数据(仅限于整数)、连续数据(具有无限价值)。</li><li>分类数据是无法相互比较的值，而序数数据类似于分类数据，但是可以相互比较。</li></ul></li><li>平均数<code>mean</code>、中位数<code>median</code>、众数<code>mode</code>、标准差<code>std</code>。</li><li>方差<code>var</code>、方差的平方根&#x3D;标准差、百分位数<code>percentile()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><span class="hljs-keyword">from</span> warnings <span class="hljs-keyword">import</span> simplefilter              <span class="hljs-comment"># 忽略警告信息</span><br>simplefilter(action=<span class="hljs-string">&#x27;ignore&#x27;</span>, category=FutureWarning)<br><br>speed = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br>a = numpy.mean(speed)                          <span class="hljs-comment"># 平均数</span><br>b = numpy.median(speed)                        <span class="hljs-comment"># 中位数</span><br>c = stats.mode(speed)                          <span class="hljs-comment"># 众数</span><br>d = numpy.std(speed)                           <span class="hljs-comment"># 标准差，方差的平方根，通常用符号Sigma表示σ</span><br>e = numpy.var(speed)                           <span class="hljs-comment"># 方差，Sigma Squared指σ2</span><br>f = numpy.percentile(speed, <span class="hljs-number">80</span>)                <span class="hljs-comment"># 查找百分位数</span><br><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(e)                                       <span class="hljs-comment"># 方差，每个值与平均数的差值的平方值的和的平均数</span><br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></table></figure><h2 id="1-1-数据分布"><a href="#1-1-数据分布" class="headerlink" title="1-1 数据分布"></a>1-1 数据分布</h2><ul><li>数据分布<ul><li>正态数据分布：高斯数据分布，正态分布图也被叫做钟形曲线，具有钟形特征。</li><li>随机数据分布：测试算法时可能没有真实世界的数据，此时需用随机生成的值。</li></ul></li></ul><h4 id="1-直方图"><a href="#1-直方图" class="headerlink" title="(1) 直方图"></a>(1) 直方图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = numpy.random.uniform(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">250</span>)         <span class="hljs-comment"># 250个介于0和5之间的随机浮点数数组</span><br><br><span class="hljs-built_in">print</span>(x)<br>plt.hist(x, <span class="hljs-number">5</span>)                                  <span class="hljs-comment"># 绘制直方图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-正态分布"><a href="#2-正态分布" class="headerlink" title="(2) 正态分布"></a>(2) 正态分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = numpy.random.normal(<span class="hljs-number">5.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">100000</span>)       <span class="hljs-comment"># 100000个平均数为5.0，标准差为1.0的数组</span><br><br><span class="hljs-built_in">print</span>(x)<br>plt.hist(x, <span class="hljs-number">100</span>)                                <span class="hljs-comment"># 正态数据分布，绘制包含100个柱的直方图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-散点图"><a href="#3-散点图" class="headerlink" title="(3) 散点图"></a>(3) 散点图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt                 <span class="hljs-comment"># Matplotlib有个绘制散点图的方法，需两个相同长度的数组</span><br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]  <span class="hljs-comment"># x数组代表每辆汽车的年龄，y数组代表每辆车的速度</span><br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br><br>plt.scatter(x, y)                               <span class="hljs-comment"># 绘制散点图</span><br>plt.show()                                      <span class="hljs-comment"># 越新的车越快，也可能是巧合，数据量少</span><br></code></pre></td></tr></table></figure><h4 id="4-随机分布"><a href="#4-随机分布" class="headerlink" title="(4) 随机分布"></a>(4) 随机分布</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = numpy.random.normal(<span class="hljs-number">5.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">1000</span>)         <span class="hljs-comment"># 1000个数组，平均值为5.0，标准差为1.0的随机数</span><br>y = numpy.random.normal(<span class="hljs-number">10.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">1000</span>)        <span class="hljs-comment"># 1000个数组，平均值为10.0，标准差为2.0的随机数</span><br><br>plt.scatter(x, y)                               <span class="hljs-comment"># 随机数据分布，具有1000个点的散点图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="1-2-线性回归"><a href="#1-2-线性回归" class="headerlink" title="1-2 线性回归"></a>1-2 线性回归</h2><ul><li>线性回归<ul><li>知道x和y轴的值之间的关系，没有关系则线性回归不能用于预测结果。</li><li>R关系的取值范围为-1到1，0表示没有关系，1和-1则表示100%相关。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt                <span class="hljs-comment"># 13辆汽车经过收费站时的车龄和速度</span><br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):                                   <span class="hljs-comment"># 创建一个使用slope和intercept值返回新值的函数</span><br>    <span class="hljs-keyword">return</span> slope * x + intercept               <span class="hljs-comment"># 这个新值表示对应的x值在y轴上的位置</span><br><br><br>model = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(func, x))                     <span class="hljs-comment"># 运行x数组的每个值，生成一个新数组，包含y轴的新值</span><br>plt.scatter(x, y)                              <span class="hljs-comment"># 绘制原始散点图</span><br>plt.plot(x, model)                             <span class="hljs-comment"># 绘制线性回归线</span><br>plt.show()                                     <span class="hljs-comment"># 显示图表</span><br></code></pre></td></tr></table></figure><h4 id="1-R关系"><a href="#1-R关系" class="headerlink" title="(1) R关系"></a>(1) R关系</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]  <span class="hljs-comment"># 数据在线性回归中的拟合程度</span><br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br><br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><span class="hljs-built_in">print</span>(r)                                        <span class="hljs-comment"># -0.76表明存在关系，但并不完美</span><br></code></pre></td></tr></table></figure><h4 id="2-预测未来价值"><a href="#2-预测未来价值" class="headerlink" title="(2) 预测未来价值"></a>(2) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats<br><br>x = [<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>]<br>y = [<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>]<br><br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> slope * x + intercept<br><br><br>speed = func(<span class="hljs-number">10</span>)                               <span class="hljs-comment"># 预测一辆10年车龄的汽车速度</span><br><span class="hljs-built_in">print</span>(speed)                                   <span class="hljs-comment"># 85.6，也可以从图表中读取</span><br></code></pre></td></tr></table></figure><h4 id="3-非预测最佳法"><a href="#3-非预测最佳法" class="headerlink" title="(3) 非预测最佳法"></a>(3) 非预测最佳法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> stats                        <span class="hljs-comment"># 线性回归不是预测未来值的最佳方法</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">89</span>, <span class="hljs-number">43</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>, <span class="hljs-number">95</span>, <span class="hljs-number">10</span>, <span class="hljs-number">66</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">48</span>, <span class="hljs-number">64</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">36</span>, <span class="hljs-number">66</span>, <span class="hljs-number">72</span>, <span class="hljs-number">40</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">46</span>, <span class="hljs-number">3</span>, <span class="hljs-number">35</span>, <span class="hljs-number">67</span>, <span class="hljs-number">95</span>, <span class="hljs-number">53</span>, <span class="hljs-number">72</span>, <span class="hljs-number">58</span>, <span class="hljs-number">10</span>, <span class="hljs-number">26</span>, <span class="hljs-number">34</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">56</span>, <span class="hljs-number">2</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>]<br>slope, intercept, r, p, std_err = stats.linregress(x, y)<br><span class="hljs-built_in">print</span>(r)                                       <span class="hljs-comment"># 0.013，得到的R值小，表明关系很差，不适合做线性回归</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> slope * x + intercept<br><br><br>model = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(func, x))<br>plt.scatter(x, y)<br>plt.plot(x, model)<br>plt.show()                                     <span class="hljs-comment"># x轴和y轴的值导致线性回归的拟合非常差</span><br></code></pre></td></tr></table></figure><h2 id="1-3-多项式回归"><a href="#1-3-多项式回归" class="headerlink" title="1-3 多项式回归"></a>1-3 多项式回归</h2><ul><li>多项式回归<ul><li>若x和y轴的值之间没有关系，则多项式回归不能用于预测结果。</li><li>R平方值的取值范围为0到1，0表示没有关系，1表示100%相关。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt                <span class="hljs-comment"># 收集了通过某收费站的18辆汽车的超车发生时间和汽车速度</span><br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]<br>y = [<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))   <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br>lines = numpy.linspace(<span class="hljs-number">1</span>, <span class="hljs-number">22</span>, <span class="hljs-number">100</span>)             <span class="hljs-comment"># 指定该行将如何显示，从位置1开始，到位置22结束</span><br><br>plt.scatter(x, y)                              <span class="hljs-comment"># 绘制原始散点图</span><br>plt.plot(lines, model(lines))                  <span class="hljs-comment"># 绘制多项式回归线</span><br>plt.show()                                     <span class="hljs-comment"># 显示图表</span><br></code></pre></td></tr></table></figure><h4 id="1-R平方"><a href="#1-R平方" class="headerlink" title="(1) R平方"></a>(1) R平方</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]<br>y = [<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))    <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br><span class="hljs-built_in">print</span>(r2_score(y, model(x)))                    <span class="hljs-comment"># 数据在多项式回归中的拟合程度，0.94表明关系非常好</span><br></code></pre></td></tr></table></figure><h4 id="2-预测未来价值-1"><a href="#2-预测未来价值-1" class="headerlink" title="(2) 预测未来价值"></a>(2) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]<br>y = [<span class="hljs-number">100</span>, <span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">60</span>, <span class="hljs-number">60</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">65</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">75</span>, <span class="hljs-number">76</span>, <span class="hljs-number">78</span>, <span class="hljs-number">79</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))    <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br>speed = model(<span class="hljs-number">17</span>)                               <span class="hljs-comment"># 预测17:00左右通过某收费站的汽车速度</span><br><span class="hljs-built_in">print</span>(speed)                                    <span class="hljs-comment"># 88.87，也可以从图中读取该值</span><br></code></pre></td></tr></table></figure><h4 id="3-非预测最佳法-1"><a href="#3-非预测最佳法-1" class="headerlink" title="(3) 非预测最佳法"></a>(3) 非预测最佳法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score           <span class="hljs-comment"># 多项式回归不是预测未来值的最佳方法</span><br><br>x = [<span class="hljs-number">89</span>, <span class="hljs-number">43</span>, <span class="hljs-number">36</span>, <span class="hljs-number">36</span>, <span class="hljs-number">95</span>, <span class="hljs-number">10</span>, <span class="hljs-number">66</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">48</span>, <span class="hljs-number">64</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">36</span>, <span class="hljs-number">66</span>, <span class="hljs-number">72</span>, <span class="hljs-number">40</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">46</span>, <span class="hljs-number">3</span>, <span class="hljs-number">35</span>, <span class="hljs-number">67</span>, <span class="hljs-number">95</span>, <span class="hljs-number">53</span>, <span class="hljs-number">72</span>, <span class="hljs-number">58</span>, <span class="hljs-number">10</span>, <span class="hljs-number">26</span>, <span class="hljs-number">34</span>, <span class="hljs-number">90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">38</span>, <span class="hljs-number">20</span>, <span class="hljs-number">56</span>, <span class="hljs-number">2</span>, <span class="hljs-number">47</span>, <span class="hljs-number">15</span>]<br><br>model = numpy.poly1d(numpy.polyfit(x, y, <span class="hljs-number">3</span>))   <span class="hljs-comment"># 注意poly1d是1d不是ld，建立多项式模型</span><br>lines = numpy.linspace(<span class="hljs-number">2</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(r2_score(y, model(x)))                   <span class="hljs-comment"># 0.00995表明关系很差，该数据集不适合做多项式回归</span><br><br>plt.scatter(x, y)<br>plt.plot(lines, model(lines))<br>plt.show()                                     <span class="hljs-comment"># x轴和y轴的值导致多项式回归的拟合非常差</span><br></code></pre></td></tr></table></figure><h2 id="1-4-多元线性回归"><a href="#1-4-多元线性回归" class="headerlink" title="1-4 多元线性回归"></a>1-4 多元线性回归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model               <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)  <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                   <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]                                  <span class="hljs-comment"># 将依赖值放在一个名为y的变量中</span><br><br>regr = linear_model.LinearRegression()         <span class="hljs-comment"># 创建一个线性回归对象，将独立值和相关值作为参数</span><br>regr.fit(X.values, y.values)                   <span class="hljs-comment"># 并用描述关系的数据填充回归对象</span><br><br><span class="hljs-comment"># 根据汽车的重量和体积预测CO2值，预测一辆配备1.3升发动机、重量为2300kg的汽车每行驶一公里释放107克CO2</span><br>predictedCO2 = regr.predict([[<span class="hljs-number">2300</span>, <span class="hljs-number">1300</span>]])<br><span class="hljs-built_in">print</span>(predictedCO2)<br></code></pre></td></tr></table></figure><h4 id="1-系数"><a href="#1-系数" class="headerlink" title="(1) 系数"></a>(1) 系数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas                                  <span class="hljs-comment"># 系数是描述与未知变量之间关系的因子</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model               <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)  <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                   <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]                                  <span class="hljs-comment"># 将依赖值放在一个名为y的变量中</span><br><br>regr = linear_model.LinearRegression()         <span class="hljs-comment"># 创建一个线性回归对象，将独立值和相关值作为参数</span><br>regr.fit(X.values, y.values)                   <span class="hljs-comment"># 并用描述关系的数据填充回归对象</span><br><br><span class="hljs-comment"># 体重增加1kg，CO2排放量就会增加0.00755095g，发动机尺寸增加1cm3，CO2排放量增加0.00780526g</span><br><span class="hljs-built_in">print</span>(regr.coef_)                              <span class="hljs-comment"># 回归对象的系数值[重量0.00755095 体积0.00780526]</span><br></code></pre></td></tr></table></figure><h4 id="2-预测未来价值-2"><a href="#2-预测未来价值-2" class="headerlink" title="(2) 预测未来价值"></a>(2) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model               <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)  <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                   <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]                                  <span class="hljs-comment"># 将依赖值放在一个名为y的变量中</span><br><br>regr = linear_model.LinearRegression()         <span class="hljs-comment"># 创建一个线性回归对象，将独立值和相关值作为参数</span><br>regr.fit(X.values, y.values)                   <span class="hljs-comment"># 并用描述关系的数据填充回归对象</span><br><br><span class="hljs-comment"># 将权重从2300更改为3300，一辆配备1.3升发动机、重量为3300kg的汽车每行驶一公里将释放115克CO2</span><br>predictedCO2 = regr.predict([[<span class="hljs-number">3300</span>, <span class="hljs-number">1300</span>]])<br><span class="hljs-built_in">print</span>(predictedCO2)<br></code></pre></td></tr></table></figure><h2 id="1-5-比例特征方法"><a href="#1-5-比例特征方法" class="headerlink" title="1-5 比例特征方法"></a>1-5 比例特征方法</h2><ul><li>比例特征方法<ul><li>当数据具有不同的值，甚至不同的测量单位时，很难比较，可将数据缩放为容易比较的新值。</li><li>标准化方法使用的公式：<code>z = (x - u) / s</code>，z是新值，x是原始值，u是平均值，s是标准差。</li></ul></li></ul><h4 id="1-比例特征缩放"><a href="#1-比例特征缩放" class="headerlink" title="(1) 比例特征缩放"></a>(1) 比例特征缩放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br>scale = StandardScaler()                        <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)   <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                    <span class="hljs-comment"># 列出独立值并调用X变量</span><br>scaledX = scale.fit_transform(X)                <span class="hljs-comment"># 缩放重量和体积列中的所有值</span><br><br><span class="hljs-built_in">print</span>(scaledX)<br></code></pre></td></tr></table></figure><h4 id="2-预测CO2的值"><a href="#2-预测CO2的值" class="headerlink" title="(2) 预测CO2的值"></a>(2) 预测CO2的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><span class="hljs-keyword">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br>scale = StandardScaler()                       <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)  <span class="hljs-comment"># 汽车的信息：https://www.w3schools.com/python/data.csv</span><br><br>X = df[[<span class="hljs-string">&#x27;Weight&#x27;</span>, <span class="hljs-string">&#x27;Volume&#x27;</span>]]                   <span class="hljs-comment"># 列出独立值并调用X变量</span><br>y = df[<span class="hljs-string">&#x27;CO2&#x27;</span>]<br><br>scaledX = scale.fit_transform(X.values)        <span class="hljs-comment"># 缩放重量和体积列中的所有值</span><br><br>regr = linear_model.LinearRegression()<br>regr.fit(scaledX, y.values)<br><br>scaled = scale.transform([[<span class="hljs-number">2300</span>, <span class="hljs-number">1.3</span>]])        <span class="hljs-comment"># 预测一辆重2300公斤的1.3升汽车的二氧化碳排放量</span><br><br>predictedCO2 = regr.predict([scaled[<span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(predictedCO2)<br></code></pre></td></tr></table></figure><h1 id="2-训练-x2F-测试"><a href="#2-训练-x2F-测试" class="headerlink" title="2 训练&#x2F;测试"></a>2 训练&#x2F;测试</h1><ul><li>训练&#x2F;测试<ul><li>一种衡量模型准确性的方法，将数据集分成了两个组：训练集(训练模型)、测试集(测试模型)。</li><li>80%用于训练(训练模型意味着创建模型)，20%用于测试(测试模型意味着测试模型的准确性)。</li></ul></li></ul><h2 id="2-1-数据集"><a href="#2-1-数据集" class="headerlink" title="2-1 数据集"></a>2-1 数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt                 <span class="hljs-comment"># 展示了一家商店中的100位顾客，以及他们的购物习惯</span><br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)              <span class="hljs-comment"># x轴表示购买前的分钟数</span><br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x       <span class="hljs-comment"># y轴表示购买时花费的金额</span><br><br>plt.scatter(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-2-显示训练集"><a href="#2-2-显示训练集" class="headerlink" title="2-2 显示训练集"></a>2-2 显示训练集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                               <span class="hljs-comment"># 拆分成训练集，随机选择80%的原始数据</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                <span class="hljs-comment"># 拆分成测试集，剩下的20%</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>plt.scatter(train_x, train_y)                  <span class="hljs-comment"># 显示训练集，看起来像原始数据集</span><br>plt.show()<br><br><span class="hljs-comment"># plt.scatter(test_x, test_y)                  # 显示测试集，看起来像原始数据集</span><br><span class="hljs-comment"># plt.show()</span><br></code></pre></td></tr></table></figure><h2 id="2-3-拟合数据集"><a href="#2-3-拟合数据集" class="headerlink" title="2-3 拟合数据集"></a>2-3 拟合数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                               <span class="hljs-comment"># 拆分成训练集，随机选择80%的原始数据</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                <span class="hljs-comment"># 拆分成测试集，剩下的20%</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br>lines = numpy.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">100</span>)              <span class="hljs-comment"># 通过数据点画一条线</span><br><br>plt.scatter(train_x, train_y)                  <span class="hljs-comment"># 显示训练集</span><br>plt.plot(lines, model(lines))                  <span class="hljs-comment"># 这条线表示顾客在商店里花费6分钟可能购买价值200的商品</span><br>plt.show()                                     <span class="hljs-comment"># 有过度拟合的迹象</span><br></code></pre></td></tr></table></figure><h2 id="2-4-R平方分数"><a href="#2-4-R平方分数" class="headerlink" title="2-4 R平方分数"></a>2-4 R平方分数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                               <span class="hljs-comment"># 拆分成训练集</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                <span class="hljs-comment"># 拆分成测试集</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br>r2 = r2_score(train_y, model(train_x))         <span class="hljs-comment"># 训练数据在多项式回归中的拟合程度</span><br><span class="hljs-built_in">print</span>(r2)                                      <span class="hljs-comment"># 结果0.799说明存在关系</span><br></code></pre></td></tr></table></figure><h2 id="2-5-引入测试集"><a href="#2-5-引入测试集" class="headerlink" title="2-5 引入测试集"></a>2-5 引入测试集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> r2_score<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                               <span class="hljs-comment"># 拆分成训练集</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                <span class="hljs-comment"># 拆分成测试集</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br>r2 = r2_score(test_y, model(test_x))<br><span class="hljs-built_in">print</span>(r2)                                      <span class="hljs-comment"># 结果0.809说明该模型适合测试集</span><br></code></pre></td></tr></table></figure><h2 id="2-6-预测未来价值"><a href="#2-6-预测未来价值" class="headerlink" title="2-6 预测未来价值"></a>2-6 预测未来价值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><br>numpy.random.seed(<span class="hljs-number">2</span>)<br>x = numpy.random.normal(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>y = numpy.random.normal(<span class="hljs-number">150</span>, <span class="hljs-number">40</span>, <span class="hljs-number">100</span>) / x<br><br>train_x = x[:<span class="hljs-number">80</span>]                               <span class="hljs-comment"># 拆分成训练集</span><br>train_y = y[:<span class="hljs-number">80</span>]<br><br>test_x = x[<span class="hljs-number">80</span>:]                                <span class="hljs-comment"># 拆分成测试集</span><br>test_y = y[<span class="hljs-number">80</span>:]<br><br>model = numpy.poly1d(numpy.polyfit(train_x, train_y, <span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(model(<span class="hljs-number">5</span>))                                <span class="hljs-comment"># 如果一位购物顾客在店里停留5分钟，预测花费22.88美元</span><br></code></pre></td></tr></table></figure><h1 id="3-常见分类算法"><a href="#3-常见分类算法" class="headerlink" title="3 常见分类算法"></a>3 常见分类算法</h1><ul><li>常见分类算法<ul><li>监督学习算法，Supervised Algorithms。<ul><li>在监督学习训练过程中，可以由训练数据集学到或建立一个模式(函数&#x2F;Learning model)，并依此模式推测新的实例。</li><li>要求特定的输入&#x2F;输出，首先需要决定使用哪种数据作为范例，包括神经网络、支持向量机、最近邻居法、决策树等。</li></ul></li><li>无监督学习算法，Unsupervised Algorithms：没有特定的目标输出，算法将数据集分为不同的组。</li><li>强化学习算法，Reinforcement Algorithms。<ul><li>主要基于决策进行训练，根据输出结果的成功或错误训练，通过大量经验训练优化后的算法将能够给出较好的预测。</li><li>在运筹学和控制论的语境下，强化学习被称作“近似动态规划”，即Approximate Dynamic Programming，简称ADP。</li></ul></li></ul></li></ul><h2 id="3-1-决策树"><a href="#3-1-决策树" class="headerlink" title="3-1 决策树"></a>3-1 决策树</h2><ul><li>决策树<ul><li>一个流程图，可根据以前的经验做出决策，决策树需满足所有数据都是数字。</li><li>运行决策树的次数足够多时，会看到它给出不同结果，即便提供了相同的数据。</li><li>决策树并未给定100%确定的答案，只是基于结果的概率，因而结果会有所不同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><br><span class="hljs-string">&quot;&quot;&quot; data/actor_info.csv</span><br><span class="hljs-string">AgeExperienceRankNationalityGo</span><br><span class="hljs-string">36  10          9    UK          NO</span><br><span class="hljs-string">42  12          4    USA         NO</span><br><span class="hljs-string">23  4           6    N           NO</span><br><span class="hljs-string">52  4           4    USA         NO</span><br><span class="hljs-string">43  21          8    USA         YES</span><br><span class="hljs-string">44  14          5    UK          NO</span><br><span class="hljs-string">66  3           7    N           YES</span><br><span class="hljs-string">35  14          9    UK          YES</span><br><span class="hljs-string">52  13          7    N           YES</span><br><span class="hljs-string">35  5           9    N           YES</span><br><span class="hljs-string">24  3           5    USA         NO</span><br><span class="hljs-string">18  3           7    UK          YES</span><br><span class="hljs-string">45  9           9    UK          YES</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/actor_info.csv&#x27;</span>)    <span class="hljs-comment"># 喜剧演员的信息，是否决定看节目</span><br><span class="hljs-built_in">print</span>(df)                                      <span class="hljs-comment"># 读取并打印数据集</span><br></code></pre></td></tr></table></figure><h4 id="1-数值转换"><a href="#1-数值转换" class="headerlink" title="(1) 数值转换"></a>(1) 数值转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/actor_info.csv&#x27;</span>)<br>ds = &#123;<span class="hljs-string">&#x27;UK&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;USA&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">2</span>&#125;                <span class="hljs-comment"># 将非数字列转换为数字列</span><br>df[<span class="hljs-string">&#x27;Nationality&#x27;</span>] = df[<span class="hljs-string">&#x27;Nationality&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br>ds = &#123;<span class="hljs-string">&#x27;YES&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;NO&#x27;</span>: <span class="hljs-number">0</span>&#125;<br>df[<span class="hljs-string">&#x27;Go&#x27;</span>] = df[<span class="hljs-string">&#x27;Go&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br><br><span class="hljs-built_in">print</span>(df)                                       <span class="hljs-comment"># 读取并打印数据集</span><br></code></pre></td></tr></table></figure><h4 id="2-创建决策树"><a href="#2-创建决策树" class="headerlink" title="(2) 创建决策树"></a>(2) 创建决策树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">import</span> graphviz                                <span class="hljs-comment"># 需要安装graphviz库和PlantUML插件</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/actor_info.csv&#x27;</span>)<br>ds = &#123;<span class="hljs-string">&#x27;UK&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;USA&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">2</span>&#125;               <span class="hljs-comment"># 将非数字列转换为数字列</span><br>df[<span class="hljs-string">&#x27;Nationality&#x27;</span>] = df[<span class="hljs-string">&#x27;Nationality&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br>ds = &#123;<span class="hljs-string">&#x27;YES&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;NO&#x27;</span>: <span class="hljs-number">0</span>&#125;<br>df[<span class="hljs-string">&#x27;Go&#x27;</span>] = df[<span class="hljs-string">&#x27;Go&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br><br>features = [<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Experience&#x27;</span>, <span class="hljs-string">&#x27;Rank&#x27;</span>, <span class="hljs-string">&#x27;Nationality&#x27;</span>]<br>X = df[features]                               <span class="hljs-comment"># 特征列，尝试从中预测的列</span><br>y = df[<span class="hljs-string">&#x27;Go&#x27;</span>]                                   <span class="hljs-comment"># 目标列，尝试预测值的列</span><br><br><span class="hljs-built_in">print</span>(X)<br><span class="hljs-built_in">print</span>(y)<br><br>dtree = DecisionTreeClassifier()               <span class="hljs-comment"># 分割样本的GINI方法：Gini=1-(x/n)2+(y/n)2</span><br>dtree = dtree.fit(X, y)<br><span class="hljs-comment"># tree.plot_tree(dtree, feature_names=features)</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)               # 违背了可视化的初衷，简单粗暴，不建议使用</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br><br>dot_data = tree.export_graphviz(dtree, feature_names=features)<br>graph = graphviz.Source(dot_data)<br>graph.render(<span class="hljs-string">&#x27;data/decision_tree&#x27;</span>)             <span class="hljs-comment"># 生成decision_tree.pdf可视化决策树</span><br></code></pre></td></tr></table></figure><h4 id="3-预测未来价值"><a href="#3-预测未来价值" class="headerlink" title="(3) 预测未来价值"></a>(3) 预测未来价值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><br>df = pandas.read_csv(<span class="hljs-string">&#x27;data/actor_info.csv&#x27;</span>)<br>ds = &#123;<span class="hljs-string">&#x27;UK&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;USA&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;N&#x27;</span>: <span class="hljs-number">2</span>&#125;               <span class="hljs-comment"># 将非数字列转换为数值</span><br>df[<span class="hljs-string">&#x27;Nationality&#x27;</span>] = df[<span class="hljs-string">&#x27;Nationality&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br>ds = &#123;<span class="hljs-string">&#x27;YES&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;NO&#x27;</span>: <span class="hljs-number">0</span>&#125;<br>df[<span class="hljs-string">&#x27;Go&#x27;</span>] = df[<span class="hljs-string">&#x27;Go&#x27;</span>].<span class="hljs-built_in">map</span>(ds)<br><br>features = [<span class="hljs-string">&#x27;Age&#x27;</span>, <span class="hljs-string">&#x27;Experience&#x27;</span>, <span class="hljs-string">&#x27;Rank&#x27;</span>, <span class="hljs-string">&#x27;Nationality&#x27;</span>]<br>X = df[features]                               <span class="hljs-comment"># 特征列，尝试从中预测的列</span><br>y = df[<span class="hljs-string">&#x27;Go&#x27;</span>]                                   <span class="hljs-comment"># 目标列，尝试预测值的列</span><br><br>dtree = DecisionTreeClassifier()<br>dtree = dtree.fit(X.values, y.values)<br><span class="hljs-built_in">print</span>(dtree.predict([[<span class="hljs-number">40</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>]]))         <span class="hljs-comment"># 是否该看40岁10年经验喜剧排名为7的演员主演的节目</span><br></code></pre></td></tr></table></figure><h2 id="3-2-K-均值"><a href="#3-2-K-均值" class="headerlink" title="3-2 K-均值"></a>3-2 K-均值</h2><ul><li>K-均值<ul><li>一种用于聚类数据点的无监督学习方法，该算法通过最小化每个簇中的方差将数据点迭代划分为K个簇。<ul><li>首先，每个数据点被随机分配到K个集群中的任意一个，然后，计算每个集群的质心(即功能上的中心)。</li><li>并将每个数据点重新分配给具有最接近质心的集群，重复该过程，直到每个数据点的集群分配不再变化。</li></ul></li><li>K-均值聚类要求选择K，即要将数据分组到的聚类数。eblow方法绘制惯性(基于距离的度量)。</li><li>并可视化惯性开始线性下降的点，该点被称为eblow，是根据数据对K最佳值的一个很好估计。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>plt.scatter(x, y)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点</span><br></code></pre></td></tr></table></figure><h4 id="1-eblow法"><a href="#1-eblow法" class="headerlink" title="(1) eblow法"></a>(1) eblow法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                         <span class="hljs-comment"># 将数据转换为一组点</span><br><br>inertias = []                                  <span class="hljs-comment"># 找到K的最佳值，需对数据运行K均值以获得一系列可能值</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):                         <span class="hljs-comment"># 只有10个数据点，因此最大簇数为10</span><br>    kmeans = KMeans(n_clusters=i)<br>    <span class="hljs-keyword">with</span> warnings.catch_warnings():<br>        warnings.simplefilter(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>        kmeans.fit(data)<br>    inertias.append(kmeans.inertia_)<br><br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>), inertias, marker=<span class="hljs-string">&#x27;o&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Elbow method&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Number of clusters&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Inertia&#x27;</span>)                          <span class="hljs-comment"># 利用eblow法可视化不同K值的惯量</span><br>plt.show()                                     <span class="hljs-comment"># 图中值2是K的一个很好的值</span><br></code></pre></td></tr></table></figure><h4 id="2-重新训练"><a href="#2-重新训练" class="headerlink" title="(2) 重新训练"></a>(2) 重新训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> KMeans<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                         <span class="hljs-comment"># 将数据转换为一组点</span><br><br>kmeans = KMeans(n_clusters=<span class="hljs-number">2</span>)<br><span class="hljs-keyword">with</span> warnings.catch_warnings():<br>    warnings.simplefilter(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>    kmeans.fit(data)<br><br>plt.scatter(x, y, c=kmeans.labels_)<br>plt.show()                                     <span class="hljs-comment"># 可视化数据点</span><br></code></pre></td></tr></table></figure><h2 id="3-3-混淆矩阵"><a href="#3-3-混淆矩阵" class="headerlink" title="3-3 混淆矩阵"></a>3-3 混淆矩阵</h2><ul><li>混淆矩阵<ul><li>一个用于分类问题的表格，用于评估模型中出现错误的位置，行代表结果应该属于的实际类别，列代表所做的预测。</li><li>创建的混淆矩阵有4个象限：真阴性、假阳性、假阴性、真阳性，True表准确预测值，False表存在错误或错误预测。</li><li>该矩阵提供了许多指标，可评估分类模型，不同的衡量标准包括：准确度、精确度、灵敏度(召回率)、特异性和F-score。<ul><li>准确度：衡量模型正确的频率，计算方法为(真阳性+真阴性)&#x2F;总预测。</li><li>精确度：在预测的积极因素中，真正积极的百分比，计算方法为真阳性&#x2F;(真阳性+假阳性)。</li><li>灵敏度：在所有的阳性病例中，预测阳性的百分比，计算方法为真阳性&#x2F;(真阳性+假阴性)。</li><li>特异性：类似于灵敏度，但从阴性结果的角度来看，计算方法为真阴性&#x2F;(真阴性+假阳性)。</li><li>F-score：即精度和灵敏度的调和平均值，计算方法为2*((精度*灵敏度)&#x2F;(精度+灵敏度))。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy                                                 <span class="hljs-comment"># 通过逻辑回归的预测来创建混淆矩阵</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)            <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)            <span class="hljs-comment"># 生成预测值</span><br><br>confusion_matrix = metrics.confusion_matrix(actual, predic)  <span class="hljs-comment"># 对实际值和预测值使用混淆矩阵函数</span><br>cm_display = metrics.ConfusionMatrixDisplay(                 <span class="hljs-comment"># 将表格转换为混淆矩阵显示</span><br>    confusion_matrix=confusion_matrix,<br>    display_labels=[<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>]<br>)<br><br>cm_display.plot()                                            <span class="hljs-comment"># 显示绘图</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-准确度"><a href="#1-准确度" class="headerlink" title="(1) 准确度"></a>(1) 准确度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成预测值</span><br><br>Accuracy = metrics.accuracy_score(actual, predic)             <span class="hljs-comment"># 准确度，衡量模型正确的频率</span><br><span class="hljs-built_in">print</span>(Accuracy)<br></code></pre></td></tr></table></figure><h4 id="2-精确度"><a href="#2-精确度" class="headerlink" title="(2) 精确度"></a>(2) 精确度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成预测值</span><br><br>Precision = metrics.precision_score(actual, predic)           <span class="hljs-comment"># 精确度，不评估正确预测的负面案例</span><br><span class="hljs-built_in">print</span>(Precision)<br></code></pre></td></tr></table></figure><h4 id="3-灵敏度"><a href="#3-灵敏度" class="headerlink" title="(3) 灵敏度"></a>(3) 灵敏度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成预测值</span><br><br>Sensitivity_recall = metrics.recall_score(actual, predic)     <span class="hljs-comment"># 灵敏度，衡量模型预测阳性的好坏程度</span><br><span class="hljs-built_in">print</span>(Sensitivity_recall)<br></code></pre></td></tr></table></figure><h4 id="4-特异性"><a href="#4-特异性" class="headerlink" title="(4) 特异性"></a>(4) 特异性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成预测值</span><br><br>Specificity = metrics.recall_score(actual, predic, pos_label=<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(Specificity)                                            <span class="hljs-comment"># 特异性，类似敏感性，从阴性结果角度看</span><br></code></pre></td></tr></table></figure><h4 id="5-F-score"><a href="#5-F-score" class="headerlink" title="(5) F-score"></a>(5) F-score</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> metrics<br><br>actual = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成实际值</span><br>predic = numpy.random.binomial(<span class="hljs-number">1</span>, <span class="hljs-number">0.9</span>, size=<span class="hljs-number">1000</span>)             <span class="hljs-comment"># 生成预测值</span><br><br>F1_score = metrics.f1_score(actual, predic)                   <span class="hljs-comment"># 同时考虑假阳性和假阴性</span><br><span class="hljs-built_in">print</span>(F1_score)                                               <span class="hljs-comment"># 适用于不平衡的数据集，F-score</span><br></code></pre></td></tr></table></figure><h2 id="3-4-层次聚类"><a href="#3-4-层次聚类" class="headerlink" title="3-4 层次聚类"></a>3-4 层次聚类</h2><ul><li>层次聚类<ul><li>是一种用于聚类数据点的无监督学习方法，该算法通过测量数据之间的差异来构建集群。</li><li>无监督学习意味着模型不需要训练，可用于任何数据，以可视化和解释各个数据点之间的关系。<ul><li>首先将每个数据点视为其自己的集群，然后将它们之间距离最短的集群连接在一起，以创建更大的集群。</li><li>重复此步骤，直到形成一个包含所有数据点的大集群，凝聚聚类(即一种遵循自下而上方法的层次聚类)。</li></ul></li><li>在这里将使用层次聚类对数据点进行分组，并使用树状图和散点图可视化聚类。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span> , <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>plt.scatter(x, y)                                  <span class="hljs-comment"># 可视化一些数据点</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-树状图可视化"><a href="#1-树状图可视化" class="headerlink" title="(1) 树状图可视化"></a>(1) 树状图可视化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.cluster.hierarchy <span class="hljs-keyword">import</span> dendrogram, linkage<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))<br><br>linkage_data = linkage(data, method=<span class="hljs-string">&#x27;ward&#x27;</span>, metric=<span class="hljs-string">&#x27;euclidean&#x27;</span>)<br>dendrogram(linkage_data)                          <span class="hljs-comment"># 使用欧几里得距离度量，并使用树状图将其可视化</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-散点图可视化"><a href="#2-散点图可视化" class="headerlink" title="(2) 散点图可视化"></a>(2) 散点图可视化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.cluster <span class="hljs-keyword">import</span> AgglomerativeClustering<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]<br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))<br><br>hierarchical_cluster = AgglomerativeClustering(n_clusters=<span class="hljs-number">2</span>, affinity=<span class="hljs-string">&#x27;euclidean&#x27;</span>, linkage=<span class="hljs-string">&#x27;ward&#x27;</span>)<br>labels = hierarchical_cluster.fit_predict(data)   <span class="hljs-comment"># AgglomerativeClustering()使用了scikit-learn库</span><br><br>plt.scatter(x, y, c=labels)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-5-逻辑回归"><a href="#3-5-逻辑回归" class="headerlink" title="3-5 逻辑回归"></a>3-5 逻辑回归</h2><ul><li>逻辑回归<ul><li>旨在解决分类问题，通过预测分类结果来做到这一点，与预测连续结果的线性回归不同。<ul><li>最简单的情况有两个结果，称为二项式，例如：预测肿瘤是恶性肿瘤还是良性肿瘤。</li><li>两个以上结果的分类情况，称为多项式，例如：预测3种不同物种之间的鸢尾花类别。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model                  <span class="hljs-comment"># 将自变量存储在X中，将因变量存储在y中</span><br><br>X = numpy.array([<span class="hljs-number">3.78</span>, <span class="hljs-number">2.44</span>, <span class="hljs-number">2.09</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">1.72</span>, <span class="hljs-number">1.65</span>, <span class="hljs-number">4.92</span>, <span class="hljs-number">4.37</span>, <span class="hljs-number">4.96</span>, <span class="hljs-number">4.52</span>, <span class="hljs-number">3.69</span>, <span class="hljs-number">5.88</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>y = numpy.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>logr = linear_model.LogisticRegression()          <span class="hljs-comment"># 创建逻辑回归对象，将独立值和相关值作为参数</span><br>logr.fit(X, y)                                    <span class="hljs-comment"># 并用描述关系的数据填充回归对象</span><br><br>predicted = logr.predict(numpy.array([<span class="hljs-number">3.46</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(predicted)                                  <span class="hljs-comment"># 结果为[0]，预测3.46mm的肿瘤不会癌变</span><br></code></pre></td></tr></table></figure><h4 id="1-系数-1"><a href="#1-系数-1" class="headerlink" title="(1) 系数"></a>(1) 系数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>X = numpy.array([<span class="hljs-number">3.78</span>, <span class="hljs-number">2.44</span>, <span class="hljs-number">2.09</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">1.72</span>, <span class="hljs-number">1.65</span>, <span class="hljs-number">4.92</span>, <span class="hljs-number">4.37</span>, <span class="hljs-number">4.96</span>, <span class="hljs-number">4.52</span>, <span class="hljs-number">3.69</span>, <span class="hljs-number">5.88</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>y = numpy.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>logr = linear_model.LogisticRegression()          <span class="hljs-comment"># 创建逻辑回归对象，将独立值和相关值作为参数</span><br>logr.fit(X, y)                                    <span class="hljs-comment"># 并用描述关系的数据填充回归对象</span><br><br>log_odds = logr.coef_                             <span class="hljs-comment"># 系数是X中每单位变化的结果的对数几率的预期变化</span><br>odds = numpy.exp(log_odds)                        <span class="hljs-comment"># 赔率，随着肿瘤大小增加1毫米，成为肿瘤的几率增加4倍</span><br><br><span class="hljs-built_in">print</span>(odds)<br></code></pre></td></tr></table></figure><h4 id="2-概率"><a href="#2-概率" class="headerlink" title="(2) 概率"></a>(2) 概率</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model<br><br>X = numpy.array([<span class="hljs-number">3.78</span>, <span class="hljs-number">2.44</span>, <span class="hljs-number">2.09</span>, <span class="hljs-number">0.14</span>, <span class="hljs-number">1.72</span>, <span class="hljs-number">1.65</span>, <span class="hljs-number">4.92</span>, <span class="hljs-number">4.37</span>, <span class="hljs-number">4.96</span>, <span class="hljs-number">4.52</span>, <span class="hljs-number">3.69</span>, <span class="hljs-number">5.88</span>]).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>y = numpy.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br><br>logr = linear_model.LogisticRegression()          <span class="hljs-comment"># 创建逻辑回归对象，将独立值和相关值作为参数</span><br>logr.fit(X, y)                                    <span class="hljs-comment"># 并用描述关系的数据填充回归对象</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logit2prob</span>(<span class="hljs-params">logr, X</span>):<br>    log_odds = logr.coef_ * X + logr.intercept_   <span class="hljs-comment"># 创建一个看起来类似于线性回归的公式，提取系数和截距</span><br>    odds = numpy.exp(log_odds)                    <span class="hljs-comment"># 为了将对数赔率转换为赔率，必须对对数赔率取幂</span><br>    probability = odds / (<span class="hljs-number">1</span> + odds)               <span class="hljs-comment"># 有了赔率，可以将其除以1加上赔率，将其转换为概率</span><br>    <span class="hljs-keyword">return</span> probability<br><br><br><span class="hljs-built_in">print</span>(logit2prob(logr, X))                        <span class="hljs-comment"># 找出每个肿瘤癌变的概率，3.78cm的肿瘤癌变的概率为61%</span><br></code></pre></td></tr></table></figure><h2 id="3-6-网格搜索"><a href="#3-6-网格搜索" class="headerlink" title="3-6 网格搜索"></a>3-6 网格搜索</h2><ul><li>网格搜索<ul><li>穷举搜索：在所有候选参数的选择中，通过循环遍历尝试每一种可能性，表现最好的参数就是最终的结果。</li><li>大多数机器学习模型都包含可以调整以改变模型学习方式的参数，例如：逻辑回归模型。<ul><li>有个C控制正则化参数，影响模型的复杂性，选择最佳值C取决于训练模型的数据。</li><li>一种方法是尝试不同的值，然后选择给出最佳分数的值，这种技术称为网格搜索。</li><li>若必须为两个及两个以上参数选择值，将评估值集的所有组合，从而形成值网格。</li></ul></li><li>使用训练数据对逻辑回归模型进行评分<ul><li>若模型与数据过于接近，可能无法很好地预测未知数据，这种统计误差被称为过度拟合。</li><li>为了避免被训练的数据过度拟合导致的误差，可以保留一部分数据，专门用于测试模型。</li></ul></li></ul></li></ul><h4 id="1-默认参数"><a href="#1-默认参数" class="headerlink" title="(1) 默认参数"></a>(1) 默认参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets                      <span class="hljs-comment"># 将加载用于对鸢尾花进行分类的逻辑模型</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><br>iris = datasets.load_iris()                       <span class="hljs-comment"># 加载将使用的数据集</span><br><br>X = iris[<span class="hljs-string">&#x27;data&#x27;</span>]                                  <span class="hljs-comment"># 创建一组自变量X和一个因变量y</span><br>y = iris[<span class="hljs-string">&#x27;target&#x27;</span>]<br><br>logit = LogisticRegression(max_iter=<span class="hljs-number">10000</span>)        <span class="hljs-comment"># 查看iris数据集并尝试在逻辑回归中训练不同值的模型</span><br><br><span class="hljs-built_in">print</span>(logit.fit(X, y))                            <span class="hljs-comment"># 使模型适合数据</span><br><span class="hljs-built_in">print</span>(logit.score(X, y))                          <span class="hljs-comment"># 运行评分方法，默认设置C为1，得分为0.973</span><br></code></pre></td></tr></table></figure><h4 id="2-设置范围"><a href="#2-设置范围" class="headerlink" title="(2) 设置范围"></a>(2) 设置范围</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets                      <span class="hljs-comment"># 将加载用于对鸢尾花进行分类的逻辑模型</span><br><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LogisticRegression<br><br>iris = datasets.load_iris()                       <span class="hljs-comment"># 加载将使用的数据集</span><br><br>X = iris[<span class="hljs-string">&#x27;data&#x27;</span>]                                  <span class="hljs-comment"># 创建一组自变量X和一个因变量y</span><br>y = iris[<span class="hljs-string">&#x27;target&#x27;</span>]<br><br>logit = LogisticRegression(max_iter=<span class="hljs-number">10000</span>)        <span class="hljs-comment"># 查看iris数据集并尝试在逻辑回归中训练不同值的模型</span><br><br>C = [<span class="hljs-number">0.25</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">0.75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.25</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.75</span>, <span class="hljs-number">2</span>]      <span class="hljs-comment"># 将C设置为一系列值</span><br>scores = []                                       <span class="hljs-comment"># 创建一个空列表来存储分数</span><br><br><span class="hljs-keyword">for</span> choice <span class="hljs-keyword">in</span> C:                                  <span class="hljs-comment"># for循环更改模型的C值并在每次更改时评估模型</span><br>    logit.set_params(C=choice)<br>    logit.fit(X, y)<br>    scores.append(logit.score(X, y))<br><br><span class="hljs-built_in">print</span>(scores)                                     <span class="hljs-comment"># 通过存储在列表中的分数，评估最佳C值1.75左右</span><br></code></pre></td></tr></table></figure><h2 id="3-7-分类数据"><a href="#3-7-分类数据" class="headerlink" title="3-7 分类数据"></a>3-7 分类数据</h2><ul><li>分类数据<ul><li>当数据由字符串表示类别时，很难使用它们来训练只接受数字数据的机器学习模型。</li><li>此时可以转换数据，以便在模型中使用，而不是忽略分类数据并从模型中排除信息。</li><li>热编码：用一列代表类别中的每个组，对于每一列，值将为1或0，1表示包含组，0表示排除组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd                         <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>cars = pd.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)<br><span class="hljs-built_in">print</span>(cars.to_string())                     <span class="hljs-comment"># 在&quot;多元线性回归&quot;中预测CO2的排放量，排除了汽车品牌和型号</span><br></code></pre></td></tr></table></figure><h4 id="1-热编码"><a href="#1-热编码" class="headerlink" title="(1) 热编码"></a>(1) 热编码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd                         <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><br>cars = pd.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)<br>ohe_cars = pd.get_dummies(cars[[<span class="hljs-string">&#x27;Car&#x27;</span>]])    <span class="hljs-comment"># 执行一次热编码</span><br><br><span class="hljs-built_in">print</span>(ohe_cars.to_string())                 <span class="hljs-comment"># 为Car列中的每个汽车品牌创建了一个列</span><br></code></pre></td></tr></table></figure><h4 id="2-预测CO2"><a href="#2-预测CO2" class="headerlink" title="(2) 预测CO2"></a>(2) 预测CO2</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd                        <span class="hljs-comment"># data.csv改名为vehicle_info.csv</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> linear_model           <span class="hljs-comment"># 创建一个线性模型</span><br><br>cars = pd.read_csv(<span class="hljs-string">&#x27;data/vehicle_info.csv&#x27;</span>)<br>ohe_cars = pd.get_dummies(cars[[<span class="hljs-string">&#x27;Car&#x27;</span>]])   <span class="hljs-comment"># 执行一次热编码，创建虚拟变量</span><br><br>X = pd.concat([cars[[<span class="hljs-string">&#x27;Volume&#x27;</span>, <span class="hljs-string">&#x27;Weight&#x27;</span>]], ohe_cars], axis=<span class="hljs-number">1</span>)<br>y = cars[<span class="hljs-string">&#x27;CO2&#x27;</span>]                            <span class="hljs-comment"># 选择自变量X并按列添加虚拟变量，将因变量存储在y中</span><br><br>regr = linear_model.LinearRegression()     <span class="hljs-comment"># 将数据拟合为线性回归</span><br>regr.fit(X.values, y.values)<br><br>predictedCO2 = regr.predict([[<span class="hljs-number">2300</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><span class="hljs-built_in">print</span>(predictedCO2)                        <span class="hljs-comment"># 根据汽车的重量、体积和制造商来预测CO2排放量</span><br></code></pre></td></tr></table></figure><h4 id="3-Dummifying"><a href="#3-Dummifying" class="headerlink" title="(3) Dummifying"></a>(3) Dummifying</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>colors1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;color&#x27;</span>: [<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(colors1)                             <span class="hljs-comment"># 有一个表示颜色的列，2个组</span><br>dummies = pd.get_dummies(colors1, drop_first=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(dummies)                             <span class="hljs-comment"># 使用用于一次热编码的函数，然后删除其中一列</span><br><br>colors2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;color&#x27;</span>: [<span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;grey&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(colors2)                             <span class="hljs-comment"># 有一个表示颜色的列，3个组</span><br>dummies = pd.get_dummies(colors2, drop_first=<span class="hljs-literal">True</span>)<br>dummies[<span class="hljs-string">&#x27;color2&#x27;</span>] = colors2[<span class="hljs-string">&#x27;color&#x27;</span>]<br><span class="hljs-built_in">print</span>(dummies)                             <span class="hljs-comment"># 使用用于一次热编码的函数，然后删除其中一列</span><br></code></pre></td></tr></table></figure><h2 id="3-8-K-最近邻"><a href="#3-8-K-最近邻" class="headerlink" title="3-8 K-最近邻"></a>3-8 K-最近邻</h2><ul><li>K-最近邻<ul><li>K-Nearest Neighbor，KNN，即一种分类(Classification)算法，输入基于实例的学习，属于懒惰学习。</li><li>即没有训练阶段，数据集事先已有了分类和特征值，待收到新样本后直接进行处理，与急切学习相对应。</li><li>基本思想：如果一个样本在特征空间中的k个最邻近的样本中的大多数属于某一个类别，则该样本也划分为这个类别。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]          <span class="hljs-comment"># 两个输入特征x和y</span><br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br>classes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]         <span class="hljs-comment"># 一个目标类classes</span><br><br>plt.scatter(x, y, c=classes)<br>plt.show()                                       <span class="hljs-comment"># 可视化一些数据点</span><br></code></pre></td></tr></table></figure><h4 id="1-K-x3D-1拟合KNN"><a href="#1-K-x3D-1拟合KNN" class="headerlink" title="(1) K&#x3D;1拟合KNN"></a>(1) K&#x3D;1拟合KNN</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> warnings <span class="hljs-keyword">import</span> simplefilter               <span class="hljs-comment"># 忽视所有的警告消息</span><br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br>simplefilter(action=<span class="hljs-string">&#x27;ignore&#x27;</span>, category=FutureWarning)<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]         <span class="hljs-comment"># 两个输入特征x和y</span><br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br>classes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]        <span class="hljs-comment"># 一个目标类classes</span><br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                          <span class="hljs-comment"># 将输入特征转换为一组点</span><br>knn = KNeighborsClassifier(n_neighbors=<span class="hljs-number">1</span>)       <span class="hljs-comment"># K=1拟合KNN算法</span><br><br>knn.fit(data, classes)<br><br>new_x = <span class="hljs-number">8</span>                                       <span class="hljs-comment"># 创建新的x和y特征</span><br>new_y = <span class="hljs-number">21</span><br>new_point = [(new_x, new_y)]<br><br>prediction = knn.predict(new_point)             <span class="hljs-comment"># 调用knn.predict()分类一个新的数据点</span><br><br>plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[<span class="hljs-number">0</span>]])<br>plt.text(x=new_x - <span class="hljs-number">1.7</span>, y=new_y - <span class="hljs-number">0.7</span>, s=<span class="hljs-string">f&quot;new point, class: <span class="hljs-subst">&#123;prediction[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点，text()突出新点的位置</span><br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h4 id="2-K-x3D-5拟合KNN"><a href="#2-K-x3D-5拟合KNN" class="headerlink" title="(2) K&#x3D;5拟合KNN"></a>(2) K&#x3D;5拟合KNN</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> warnings <span class="hljs-keyword">import</span> simplefilter               <span class="hljs-comment"># 忽视所有的警告消息</span><br><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier<br>simplefilter(action=<span class="hljs-string">&#x27;ignore&#x27;</span>, category=FutureWarning)<br><br>x = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>]         <span class="hljs-comment"># 两个输入特征x和y</span><br>y = [<span class="hljs-number">21</span>, <span class="hljs-number">19</span>, <span class="hljs-number">24</span>, <span class="hljs-number">17</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">24</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">21</span>]<br>classes = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]        <span class="hljs-comment"># 一个目标类classes</span><br><br>data = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(x, y))                          <span class="hljs-comment"># 将输入特征转换为一组点</span><br>knn = KNeighborsClassifier(n_neighbors=<span class="hljs-number">5</span>)       <span class="hljs-comment"># K=5拟合KNN算法，更高的K值来改变预测</span><br><br>knn.fit(data, classes)<br><br>new_x = <span class="hljs-number">8</span>                                       <span class="hljs-comment"># 创建新的x和y特征</span><br>new_y = <span class="hljs-number">21</span><br>new_point = [(new_x, new_y)]<br><br>prediction = knn.predict(new_point)             <span class="hljs-comment"># 调用knn.predict()分类一个新的数据点</span><br><br>plt.scatter(x + [new_x], y + [new_y], c=classes + [prediction[<span class="hljs-number">0</span>]])<br>plt.text(x=new_x - <span class="hljs-number">1.7</span>, y=new_y - <span class="hljs-number">0.7</span>, s=<span class="hljs-string">f&quot;new point, class: <span class="hljs-subst">&#123;prediction[<span class="hljs-number">0</span>]&#125;</span>&quot;</span>)<br>plt.show()                                      <span class="hljs-comment"># 可视化一些数据点，text()突出新点的位置</span><br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h1 id="4-Bootstrap聚合"><a href="#4-Bootstrap聚合" class="headerlink" title="4 Bootstrap聚合"></a>4 Bootstrap聚合</h1><ul><li>Bootstrap聚合<ul><li>也叫Bagging算法或引导聚集算法，又称装袋算法，试图解决分类或回归的过度拟合问题。<ul><li>主要想法是分别训练几个不同的模型，然后让所有的模型表决测试样例的输出。</li><li>是机器学习中常规策略的一个例子，被称为模型平均，该技术被称为集成方法。</li></ul></li><li>了解装袋提高模型性能的方法，必须先评估分类器在数据集上的表现，装袋是决策树概念的延续。</li></ul></li></ul><h2 id="4-1-分类器评估"><a href="#4-1-分类器评估" class="headerlink" title="4-1 分类器评估"></a>4-1 分类器评估</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets                    <span class="hljs-comment"># 通过Sklearn的葡萄酒数据集发现不同类别的葡萄酒</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)        <span class="hljs-comment"># as_frame设为True，在加载数据时不会丢失特征名称</span><br><br>X = data.data                                   <span class="hljs-comment"># 将其存储到X(输入特征)和y(目标)中</span><br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>dtree = DecisionTreeClassifier(random_state=<span class="hljs-number">22</span>)<br>dtree.fit(X_train, y_train)                     <span class="hljs-comment"># 实例化一个基础分类器并将其拟合到训练数据中</span><br><br>y_pred = dtree.predict(X_test)                  <span class="hljs-comment"># 预测未见过测试集的葡萄酒类别并评估模型性能</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Train data accuracy:&quot;</span>, accuracy_score(y_true=y_train, y_pred=dtree.predict(X_train)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Test data accuracy:&quot;</span>, accuracy_score(y_true=y_test, y_pred=y_pred))<br></code></pre></td></tr></table></figure><h2 id="4-2-装袋分类器"><a href="#4-2-装袋分类器" class="headerlink" title="4-2 装袋分类器"></a>4-2 装袋分类器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)<br><br>X = data.data<br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>estimator_range = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>]  <span class="hljs-comment"># 创建一个值范围，代表想要在每个集成中使用的估计数量</span><br><br>models = []<br>scores = []<br><br><span class="hljs-keyword">for</span> n_estimators <span class="hljs-keyword">in</span> estimator_range:            <span class="hljs-comment"># for循环将模型和分数存储在单独的列表中以供后续可视化</span><br>    <span class="hljs-comment"># Create bagging classifier</span><br>    clf = BaggingClassifier(n_estimators=n_estimators, random_state=<span class="hljs-number">22</span>)<br>    <span class="hljs-comment"># Fit the model</span><br>    clf.fit(X_train, y_train)<br><br>    <span class="hljs-comment"># Append the model and score to their respective list</span><br>    models.append(clf)<br>    scores.append(accuracy_score(y_true=y_test, y_pred=clf.predict(X_test)))<br><br><span class="hljs-comment"># Generate the plot of scores against number of estimators</span><br>plt.figure(figsize=(<span class="hljs-number">9</span>, <span class="hljs-number">6</span>))<br>plt.plot(estimator_range, scores)<br><br><span class="hljs-comment"># Adjust labels and font (to make visable)</span><br>plt.xlabel(<span class="hljs-string">&quot;n_estimators&quot;</span>, fontsize=<span class="hljs-number">18</span>)         <span class="hljs-comment"># 通过迭代估计器数量的不同值</span><br>plt.ylabel(<span class="hljs-string">&quot;score&quot;</span>, fontsize=<span class="hljs-number">18</span>)                <span class="hljs-comment"># 可看到模型性能从82.2%提高到95.5%</span><br>plt.tick_params(labelsize=<span class="hljs-number">16</span>)                   <span class="hljs-comment"># 14后精度开始下降</span><br><br><span class="hljs-comment"># Visualize plot                                # 如果设置不同的random_state值，结果也会不同</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-3-另一种形式"><a href="#4-3-另一种形式" class="headerlink" title="4-3 另一种形式"></a>4-3 另一种形式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)<br><br>X = data.data                                   <span class="hljs-comment"># 袋外估计可能会高估二元分类问题中的错误</span><br>y = data.target                                 <span class="hljs-comment"># 因此只能用作对其他指标的补充</span><br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>oob_model = BaggingClassifier(n_estimators=<span class="hljs-number">12</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">22</span>)<br>oob_model.fit(X_train, y_train)                 <span class="hljs-comment"># 使用袋外指标创建模型，类似于测试集</span><br><br><span class="hljs-comment"># OOB和测试集使用的样本不同，并且数据集比较小，所以在准确率上存在差异</span><br><span class="hljs-built_in">print</span>(oob_model.oob_score_)<br></code></pre></td></tr></table></figure><h2 id="4-4-生成决策树"><a href="#4-4-生成决策树" class="headerlink" title="4-4 生成决策树"></a>4-4 生成决策树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> graphviz<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> tree<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-comment"># from sklearn.tree import plot_tree</span><br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.ensemble <span class="hljs-keyword">import</span> BaggingClassifier<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><br>data = datasets.load_wine(as_frame=<span class="hljs-literal">True</span>)<br><br>X = data.data<br>y = data.target<br><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.25</span>, random_state=<span class="hljs-number">22</span>)<br><br>oob_model = BaggingClassifier(n_estimators=<span class="hljs-number">12</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">22</span>)<br>oob_model.fit(X_train, y_train)<br><br>clf = BaggingClassifier(n_estimators=<span class="hljs-number">12</span>, oob_score=<span class="hljs-literal">True</span>, random_state=<span class="hljs-number">22</span>)<br>clf.fit(X_train, y_train)<br><br>plt.figure(figsize=(<span class="hljs-number">30</span>, <span class="hljs-number">20</span>))<br>dtree = clf.estimators_[<span class="hljs-number">0</span>]                      <span class="hljs-comment"># clf.estimators_是3个拟合决策树的列表</span><br><span class="hljs-built_in">print</span>(dtree)                                    <span class="hljs-comment"># 可以遍历列表访问每个树，这里取第一个</span><br><br><span class="hljs-comment"># plot_tree(clf.estimators_[0], feature_names = X.columns)</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br><br>dot_data = tree.export_graphviz(dtree, filled=<span class="hljs-literal">True</span>, rounded=<span class="hljs-literal">True</span>, special_characters=<span class="hljs-literal">True</span>)<br>graph = graphviz.Source(dot_data)<br>graph.render(<span class="hljs-string">&#x27;data/visual_dtree&#x27;</span>)               <span class="hljs-comment"># 生成visual_dtree.pdf可视化决策树</span><br></code></pre></td></tr></table></figure><h1 id="5-交叉验证-建模"><a href="#5-交叉验证-建模" class="headerlink" title="5 交叉验证(建模)"></a>5 交叉验证(建模)</h1><ul><li>交叉验证(建模)<ul><li>在机器学习建立模型和验证模型参数时常用的办法，一般被用于评估一个机器学习模型的表现。</li><li>重复使用数据，切分得到的样本，组合为不同的训练集和测试集，训练及评估模型预测的好坏。</li><li>优化测试集的参数可能会导致信息泄漏，导致模型在看不见的数据上表现更差，为纠正该问题，执行交叉验证。</li><li>K-Fold<ul><li>首先，模型中使用的训练数据被分成了k个较小的集合，用于验证模型。</li><li>然后，在k-1倍的训练集上训练模型，剩余的集合用作验证集评估模型。</li></ul></li><li>分层K-Fold<ul><li>在类别不平衡的情况下，需要一种方法来解释训练集和验证集的不平衡。</li><li>对目标类别进行分层，意味着这两个集合在所有类别中所占的比例相等。</li></ul></li><li>留一法，Leave-One-Out，简称LOO。<ul><li>使k等于数据集中数据的个数，每次只使用一个作为测试集，剩下的全作为训练集。</li><li>这种方法得出的结果，与训练整个测试集的期望值最为接近，但是成本也十分庞大。</li></ul></li><li>留P法，Leave-P-Out，简称LPO。<ul><li>使用样本中的某几项当做测试集，再从样本中选取某几项的可能种类称为P值。</li><li>Leave-P-Out可迅速提高模型的精确度，准确的描摹大样本数据集的特征信息。</li></ul></li><li>蒙特卡罗交叉验证，也称为Shuffle Split交叉验证。<ul><li>一种非常灵活的交叉验证策略，在这种技术中，数据集被随机划分为训练集和验证集。</li><li>假设100个样本，60%的样本用作训练集，20%用作测试集，剩下的20%将不被使用。</li></ul></li></ul></li></ul><h2 id="5-1-K-Fold"><a href="#5-1-K-Fold" class="headerlink" title="5-1 K-Fold"></a>5-1 K-Fold</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> KFold, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>k_folds = KFold(n_splits=<span class="hljs-number">5</span>)                         <span class="hljs-comment"># 评估模型，看在每个k-fold上的表现</span><br><br>scores = cross_val_score(clf, X, y, cv=k_folds)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-2-分层K-Fold"><a href="#5-2-分层K-Fold" class="headerlink" title="5-2 分层K-Fold"></a>5-2 分层K-Fold</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedKFold, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)<br><br>sk_folds = StratifiedKFold(n_splits=<span class="hljs-number">5</span>)              <span class="hljs-comment"># 折叠数保持相同</span><br><br>scores = cross_val_score(clf, X, y, cv=sk_folds)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())          <span class="hljs-comment"># 在确保存在分层类别时，平均CV从基本k倍增加</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-3-留一法-LOO"><a href="#5-3-留一法-LOO" class="headerlink" title="5-3 留一法(LOO)"></a>5-3 留一法(LOO)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> LeaveOneOut, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>loo = LeaveOneOut()<br><br>scores = cross_val_score(clf, X, y, cv=loo)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)          <span class="hljs-comment"># 执行交叉验证分数的数量等于数据集中观察的数量</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())          <span class="hljs-comment"># 鸢尾花数据集中有150个观测值，平均CV得分为94%</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-4-留P验证-LPO"><a href="#5-4-留P验证-LPO" class="headerlink" title="5-4 留P验证(LPO)"></a>5-4 留P验证(LPO)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> LeavePOut, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>lpo = LeavePOut(p=<span class="hljs-number">2</span>)<br><br>scores = cross_val_score(clf, X, y, cv=lpo)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())          <span class="hljs-comment"># 观测值数量足够多，实现了大致相同的平均CV分数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h2 id="5-5-蒙特卡罗验证"><a href="#5-5-蒙特卡罗验证" class="headerlink" title="5-5 蒙特卡罗验证"></a>5-5 蒙特卡罗验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> sklearn.tree <span class="hljs-keyword">import</span> DecisionTreeClassifier     <span class="hljs-comment"># 尝试对不同种类的鸢尾花进行分类</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> ShuffleSplit, cross_val_score<br><br>X, y = datasets.load_iris(return_X_y=<span class="hljs-literal">True</span>)          <span class="hljs-comment"># 加载数据</span><br><br>clf = DecisionTreeClassifier(random_state=<span class="hljs-number">42</span>)       <span class="hljs-comment"># 创建并拟合模型以进行评估</span><br><br>ss = ShuffleSplit(train_size=<span class="hljs-number">0.6</span>, test_size=<span class="hljs-number">0.3</span>, n_splits=<span class="hljs-number">5</span>)<br><br>scores = cross_val_score(clf, X, y, cv=ss)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Cross Validation Scores: &quot;</span>, scores)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Average CV Score: &quot;</span>, scores.mean())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of CV Scores used in Average: &quot;</span>, <span class="hljs-built_in">len</span>(scores))<br></code></pre></td></tr></table></figure><h1 id="6-AUC-ROC曲线"><a href="#6-AUC-ROC曲线" class="headerlink" title="6 AUC-ROC曲线"></a>6 AUC-ROC曲线</h1><ul><li>AUC-ROC曲线<ul><li>在不同阈值设置的条件下，分类问题的性能度量，ROC指概率曲线，AUC指正负类可正确分类的程度。<ul><li>告诉模型能够在多大程度上区分类，AUC越高，模型越能预测0为0和1为1。</li><li>类比疾病诊断模型，若AUC越高，模型对有疾病和无疾病的区分就会越好。</li></ul></li><li>术语定义：真阳性(TP)、假阳性(FP)。<ul><li>特异度(Specificity)&#x3D;TN&#x2F;(TN+FP)</li><li>假阳率(FPR)&#x3D;1-Specificity&#x3D;FP&#x2F;(TN+FP)</li><li>真阳率(TPR)&#x2F;召回率(Recall)&#x2F;敏感度(Sensitivity)&#x3D;TP&#x2F;(TP+FN)</li></ul></li></ul></li></ul><h2 id="6-1-不平衡数据"><a href="#6-1-不平衡数据" class="headerlink" title="6-1 不平衡数据"></a>6-1 不平衡数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, confusion_matrix<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br>y_proba = np.array([<span class="hljs-number">1</span>]*n)<br>y_pred = y_proba &gt; <span class="hljs-number">.5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_pred)&#125;</span>&#x27;</span>)<br>cf_mat = confusion_matrix(y, y_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Confusion matrix&#x27;</span>)<br><span class="hljs-built_in">print</span>(cf_mat)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 0 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]/n_0&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 1 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]/n_1&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="6-2-准确性评估"><a href="#6-2-准确性评估" class="headerlink" title="6-2 准确性评估"></a>6-2 准确性评估</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, confusion_matrix<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br>y_proba_1 = np.array([<span class="hljs-number">1</span>]*n)<br>y_pred_1 = y_proba_1 &gt; <span class="hljs-number">.5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_pred_1)&#125;</span>&#x27;</span>)<br>cf_mat = confusion_matrix(y, y_pred_1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Confusion matrix&#x27;</span>)                       <span class="hljs-comment"># 虽获得了高准确性，但该模型没有提供有关数据的信息</span><br><span class="hljs-built_in">print</span>(cf_mat)                                   <span class="hljs-comment"># 在100%的时间内准确地预测了1类</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 0 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]/n_0&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 在0%的时间内并未准确地预测到类</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 1 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]/n_1&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 以牺牲准确性为代价</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*****************************&#x27;</span>)          <span class="hljs-comment"># 拥有一个可在某程度上区分这两类的模型可能更好</span><br><br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that doesn&#x27;t always predict the mode</span><br>y_proba_2 = np.array(np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.7</span>, n_0).tolist() + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">1</span>, n_1).tolist())<br>y_pred_2 = y_proba_2 &gt; <span class="hljs-number">.5</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_pred_2)&#125;</span>&#x27;</span>)<br>cf_mat = confusion_matrix(y, y_pred_2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Confusion matrix&#x27;</span>)                       <span class="hljs-comment"># 第二组预测准确度分数没有第一组高</span><br><span class="hljs-built_in">print</span>(cf_mat)                                   <span class="hljs-comment"># 但每个类别的准确度更加平衡</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 0 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]/n_0&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 准确性作为评估指标会使第一个模型评分高于第二个模型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;class 1 accuracy: <span class="hljs-subst">&#123;cf_mat[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]/n_1&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 在这种情况下，最好使用其他评估指标，例如AUC</span><br></code></pre></td></tr></table></figure><h4 id="1-第一个模型"><a href="#1-第一个模型" class="headerlink" title="(1) 第一个模型"></a>(1) 第一个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score, roc_curve<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br>y_proba_1 = np.array([<span class="hljs-number">1</span>] * n)<br>y_pred_1 = y_proba_1 &gt; <span class="hljs-number">.5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>    plt.show()                                  <span class="hljs-comment"># AUC分数约为0.5，意味着该模型无法区分两个类别</span><br><br><br>plot_roc_curve(y, y_proba_1)                    <span class="hljs-comment"># 曲线看起来像一条斜率为1的线</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 1 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_proba_1)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h4 id="2-第二个模型"><a href="#2-第二个模型" class="headerlink" title="(2) 第二个模型"></a>(2) 第二个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Three lines to make our compiler able to draw</span><br><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_auc_score, roc_curve<br><br>n = <span class="hljs-number">10000</span>                                       <span class="hljs-comment"># 假设有一个不平衡的数据集</span><br>ratio = <span class="hljs-number">.95</span>                                     <span class="hljs-comment"># 其中大部分数据都是一个值</span><br>n_0 = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-ratio) * n)                        <span class="hljs-comment"># 可通过预测多数类来获得模型的高精度</span><br>n_1 = <span class="hljs-built_in">int</span>(ratio * n)<br><br>y = np.array([<span class="hljs-number">0</span>] * n_0 + [<span class="hljs-number">1</span>] * n_1)<br><br><span class="hljs-comment"># below are the probabilities obtained from a hypothetical model that doesn&#x27;t always predict the mode</span><br>y_proba_2 = np.array(np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.7</span>, n_0).tolist() + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">1</span>, n_1).tolist())<br>y_pred_2 = y_proba_2 &gt; <span class="hljs-number">.5</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>    plt.show()                                  <span class="hljs-comment"># AUC分数接近1，意味着该模型有能力将两个类分开</span><br><br><br>plot_roc_curve(y, y_proba_2)                    <span class="hljs-comment"># 曲线将更靠近图表的左上角</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 2 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_proba_2)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h2 id="6-3-类别预测概率"><a href="#6-3-类别预测概率" class="headerlink" title="6-3 类别预测概率"></a>6-3 类别预测概率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score, roc_auc_score<br><br>n = <span class="hljs-number">10000</span><br>y = np.array([<span class="hljs-number">0</span>] * n + [<span class="hljs-number">1</span>] * n)<br><br>y_prob_1 = np.array(                            <span class="hljs-comment"># 有两组来自假设模型的概率</span><br>    np.random.uniform(<span class="hljs-number">.25</span>, <span class="hljs-number">.5</span>, n//<span class="hljs-number">2</span>).tolist()   <span class="hljs-comment"># 第一个在预测两个类别时，概率接近.5</span><br>    + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist()     <span class="hljs-comment"># 第二个在预测两个类别时，概率接近0或1的极端值</span><br>    + np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.75</span>, n//<span class="hljs-number">2</span>).tolist()<br>)<br>y_prob_2 = np.array(<br>    np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.4</span>, n//<span class="hljs-number">2</span>).tolist() +<br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +<br>    np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">1</span>, n//<span class="hljs-number">2</span>).tolist()<br>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 1 accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_prob_1&gt;<span class="hljs-number">.5</span>)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 2 accuracy score: <span class="hljs-subst">&#123;accuracy_score(y, y_prob_2&gt;<span class="hljs-number">.5</span>)&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 1 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_prob_1)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;model 2 AUC score: <span class="hljs-subst">&#123;roc_auc_score(y, y_prob_2)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-第一个模型-1"><a href="#1-第一个模型-1" class="headerlink" title="(1) 第一个模型"></a>(1) 第一个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>n = <span class="hljs-number">10000</span><br>y = np.array([<span class="hljs-number">0</span>] * n + [<span class="hljs-number">1</span>] * n)<br><br>y_prob_1 = np.array(                            <span class="hljs-comment"># 有两组来自假设模型的概率</span><br>    np.random.uniform(<span class="hljs-number">.25</span>, <span class="hljs-number">.5</span>, n//<span class="hljs-number">2</span>).tolist()   <span class="hljs-comment"># 第一个在预测两个类别时，概率接近.5</span><br>    + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist()     <span class="hljs-comment"># 第二个在预测两个类别时，概率接近0或1的极端值</span><br>    + np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.75</span>, n//<span class="hljs-number">2</span>).tolist()<br>)<br>y_prob_2 = np.array(<br>    np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.4</span>, n // <span class="hljs-number">2</span>).tolist() +<br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +<br>    np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">1</span>, n // <span class="hljs-number">2</span>).tolist()<br>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)<br>    plt.show()<br><br><br>plot_roc_curve(y, y_prob_1)<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure><h4 id="2-第二个模型-1"><a href="#2-第二个模型-1" class="headerlink" title="(2) 第二个模型"></a>(2) 第二个模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># import sys</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># import matplotlib</span><br><span class="hljs-comment"># matplotlib.use(&#x27;Agg&#x27;)</span><br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> roc_curve<br><br>n = <span class="hljs-number">10000</span><br>y = np.array([<span class="hljs-number">0</span>] * n + [<span class="hljs-number">1</span>] * n)<br><br>y_prob_1 = np.array(                            <span class="hljs-comment"># 有两组来自假设模型的概率</span><br>    np.random.uniform(<span class="hljs-number">.25</span>, <span class="hljs-number">.5</span>, n//<span class="hljs-number">2</span>).tolist()   <span class="hljs-comment"># 第一个在预测两个类别时，概率接近.5</span><br>    + np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist()     <span class="hljs-comment"># 第二个在预测两个类别时，概率接近0或1的极端值</span><br>    + np.random.uniform(<span class="hljs-number">.5</span>, <span class="hljs-number">.75</span>, n//<span class="hljs-number">2</span>).tolist()<br>)<br>y_prob_2 = np.array(<br>    np.random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">.4</span>, n // <span class="hljs-number">2</span>).tolist() +<br>    np.random.uniform(<span class="hljs-number">.3</span>, <span class="hljs-number">.7</span>, n).tolist() +<br>    np.random.uniform(<span class="hljs-number">.6</span>, <span class="hljs-number">1</span>, n // <span class="hljs-number">2</span>).tolist()<br>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_roc_curve</span>(<span class="hljs-params">true_y, y_prob</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    plots the roc curve based of the probabilities</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    fpr, tpr, thresholds = roc_curve(true_y, y_prob)<br>    plt.plot(fpr, tpr)<br>    <span class="hljs-comment"># plt.xlabel(&#x27;False Positive Rate&#x27;)</span><br>    <span class="hljs-comment"># plt.ylabel(&#x27;True Positive Rate&#x27;)</span><br><br><br>fpr, tpr, thresholds = roc_curve(y, y_prob_2)<br>plt.plot(fpr, tpr)<br>plt.xlabel(<span class="hljs-string">&#x27;False Positive Rate&#x27;</span>)               <span class="hljs-comment"># 尽管两模型的准确度相似，但AUC分数高的模型更可靠</span><br>plt.ylabel(<span class="hljs-string">&#x27;True Positive Rate&#x27;</span>)                <span class="hljs-comment"># 考虑了预测概率，预测未来数据时更可能提供高准确性</span><br>plt.show()<br><br><span class="hljs-comment"># Two lines to make our compiler able to draw</span><br><span class="hljs-comment"># plt.savefig(sys.stdout.buffer)</span><br><span class="hljs-comment"># sys.stdout.flush()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Matplotlib</title>
    <link href="/2021/06/06/python/python09-python-matplotlib/"/>
    <url>/2021/06/06/python/python09-python-matplotlib/</url>
    
    <content type="html"><![CDATA[<p>Matplotlib是Python的低级图形绘制库，由John D.Hunter创建，大部分用Python编写，开源免费，用作可视化实用程序。</p><span id="more"></span><h1 id="1-Matplotlib"><a href="#1-Matplotlib" class="headerlink" title="1 Matplotlib"></a>1 Matplotlib</h1><ul><li>Matplotlib<ul><li>命令窗口下使用<code>pip install Matplotlib</code>进行安装。</li><li>通过import关键字将其导入应用程序：<code>import matplotlib</code>。</li><li>检查Matplotlib版本，版本字符串存储在<code>__version__</code>属性下。</li><li>大多数实用程序位于Pyplot子模块下，通常使用别名plt导入：<code>import matplotlib.pyplot as plt</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt         <span class="hljs-comment"># Pyplot子模块</span><br><br><span class="hljs-built_in">print</span>(matplotlib.__version__)           <span class="hljs-comment"># 检查Matplotlib版本</span><br><br>xpoints = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">6</span>])<br>ypoints = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">250</span>])<br>plt.plot(xpoints, ypoints)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="2-绘图操作"><a href="#2-绘图操作" class="headerlink" title="2 绘图操作"></a>2 绘图操作</h1><ul><li>绘图操作<ul><li><code>plot()</code>函数用于在图表中绘制点，默认情况下，是从一点到另一点绘制一条线。</li><li>采用参数指定图中的点，参数一包含x轴上点的数组，参数二包含y轴上点的数组。</li><li>x轴是水平轴，y轴是垂直轴。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>xpoints = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">8</span>])               <span class="hljs-comment"># 在图中从位置(1, 3)到位置(8, 10)画一条线</span><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(xpoints, ypoints)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-1-无线绘图"><a href="#2-1-无线绘图" class="headerlink" title="2-1 无线绘图"></a>2-1 无线绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>xpoints = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">8</span>])               <span class="hljs-comment"># 在图中从位置(1, 3)到位置(8, 10)画一条线</span><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(xpoints, ypoints, <span class="hljs-string">&#x27;o&#x27;</span>)          <span class="hljs-comment"># 仅绘制标记，可以使用快捷字符串符号参数“o”</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-2-多点绘图"><a href="#2-2-多点绘图" class="headerlink" title="2-2 多点绘图"></a>2-2 多点绘图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>xpoints = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>])         <span class="hljs-comment"># 绘制任意多的点，确保两个轴上的点数相同</span><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])        <span class="hljs-comment"># 在图中画一条线，从位置(1, 3)到(2, 8)，(6, 1)，最后到(8, 10)</span><br><br>plt.plot(xpoints, ypoints)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="2-3-默认X轴点"><a href="#2-3-默认X轴点" class="headerlink" title="2-3 默认X轴点"></a>2-3 默认X轴点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br><br>plt.plot(ypoints)                        <span class="hljs-comment"># x轴上的点默认值取决于y点的长度</span><br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="3-使用标记"><a href="#3-使用标记" class="headerlink" title="3 使用标记"></a>3 使用标记</h1><ul><li>使用标记<ul><li>使用关键字参数marker来强调带有指定标记的每个点。</li><li>标记参考<ul><li><code>&#39;*&#39;</code>、<code>&#39;,&#39;</code>、<code>&#39;x&#39;</code>、<code>&#39;X&#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;P&#39;</code>、<code>&#39;s&#39;</code>、<code>&#39;D&#39;</code>、<code>&#39;d&#39;</code>、<code>&#39;p&#39;</code>、<code>&#39;H&#39;</code></li><li><code>&#39;h&#39;</code>、<code>&#39;v&#39;</code>、<code>&#39;^&#39;</code>、<code>&#39;&lt;&#39;</code>、<code>&#39;&gt;&#39;</code>、<code>&#39;1&#39;</code>、<code>&#39;2&#39;</code>、<code>&#39;3&#39;</code>、<code>&#39;4&#39;</code>、<code>&#39;|&#39;</code>、<code>&#39;_&#39;</code></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>)                    <span class="hljs-comment"># 关键字参数marker来强调带有指定标记的每个点</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-1-fmt"><a href="#3-1-fmt" class="headerlink" title="3-1 fmt"></a>3-1 fmt</h2><ul><li>fmt<ul><li>快捷字符串表示法参数，<code>marker|line|color</code>。</li><li>画线参考：<code>&#39;-&#39;</code>即<code>solid</code>、<code>&#39;:&#39;</code>即<code>dotted</code>、<code>&#39;--&#39;</code>即<code>dashed</code>、<code>&#39;-.&#39;</code>即<code>dashdot</code>。</li><li>关键字参数linestyle或ls更改绘制线的样式，若在fmt中省略线值，则不会绘制任何线。</li><li>颜色参考：<code>&#39;r&#39;</code>、<code>&#39;g&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code>、<code>&#39;m&#39;</code>、<code>&#39;y&#39;</code>、<code>&#39;k&#39;</code>、<code>&#39;w&#39;</code>。</li><li>关键字参数color或c设置线条的颜色，支持使用十六进制颜色值和<a href="https://www.w3schools.com/colors/colors_names.asp">140种支持的颜色名</a>。</li><li>使用关键字参数linewidth或lw来更改设置线条的宽度，该值是一个浮点数，以点为单位。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, <span class="hljs-string">&#x27;o:r&#x27;</span>)                         <span class="hljs-comment"># 颜色标记</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-点虚线"><a href="#1-点虚线" class="headerlink" title="(1) 点虚线"></a>(1) 点虚线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, linestyle=<span class="hljs-string">&#x27;dotted&#x27;</span>)            <span class="hljs-comment"># 关键字参数linestyle或ls更改绘制线的样式</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-长虚线"><a href="#2-长虚线" class="headerlink" title="(2) 长虚线"></a>(2) 长虚线</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, linestyle=<span class="hljs-string">&#x27;dashed&#x27;</span>)            <span class="hljs-comment"># 关键字参数linestyle或ls更改绘制线的样式</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-线条颜色"><a href="#3-线条颜色" class="headerlink" title="(3) 线条颜色"></a>(3) 线条颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, color=<span class="hljs-string">&#x27;g&#x27;</span>)                     <span class="hljs-comment"># 关键字参数color或c设置线条的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-十六进制颜色值"><a href="#4-十六进制颜色值" class="headerlink" title="(4) 十六进制颜色值"></a>(4) 十六进制颜色值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, c=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>)                   <span class="hljs-comment"># 十六进制颜色值</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-140种支持的颜色"><a href="#5-140种支持的颜色" class="headerlink" title="(5) 140种支持的颜色"></a>(5) 140种支持的颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, c=<span class="hljs-string">&#x27;hotpink&#x27;</span>)                   <span class="hljs-comment"># 140种支持的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-更改设置线条行宽"><a href="#6-更改设置线条行宽" class="headerlink" title="(6) 更改设置线条行宽"></a>(6) 更改设置线条行宽</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, linewidth=<span class="hljs-string">&#x27;20.5&#x27;</span>)              <span class="hljs-comment"># 关键字参数linewidth或lw更改设置线条的宽度</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-2-标记大小"><a href="#3-2-标记大小" class="headerlink" title="3-2 标记大小"></a>3-2 标记大小</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>)             <span class="hljs-comment"># 关键字参数markersize或ms来设置标记的大小</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-3-标记颜色"><a href="#3-3-标记颜色" class="headerlink" title="3-3 标记颜色"></a>3-3 标记颜色</h2><ul><li>标记颜色<ul><li>使用关键字参数markeredgecolor或mec来设置标记的边缘外颜色。</li><li>使用关键字参数markerfacecolor或mfc来设置标记的边缘内颜色。</li><li>参见：<a href="https://www.w3schools.com/colors/colors_names.asp">140种支持的颜色名称</a>。</li></ul></li></ul><h4 id="1-边缘外颜色"><a href="#1-边缘外颜色" class="headerlink" title="(1) 边缘外颜色"></a>(1) 边缘外颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;r&#x27;</span>)    <span class="hljs-comment"># 关键字参数markeredgecolor或mec来设置标记的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-边缘内颜色"><a href="#2-边缘内颜色" class="headerlink" title="(2) 边缘内颜色"></a>(2) 边缘内颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mfc=<span class="hljs-string">&#x27;r&#x27;</span>)    <span class="hljs-comment"># 关键字参数markerfacecolor或mfc来设置标记的颜色</span><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-mec和mfc着色"><a href="#3-mec和mfc着色" class="headerlink" title="(3) mec和mfc着色"></a>(3) mec和mfc着色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;r&#x27;</span>, mfc=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-十六进制颜色值-1"><a href="#4-十六进制颜色值-1" class="headerlink" title="(4) 十六进制颜色值"></a>(4) 十六进制颜色值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>, mfc=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-140种支持的颜色-1"><a href="#5-140种支持的颜色-1" class="headerlink" title="(5) 140种支持的颜色"></a>(5) 140种支持的颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>ypoints = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.plot(ypoints, marker=<span class="hljs-string">&#x27;o&#x27;</span>, ms=<span class="hljs-number">20</span>, mec=<span class="hljs-string">&#x27;hotpink&#x27;</span>, mfc=<span class="hljs-string">&#x27;hotpink&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="3-4-多线绘制"><a href="#3-4-多线绘制" class="headerlink" title="3-4 多线绘制"></a>3-4 多线绘制</h2><ul><li>多线绘制<ul><li>通过<code>plt.plot()</code>函数简单地绘制任意多条线。</li><li>通过同一函数中为每条线添加x和y轴的点绘制。</li></ul></li></ul><h4 id="1-指定绘制"><a href="#1-指定绘制" class="headerlink" title="(1) 指定绘制"></a>(1) 指定绘制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>y2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])<br><br>plt.plot(y1)                                    <span class="hljs-comment"># 为每条线指定一个函数进行绘制</span><br>plt.plot(y2)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-x和y轴点"><a href="#2-x和y轴点" class="headerlink" title="(2) x和y轴点"></a>(2) x和y轴点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x1 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])                     <span class="hljs-comment"># 指定两条线的x和y点值进行绘制</span><br>y1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>x2 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>])<br><br>plt.plot(x1, y1, x2, y2)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="4-添加标签"><a href="#4-添加标签" class="headerlink" title="4 添加标签"></a>4 添加标签</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.plot(x, y)<br><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)                     <span class="hljs-comment"># 向x轴和y轴添加标签</span><br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4-1 标题"></a>4-1 标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.plot(x, y)<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)                  <span class="hljs-comment"># 为x轴和y轴添加标题</span><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)                     <span class="hljs-comment"># 向x轴和y轴添加标签</span><br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-2-字体属性"><a href="#4-2-字体属性" class="headerlink" title="4-2 字体属性"></a>4-2 字体属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>font1 = &#123;<span class="hljs-string">&#x27;family&#x27;</span>: <span class="hljs-string">&#x27;serif&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">20</span>&#125;<br>font2 = &#123;<span class="hljs-string">&#x27;family&#x27;</span>: <span class="hljs-string">&#x27;serif&#x27;</span>, <span class="hljs-string">&#x27;color&#x27;</span>: <span class="hljs-string">&#x27;darkred&#x27;</span>, <span class="hljs-string">&#x27;size&#x27;</span>: <span class="hljs-number">15</span>&#125;<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>, fontdict=font1)  <span class="hljs-comment"># 设置标题和标签的字体属性</span><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>, fontdict=font2)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>, fontdict=font2)<br><br>plt.plot(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="4-3-定位标题"><a href="#4-3-定位标题" class="headerlink" title="4-3 定位标题"></a>4-3 定位标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>, loc=<span class="hljs-string">&#x27;left&#x27;</span>)      <span class="hljs-comment"># 合法值为left、right和center，默认值为center</span><br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="5-添加网格"><a href="#5-添加网格" class="headerlink" title="5 添加网格"></a>5 添加网格</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid()                                      <span class="hljs-comment"># 添加网格线</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-1-x轴网格"><a href="#5-1-x轴网格" class="headerlink" title="5-1 x轴网格"></a>5-1 x轴网格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid(axis=<span class="hljs-string">&#x27;x&#x27;</span>)                              <span class="hljs-comment"># x轴网格线</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-2-y轴网格"><a href="#5-2-y轴网格" class="headerlink" title="5-2 y轴网格"></a>5-2 y轴网格</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid(axis=<span class="hljs-string">&#x27;y&#x27;</span>)                              <span class="hljs-comment"># y轴网格线</span><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-3-网格线属性"><a href="#5-3-网格线属性" class="headerlink" title="5-3 网格线属性"></a>5-3 网格线属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">115</span>, <span class="hljs-number">120</span>, <span class="hljs-number">125</span>])<br>y = np.array([<span class="hljs-number">240</span>, <span class="hljs-number">250</span>, <span class="hljs-number">260</span>, <span class="hljs-number">270</span>, <span class="hljs-number">280</span>, <span class="hljs-number">290</span>, <span class="hljs-number">300</span>, <span class="hljs-number">310</span>, <span class="hljs-number">320</span>, <span class="hljs-number">330</span>])<br><br>plt.title(<span class="hljs-string">&quot;Sports Watch Data&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;Average Pulse&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;Calorie Burnage&quot;</span>)<br><br>plt.plot(x, y)<br>plt.grid(color=<span class="hljs-string">&#x27;green&#x27;</span>, linestyle=<span class="hljs-string">&#x27;--&#x27;</span>, linewidth=<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="6-绘制子图"><a href="#6-绘制子图" class="headerlink" title="6 绘制子图"></a>6 绘制子图</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># 绘制2个图，plot 1，布局按行和列组织</span><br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># 绘制2个图，plot 2，第三个参数指当前图的索引</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-1-彼此绘制"><a href="#6-1-彼此绘制" class="headerlink" title="6-1 彼此绘制"></a>6-1 彼此绘制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 1</span><br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 2</span><br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-2-绘制6个图"><a href="#6-2-绘制6个图" class="headerlink" title="6-2 绘制6个图"></a>6-2 绘制6个图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)<br>plt.plot(x, y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>plt.plot(x, y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>plt.plot(x, y)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>)<br>plt.plot(x, y)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-3-每图添加标题"><a href="#6-3-每图添加标题" class="headerlink" title="6-3 每图添加标题"></a>6-3 每图添加标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 1</span><br>plt.title(<span class="hljs-string">&quot;SALES&quot;</span>)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 2</span><br>plt.title(<span class="hljs-string">&quot;INCOME&quot;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-4-添加超极标题"><a href="#6-4-添加超极标题" class="headerlink" title="6-4 添加超极标题"></a>6-4 添加超极标题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 1</span><br>plt.title(<span class="hljs-string">&quot;SALES&quot;</span>)<br><br>x = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>y = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>])<br>plt.subplot(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)<br>plt.plot(x, y)                                  <span class="hljs-comment"># plot 2</span><br>plt.title(<span class="hljs-string">&quot;INCOME&quot;</span>)<br><br>plt.suptitle(<span class="hljs-string">&quot;MY SHOP&quot;</span>)                         <span class="hljs-comment"># 超级标题</span><br>plt.show()<br></code></pre></td></tr></table></figure><h1 id="7-绘制图形"><a href="#7-绘制图形" class="headerlink" title="7 绘制图形"></a>7 绘制图形</h1><ul><li>绘制图形<ul><li>散点图：<code>scatter()</code>函数，需要两个相同长度的数组，颜色图参考<a href="https://www.w3schools.com/python/matplotlib_scatter.asp">Available ColorMaps</a>。</li><li>条形图：<code>bar()</code>函数，使用<code>width</code>和<code>height</code>设置垂直条和水平条的宽度，默认值为0.8。</li><li>直方图：<code>hist()</code>函数，使用一个数字数组来创建直方图，该数组作为参数发送到函数中。</li><li>饼状图：<code>pie()</code>函数，第一个楔形的绘制从x轴开始(即起始角为0°开始)，并逆时针移动。<ul><li>楔形颜色可以使用十六进制颜色值、也可以使用140种支持的颜色名称。</li><li>或<code>&#39;r&#39;</code>、<code>&#39;g&#39;</code>、<code>&#39;b&#39;</code>、<code>&#39;c&#39;</code>、<code>&#39;m&#39;</code>、<code>&#39;y&#39;</code>、<code>&#39;k&#39;</code>、<code>&#39;w&#39;</code>等快捷方式。</li></ul></li></ul></li></ul><h2 id="7-1-散点图"><a href="#7-1-散点图" class="headerlink" title="7-1 散点图"></a>7-1 散点图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br><br>plt.scatter(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-比较图"><a href="#1-比较图" class="headerlink" title="(1) 比较图"></a>(1) 比较图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>plt.scatter(x, y)<br><br>x = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>])<br>y = np.array([<span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">84</span>, <span class="hljs-number">105</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">94</span>, <span class="hljs-number">100</span>, <span class="hljs-number">79</span>, <span class="hljs-number">112</span>, <span class="hljs-number">91</span>, <span class="hljs-number">80</span>, <span class="hljs-number">85</span>])<br>plt.scatter(x, y)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-设置颜色"><a href="#2-设置颜色" class="headerlink" title="(2) 设置颜色"></a>(2) 设置颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>plt.scatter(x, y, color=<span class="hljs-string">&#x27;hotpink&#x27;</span>)<br><br>x = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">14</span>, <span class="hljs-number">12</span>])<br>y = np.array([<span class="hljs-number">100</span>, <span class="hljs-number">105</span>, <span class="hljs-number">84</span>, <span class="hljs-number">105</span>, <span class="hljs-number">90</span>, <span class="hljs-number">99</span>, <span class="hljs-number">90</span>, <span class="hljs-number">95</span>, <span class="hljs-number">94</span>, <span class="hljs-number">100</span>, <span class="hljs-number">79</span>, <span class="hljs-number">112</span>, <span class="hljs-number">91</span>, <span class="hljs-number">80</span>, <span class="hljs-number">85</span>])<br>plt.scatter(x, y, color=<span class="hljs-string">&#x27;#88c999&#x27;</span>)<br><br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-给点上色"><a href="#3-给点上色" class="headerlink" title="(3) 给点上色"></a>(3) 给点上色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>colors = np.array(<br>    [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;yellow&quot;</span>, <span class="hljs-string">&quot;pink&quot;</span>, <span class="hljs-string">&quot;black&quot;</span>, <span class="hljs-string">&quot;orange&quot;</span>,<br>     <span class="hljs-string">&quot;purple&quot;</span>, <span class="hljs-string">&quot;beige&quot;</span>, <span class="hljs-string">&quot;brown&quot;</span>, <span class="hljs-string">&quot;gray&quot;</span>, <span class="hljs-string">&quot;cyan&quot;</span>, <span class="hljs-string">&quot;magenta&quot;</span>])<br><br>plt.scatter(x, y, c=colors)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-使用颜色图"><a href="#4-使用颜色图" class="headerlink" title="(4) 使用颜色图"></a>(4) 使用颜色图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>colors = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>, <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>])<br><br>plt.scatter(x, y, c=colors, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-包含颜色图例"><a href="#5-包含颜色图例" class="headerlink" title="(5) 包含颜色图例"></a>(5) 包含颜色图例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>colors = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">45</span>, <span class="hljs-number">50</span>, <span class="hljs-number">55</span>, <span class="hljs-number">60</span>, <span class="hljs-number">70</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>])<br><br>plt.scatter(x, y, c=colors, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>plt.colorbar()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-更改点的大小"><a href="#6-更改点的大小" class="headerlink" title="(6) 更改点的大小"></a>(6) 更改点的大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>sizes = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">60</span>, <span class="hljs-number">90</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">800</span>, <span class="hljs-number">75</span>])<br><br>plt.scatter(x, y, s=sizes)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="7-调整点的透明度"><a href="#7-调整点的透明度" class="headerlink" title="(7) 调整点的透明度"></a>(7) 调整点的透明度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">6</span>])<br>y = np.array([<span class="hljs-number">99</span>, <span class="hljs-number">86</span>, <span class="hljs-number">87</span>, <span class="hljs-number">88</span>, <span class="hljs-number">111</span>, <span class="hljs-number">86</span>, <span class="hljs-number">103</span>, <span class="hljs-number">87</span>, <span class="hljs-number">94</span>, <span class="hljs-number">78</span>, <span class="hljs-number">77</span>, <span class="hljs-number">85</span>, <span class="hljs-number">86</span>])<br>sizes = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">60</span>, <span class="hljs-number">90</span>, <span class="hljs-number">10</span>, <span class="hljs-number">300</span>, <span class="hljs-number">600</span>, <span class="hljs-number">800</span>, <span class="hljs-number">75</span>])<br><br>plt.scatter(x, y, s=sizes, alpha=<span class="hljs-number">0.5</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="8-颜色结合透明度"><a href="#8-颜色结合透明度" class="headerlink" title="(8) 颜色结合透明度"></a>(8) 颜色结合透明度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br>y = np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br>colors = np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br>sizes = <span class="hljs-number">10</span> * np.random.randint(<span class="hljs-number">100</span>, size=<span class="hljs-number">100</span>)<br><br>plt.scatter(x, y, c=colors, s=sizes, alpha=<span class="hljs-number">0.5</span>, cmap=<span class="hljs-string">&#x27;nipy_spectral&#x27;</span>)<br>plt.colorbar()<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="7-2-条形图"><a href="#7-2-条形图" class="headerlink" title="7-2 条形图"></a>7-2 条形图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-水平显示"><a href="#1-水平显示" class="headerlink" title="(1) 水平显示"></a>(1) 水平显示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.barh(x, y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-条形颜色"><a href="#2-条形颜色" class="headerlink" title="(2) 条形颜色"></a>(2) 条形颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, color=<span class="hljs-string">&#x27;red&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-十六进制颜色值"><a href="#3-十六进制颜色值" class="headerlink" title="(3) 十六进制颜色值"></a>(3) 十六进制颜色值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, color=<span class="hljs-string">&#x27;#4CAF50&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-140种支持的颜色"><a href="#4-140种支持的颜色" class="headerlink" title="(4) 140种支持的颜色"></a>(4) 140种支持的颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, color=<span class="hljs-string">&#x27;hotpink&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-设置垂直条的宽度"><a href="#5-设置垂直条的宽度" class="headerlink" title="(5) 设置垂直条的宽度"></a>(5) 设置垂直条的宽度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.bar(x, y, width=<span class="hljs-number">0.1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-设置水平条的高度"><a href="#6-设置水平条的高度" class="headerlink" title="(6) 设置水平条的高度"></a>(6) 设置水平条的高度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.array([<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>])<br>y = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br>plt.barh(x, y, height=<span class="hljs-number">0.1</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="7-3-直方图"><a href="#7-3-直方图" class="headerlink" title="7-3 直方图"></a>7-3 直方图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = np.random.normal(<span class="hljs-number">170</span>, <span class="hljs-number">10</span>, <span class="hljs-number">250</span>)<br><br>plt.hist(x)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="7-4-饼状图"><a href="#7-4-饼状图" class="headerlink" title="7-4 饼状图"></a>7-4 饼状图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br><br>plt.pie(y)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="1-标签"><a href="#1-标签" class="headerlink" title="(1) 标签"></a>(1) 标签</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="2-起始角"><a href="#2-起始角" class="headerlink" title="(2) 起始角"></a>(2) 起始角</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels, startangle=<span class="hljs-number">90</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="3-楔形脱离"><a href="#3-楔形脱离" class="headerlink" title="(3) 楔形脱离"></a>(3) 楔形脱离</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br>explode = [<span class="hljs-number">0.2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>plt.pie(y, labels=labels, explode=explode)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="4-饼图阴影"><a href="#4-饼图阴影" class="headerlink" title="(4) 饼图阴影"></a>(4) 饼图阴影</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br>explode = [<span class="hljs-number">0.2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br><br>plt.pie(y, labels=labels, explode=explode, shadow=<span class="hljs-literal">True</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="5-楔形颜色"><a href="#5-楔形颜色" class="headerlink" title="(5) 楔形颜色"></a>(5) 楔形颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br>colors = [<span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-string">&#x27;hotpink&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;#4CAF50&#x27;</span>]<br><br>plt.pie(y, labels=labels, colors=colors)<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="6-添加图例"><a href="#6-添加图例" class="headerlink" title="(6) 添加图例"></a>(6) 添加图例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels)<br>plt.legend()<br>plt.show()<br></code></pre></td></tr></table></figure><h4 id="7-图例标题"><a href="#7-图例标题" class="headerlink" title="(7) 图例标题"></a>(7) 图例标题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>y = np.array([<span class="hljs-number">35</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">15</span>])<br>labels = [<span class="hljs-string">&quot;Apples&quot;</span>, <span class="hljs-string">&quot;Bananas&quot;</span>, <span class="hljs-string">&quot;Cherries&quot;</span>, <span class="hljs-string">&quot;Dates&quot;</span>]<br><br>plt.pie(y, labels=labels)<br>plt.legend(title=<span class="hljs-string">&#x27;Four Fruits:&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matplotlib</tag>
      
      <tag>图形绘制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python SciPy</title>
    <link href="/2021/05/09/python/python08-python-scipy/"/>
    <url>/2021/05/09/python/python08-python-scipy/</url>
    
    <content type="html"><![CDATA[<p>SciPy是一个在底层使用NumPy的科学计算库，为优化、统计和信号处理提供了实用功能，由NumPy创建者Travis Olliphant创建。</p><span id="more"></span><h1 id="1-SciPy"><a href="#1-SciPy" class="headerlink" title="1 SciPy"></a>1 SciPy</h1><ul><li>SciPy<ul><li>命令窗口下使用<code>pip install scipy</code>进行安装。</li><li>通过import关键字将其导入应用程序：<code>import scipy</code>。</li><li>检查SciPy版本，版本字符串存在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> scipy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants          <span class="hljs-comment"># 导入</span><br><br><span class="hljs-built_in">print</span>(constants.liter)<br><span class="hljs-built_in">print</span>(scipy.__version__)             <span class="hljs-comment"># 检查SciPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-常量"><a href="#2-常量" class="headerlink" title="2 常量"></a>2 常量</h1><ul><li>常量<ul><li>PI是科学常数的一个例子，<code>dir()</code>函数可以看到常量模块下所有单元的列表。</li><li>单位类别<ul><li>质量：返回以kg为单位的指定单位。</li><li>时间：返回以秒为单位的指定单位。</li><li>长度：返回以米为单位的指定单位。</li><li>角度：返回以弧度为单位的指定单位。</li><li>热量：返回以焦耳为单位的指定单位。</li><li>功率：返回以瓦特为单位的指定单位。</li><li>力量：返回以牛顿为单位的指定单位。</li><li>压力：返回以帕斯卡为单位的指定单位。</li><li>区域：返回以平方米为单位的指定单位。</li><li>体积：返回以立方米为单位的指定单位。</li><li>速度：返回以米每秒为单位的指定单位。</li><li>温度：返回以开尔文为单位的指定单位。</li><li>二进制：返回以字节为单位的指定单位。</li><li>公制(SI)：返回以米为单位的指定单位。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.pi)                  <span class="hljs-comment"># 打印PI的常数值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(constants))                <span class="hljs-comment"># 列出所有常量</span><br></code></pre></td></tr></table></figure><h2 id="2-1-质量与时间"><a href="#2-1-质量与时间" class="headerlink" title="2-1 质量与时间"></a>2-1 质量与时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.gram)               <span class="hljs-comment"># 0.001，克【质量】</span><br><span class="hljs-built_in">print</span>(constants.metric_ton)         <span class="hljs-comment"># 1000.0，公吨</span><br><span class="hljs-built_in">print</span>(constants.grain)              <span class="hljs-comment"># 6.479891e-05，格令</span><br><span class="hljs-built_in">print</span>(constants.lb)                 <span class="hljs-comment"># 0.45359236999999997，磅</span><br><span class="hljs-built_in">print</span>(constants.pound)              <span class="hljs-comment"># 0.45359236999999997，磅</span><br><span class="hljs-built_in">print</span>(constants.oz)                 <span class="hljs-comment"># 0.028349523124999998，盎司</span><br><span class="hljs-built_in">print</span>(constants.ounce)              <span class="hljs-comment"># 0.028349523124999998，盎司</span><br><span class="hljs-built_in">print</span>(constants.stone)              <span class="hljs-comment"># 6.3502931799999995，英石</span><br><span class="hljs-built_in">print</span>(constants.long_ton)           <span class="hljs-comment"># 1016.0469088，英长吨</span><br><span class="hljs-built_in">print</span>(constants.short_ton)          <span class="hljs-comment"># 907.1847399999999，英短吨</span><br><span class="hljs-built_in">print</span>(constants.troy_ounce)         <span class="hljs-comment"># 0.031103476799999998，金衡盎司</span><br><span class="hljs-built_in">print</span>(constants.troy_pound)         <span class="hljs-comment"># 0.37324172159999996，金衡磅</span><br><span class="hljs-built_in">print</span>(constants.carat)              <span class="hljs-comment"># 0.0002，克拉</span><br><span class="hljs-built_in">print</span>(constants.atomic_mass)        <span class="hljs-comment"># 1.66053904e-27，原子质量</span><br><span class="hljs-built_in">print</span>(constants.m_u)                <span class="hljs-comment"># 1.66053904e-27，质子或原子的原子量(原子质量)</span><br><span class="hljs-built_in">print</span>(constants.u)                  <span class="hljs-comment"># 1.66053904e-27，相对原子质量</span><br><br><span class="hljs-built_in">print</span>(constants.minute)             <span class="hljs-comment"># 60.0，分钟【时间】</span><br><span class="hljs-built_in">print</span>(constants.hour)               <span class="hljs-comment"># 3600.0，小时</span><br><span class="hljs-built_in">print</span>(constants.day)                <span class="hljs-comment"># 86400.0，日</span><br><span class="hljs-built_in">print</span>(constants.week)               <span class="hljs-comment"># 604800.0，星期</span><br><span class="hljs-built_in">print</span>(constants.year)               <span class="hljs-comment"># 31536000.0，年</span><br><span class="hljs-built_in">print</span>(constants.Julian_year)        <span class="hljs-comment"># 31557600.0，儒略年(用于天文学)，与Gregorian year(公历年)略有不同</span><br></code></pre></td></tr></table></figure><h2 id="2-2-长度与角度"><a href="#2-2-长度与角度" class="headerlink" title="2-2 长度与角度"></a>2-2 长度与角度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.inch)               <span class="hljs-comment"># 0.0254，英寸【长度】</span><br><span class="hljs-built_in">print</span>(constants.foot)               <span class="hljs-comment"># 0.30479999999999996，英尺</span><br><span class="hljs-built_in">print</span>(constants.yard)               <span class="hljs-comment"># 0.9143999999999999，码</span><br><span class="hljs-built_in">print</span>(constants.mile)               <span class="hljs-comment"># 1609.3439999999998，英里</span><br><span class="hljs-built_in">print</span>(constants.mil)                <span class="hljs-comment"># 2.5399999999999997e-05，千分之一英寸</span><br><span class="hljs-built_in">print</span>(constants.pt)                 <span class="hljs-comment"># 0.00035277777777777776，点</span><br><span class="hljs-built_in">print</span>(constants.point)              <span class="hljs-comment"># 0.00035277777777777776，磅</span><br><span class="hljs-built_in">print</span>(constants.survey_foot)        <span class="hljs-comment"># 0.3048006096012192，测量英尺(用于土地测量)</span><br><span class="hljs-built_in">print</span>(constants.survey_mile)        <span class="hljs-comment"># 1609.3472186944373，测量英里(用于土地测量)</span><br><span class="hljs-built_in">print</span>(constants.nautical_mile)      <span class="hljs-comment"># 1852.0，海里(用于海上测量)</span><br><span class="hljs-built_in">print</span>(constants.fermi)              <span class="hljs-comment"># 1e-15，费米(用于表示原子核大小)</span><br><span class="hljs-built_in">print</span>(constants.angstrom)           <span class="hljs-comment"># 1e-10，埃(用于表示分子和原子的大小)</span><br><span class="hljs-built_in">print</span>(constants.micron)             <span class="hljs-comment"># 1e-06，微米</span><br><span class="hljs-built_in">print</span>(constants.au)                 <span class="hljs-comment"># 149597870691.0，天文单位(用于表示天体间距离)</span><br><span class="hljs-built_in">print</span>(constants.astronomical_unit)  <span class="hljs-comment"># 149597870691.0，天文单位(用于表示天体间距离)</span><br><span class="hljs-built_in">print</span>(constants.light_year)         <span class="hljs-comment"># 9460730472580800.0，光年(用于表示星际距离)</span><br><span class="hljs-built_in">print</span>(constants.parsec)             <span class="hljs-comment"># 3.0856775813057292e+16，秒差距(用于表示星际距离)</span><br><br><span class="hljs-built_in">print</span>(constants.degree)             <span class="hljs-comment"># 0.017453292519943295，度【角度】</span><br><span class="hljs-built_in">print</span>(constants.arcmin)             <span class="hljs-comment"># 0.0002908882086657216，角度的1/60</span><br><span class="hljs-built_in">print</span>(constants.arcminute)          <span class="hljs-comment"># 0.0002908882086657216，角度的1/60</span><br><span class="hljs-built_in">print</span>(constants.arcsec)             <span class="hljs-comment"># 4.84813681109536e-06，角度的1/3600</span><br><span class="hljs-built_in">print</span>(constants.arcsecond)          <span class="hljs-comment"># 4.84813681109536e-06，角度的1/3600</span><br></code></pre></td></tr></table></figure><h2 id="2-3-热量与功率"><a href="#2-3-热量与功率" class="headerlink" title="2-3 热量与功率"></a>2-3 热量与功率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.eV)                 <span class="hljs-comment"># 1.6021766208e-19，电子伏特【热量】</span><br><span class="hljs-built_in">print</span>(constants.electron_volt)      <span class="hljs-comment"># 1.6021766208e-19，电子伏特</span><br><span class="hljs-built_in">print</span>(constants.calorie)            <span class="hljs-comment"># 4.184，卡路里</span><br><span class="hljs-built_in">print</span>(constants.calorie_th)         <span class="hljs-comment"># 4.184，热力学卡路里</span><br><span class="hljs-built_in">print</span>(constants.calorie_IT)         <span class="hljs-comment"># 4.1868，国际标准卡路里</span><br><span class="hljs-built_in">print</span>(constants.erg)                <span class="hljs-comment"># 1e-07，小能量单位(1厘米距离内的力为1达因的物体所具有的能量)</span><br><span class="hljs-built_in">print</span>(constants.Btu)                <span class="hljs-comment"># 1055.05585262，英国热量单位</span><br><span class="hljs-built_in">print</span>(constants.Btu_IT)             <span class="hljs-comment"># 1055.05585262，英国热量单位(国际标准)</span><br><span class="hljs-built_in">print</span>(constants.Btu_th)             <span class="hljs-comment"># 1054.3502644888888，热力学热量单位</span><br><span class="hljs-built_in">print</span>(constants.ton_TNT)            <span class="hljs-comment"># 4184000000.0，爆炸当量单位(一吨三硝基甲苯TNT爆炸时所释放的能量)</span><br><br><span class="hljs-built_in">print</span>(constants.hp)                 <span class="hljs-comment"># 745.6998715822701，马力【功率】</span><br><span class="hljs-built_in">print</span>(constants.horsepower)         <span class="hljs-comment"># 745.6998715822701，英制马力</span><br></code></pre></td></tr></table></figure><h2 id="2-4-力量与压力"><a href="#2-4-力量与压力" class="headerlink" title="2-4 力量与压力"></a>2-4 力量与压力</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.dyn)                <span class="hljs-comment"># 1e-05，厘米-克-秒制(CGS单位制)【力量】</span><br><span class="hljs-built_in">print</span>(constants.dyne)               <span class="hljs-comment"># 1e-05，厘米-克-秒制(CGS单位制)</span><br><span class="hljs-built_in">print</span>(constants.lbf)                <span class="hljs-comment"># 4.4482216152605，英制磅力</span><br><span class="hljs-built_in">print</span>(constants.pound_force)        <span class="hljs-comment"># 4.4482216152605，英制磅力</span><br><span class="hljs-built_in">print</span>(constants.kgf)                <span class="hljs-comment"># 9.80665，千克力(公制单位)</span><br><span class="hljs-built_in">print</span>(constants.kilogram_force)     <span class="hljs-comment"># 9.80665，千克力</span><br><br><span class="hljs-built_in">print</span>(constants.atm)                <span class="hljs-comment"># 101325.0，标准大气压【压力】</span><br><span class="hljs-built_in">print</span>(constants.atmosphere)         <span class="hljs-comment"># 101325.0，标准大气压</span><br><span class="hljs-built_in">print</span>(constants.bar)                <span class="hljs-comment"># 100000.0，巴(用于描述气体、液体和固体的压力)</span><br><span class="hljs-built_in">print</span>(constants.torr)               <span class="hljs-comment"># 133.32236842105263，托(用于描述低压气体的压力)</span><br><span class="hljs-built_in">print</span>(constants.mmHg)               <span class="hljs-comment"># 133.32236842105263，毫米汞柱</span><br><span class="hljs-built_in">print</span>(constants.psi)                <span class="hljs-comment"># 6894.757293168361，磅力/平方英寸</span><br></code></pre></td></tr></table></figure><h2 id="2-5-区域与体积"><a href="#2-5-区域与体积" class="headerlink" title="2-5 区域与体积"></a>2-5 区域与体积</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.hectare)            <span class="hljs-comment"># 10000.0，公顷【区域】</span><br><span class="hljs-built_in">print</span>(constants.acre)               <span class="hljs-comment"># 4046.8564223999992，英亩(测量土地面积)</span><br><br><span class="hljs-built_in">print</span>(constants.liter)              <span class="hljs-comment"># 0.001，升【体积】</span><br><span class="hljs-built_in">print</span>(constants.litre)              <span class="hljs-comment"># 0.001，升</span><br><span class="hljs-built_in">print</span>(constants.gallon)             <span class="hljs-comment"># 0.0037854117839999997，加仑</span><br><span class="hljs-built_in">print</span>(constants.gallon_US)          <span class="hljs-comment"># 0.0037854117839999997，美制加仑</span><br><span class="hljs-built_in">print</span>(constants.gallon_imp)         <span class="hljs-comment"># 0.00454609，英制加仑</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce)        <span class="hljs-comment"># 2.9573529562499998e-05，液量盎司</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce_US)     <span class="hljs-comment"># 2.9573529562499998e-05，美制液量盎司</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce_imp)    <span class="hljs-comment"># 2.84130625e-05，英制液量盎司</span><br><span class="hljs-built_in">print</span>(constants.barrel)             <span class="hljs-comment"># 0.15898729492799998，桶(用于表示原油、石油等其他液体的容量)</span><br><span class="hljs-built_in">print</span>(constants.bbl)                <span class="hljs-comment"># 0.15898729492799998，桶(barrel缩写，通常指美国石油桶)</span><br></code></pre></td></tr></table></figure><h2 id="2-6-速度与温度"><a href="#2-6-速度与温度" class="headerlink" title="2-6 速度与温度"></a>2-6 速度与温度</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.kmh)                <span class="hljs-comment"># 0.2777777777777778，千米每小时【速度】</span><br><span class="hljs-built_in">print</span>(constants.mph)                <span class="hljs-comment"># 0.44703999999999994，英里每小时</span><br><span class="hljs-built_in">print</span>(constants.mach)               <span class="hljs-comment"># 340.5，马赫(无量纲单位，马赫数为1表物体速度等于声速，即音速)</span><br><span class="hljs-built_in">print</span>(constants.speed_of_sound)     <span class="hljs-comment"># 340.5，声速(标准大气压下，空气中的声速约每秒343米)</span><br><span class="hljs-built_in">print</span>(constants.knot)               <span class="hljs-comment"># 0.5144444444444445，节</span><br><br><span class="hljs-built_in">print</span>(constants.zero_Celsius)       <span class="hljs-comment"># 273.15，摄氏温标下的零度，即水的冰点温度【温度】</span><br><span class="hljs-built_in">print</span>(constants.degree_Fahrenheit)  <span class="hljs-comment"># 0.5555555555555556，华氏温标下的温度</span><br></code></pre></td></tr></table></figure><h2 id="2-7-二进制与公制"><a href="#2-7-二进制与公制" class="headerlink" title="2-7 二进制与公制"></a>2-7 二进制与公制</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.kibi)               <span class="hljs-comment"># 1024，千字节，KB【二进制】</span><br><span class="hljs-built_in">print</span>(constants.mebi)               <span class="hljs-comment"># 1048576，兆字节，MB</span><br><span class="hljs-built_in">print</span>(constants.gibi)               <span class="hljs-comment"># 1073741824，吉字节，GB</span><br><span class="hljs-built_in">print</span>(constants.tebi)               <span class="hljs-comment"># 1099511627776，太字节，TB</span><br><span class="hljs-built_in">print</span>(constants.pebi)               <span class="hljs-comment"># 1125899906842624，拍字节，PB</span><br><span class="hljs-built_in">print</span>(constants.exbi)               <span class="hljs-comment"># 1152921504606846976，艾字节，EB</span><br><span class="hljs-built_in">print</span>(constants.zebi)               <span class="hljs-comment"># 1180591620717411303424，齐比字节，ZiB</span><br><span class="hljs-built_in">print</span>(constants.yobi)               <span class="hljs-comment"># 1208925819614629174706176，尧比字节，YiB</span><br><br><span class="hljs-built_in">print</span>(constants.yotta)              <span class="hljs-comment"># 1e+24，10的24次方【公制】</span><br><span class="hljs-built_in">print</span>(constants.zetta)              <span class="hljs-comment"># 1e+21，10的21次方</span><br><span class="hljs-built_in">print</span>(constants.exa)                <span class="hljs-comment"># 1e+18，10的18次方</span><br><span class="hljs-built_in">print</span>(constants.peta)               <span class="hljs-comment"># 1000000000000000.0，10的15次方</span><br><span class="hljs-built_in">print</span>(constants.tera)               <span class="hljs-comment"># 1000000000000.0，10的12次方</span><br><span class="hljs-built_in">print</span>(constants.giga)               <span class="hljs-comment"># 1000000000.0，10的9次方</span><br><span class="hljs-built_in">print</span>(constants.mega)               <span class="hljs-comment"># 1000000.0，10的6次方</span><br><span class="hljs-built_in">print</span>(constants.kilo)               <span class="hljs-comment"># 1000.0，10的3次方</span><br><span class="hljs-built_in">print</span>(constants.hecto)              <span class="hljs-comment"># 100.0，10的2次方</span><br><span class="hljs-built_in">print</span>(constants.deka)               <span class="hljs-comment"># 10.0，10的1次方</span><br><span class="hljs-built_in">print</span>(constants.deci)               <span class="hljs-comment"># 0.1，10的负1次方</span><br><span class="hljs-built_in">print</span>(constants.centi)              <span class="hljs-comment"># 0.01，10的负2次方</span><br><span class="hljs-built_in">print</span>(constants.milli)              <span class="hljs-comment"># 0.001，10的负3次方</span><br><span class="hljs-built_in">print</span>(constants.micro)              <span class="hljs-comment"># 1e-06，10的负6次方</span><br><span class="hljs-built_in">print</span>(constants.nano)               <span class="hljs-comment"># 1e-09，10的负9次方</span><br><span class="hljs-built_in">print</span>(constants.pico)               <span class="hljs-comment"># 1e-12，10的负12次方</span><br><span class="hljs-built_in">print</span>(constants.femto)              <span class="hljs-comment"># 1e-15，10的负15次方</span><br><span class="hljs-built_in">print</span>(constants.atto)               <span class="hljs-comment"># 1e-18，10的负18次方</span><br><span class="hljs-built_in">print</span>(constants.zepto)              <span class="hljs-comment"># 1e-21，10的负21次方</span><br></code></pre></td></tr></table></figure><h1 id="3-优化器"><a href="#3-优化器" class="headerlink" title="3 优化器"></a>3 优化器</h1><ul><li>优化器<ul><li>在SciPy中定义的一组过程，找到函数的最小值，或找到方程的根。</li><li>NumPy能够为多项式和线性方程求根，但是不能为非线性方程求根。</li><li>例如：<code>x+cos(x)</code>，使用SciPy的optimize.root功能，接受两个必需的参数。<ul><li>x0，对根的初始猜测。</li><li>fun，表示方程的函数。</li></ul></li><li>optimze.root返回一个对象，其中包含有关解决方案的信息。</li><li>最小化函数<ul><li>非线性方程下一个函数代表一条曲线。</li><li>曲线有高点和低点，高点称为最大值，低点称为最小值。</li><li>整个曲线的最高点称为全局最大值，其余的称为局部最大值。</li><li>整个曲线的最低点称为全局最小值，其余的称为局部最小值。</li></ul></li><li>使用<code>scipy.optimize.minimize()</code>来最小化函数，接受以下参数。<ul><li>x0，对根的初始猜测。</li><li>fun，表示方程的函数。</li><li>options，定义额外参数的字典。</li><li>callback，每次优化迭代后调用的函数。</li><li>method，要使用的方法名称，<code>CG</code>、<code>BFGS</code>、<code>Newton-CG</code>、<code>L-BFGS-B</code>、<code>TNC</code>、<code>COBYLA</code>、<code>SLSQP</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> cos<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> root<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eqn</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + cos(x)<br><br><br>myroot = root(eqn, <span class="hljs-number">0</span>)               <span class="hljs-comment"># 求方程x + cos(x)的根</span><br><span class="hljs-built_in">print</span>(myroot)                       <span class="hljs-comment"># 打印有关解决方案的所有信息</span><br><span class="hljs-built_in">print</span>(myroot.x)                     <span class="hljs-comment"># 返回的对象包含有关解决方案的更多信息</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eqnr</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">return</span> y**<span class="hljs-number">2</span> + y + <span class="hljs-number">2</span><br><br><br>mymin = minimize(eqnr, <span class="hljs-number">0</span>, method=<span class="hljs-string">&#x27;BFGS&#x27;</span>)<br><span class="hljs-built_in">print</span>(mymin)                        <span class="hljs-comment"># 使用BFGS方法最小化y^2 + y + 2函数</span><br></code></pre></td></tr></table></figure><h1 id="4-稀疏数据"><a href="#4-稀疏数据" class="headerlink" title="4 稀疏数据"></a>4 稀疏数据</h1><ul><li>稀疏数据<ul><li>具有大部分未使用元素的数据，元素不携带任何信息。<ul><li>稀疏数据：表示大多数项目值为0的数据集。</li><li>密集数组：与稀疏数组相反，大多数值不为0。</li></ul></li><li>科学计算中处理线性代数的偏导数时会遇到稀疏数据。</li><li>SciPy有一个scipy.sparse模块，用于处理稀疏数据，主要使用两种类型的稀疏矩阵。<ul><li>CSC：压缩稀疏列。</li><li>CSR：压缩稀疏行，通过将数组传递给<code>scipy.sparse.csr_matrix()</code>函数来创建。</li></ul></li><li>还可以使用data属性，用于查看存储的数据，<code>count_nonzero()</code>方法可以计算非零数。</li><li><code>eliminate_zeros()</code>方法从矩阵中删除零条目，<code>sum_duplicates()</code>方法消除重复条目。</li><li><code>tocsc()</code>方法从CSR类型转换为CSC类型，稀疏矩阵同样还支持普通矩阵支持的所有操作。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix<br><br>arr1 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(csr_matrix(arr1))                       <span class="hljs-comment"># 从数组创建CSR矩阵</span><br><br>arr2 = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])<br><span class="hljs-built_in">print</span>(csr_matrix(arr2).data)                  <span class="hljs-comment"># 查看存储的数据，非零项</span><br><span class="hljs-built_in">print</span>(csr_matrix(arr2).count_nonzero())       <span class="hljs-comment"># 计算非零数</span><br><br>mat1 = csr_matrix(arr2)<br>mat1.eliminate_zeros()                        <span class="hljs-comment"># 删除零条目</span><br><span class="hljs-built_in">print</span>(mat1)<br><br>mat2 = csr_matrix(arr2)<br>mat2.sum_duplicates()                         <span class="hljs-comment"># 消除重复项</span><br><span class="hljs-built_in">print</span>(mat2)<br><br>arr3 = csr_matrix(arr2).tocsc()               <span class="hljs-comment"># 从CSR类型转换为CSC类型</span><br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure><h1 id="5-图表数据"><a href="#5-图表数据" class="headerlink" title="5 图表数据"></a>5 图表数据</h1><ul><li>图表数据<ul><li>使用scipy.sparse.csgraph模块处理图表数据结构。</li><li>邻接矩阵：Adjacency Matrix，表示顶点之间相邻关系的矩阵。<ul><li>通过<code>connected_components()</code>方法查找所有连接的组件。</li><li>迪杰斯特拉：通过<code>dijkstra()</code>方法在图中找到从一个元素到另一个元素的最短路径。<ul><li>limit：路径的最大权重。</li><li>indices：元素的索引，仅返回该元素的所有路径。</li><li>return_predecessors：布尔值，True将返回整个遍历路径，否则为False。</li></ul></li><li>弗洛伊德·沃歇尔：<code>floyd_warshall()</code>方法找到所有元素对之间的最短路径。</li><li>贝尔曼福特：<code>bellman_ford()</code>方法找到所有元素对之间的最短路径，也可处理负权重。</li><li>深度一阶<ul><li><code>depth_first_order()</code>方法从节点返回深度优先遍历。</li><li>这一方法采用了两个参数，即图表和遍历图的起始元素。</li></ul></li><li>广度优先顺序<ul><li><code>breadth_first_order()</code>方法从节点返回广度优先遍历。</li><li>这一方法采用了两个参数，包括图表和遍历图的起始元素。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> dijkstra<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> bellman_ford<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> floyd_warshall<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> depth_first_order<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> breadth_first_order<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> connected_components<br><br>arr1 = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br>arr2 = csr_matrix(arr1)<br><span class="hljs-built_in">print</span>(connected_components(arr2))             <span class="hljs-comment"># 查找所有连接的组件</span><br><br>arr3 = csr_matrix(arr1)                       <span class="hljs-comment"># 元素1到元素2的最短路径</span><br><span class="hljs-built_in">print</span>(dijkstra(arr3, return_predecessors=<span class="hljs-literal">True</span>, indices=<span class="hljs-number">0</span>))<br><br>arr4 = csr_matrix(arr1)                       <span class="hljs-comment"># 所有元素对之间的最短路径</span><br><span class="hljs-built_in">print</span>(floyd_warshall(arr4, return_predecessors=<span class="hljs-literal">True</span>))<br><br>arr5 = csr_matrix(arr1)                       <span class="hljs-comment"># 用给定的负权重找到元素1到元素2的最短路径</span><br><span class="hljs-built_in">print</span>(bellman_ford(arr5, return_predecessors=<span class="hljs-literal">True</span>, indices=<span class="hljs-number">0</span>))<br><br>arr6 = np.array([<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], <br>    [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>])<br>arr7 = csr_matrix(arr6)<br><span class="hljs-built_in">print</span>(depth_first_order(arr7, <span class="hljs-number">1</span>))             <span class="hljs-comment"># 对于给定的邻接矩阵，首先遍历图深度</span><br><br>arr8 = csr_matrix(arr6)<br><span class="hljs-built_in">print</span>(breadth_first_order(arr8, <span class="hljs-number">1</span>))           <span class="hljs-comment"># 对于给定的邻接矩阵，首先遍历图宽度</span><br></code></pre></td></tr></table></figure><h1 id="6-空间数据"><a href="#6-空间数据" class="headerlink" title="6 空间数据"></a>6 空间数据</h1><ul><li>空间数据<ul><li>指在几何空间中表示的数据，例如坐标系上的点，SciPy提供了scipy.spatial模块。</li><li>三角测量：利用三角形计算多边形的面积，通过点生成三角部分的方法用<code>Delaunay()</code>。</li><li>凸包：覆盖了所有给定点的最小多边形，可以使用<code>ConvexHull()</code>方法进行凸包的创建。</li><li>KDTrees：指针对最近邻查询优化的数据结构，有效地询问了哪些点最接近某个给定点。<ul><li><code>KDTree()</code>：返回一个KDTree对象。</li><li><code>query()</code>：返回最近邻点的距离和邻点的位置。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> KDTree<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> Delaunay<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> ConvexHull<br><br>points1 = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>]])<br>simplices = Delaunay(points1).simplices       <span class="hljs-comment"># simplices属性创建了三角形符号的一般化</span><br>plt.triplot(points1[:, <span class="hljs-number">0</span>], points1[:, <span class="hljs-number">1</span>], simplices)<br>plt.scatter(points1[:, <span class="hljs-number">0</span>], points1[:, <span class="hljs-number">1</span>], color=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show()                                    <span class="hljs-comment"># 为points1矩阵创建三角部分</span><br><br>points2 = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>],<br>                    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])<br>hull = ConvexHull(points2)<br>hull_points = hull.simplices<br>plt.scatter(points2[:, <span class="hljs-number">0</span>], points2[:, <span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> simplex <span class="hljs-keyword">in</span> hull_points:<br>    plt.plot(points2[simplex, <span class="hljs-number">0</span>], points2[simplex, <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;k-&#x27;</span>)<br>plt.show()                                    <span class="hljs-comment"># 为points2矩阵创建凸包</span><br><br>points3 = [(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (-<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>)]<br>kdtree = KDTree(points3)<br>res = kdtree.query((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(res)                                    <span class="hljs-comment"># 找到点(1, 1)的最近邻点</span><br></code></pre></td></tr></table></figure><ul><li>距离矩阵<ul><li>两个向量之间的距离不仅可以是直线长度，还可以是它们与原点的夹角，或所需的单位步数等。</li><li>欧几里得距离：<code>euclidean()</code>。</li><li>余弦距离：是A和B两点之间的余弦角值，<code>cosine()</code>。</li><li>城市街区距离(曼哈顿距离)：采用四方向移动计算的距离，<code>cityblock()</code>。</li><li>汉明距离：两位不同的位比例，测量二进制序列距离的方法，<code>hamming()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cosine<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> hamming<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> euclidean<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cityblock<br><br>p1 = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>p2 = (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>res1 = euclidean(p1, p2)<br><span class="hljs-built_in">print</span>(res1)                                   <span class="hljs-comment"># 给定点之间的欧几里得距离</span><br><br>res2 = cosine(p1, p2)<br><span class="hljs-built_in">print</span>(res2)                                   <span class="hljs-comment"># 给定点之间的余弦距离</span><br><br>res3 = cityblock(p1, p2)<br><span class="hljs-built_in">print</span>(res3)                                   <span class="hljs-comment"># 给定点之间的街区距离</span><br><br>p3 = (<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>)<br>p4 = (<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>)<br>res4 = hamming(p3, p4)<br><span class="hljs-built_in">print</span>(res4)                                   <span class="hljs-comment"># 给定点之间的汉明距离</span><br></code></pre></td></tr></table></figure><h1 id="7-Matlab数组"><a href="#7-Matlab数组" class="headerlink" title="7 Matlab数组"></a>7 Matlab数组</h1><ul><li>Matlab数组<ul><li>SciPy提供了模块scipy.io，具有处理Matlab数组的功能。</li><li><code>savemat()</code>：以Matlab格式导出数据。<ul><li>mdict：包含数据的字典。</li><li>filename：保存数据的文件名。</li><li>do_compression：布尔值，指定是否压缩结果，默认为假。</li></ul></li><li><code>loadmat()</code>：从Matlab文件中导入数据，filename是必须参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> io<br><br>arr1 = np.arange(<span class="hljs-number">10</span>)                          <span class="hljs-comment"># 将arr1数组作为变量名vec导出到arr1_file.mat文件</span><br>io.savemat(<span class="hljs-string">&#x27;matlab/arr1_file.mat&#x27;</span>, &#123;<span class="hljs-string">&quot;vec&quot;</span>: arr1&#125;)<br><br>arr2 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, ])<br>io.savemat(<span class="hljs-string">&#x27;matlab/arr2_file.mat&#x27;</span>, &#123;<span class="hljs-string">&quot;vec&quot;</span>: arr2&#125;)<br>mydata = io.loadmat(<span class="hljs-string">&#x27;matlab/arr2_file.mat&#x27;</span>)   <span class="hljs-comment"># savemat导出Export，loadmat导入Import</span><br><span class="hljs-built_in">print</span>(mydata)                                 <span class="hljs-comment"># 从arr2_file.mat文件导入数组，返回一个结构化数组</span><br><span class="hljs-built_in">print</span>(mydata[<span class="hljs-string">&#x27;vec&#x27;</span>])                          <span class="hljs-comment"># 仅显示来自matlab数据的数组</span><br><br>mydata = io.loadmat(<span class="hljs-string">&#x27;matlab/arr2_file.mat&#x27;</span>, squeeze_me=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(mydata[<span class="hljs-string">&#x27;vec&#x27;</span>])                          <span class="hljs-comment"># 参数去除额外增加的一维[]</span><br></code></pre></td></tr></table></figure><h1 id="8-插值"><a href="#8-插值" class="headerlink" title="8 插值"></a>8 插值</h1><ul><li>插值<ul><li>在给定点之间生成点的方法，例如点1和2，插值并找到点1.33和1.66。</li><li>机器学习中经常处理数据集中的缺失数据，插值通常用于替换这些值。</li><li>SciPy的scipy.interpolate模块具有许多处理插值的函数。<ul><li>一维插值：<code>interp1d()</code>，用于对具有1个变量的分布进行插值，点被拟合为曲线。</li><li>样条插值：<code>UnivariateSpline()</code>，点被拟合为一个叫样条多项式定义的分段函数。</li><li>径向基函数插值：使用<code>Rbf()</code>函数，径向基函数是对应于固定参考点定义的函数。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> Rbf<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> interp1d<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> UnivariateSpline<br><br>xs1 = np.arange(<span class="hljs-number">10</span>)<br>ys1 = <span class="hljs-number">2</span>*xs1 + <span class="hljs-number">1</span><br>interp_func = interp1d(xs1, ys1)<br>newarr1 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr1)                                <span class="hljs-comment"># 对于给定的xs1和ys1插值从2.1、2.2...到2.9</span><br><br>xs2 = np.arange(<span class="hljs-number">10</span>)<br>ys2 = xs2**<span class="hljs-number">2</span> + np.sin(xs2) + <span class="hljs-number">1</span><br>interp_func = UnivariateSpline(xs2, ys2)<br>newarr2 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr2)                                <span class="hljs-comment"># 为非线性点找到2.1、2.2...2.9的单变量样条插值</span><br><br>xs3 = np.arange(<span class="hljs-number">10</span>)<br>ys3 = xs3**<span class="hljs-number">2</span> + np.sin(xs3) + <span class="hljs-number">1</span><br>interp_func = Rbf(xs3, ys3)<br>newarr3 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr3)                                <span class="hljs-comment"># 插入xs3和ys3并找到2.1、2.2...2.9的值</span><br></code></pre></td></tr></table></figure><h1 id="9-显著性测试"><a href="#9-显著性测试" class="headerlink" title="9 显著性测试"></a>9 显著性测试</h1><ul><li>显著性测试<ul><li>SciPy提供的scipy.stats模块，具有执行统计显著性检验的功能。</li><li>技术及关键字<ul><li>统计学假设：关于总体参数的假设。</li><li>零假设：假设观察结果在统计上不显著。</li><li>替代假设：假设观察结果是由于某种原因，零假设的替代品。</li><li>一尾测试：当假设仅测试值的一侧时，称为单尾检验。</li><li>二尾测试：当假设正在测试值的两侧时，称二尾测试。</li><li>阿尔法值：Alpha值是显著性水平。</li><li>P值：数据实际与极端的接近程度。</li><li>如果P值&lt;&#x3D;Alpha值，拒绝原假设并说数据具有统计显著性，否则接受原假设。</li></ul></li><li>T检验(双尾测试)<ul><li>用于确定两个变量的平均值之间是否存在显著差异，是否属于同一分布。</li><li><code>ttest_ind()</code>：用两个相同大小的样本，生成一个t统计量和p值的元组。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> ttest_ind<br><br>v1 = np.random.normal(size=<span class="hljs-number">100</span>)<br>v2 = np.random.normal(size=<span class="hljs-number">100</span>)<br><br>res = ttest_ind(v1, v2)                       <span class="hljs-comment"># 查找给定值v1和v2是否来自同一分布</span><br>pes = ttest_ind(v1, v2).pvalue                <span class="hljs-comment"># 只返回p值</span><br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(pes)<br></code></pre></td></tr></table></figure><h2 id="9-1-KS测试"><a href="#9-1-KS测试" class="headerlink" title="9-1 KS测试"></a>9-1 KS测试</h2><ul><li>KS测试<ul><li>用于检查给定值是否服从分布，可以用作一尾或二尾测试，默认情况下是两个尾的。</li><li><code>kstest()</code>将要测试的值和CDF作为两个参数，CDF可以是字符串或返回概率的可调用函数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> kstest<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br>res = kstest(v, <span class="hljs-string">&#x27;norm&#x27;</span>)                        <span class="hljs-comment"># 查找给定值是否服从正态分布</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="9-2-统计描述"><a href="#9-2-统计描述" class="headerlink" title="9-2 统计描述"></a>9-2 统计描述</h2><ul><li>统计描述<ul><li>使用<code>describe()</code>函数，查看数组中值的摘要。</li><li>返回参数：观察次数、最小值和最大值、平均值、方差、偏度、峰度。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> describe<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br>res = describe(v)                              <span class="hljs-comment"># 显示数组中值的统计描述</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="9-3-正态性检验"><a href="#9-3-正态性检验" class="headerlink" title="9-3 正态性检验"></a>9-3 正态性检验</h2><ul><li>正态性检验<ul><li>基于偏度和峰度，使用<code>normaltest()</code>函数返回原假设的p值。</li><li>偏度：数据对称性的度量，正态分布时是0，负数数据向左倾斜，正数数据向右倾斜。</li><li>峰度：衡量数据是重尾还是轻尾正态分布的度量，正峰度是重尾，负峰度则轻微拖尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> normaltest<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> skew, kurtosis<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(skew(v))                                 <span class="hljs-comment"># 偏度</span><br><span class="hljs-built_in">print</span>(kurtosis(v))                             <span class="hljs-comment"># 峰度</span><br><span class="hljs-built_in">print</span>(normaltest(v))                           <span class="hljs-comment"># 查找数据是否来自正态分布</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SciPy</tag>
      
      <tag>科学计算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Pandas</title>
    <link href="/2021/04/13/python/python07-python-pandas/"/>
    <url>/2021/04/13/python/python07-python-pandas/</url>
    
    <content type="html"><![CDATA[<p>Pandas既指Panel Data，又指Data Analysis，具有分析、清理、探索和操作数据的功能，由Wes McKinney于2008年创建。</p><span id="more"></span><h1 id="1-Pandas"><a href="#1-Pandas" class="headerlink" title="1 Pandas"></a>1 Pandas</h1><ul><li>Pandas<ul><li>命令窗口下使用<code>pip install pandas</code>进行安装。</li><li>通过import关键字将其导入应用程序，通常以<code>pd</code>别名替代。</li><li>检查Pandas版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd                 <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>dataset = &#123;<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>],<br>    <span class="hljs-string">&quot;passing&quot;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>]<br>&#125;<br>var = pd.DataFrame(dataset)<br><span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-built_in">print</span>(pd.__version__)               <span class="hljs-comment"># 检查Pandas版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建系列"><a href="#2-创建系列" class="headerlink" title="2 创建系列"></a>2 创建系列</h1><ul><li>创建系列<ul><li>Pandas Series就像表格中的一列，是一个保存任何类型数据的一维数组。</li><li>若未指定其他内容，使用索引号标记值，第一个值索引为0，第二个为1，以此类推。</li><li>index参数创建自定义标签，创建系列时还可用键值对象，同理index参数指定标签。</li><li>Pandas中的数据集通常是多维表，即DataFrames，Series是列，DataFrame就是表。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-built_in">set</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br>var = pd.Series(<span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">print</span>(var)<br><span class="hljs-built_in">print</span>(var[<span class="hljs-number">0</span>])                       <span class="hljs-comment"># 返回Series的第一个值</span><br><br>var = pd.Series(<span class="hljs-built_in">set</span>, index=[<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>])<br><span class="hljs-built_in">print</span>(var)                          <span class="hljs-comment"># 创建自定义标签</span><br><span class="hljs-built_in">print</span>(var[<span class="hljs-string">&quot;y&quot;</span>])                     <span class="hljs-comment"># 返回标签为y的值</span><br><br>dic = &#123;<span class="hljs-string">&quot;day1&quot;</span>: <span class="hljs-number">420</span>, <span class="hljs-string">&quot;day2&quot;</span>: <span class="hljs-number">260</span>, <span class="hljs-string">&quot;day3&quot;</span>: <span class="hljs-number">300</span>&#125;<br>var = pd.Series(dic)                <span class="hljs-comment"># 从字典创建一个简单的Pandas系列</span><br><span class="hljs-built_in">print</span>(var)                          <span class="hljs-comment"># 字典的键成为标签</span><br>var = pd.Series(dic, index=[<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>])<br><span class="hljs-built_in">print</span>(var)<br><br>dat = &#123;<br><span class="hljs-string">&quot;cal&quot;</span>: [<span class="hljs-number">210</span>, <span class="hljs-number">260</span>, <span class="hljs-number">300</span>],<br><span class="hljs-string">&quot;dur&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>]<br>&#125;<br>var = pd.DataFrame(dat)             <span class="hljs-comment"># 从两个系列创建一个数据框DataFrame</span><br><span class="hljs-built_in">print</span>(var)<br></code></pre></td></tr></table></figure><h1 id="3-DataFrame"><a href="#3-DataFrame" class="headerlink" title="3 DataFrame"></a>3 DataFrame</h1><ul><li>DataFrame<ul><li>一种二维数据结构，例如二维数组或具有行和列的表。</li><li>使用loc属性返回一个或多个指定行，index参数自定义索引。</li><li>若数据集存储在文件中，Pandas可将其加载到DataFrame中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>dat = &#123;<br><span class="hljs-string">&quot;cal&quot;</span>: [<span class="hljs-number">210</span>, <span class="hljs-number">260</span>, <span class="hljs-number">300</span>],<br><span class="hljs-string">&quot;dur&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>]<br>&#125;<br>var = pd.DataFrame(dat)             <span class="hljs-comment"># 从两个系列创建一个数据框DataFrame</span><br><span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-built_in">print</span>(var.loc[<span class="hljs-number">0</span>])                   <span class="hljs-comment"># 返回第0行，返回Pandas Series</span><br><span class="hljs-built_in">print</span>(var.loc[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])              <span class="hljs-comment"># 返回第0行和第1行，返回Pandas DataFrame</span><br><br>var = pd.DataFrame(dat, index=[<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>, <span class="hljs-string">&quot;day3&quot;</span>])<br><span class="hljs-built_in">print</span>(var)                          <span class="hljs-comment"># 添加名称列表给每行命令</span><br><span class="hljs-built_in">print</span>(var.loc[<span class="hljs-string">&quot;day2&quot;</span>])              <span class="hljs-comment"># 索引返回指定的行</span><br><br><span class="hljs-string">&quot;&quot;&quot; data/demension_data.csv</span><br><span class="hljs-string">    Language    Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">    Java        120</span><br><span class="hljs-string">    Golang      112</span><br><span class="hljs-string">    C++         155</span><br><span class="hljs-string">    C#          110</span><br><span class="hljs-string">    C           78</span><br><span class="hljs-string">    JavaScript  99</span><br><span class="hljs-string">    HTML        35</span><br><span class="hljs-string">    CSS         45</span><br><span class="hljs-string">    PHP         75</span><br><span class="hljs-string">    React       15</span><br><span class="hljs-string">    R           25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/demension_data.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df)                           <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br></code></pre></td></tr></table></figure><h2 id="3-1-读取CSV"><a href="#3-1-读取CSV" class="headerlink" title="3-1 读取CSV"></a>3-1 读取CSV</h2><ul><li>读取CSV<ul><li><code>to_string()</code>：用于打印整个DataFrame。</li><li>若包含多行的大型DataFrame，Pandas将只返回前5行和最后5行。</li><li>可使用<code>pd.options.display.max_rows</code>语句检查系统的最大行数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data/demension_data.csv</span><br><span class="hljs-string">    Language    Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">    Java        120</span><br><span class="hljs-string">    Golang      112</span><br><span class="hljs-string">    C++         155</span><br><span class="hljs-string">    C#          110</span><br><span class="hljs-string">    C           78</span><br><span class="hljs-string">    JavaScript  99</span><br><span class="hljs-string">    HTML        35</span><br><span class="hljs-string">    CSS         45</span><br><span class="hljs-string">    PHP         75</span><br><span class="hljs-string">    React       15</span><br><span class="hljs-string">    R           25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/demension_data.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(pd.options.display.max_rows)  <span class="hljs-comment"># 检查返回的最大行数</span><br><br>pd.options.display.max_rows = <span class="hljs-number">5</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/demension_data.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df)                           <span class="hljs-comment"># 更改最大行数，只显示五行</span><br></code></pre></td></tr></table></figure><h2 id="3-2-读取JSON"><a href="#3-2-读取JSON" class="headerlink" title="3-2 读取JSON"></a>3-2 读取JSON</h2><ul><li>读取JSON<ul><li><code>to_string()</code>：用于打印整个DataFrame，JSON对象具有与字典相同的格式。</li><li>若JSON代码不在文件中，在Python字典里，则可直接将其加载到DataFrame中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data/demension_data.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;Duration&quot;: &#123; &quot;0&quot;: 60, &quot;1&quot;: 60, &quot;2&quot;: 60, &quot;3&quot;: 45, &quot;4&quot;: 45, &quot;5&quot;: 60 &#125;,</span><br><span class="hljs-string">    &quot;Pulse&quot;: &#123; &quot;0&quot;: 110, &quot;1&quot;: 117, &quot;2&quot;: 103, &quot;3&quot;: 109, &quot;4&quot;: 117, &quot;5&quot;: 102 &#125;,</span><br><span class="hljs-string">    &quot;Maxpulse&quot;: &#123; &quot;0&quot;: 130, &quot;1&quot;: 145, &quot;2&quot;: 135, &quot;3&quot;: 175, &quot;4&quot;: 148, &quot;5&quot;: 127 &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_json(<span class="hljs-string">r&quot;data/demension_data.json&quot;</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><br>data = &#123;<br>    <span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">71</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">73</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">75</span>&#125;,<br>    <span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">35</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">37</span>&#125;,<br>    <span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">57</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">59</span>&#125;<br>&#125;<br>df = pd.DataFrame(data)             <span class="hljs-comment"># Python字典加载到DataFrame中</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h1 id="4-分析数据"><a href="#4-分析数据" class="headerlink" title="4 分析数据"></a>4 分析数据</h1><ul><li>分析数据<ul><li><code>head()</code>：从顶部开始返回标题和指定数量的行，不指定行数时默认返回前5行。</li><li><code>tail()</code>：从底部开始返回标题和指定数量的行，不指定行数时默认返回后5行。</li><li><code>info()</code>：打印有关数据的信息，返回RangeIndex行数和Columns列数、每列名称和数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data/demension_data.csv</span><br><span class="hljs-string">    Language    Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">    Java        120</span><br><span class="hljs-string">    Golang      112</span><br><span class="hljs-string">    C++         155</span><br><span class="hljs-string">    C#          110</span><br><span class="hljs-string">    C           78</span><br><span class="hljs-string">    JavaScript  99</span><br><span class="hljs-string">    HTML        35</span><br><span class="hljs-string">    CSS         45</span><br><span class="hljs-string">    PHP         75</span><br><span class="hljs-string">    React       15</span><br><span class="hljs-string">    R           25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/demension_data.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df.head())                    <span class="hljs-comment"># 打印前5行</span><br><span class="hljs-built_in">print</span>(df.head(<span class="hljs-number">3</span>))                   <span class="hljs-comment"># 打印前3行</span><br><br><span class="hljs-built_in">print</span>(df.tail())                    <span class="hljs-comment"># 打印后5行</span><br><span class="hljs-built_in">print</span>(df.tail(<span class="hljs-number">3</span>))                   <span class="hljs-comment"># 打印后3行</span><br><br><span class="hljs-built_in">print</span>(df.info())                    <span class="hljs-comment"># 打印有关数据的信息</span><br></code></pre></td></tr></table></figure><h1 id="5-清理数据"><a href="#5-清理数据" class="headerlink" title="5 清理数据"></a>5 清理数据</h1><ul><li>清理数据<ul><li>清理意味着修复数据集中的不良数据，可能是空单元格、数据格式错误、错误数据或重复数据。</li><li><code>dropna()</code>：删除包含空单元格的行，返回新DataFrame且不改变原来的，inplace参数可以改变。</li><li><code>fillna()</code>：允许用一个值替换空单元格，通过指定DataFrame的列名，可以替换指定列的空值。</li><li>平均值<code>mean()</code>、中位数<code>median()</code>和众数<code>mode()</code>方法计算指定列的相应值，用于替换空单元格。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data1 = data2 = data3 = data4 = data5 = data6 = &#123;<br>    <span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">60</span>&#125;,<br>    <span class="hljs-string">&quot;Date&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-string">&quot;2020/12/21&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>: np.NaN, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;2020/12/18&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;2020/12/28&quot;</span>&#125;,<br>    <span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">103</span>&#125;,<br>    <span class="hljs-string">&quot;Maxpulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">131</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">112</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">132</span>&#125;,<br>    <span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">364.2</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">282.0</span>, <span class="hljs-string">&quot;2&quot;</span>: np.NaN, <span class="hljs-string">&quot;3&quot;</span>: np.NaN&#125;<br>&#125;<br>df = pd.DataFrame(data1)            <span class="hljs-comment"># Python字典加载到DataFrame中</span><br>new_df = df.dropna()                <span class="hljs-comment"># 返回没有空单元格的DataFrame</span><br><span class="hljs-built_in">print</span>(new_df.to_string())<br><br><span class="hljs-built_in">print</span>(df.to_string())<br>df.dropna(inplace=<span class="hljs-literal">True</span>)             <span class="hljs-comment"># 改变原始DataFrame</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data2)<br>df.fillna(<span class="hljs-number">120</span>, inplace=<span class="hljs-literal">True</span>)        <span class="hljs-comment"># 数字120替换NULL值</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data3)<br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(<span class="hljs-number">150</span>, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 替换指定列的NULL值</span><br><br>df = pd.DataFrame(data4)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].mean()          <span class="hljs-comment"># 计算平均值，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data5)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].median()        <span class="hljs-comment"># 计算中位数，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data6)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].mode()[<span class="hljs-number">0</span>]       <span class="hljs-comment"># 计算众数，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><ul><li>错误格式<ul><li>删除相应行，或将列中的所有单元格转换为相同格式。</li><li><code>to_datetime()</code>：将列中的日期元素转换为日期格式。</li><li><code>dropna()</code>：NaT值即空日期，可将其处理为NULL值，删除对应行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data1 = data2 = &#123;<br>    <span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">60</span>&#125;,<br>    <span class="hljs-string">&quot;Date&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: np.NaN, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;2020/12/23&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;2020/12/24&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">20201226</span>&#125;,<br>    <span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">130</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">100</span>&#125;,<br>    <span class="hljs-string">&quot;Maxpulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">132</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">120</span>&#125;,<br>    <span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">282.0</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">300.0</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">246.0</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">250.0</span>&#125;<br>&#125;<br>df = pd.DataFrame(data1)            <span class="hljs-comment"># Python字典加载到DataFrame中</span><br>df[<span class="hljs-string">&quot;Date&quot;</span>] = pd.to_datetime(df[<span class="hljs-string">&quot;Date&quot;</span>])<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 转换为日期</span><br><br>df = pd.DataFrame(data2)<br>df.dropna(subset=[<span class="hljs-string">&quot;Date&quot;</span>], inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 删除日期为NULL值的行</span><br></code></pre></td></tr></table></figure><ul><li>错误数据<ul><li>错误数据不一定是空单元格或错误格式，也可能只是错误的。</li><li>错误数据可能是拼写错误，可以在对应行插入数据进行替换。</li><li>另一种处理方法就是使用<code>drop()</code>方法删除包含错误数据的行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data/erroneous_data.csv</span><br><span class="hljs-string">    Duration    Date          Pulse     Maxpulse    Calories</span><br><span class="hljs-string">    60          2020/12/01    110       130         409.1</span><br><span class="hljs-string">    60          2020/12/02    117       145         479.0</span><br><span class="hljs-string">    600         2020/12/03    103       135         340.0</span><br><span class="hljs-string">    45          2020/12/04    109       175         282.4</span><br><span class="hljs-string">    450         2020/12/05    117       148         406.0</span><br><span class="hljs-string">    60          2020/12/06    102       127         300.0</span><br><span class="hljs-string">    60          2020/12/07    110       136         374.0</span><br><span class="hljs-string">    30          2020/12/09    109       133         195.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">&quot;data/erroneous_data.csv&quot;</span>)<br>df.loc[<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Duration&quot;</span>] = <span class="hljs-number">50</span>          <span class="hljs-comment"># 第2行Duration设置为50</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.read_csv(<span class="hljs-string">&quot;data/erroneous_data.csv&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.index:                  <span class="hljs-comment"># 若是大数据集替换，可创建一些规则</span><br>    <span class="hljs-keyword">if</span> df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] &gt; <span class="hljs-number">100</span>:<br>        df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.read_csv(<span class="hljs-string">&quot;data/erroneous_data.csv&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.index:                  <span class="hljs-comment"># 创建规则，删除行</span><br>    <span class="hljs-keyword">if</span> df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] &gt; <span class="hljs-number">50</span>:<br>        df.drop(x, inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><ul><li>重复数据<ul><li><code>duplicated()</code>：为每一行返回一个布尔值，重复将返回True，否则为False。</li><li><code>drop_duplicates()</code>：删除重复项，inplace参数会从原始DataFrame中删除。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data/duplicate_data.csv</span><br><span class="hljs-string">    Duration    Date        Pulse   Maxpulse    Calories</span><br><span class="hljs-string">    65          2020/12/01  110     130         409.1</span><br><span class="hljs-string">    60          2020/12/02  117     145         479.0</span><br><span class="hljs-string">    60          2020/12/02  117     145         479.0</span><br><span class="hljs-string">    45          2020/12/04  109     175         282.4</span><br><span class="hljs-string">    45          2020/12/05  117     148         406.0</span><br><span class="hljs-string">    60          2020/12/06  102     127         300.0</span><br><span class="hljs-string">    60          2020/12/07  110     136         374.0</span><br><span class="hljs-string">    30          2020/12/09  109     133         195.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/duplicate_data.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df.duplicated())              <span class="hljs-comment"># 重复的行将返回True，否则为False</span><br><br>df.drop_duplicates(inplace=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><h1 id="6-数据相关性"><a href="#6-数据相关性" class="headerlink" title="6 数据相关性"></a>6 数据相关性</h1><ul><li>数据相关性<ul><li><code>corr()</code>：计算数据集中每一列之间的关系，该方法将忽略非数字列。</li><li>返回结果是一个包含大量数字的表格，这些数字表示两列之间的关系。</li><li>数字从-1到1不等。<ul><li>1表示完全相关，数据集中，每次第一列中的值上升，另一个值也会上升。</li><li>0.9表示良好相关，增加一个值，另一个可能也增加。</li><li>-0.9也是良好相关，增加一个值，另一个可能会下降。</li><li>0.2表示不良相关，意味着如果一个值上升，另一个值不一定上升。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data/data_dependency.csv</span><br><span class="hljs-string">    Duration    Pulse   Maxpulse    Calories</span><br><span class="hljs-string">    60          110     130         409.1</span><br><span class="hljs-string">    60          117     145         479.0</span><br><span class="hljs-string">    60          103     135         340.0</span><br><span class="hljs-string">    45          109     175         282.4</span><br><span class="hljs-string">    45          117     148         406.0</span><br><span class="hljs-string">    60          102     127         300.0</span><br><span class="hljs-string">    60          110     136         374.0</span><br><span class="hljs-string">    45          104     134         253.3</span><br><span class="hljs-string">    30          109     133         195.1</span><br><span class="hljs-string">    60          98      124         269.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/data_dependency.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><span class="hljs-built_in">print</span>(df.corr())                    <span class="hljs-comment"># 显示列之间的关系</span><br></code></pre></td></tr></table></figure><h1 id="7-可视化图表"><a href="#7-可视化图表" class="headerlink" title="7 可视化图表"></a>7 可视化图表</h1><ul><li>可视化图表<ul><li><code>plot()</code>方法创建图表，也可以使用Matplotlib库的子模块Pyplot创建。</li><li>直方图：指定参数<code>kind=&quot;hist&quot;</code>，并且只需要一列。</li><li>散点图：指定参数<code>kind=&quot;scatter&quot;</code>，并需x轴和y轴。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt     <span class="hljs-comment"># 从Matplotlib导入pyplot</span><br><br><span class="hljs-string">&quot;&quot;&quot; data/data_dependency.csv</span><br><span class="hljs-string">    Duration    Pulse   Maxpulse    Calories</span><br><span class="hljs-string">    60          110     130         409.1</span><br><span class="hljs-string">    60          117     145         479.0</span><br><span class="hljs-string">    60          103     135         340.0</span><br><span class="hljs-string">    45          109     175         282.4</span><br><span class="hljs-string">    45          117     148         406.0</span><br><span class="hljs-string">    60          102     127         300.0</span><br><span class="hljs-string">    60          110     136         374.0</span><br><span class="hljs-string">    45          104     134         253.3</span><br><span class="hljs-string">    30          109     133         195.1</span><br><span class="hljs-string">    60          98      124         269.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data/data_dependency.csv&quot;</span>)<br>df.plot()<br>plt.show()<br><br>df[<span class="hljs-string">&quot;Duration&quot;</span>].plot(kind=<span class="hljs-string">&quot;hist&quot;</span>)<br>plt.show()                          <span class="hljs-comment"># 直方图</span><br><br>df.plot(kind=<span class="hljs-string">&quot;scatter&quot;</span>, x=<span class="hljs-string">&quot;Duration&quot;</span>, y=<span class="hljs-string">&quot;Calories&quot;</span>)<br>plt.show()                          <span class="hljs-comment"># 散点图</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 函数</title>
    <link href="/2021/03/20/python/python06-python-numpy-han-shu/"/>
    <url>/2021/03/20/python/python06-python-numpy-han-shu/</url>
    
    <content type="html"><![CDATA[<p>NumPy数组存储在内存中的一个连续位置，因此进程可以非常有效地访问和操作，此行为在计算机科学中被称为局部性。</p><span id="more"></span><h1 id="1-Ufunc"><a href="#1-Ufunc" class="headerlink" title="1 Ufunc"></a>1 Ufunc</h1><ul><li>Ufunc<ul><li>即通用函数，指对ndarray对象进行操作的NumPy函数，用于实现矢量化。</li><li>ufunc提供了广播和其他方法，对计算非常有帮助，也提供了额外的参数。<ul><li>out：复制返回值的输出数组。</li><li>dtype：定义元素的返回类型。</li><li>where：布尔数组或条件定义操作应在哪里发生。</li></ul></li><li>矢量化：将迭代语句转换为基于向量的操作，现代CPU优化了此类操作，速度更快。</li><li>例如：添加两个列表<code>[1、2、3、4]</code>和<code>[4、5、6、7]</code>的元素。<ul><li>方法一：先遍历两个列表，然后再对列表的每个元素求和。</li><li>方法二：ufunc提供了<code>add(x, y)</code>函数，会产生相同的结果。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>y = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>z = []<br><span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, y):              <span class="hljs-comment"># 使用Python的内置zip()</span><br>    z.append(i + j)<br><span class="hljs-built_in">print</span>(z)<br><br>k = np.add(x, y)                    <span class="hljs-comment"># 使用ufunc的add()函数</span><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><ul><li>创建Ufunc<ul><li>创建ufunc，必须定义一个函数，类似Python中使用普通函数。</li><li>用<code>frompyfunc()</code>将其添加到NumPy ufunc库中，有以下参数。<ul><li>function：函数名称。</li><li>inputs：输入参数(数组)的数量。</li><li>outputs：输出参数(数组)的数量。</li></ul></li><li>检查是否为ufunc函数，应返回<code>&lt;class &#39;numpy.ufunc&#39;&gt;</code>。</li><li>if语句中测试函数是否为ufunc，需要使用<code>numpy.ufunc</code>值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x+y<br><br><br>myadd = np.frompyfunc(myadd, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 创建ufunc函数</span><br><span class="hljs-built_in">print</span>(myadd([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myadd))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.add))                 <span class="hljs-comment"># 检查函数是否为ufunc</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.concatenate))<br><span class="hljs-comment"># print(type(np.blahblah))          # 函数无法识别，返回错误</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(np.add) == np.ufunc:        <span class="hljs-comment"># numpy.ufunc</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Add is ufunc.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Add is not ufunc.&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-简单算术"><a href="#2-简单算术" class="headerlink" title="2 简单算术"></a>2 简单算术</h1><ul><li>简单算术<ul><li>加：<code>add()</code>函数将两个数组的内容相加，并在一个新数组中返回结果。</li><li>减：<code>subtract()</code>函数将两个数组的内容相减，并在一个新数组中返回结果。</li><li>乘：<code>multiply()</code>函数将两个数组的内容相乘，并在一个新数组中返回结果。</li><li>除：<code>divide()</code>函数将两个数组的内容相除，并且在一个新数组中返回结果。</li><li>幂：<code>power()</code>函数将一个数组的值乘以另一个数组值的幂并在新数组中返回结果。</li><li>余：<code>mod()</code>和<code>remainder()</code>函数都会在一个新数组中返回两个数组值相除的余数。</li><li>商和模：<code>divmod()</code>函数，返回值是两个数组，第一个数组包含商，第二个数组包含模。</li><li>绝对值：<code>absolute()</code>和<code>abs()</code>函数，尽量用<code>absolute()</code>，避免与<code>math.abs()</code>混淆。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>])<br>arr2 = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>])<br>arr3 = np.add(arr1, arr2)           <span class="hljs-comment"># 将arr1的值添加到arr2中</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.subtract(arr1, arr2)      <span class="hljs-comment"># 将arr1的值减去arr2的值</span><br><span class="hljs-built_in">print</span>(arr4)<br>arr4 = np.absolute(arr4)            <span class="hljs-comment"># 返回arr4值的绝对值</span><br><span class="hljs-built_in">print</span>(arr4)<br><br>arr5 = np.divide(arr1, arr2)        <span class="hljs-comment"># 将arr1的值除以arr2的值</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>arr6 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br>arr7 = np.power(arr1, arr6)         <span class="hljs-comment"># 将arr1的值提高到arr6值的幂</span><br><span class="hljs-built_in">print</span>(arr7)<br><br>arr8 = np.mod(arr1, arr6)           <span class="hljs-comment"># 返回arr1除以arr6值的余数</span><br><span class="hljs-built_in">print</span>(arr8)<br>arr8 = np.remainder(arr1, arr6)<br><span class="hljs-built_in">print</span>(arr8)<br><br>arr9 = np.<span class="hljs-built_in">divmod</span>(arr1, arr6)        <span class="hljs-comment"># 返回arr1除以arr6的商和模</span><br><span class="hljs-built_in">print</span>(arr9)<br></code></pre></td></tr></table></figure><h2 id="2-1-四舍五入"><a href="#2-1-四舍五入" class="headerlink" title="2-1 四舍五入"></a>2-1 四舍五入</h2><ul><li>四舍五入<ul><li>NumPy中主要有如下五种对小数进行四舍五入的方法。</li><li>通过<code>around()</code>函数将元素四舍五入到小数点后指定位。</li><li><code>trunc()</code>和<code>fix()</code>函数删除小数并返回最接近零的浮点数。</li><li>使用<code>ceil()</code>函数将小数四舍五入到最接近的较高整数(向上取整)。</li><li>使用<code>floor()</code>函数将小数四舍五入到最接近的较低整数(向下取整)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.around(<span class="hljs-number">3.1666</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(arr1)                         <span class="hljs-comment"># 将3.1666四舍五入到小数点后2位</span><br><br>arr2 = np.trunc([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr2)                         <span class="hljs-comment"># 截断数组元素</span><br><br>arr3 = np.fix([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.ceil([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr4)                         <span class="hljs-comment"># 向上取整</span><br><br>arr5 = np.floor([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr5)                         <span class="hljs-comment"># 返回一个浮点数，向下取整，与trunc()函数返回的不同</span><br></code></pre></td></tr></table></figure><h2 id="2-2-对数函数"><a href="#2-2-对数函数" class="headerlink" title="2-2 对数函数"></a>2-2 对数函数</h2><ul><li>对数函数<ul><li>NumPy提供了以e、2和10为底的log函数，不提供指定底数的log函数。</li><li>若无法计算log函数，那么所有的log函数都将在元素中放置-inf或inf。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><br>arr = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)              <span class="hljs-comment"># 返回一个从1-10的整数数组</span><br><span class="hljs-built_in">print</span>(np.log(arr))                  <span class="hljs-comment"># 自然对数</span><br><span class="hljs-built_in">print</span>(np.log2(arr))<br><span class="hljs-built_in">print</span>(np.log10(arr))<br><br>nplog = np.frompyfunc(log, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(nplog(<span class="hljs-number">100</span>, <span class="hljs-number">15</span>))               <span class="hljs-comment"># 指定底数为15的log函数</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数组求和"><a href="#2-3-数组求和" class="headerlink" title="2-3 数组求和"></a>2-3 数组求和</h2><ul><li>数组求和<ul><li>加法是在两个参数之间完成的，而求和则是在n个元素之间进行的。</li><li>轴上求和：指定<code>axis=1</code>，NumPy将对每个数组中的数字进行求和。</li><li>部分求和：使用<code>cumsum()</code>函数，例如<code>[1, 2, 3]</code>部分求和为<code>[1, 1+2, 1+2+3]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr3 = np.add(arr1, arr2)           <span class="hljs-comment"># 将arr1的值添加到arr2的值，加法</span><br><span class="hljs-built_in">print</span>(arr3)<br>arr3 = np.<span class="hljs-built_in">sum</span>([arr1, arr2])         <span class="hljs-comment"># 将arr1的值与arr2的值相加，求和</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.<span class="hljs-built_in">sum</span>([arr1, arr2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr4)                         <span class="hljs-comment"># 在arr1的轴上求和</span><br><br>arr5 = np.cumsum(arr1)              <span class="hljs-comment"># 累计求和(部分求和)</span><br><span class="hljs-built_in">print</span>(arr5)<br></code></pre></td></tr></table></figure><h2 id="2-4-数组乘积"><a href="#2-4-数组乘积" class="headerlink" title="2-4 数组乘积"></a>2-4 数组乘积</h2><ul><li>数组乘积<ul><li>查找数组中元素的乘积，可以使用<code>prod()</code>函数。</li><li>轴上乘积：指定<code>axis=1</code>，NumPy将返回每个数组的乘积。</li><li>部分乘积：使用<code>cumprod()</code>函数，例如<code>[1, 2, 3]</code>部分乘积为<code>[1, 1*2, 1*2*3]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>arr2 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br>arr3 = np.prod(arr1)                <span class="hljs-comment"># arr1数组元素的乘积，1*2*3*4</span><br><span class="hljs-built_in">print</span>(arr3)<br>arr3 = np.prod([arr1, arr2])        <span class="hljs-comment"># arr1和arr2元素的乘积，1*2*3*4*5*6*7*8</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.prod([arr1, arr2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr4)                         <span class="hljs-comment"># 在arr1的轴上乘积</span><br><br>arr5 = np.cumprod(arr2)             <span class="hljs-comment"># 累计乘积(部分乘积)</span><br><span class="hljs-built_in">print</span>(arr5)<br></code></pre></td></tr></table></figure><h2 id="2-5-数组差集"><a href="#2-5-数组差集" class="headerlink" title="2-5 数组差集"></a>2-5 数组差集</h2><ul><li>数组差集<ul><li>使用<code>diff()</code>函数，例如<code>[1, 2, 3]</code>差集是<code>[2-1, 3-2]</code>。</li><li>通过给定参数n重复执行操作，例如n&#x3D;2，<code>[1, 2, 3]</code>差集再差集是<code>[1-1]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>])<br>arr2 = np.diff(arr1)                 <span class="hljs-comment"># arr1数组元素的差集，[15-10, 25-15, 5-25]</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.diff(arr1, n=<span class="hljs-number">2</span>)            <span class="hljs-comment"># arr1数组元素的差集再差集，[10-5, -20-10]</span><br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure><h1 id="3-三角函数"><a href="#3-三角函数" class="headerlink" title="3 三角函数"></a>3 三角函数</h1><ul><li>三角函数<ul><li>NumPy提供正弦函数<code>sin()</code>、余弦函数<code>cos()</code>和正切函数<code>tan()</code>。</li><li>三角函数默认将弧度作为参数<ul><li>通过<code>deg2rad()</code>函数，可以将数组中的所有值转换为弧度。</li><li>使用<code>rad2deg()</code>函数，可以将数组中的所有值转换为度数。</li></ul></li><li>还提供了反正弦<code>arcsin()</code>、反余弦<code>arccos()</code>和反正切<code>arctan()</code>，生成弧度值(角度)。</li><li>NumPy提供<code>hypot()</code>函数，基于毕达哥拉斯定理(即勾股定理)获取基值和垂直值并产生斜边。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.sin(np.pi/<span class="hljs-number">2</span>)                 <span class="hljs-comment"># PI/2的正弦值</span><br><span class="hljs-built_in">print</span>(x)<br>arr1 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi/<span class="hljs-number">3</span>, np.pi/<span class="hljs-number">4</span>, np.pi/<span class="hljs-number">5</span>])<br>arr2 = np.sin(arr1)                 <span class="hljs-comment"># 数组arr1所有值的正弦值</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.array([<span class="hljs-number">90</span>, <span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">360</span>])<br>arr4 = np.deg2rad(arr3)             <span class="hljs-comment"># 将数组arr3所有值转换为弧度</span><br><span class="hljs-built_in">print</span>(arr4)<br>arr5 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi, <span class="hljs-number">1.5</span>*np.pi, <span class="hljs-number">2</span>*np.pi])<br>arr6 = np.rad2deg(arr5)             <span class="hljs-comment"># 将数组arr5所有值转换为度数</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>y = np.arcsin(<span class="hljs-number">1.0</span>)                  <span class="hljs-comment"># 1.0的角度</span><br><span class="hljs-built_in">print</span>(y)<br>arr7 = np.array([<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>])<br>arr8 = np.arcsin(arr7)              <span class="hljs-comment"># 数组arr7中所有正弦值的角度</span><br><span class="hljs-built_in">print</span>(arr8)<br><br>base = <span class="hljs-number">3</span><br>perp = <span class="hljs-number">4</span><br>z = np.hypot(base, perp)            <span class="hljs-comment"># 勾股定理求斜边</span><br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h1 id="4-双曲函数"><a href="#4-双曲函数" class="headerlink" title="4 双曲函数"></a>4 双曲函数</h1><ul><li>双曲函数<ul><li>NumPy提供双曲正弦函数<code>sinh()</code>、双曲余弦函数<code>cosh()</code>和双曲正切函数<code>tanh()</code>。</li><li>还提供了反双曲正弦<code>arcsinh()</code>、反双曲余弦<code>arccosh()</code>和反双曲正切<code>arctanh()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.sinh(np.pi/<span class="hljs-number">2</span>)                <span class="hljs-comment"># PI/2的双曲正弦值</span><br><span class="hljs-built_in">print</span>(x)<br>arr1 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi/<span class="hljs-number">3</span>, np.pi/<span class="hljs-number">4</span>, np.pi/<span class="hljs-number">5</span>])<br>arr2 = np.cosh(arr1)                <span class="hljs-comment"># 数组arr1所有值的双曲余弦值</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>y = np.arcsinh(<span class="hljs-number">1.0</span>)                 <span class="hljs-comment"># 1.0的角度</span><br><span class="hljs-built_in">print</span>(y)<br>arr3 = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>])<br>arr4 = np.arctanh(arr3)             <span class="hljs-comment"># 数组arr3所有tanh值的角度</span><br><span class="hljs-built_in">print</span>(arr4)<br></code></pre></td></tr></table></figure><h1 id="5-集合操作"><a href="#5-集合操作" class="headerlink" title="5 集合操作"></a>5 集合操作</h1><ul><li>集合操作<ul><li>创建一个集合数组，集合数组只能是一维数组。</li><li><code>unique()</code>：可以从数组中查找唯一元素(集合)。</li><li><code>union1d()</code>：可以查找两个数组的唯一值(并集)。</li><li><code>intersect1d()</code>：仅查找两个数组都存在的值(交集)。<ul><li>可选参数assume_unique为True时加快计算速度。</li><li>在处理集合时，assume_unique应始终设置为True。</li></ul></li><li><code>setdiff1d()</code>：仅查找一个数组中不存在于另一个数组中的值(差集)，参数assume_unique同上。</li><li><code>setxor1d()</code>：只属于一个集合不属于另一集合的元素集合(对称差集)，参数assume_unique同上。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br>arr2 = np.unique(arr1)              <span class="hljs-comment"># 将具有重复元素的数组转换为集合</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>arr4 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr5 = np.union1d(arr3, arr4)       <span class="hljs-comment"># arr3和arr4的并集</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>arr6 = np.intersect1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr6)                         <span class="hljs-comment"># arr3和arr4的交集</span><br><br>arr7 = np.setdiff1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr7)                         <span class="hljs-comment"># arr3和arr4的差集</span><br><br>arr8 = np.setxor1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr8)                         <span class="hljs-comment"># arr3和arr4的对称差集</span><br></code></pre></td></tr></table></figure><h1 id="6-最小公倍数"><a href="#6-最小公倍数" class="headerlink" title="6 最小公倍数"></a>6 最小公倍数</h1><ul><li>最小公倍数<ul><li>使用<code>lcm()</code>函数，可以查找两个数的最小公倍数。</li><li>查找数组中所有值的最小公倍数用<code>reduce()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>num1 = <span class="hljs-number">4</span><br>num2 = <span class="hljs-number">6</span><br>x = np.lcm(num1, num2)              <span class="hljs-comment"># num1和num2的最小公倍数</span><br><span class="hljs-built_in">print</span>(x)<br><br>arr1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>])<br>y = np.lcm.reduce(arr1)             <span class="hljs-comment"># 数组arr1所有元素的最小公倍数</span><br><span class="hljs-built_in">print</span>(y)<br><br>arr2 = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)             <span class="hljs-comment"># 包含1-10所有整数的数组最小公倍数</span><br>z = np.lcm.reduce(arr2)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h1 id="7-最大公约数"><a href="#7-最大公约数" class="headerlink" title="7 最大公约数"></a>7 最大公约数</h1><ul><li>最大公约数<ul><li>使用<code>gcd()</code>函数，可以查找两个数的最大公约数。</li><li>查找数组中所有值的最大公约数用<code>reduce()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>num1 = <span class="hljs-number">6</span><br>num2 = <span class="hljs-number">9</span><br>x = np.gcd(num1, num2)              <span class="hljs-comment"># num1和num2的最大公约数</span><br><span class="hljs-built_in">print</span>(x)<br><br>arr = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>, <span class="hljs-number">36</span>, <span class="hljs-number">16</span>])<br>y = np.gcd.reduce(arr)              <span class="hljs-comment"># 数组arr所有元素的最大公约数</span><br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 随机</title>
    <link href="/2021/03/12/python/python05-python-numpy-sui-ji/"/>
    <url>/2021/03/12/python/python05-python-numpy-sui-ji/</url>
    
    <content type="html"><![CDATA[<p>NumPy库多数需要快速计算的部分主要由C或C++编写，旨在提供一个比传统Python列表快50倍的数组对象，即ndarray。</p><span id="more"></span><h1 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1 随机数"></a>1 随机数</h1><ul><li>随机数<ul><li>伪随机数：通过一些算法生成的随机数。<ul><li>通过random处理随机数，<code>randint()</code>返回随机整数，<code>rand()</code>返回0-1之间的随机浮点数。</li><li><code>randint()</code>使用size参数来制作随机数组，<code>randint()</code>和<code>rand()</code>都允许指定数组的形状。</li><li><code>choice()</code>允许根据数组值生成随机值，添加一个size参数来指定数组的形状。</li></ul></li><li>真随机数：没有规律，不能预见的数，使用物理现象产生，例如投硬币猜测正反面。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>x = random.randint(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 0-100的随机整数</span><br>y = random.rand()<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 0-1的随机浮点数</span><br><br>x = random.randint(<span class="hljs-number">100</span>, size=(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成一个一维数组，包含5个从0-100的随机整数</span><br>y = random.randint(<span class="hljs-number">100</span>, size=(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个3行的二维数组，每行包含5个从0-100的随机整数</span><br><br>x = random.rand(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成一个一维数组，包含5个0-1之间的随机浮点数</span><br>y = random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个3行的二维数组，每行包含5个0-1之间的随机浮点数</span><br><br>x = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 返回数组中的一个值</span><br>y = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], size=(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个由数组参数3、5、7和9中的值组成的二维数组</span><br></code></pre></td></tr></table></figure><h1 id="2-数据分布"><a href="#2-数据分布" class="headerlink" title="2 数据分布"></a>2 数据分布</h1><ul><li>数据分布<ul><li>指在分布式环境中通过合理分布数据，提高数据操作自然并行度，以达到最优执行效率的目的。</li><li>主要内容是数据位置的存放和高效的数据划分问题，是所有可能值的列表及每个值出现的频率。</li><li>随机分布：一组遵循一定概率密度函数的随机数。<ul><li>概率密度函数：描述连续概率的函数，即数组中所有值的概率。</li><li><code>choice()</code>方法依据定义的概率生成随机数，允许指定每个值的概率。</li><li>概率由0-1之间的数字设置，0表示该值永远不会出现，1表示始终出现。</li><li>所有的概率数之和为1，还可以通过size参数指定数组的形状来返回数组。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 生成一个包含100个值的一维数组，其中生成3的概率为0.1，5概率0.3，7概率0.6，9概率0</span><br>x = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], p=[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>], size=<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="3-随机排列"><a href="#3-随机排列" class="headerlink" title="3 随机排列"></a>3 随机排列</h1><ul><li>随机排列<ul><li><code>shuffle()</code>：就地改变数组元素的排序，即对原始数组进行的更改。</li><li><code>permutation()</code>：返回一个重新排列的数组，并保持原始数组不变。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>random.shuffle(arr1)                 <span class="hljs-comment"># 随机打乱数组元素</span><br><span class="hljs-built_in">print</span>(arr1)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(random.permutation(arr2))      <span class="hljs-comment"># 生成数组元素的随机排列</span><br></code></pre></td></tr></table></figure><h1 id="4-Seaborn"><a href="#4-Seaborn" class="headerlink" title="4 Seaborn"></a>4 Seaborn</h1><ul><li>Seaborn<ul><li>一个在底层使用Matplotlib绘制图形的库，用于可视化随机分布。</li><li>打开系统上的命令窗口，输入命令进行安装：<code>pip install seaborn</code>。</li><li>使用前需要先导入Matplotlib模块的pyplot对象，以及安装好的第三方库seaborn模块。</li><li>Distplot代表分布图，将一个数组作为输入，并绘制一条与数组中点的分布相对应的曲线。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings                     <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>sns.distplot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])    <span class="hljs-comment"># FutureWarning警告，distplot已弃用</span><br>plt.show()                          <span class="hljs-comment"># 绘制分布图</span><br><br>sns.distplot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], hist=<span class="hljs-literal">False</span>)<br>plt.show()                          <span class="hljs-comment"># 绘制没有直方图的分布图</span><br></code></pre></td></tr></table></figure><h1 id="5-连续分布"><a href="#5-连续分布" class="headerlink" title="5 连续分布"></a>5 连续分布</h1><ul><li>连续分布<ul><li>Continuous Distribution，一个随机变量在其区间内能够取任何数值时所具有的分布。</li><li>常用分类<ul><li>正态分布：最常用，特点是密度函数以均值为中心对称分布，适用于描述一般经济变量的概率分布。</li><li>均匀分布：概率论和统计学中叫矩形分布，是对称概率分布，相同长度间隔的分布概率是等可能的。</li><li>指数分布：用来表示独立随机事件发生的时间间隔，重要特征是无记忆性，又称遗失记忆性。</li><li>贝塔分布：特点是密度函数为最大值两边的不对称分布，适用于描述工期等不对称分布的变量。</li><li>经验分布：对产生样本点累积分布函数的估计，统计学中是与样本的经验测度相关的分布函数。</li><li>三角型分布：密度数由最大值、最可能值和最小值构成的对称或不对称的三角型。</li></ul></li></ul></li></ul><h2 id="5-1-正态分布"><a href="#5-1-正态分布" class="headerlink" title="5-1 正态分布"></a>5-1 正态分布</h2><ul><li>正态分布<ul><li>Normal Distribution，又叫常态分布或高斯分布，Gaussian Distribution。</li><li>重要分布之一，适合许多事件的概率分布，正态曲线呈钟型(即钟形曲线)。</li><li>使用<code>random.normal()</code>方法获取正态分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>loc：平均值，钟型峰值所在的位置。</li><li>scale：标准偏差，偏差越小，值偏离算术平均值就越少，反之亦然。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.normal(size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成大小为2x3的随机正态分布</span><br><br>y = random.normal(loc=<span class="hljs-number">1</span>, scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成大小为2x3的随机正态分布，平均值为1，标准差为2</span><br><br>sns.distplot(random.normal(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 正态分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-2-均匀分布"><a href="#5-2-均匀分布" class="headerlink" title="5-2 均匀分布"></a>5-2 均匀分布</h2><ul><li>均匀分布<ul><li>Uniform Distribution，用于描述每个事件发生机会均等的概率。</li><li>用<code>random.uniform()</code>方法获取均匀分布数据，有以下3个参数。<ul><li>a：下限，默认0.0。</li><li>b：上限，默认1.0。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.uniform(size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 创建一个2x3均匀分布样本</span><br><br>sns.distplot(random.uniform(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 均匀分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-3-增长分布"><a href="#5-3-增长分布" class="headerlink" title="5-3 增长分布"></a>5-3 增长分布</h2><ul><li>增长分布<ul><li>Logistic Distribution，又叫逻辑斯谛分布，用于描述增长。</li><li>广泛用于逻辑回归、神经网络等机器学习，连续型概率分布的一种。</li><li>使用<code>random.logistic()</code>方法获取增长分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>loc：峰值的位置，默认为0。</li><li>scale：标准偏差，默认为1。</li></ul></li><li>增长分布与正态分布的区别<ul><li>增长分布的尾部下方面积更大，意味着代表了更远离均值的事件发生可能性。</li><li>对于较高的尺度值(标准偏差)，除峰值外，正态分布和增长分布几乎是相同。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.logistic(loc=<span class="hljs-number">1</span>, scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 从均值为1且标准差为2的增长分布中抽取2x3个样本</span><br><br>sns.distplot(random.logistic(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 增长分布的可视化</span><br><br>sns.distplot(random.normal(scale=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.logistic(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;logistic&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-4-指数分布"><a href="#5-4-指数分布" class="headerlink" title="5-4 指数分布"></a>5-4 指数分布</h2><ul><li>指数分布<ul><li>Exponential Distribution，也叫负指数分布。</li><li>用于描述直到下一个事件的时间，例如失败或成功等。</li><li>使用<code>random.exponential()</code>方法获取指数分布数据。<ul><li>size：返回数组的形状。</li><li>scale：速率的倒数，默认为1.0。</li></ul></li><li>泊松分布处理事件在一段时间内发生的次数，而指数分布处理这些事件之间的时间。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.exponential(scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 以2x3大小绘制一个2.0比例的指数分布样本</span><br><br>sns.distplot(random.exponential(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 指数分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-5-卡方分布"><a href="#5-5-卡方分布" class="headerlink" title="5-5 卡方分布"></a>5-5 卡方分布</h2><ul><li>卡方分布<ul><li>Chi-Square Distribution，又叫西格玛分布，用于验证假设的基础。</li><li>用<code>random.chisquare()</code>方法获取卡方分布数据，有以下两个参数。<ul><li>df：自由度。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.chisquare(df=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽取一个自由度为2，大小为2x3的卡方分布样本</span><br><br>sns.distplot(random.chisquare(df=<span class="hljs-number">1</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 卡方分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-6-瑞利分布"><a href="#5-6-瑞利分布" class="headerlink" title="5-6 瑞利分布"></a>5-6 瑞利分布</h2><ul><li>瑞利分布<ul><li>Rayleigh Distribution，用于信号处理。</li><li>使用<code>random.rayleigh()</code>方法获取瑞利分布数据，有以下两个参数。<ul><li>size：返回数组的形状。</li><li>scale：标准偏差，默认为1.0。</li></ul></li><li>在单位StdDev(标准偏差)中，自由度为2的瑞利分布和卡方分布相同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.rayleigh(scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 绘制一个尺度为2且大小为2x3的瑞利分布样本</span><br><br>sns.distplot(random.rayleigh(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 瑞利分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-7-帕累托分布"><a href="#5-7-帕累托分布" class="headerlink" title="5-7 帕累托分布"></a>5-7 帕累托分布</h2><ul><li>帕累托分布<ul><li>Pareto Distribution，经济学以外又被叫布拉德福分布。</li><li>帕累托分布即80-20分布，指的是20%的因素导致80%的结果。</li><li>用<code>random.pareto()</code>方法获取帕累托分布数据，有以下2个参数。<ul><li>a：形状参数。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.pareto(a=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 绘制一个形状为2且大小为2x3的帕累托分布样本</span><br><br>sns.distplot(random.pareto(a=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 帕累托分布的可视化</span><br></code></pre></td></tr></table></figure><h1 id="6-离散分布"><a href="#6-离散分布" class="headerlink" title="6 离散分布"></a>6 离散分布</h1><ul><li>离散分布<ul><li>Discrete Distribution，随机变量只能取有限或可数无限数量的值的概率分布。</li><li>常用分类<ul><li>二项分布：在概率论和统计学中，n个独立的成功或失败试验里成功次数的离散概率分布。</li><li>泊松分布：统计与概率学里常见的离散概率分布，法国数学家西莫恩·德尼·泊松在1838年时发表。</li><li>几何分布：n次伯努利试验中试验k次才得到首次成功的机率，即前k-1次失败，第k次成功的概率。</li><li>负二项分布：Negative Binomial Distribution，统计学上一种离散概率分布。</li></ul></li></ul></li></ul><h2 id="6-1-二项分布"><a href="#6-1-二项分布" class="headerlink" title="6-1 二项分布"></a>6-1 二项分布</h2><ul><li>二项分布<ul><li>Binomial Distribution，又叫伯努利分布，离散概率分布的一种。</li><li>二项分布描述二项式场景的结果，例如抛硬币，要么正面要么反面。</li><li>使用<code>random.binomial()</code>方法获取二项分布数据，有以下三个参数。<ul><li>n：试验次数。</li><li>size：返回数组的形状。</li><li>p：每次试验的发生概率，例如每次抛硬币正反面概率都是0.5。</li></ul></li><li>如果二项分布有足够的数据点，将与具有一定位置和尺度的正态分布相似。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.binomial(n=<span class="hljs-number">10</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 给定10次抛硬币试验，生成10个数据点</span><br><br>sns.distplot(random.binomial(n=<span class="hljs-number">10</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">True</span>, kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 二项分布的可视化</span><br><br>sns.distplot(random.normal(loc=<span class="hljs-number">50</span>, scale=<span class="hljs-number">5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.binomial(n=<span class="hljs-number">100</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;binomial&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-2-多项分布"><a href="#6-2-多项分布" class="headerlink" title="6-2 多项分布"></a>6-2 多项分布</h2><ul><li>多项分布<ul><li>Multinomial Distribution，是二项分布的推广。</li><li>描述了多项式场景的结果，例如人群血型，掷骰结果等。</li><li>使用<code>random.multinomial()</code>方法可获取多项分布数据。<ul><li>size：返回数组的形状。</li><li>n：可能结果的数量，例如掷骰子有6个结果。</li><li>pvals：结果概率列表，例如掷骰子的概率为6个1&#x2F;6。</li></ul></li><li>返回的多项样本不会只产生单个值，结果会生成pvals中的对应值。</li><li>由于是二项分布的推广，视觉效果和正态分布的相似性与二项分布的相同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>x = random.multinomial(n=<span class="hljs-number">6</span>, pvals=[<span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(x)                     <span class="hljs-comment"># 抽出一个掷骰子的样本</span><br></code></pre></td></tr></table></figure><h2 id="6-3-泊松分布"><a href="#6-3-泊松分布" class="headerlink" title="6-3 泊松分布"></a>6-3 泊松分布</h2><ul><li>泊松分布<ul><li>Poisson Distribution，离散概率分布的一种。</li><li>泊松分布估计事件在指定时间内可以发生的次数。</li><li>使用<code>random.poisson()</code>方法获取泊松分布数据。<ul><li>size：返回数组的形状。</li><li>lam：发生率或已知次数。</li></ul></li><li>足够大的泊松分布，类似于二项分布和具有特定标准偏差和均值的正态分布。</li><li>泊松分布与二项分布的区别<ul><li>二项分布适用于离散试验，泊松分布适用于连续试验。</li><li>n非常大且p接近于0的二项分布，几乎与泊松分布相同，n*p约等于lam。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.poisson(lam=<span class="hljs-number">2</span>, size=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成随机1x10发生次数为2的分布</span><br><br>sns.distplot(random.poisson(lam=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 泊松分布的可视化</span><br><br>sns.distplot(random.normal(loc=<span class="hljs-number">50</span>, scale=<span class="hljs-number">7</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.poisson(lam=<span class="hljs-number">50</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;poisson&quot;</span>)<br>plt.show()<br><br>sns.distplot(random.binomial(n=<span class="hljs-number">1000</span>, p=<span class="hljs-number">0.01</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;binomial&quot;</span>)<br>sns.distplot(random.poisson(lam=<span class="hljs-number">10</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;poisson&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-4-齐普夫分布"><a href="#6-4-齐普夫分布" class="headerlink" title="6-4 齐普夫分布"></a>6-4 齐普夫分布</h2><ul><li>齐普夫分布<ul><li>Zipf Distribution，又叫Zeta分布，用于根据Zipf定律对数据进行采样。</li><li>齐夫定律(Zipf)：实验定律，一集合中第n个常用项是最常用项的1&#x2F;n倍。</li><li>使用<code>random.zipf()</code>方法可以获取齐普夫分布数据，有以下两个参数。<ul><li>a：分布参数。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> warnings             <span class="hljs-comment"># 忽略警告提示</span><br><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>warnings.filterwarnings(<span class="hljs-string">&quot;ignore&quot;</span>, message=<span class="hljs-string">&quot;`distplot` is a deprecated function&quot;</span>)<br><br>x = random.zipf(a=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽取一个分布参数为2且大小为2x3的齐普夫分布样本</span><br><br>y = random.zipf(a=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>)<br>sns.distplot(y[y &lt; <span class="hljs-number">10</span>], kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 齐普夫分布的可视化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 基础</title>
    <link href="/2021/03/01/python/python04-python-numpy-ji-chu/"/>
    <url>/2021/03/01/python/python04-python-numpy-ji-chu/</url>
    
    <content type="html"><![CDATA[<p>NumPy是一个用于处理数组的Python库，具有在线性代数、傅里叶变换和矩阵领域工作的功能，由Travis Oliphant于2005年创建。</p><span id="more"></span><h1 id="1-NumPy"><a href="#1-NumPy" class="headerlink" title="1 NumPy"></a>1 NumPy</h1><ul><li>Numpy<ul><li>通过import关键字将其导入应用程序，通常以np别名替代。</li><li>检查NumPy版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np           <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><br><span class="hljs-built_in">print</span>(np.__version__)        <span class="hljs-comment"># 检查NumPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2 创建数组"></a>2 创建数组</h1><ul><li>创建数组<ul><li>NumPy中的数组对象称为ndarray，使用数组对象的<code>array()</code>函数创建NumPy对象。</li><li><code>type()</code>用于显示数组类型numpy.ndarray，数组中的维度是一级数组深度(嵌套数组)。<ul><li>0-D数组：零维数组，又叫标量，数组中的每个值都是一个0-D数组。</li><li>1-D数组：一维数组，以零维数组作为元素的数组，是最基本的数组。</li><li>2-D数组：二维数组，以一维数组作为元素的数组，用于表示二阶张量。</li><li>3-D数组：三维数组，以二维数组作为元素的数组，用于表示三阶张量。</li><li>高维数组：数组可有任意数量的维度，创建时使用ndmin参数定义维数。</li></ul></li><li>二阶张量又叫矩阵，使用ndim检查数组的维数，返回整数的属性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(arr))            <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>arr0 = np.array(<span class="hljs-number">30</span>)         <span class="hljs-comment"># 0-D</span><br><span class="hljs-built_in">print</span>(arr0)<br>arr1 = np.array((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))  <span class="hljs-comment"># 1-D</span><br><span class="hljs-built_in">print</span>(arr1)<br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br><span class="hljs-built_in">print</span>(arr2)                 <span class="hljs-comment"># 2-D</span><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 3-D</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                 <span class="hljs-comment"># 5-D</span><br><br><span class="hljs-built_in">print</span>(arr0.ndim)            <span class="hljs-comment"># 检查数组的维数</span><br><span class="hljs-built_in">print</span>(arr1.ndim)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><h2 id="2-1-数组索引"><a href="#2-1-数组索引" class="headerlink" title="2-1 数组索引"></a>2-1 数组索引</h2><ul><li>数组索引<ul><li>数组索引与访问数组元素相同，通过引用索引号访问数组元素。</li><li>索引从0开始，第一个元素索引为0，第二个元素索引为1，以此类推。</li><li>二维数组和三维数组都使用逗号分隔的整数来表示元素的维度和索引。</li><li>二维数组索引可以想象为具有行和列的表，行表示维度，索引表示列。</li><li>可以使用负索引从末尾访问数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 访问一维数组元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">3</span>])<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])           <span class="hljs-comment"># 访问二维数组元素，第一行第二列的元素</span><br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-built_in">print</span>(arr3[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 访问三维数组元素，第一个数组的第二个数组的第三个元素</span><br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>])          <span class="hljs-comment"># 访问二维数组元素，第二行的最后一个元素</span><br></code></pre></td></tr></table></figure><h2 id="2-2-数组切片"><a href="#2-2-数组切片" class="headerlink" title="2-2 数组切片"></a>2-2 数组切片</h2><ul><li>数组切片<ul><li>格式：<code>[start: end]</code>或<code>[start: end: step]</code>，结果包括开始索引，不包括结束索引。</li><li>start默认为0，end在维度中考虑数组的长度，step默认为1，使用负号可从末尾引用索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])           <span class="hljs-comment"># 索引1到5的元素，不包括5</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">4</span>:  ])           <span class="hljs-comment"># 索引4到数组末尾的元素切片</span><br><span class="hljs-built_in">print</span>(arr1[ : <span class="hljs-number">4</span>])           <span class="hljs-comment"># 索引开始到4的切片元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])         <span class="hljs-comment"># 负索引从-1开始，索引末尾-1到-3的元素，不包括-1</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引1到5的所有元素，其中步长为2</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引整个数组中步长为2的所有元素</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])        <span class="hljs-comment"># 第二个元素开始，索引1到4的元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 两个元素中返回索引2</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])     <span class="hljs-comment"># 两个元素中，返回索引1到4的元素，不包括4，返回一个二维数组</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2-3 数据类型"></a>2-3 数据类型</h2><ul><li>数据类型<ul><li>Python中的数据类型：float、integer、boolean、complex、strings。</li><li>NumPy模块也有一些额外的数据类型，并且是指代具有一个字符的数据类型。<ul><li>i(整数)、b(布尔值)、u(无符号整数)、f(浮点数)、c(复数)、m(时间增量)。</li><li>M(日期时间)、O(对象)、S(字符串)、U(Unicode字符串)、V(其他类型的固定内存块void)。</li></ul></li><li>NumPy数组对象有个dtype属性，用于返回数组的数据类型。</li><li><code>array()</code>创建具有已定义数据类型的数组，带可选参数dtype，允许定义数组元素的预期数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr1.dtype)           <span class="hljs-comment"># 获取数组对象的数据类型</span><br>arr2 = np.array([<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>])<br><span class="hljs-built_in">print</span>(arr2.dtype)           <span class="hljs-comment"># 获取包含字符串数组的数据类型</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;S&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 创建一个数据类型为字符串的数组</span><br><span class="hljs-built_in">print</span>(arr3.dtype)<br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;i4&quot;</span>)<br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 创建一个数据类型为4字节整数的数组</span><br><span class="hljs-built_in">print</span>(arr4.dtype)<br></code></pre></td></tr></table></figure><ul><li>类型转换<ul><li>若给定类型无法转换元素，NumPy将引发ValueError(传递给函数的参数类型意外或不正确时显示)。</li><li>使用<code>astype()</code>方法制作数组的副本，允许将数据类型指定为参数，可以更改现有数组的数据类型。</li><li>可用字符串指定数据类型，例如f(浮点数)、i(整数)等，或直接使用数据类型，例如float、int等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># arr1 = np.array([&quot;a&quot;, &quot;2&quot;], dtype=&quot;i&quot;)</span><br>arr2 = np.array([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">3.1</span>])<br>arr3 = arr2.astype(<span class="hljs-string">&quot;i&quot;</span>)     <span class="hljs-comment"># 像a这样的非整数字符串不能转换为整数，会引发错误</span><br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 通过使用i作为参数值将数据类型从浮点数更改为整数</span><br><span class="hljs-built_in">print</span>(arr3.dtype)<br><br>arr4 = arr2.astype(<span class="hljs-built_in">int</span>)     <span class="hljs-comment"># 通过使用int作为参数值将数据类型从浮点数更改为整数</span><br><span class="hljs-built_in">print</span>(arr4)<br><span class="hljs-built_in">print</span>(arr4.dtype)<br><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>])  <span class="hljs-comment"># 将数据类型从整数更改为布尔值</span><br>arr6 = arr5.astype(<span class="hljs-built_in">bool</span>)<br><span class="hljs-built_in">print</span>(arr6)<br><span class="hljs-built_in">print</span>(arr6.dtype)<br></code></pre></td></tr></table></figure><h1 id="3-副本与视图"><a href="#3-副本与视图" class="headerlink" title="3 副本与视图"></a>3 副本与视图</h1><ul><li>副本与视图<ul><li>副本是一个新数组，而视图只是原始数组的视图。<ul><li>副本拥有数据，对副本所做的更改不会影响原始数组，对原始数组所做的更改不会影响副本。</li><li>视图没有数据，对视图所做的更改将会影响原始数组，对原始数组所做的更改也会影响视图。</li></ul></li><li>每个NumPy数组都有base属性，如果数组拥有数据，那么返回None，否则base属性引用原始对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>arr2 = arr1.copy()          <span class="hljs-comment"># 创建一个副本</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>                 <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr2)                 <span class="hljs-comment"># 副本不应受到对原始数组所做更改的影响</span><br><br>arr3 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">30</span>                <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 视图应该受到对原始数组所做更改的影响</span><br><br>arr4 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr4[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>                 <span class="hljs-comment"># 更改视图</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 原始数组应该受到对视图所做更改的影响</span><br><br>arr5 = arr1.copy()          <span class="hljs-comment"># 打印base属性的值，检查数组是否拥有数据</span><br>arr6 = arr1.view()<br><span class="hljs-built_in">print</span>(arr5.base)            <span class="hljs-comment"># 副本返回None</span><br><span class="hljs-built_in">print</span>(arr6.base)            <span class="hljs-comment"># 视图返回原始数组</span><br></code></pre></td></tr></table></figure><h1 id="4-形状与重塑"><a href="#4-形状与重塑" class="headerlink" title="4 形状与重塑"></a>4 形状与重塑</h1><ul><li>形状<ul><li>数组形状是每个维度中元素的数量，NumPy数组有shape属性。</li><li>shape属性返回一个元组，每个索引都有与之对应元素的数量。</li><li>形状元组：每个索引处的整数都表示相应维度具有的元素数量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-built_in">print</span>(arr1.shape)                <span class="hljs-comment"># 二维数组的形状(2, 4)，2个维度，维度一有2个元素，维度二有4个元素</span><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr2)                      <span class="hljs-comment"># 使用值为1、2、3、4的ndmin向量创建一个5维数组，并打印最后一维的值</span><br><span class="hljs-built_in">print</span>(arr2.shape)<br></code></pre></td></tr></table></figure><ul><li>重塑<ul><li>数组重塑意味着改变数组形状，可添加或删除维度，或更改每个维度元素的数量。</li><li>只要数组重塑所需要的元素在两种形状中都相同，就可以将数组重塑成任何形状。</li><li>不必为reshape方法的其中一个维度指定确切的数字，拥有未知维度，作为-1值传递。</li><li>扁平化数组意味着将多维数组转换为一维数组，可使用<code>reshape(-1)</code>来做到这一点。</li><li>改变数组形状还有flatten、revel函数，rot90、flip、fliplr和flipud等则可重新排列元素。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br>arr2 = arr1.reshape(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)       <span class="hljs-comment"># 从一维重塑到二维</span><br><span class="hljs-built_in">print</span>(arr2)                     <span class="hljs-comment"># 最外层维度有4个数组，每个数组包含3个元素</span><br><br>arr3 = arr1.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)    <span class="hljs-comment"># 从一维重塑到三维</span><br><span class="hljs-built_in">print</span>(arr3)                     <span class="hljs-comment"># 最外层维度有2个数组，其中包含3个数组，每个数组有2个元素</span><br><br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-comment"># arr5 = arr4.reshape(3, 3)</span><br><span class="hljs-comment"># print(arr5)                   # 8个元素的1-D数组转换为每个维度具有3个元素的2-D数组，会引发错误</span><br><br><span class="hljs-built_in">print</span>(arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>).base)  <span class="hljs-comment"># 检查返回的数组是副本或视图，返回原始数组，是视图</span><br>arr6 = arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>)   <span class="hljs-comment"># 8个元素的1-D数组转换为2x2元素的3-D数组，不能传递-1值到多个维度</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br>arr8 = arr7.reshape(-<span class="hljs-number">1</span>)         <span class="hljs-comment"># 将数组转换为一维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br></code></pre></td></tr></table></figure><h1 id="5-连接与拆分"><a href="#5-连接与拆分" class="headerlink" title="5 连接与拆分"></a>5 连接与拆分</h1><ul><li>连接<ul><li>SQL中基于键连接表，NumPy中通过轴连接数组。</li><li>通过<code>concatenate()</code>函数将数组与轴一起进行传递连接，参数axis默认为0。</li><li>使用堆栈函数<code>stack()</code>连接数组(堆叠，一个轴在另一个轴上)，参数axis默认为0。<ul><li><code>hstack()</code>：沿行堆叠。</li><li><code>vstack()</code>：沿列堆叠。</li><li><code>dstack()</code>：沿高度或深度堆叠。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr3 = np.concatenate((arr1, arr2))           <span class="hljs-comment"># 连接两个一维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>arr5 = np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>arr6 = np.concatenate((arr4, arr5), axis=<span class="hljs-number">1</span>)   <span class="hljs-comment"># 连接两个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.stack((arr1, arr2), axis=<span class="hljs-number">1</span>)         <span class="hljs-comment"># 堆叠</span><br><span class="hljs-built_in">print</span>(arr7)<br>arrh = np.hstack((arr1, arr2))                <span class="hljs-comment"># 沿行堆叠</span><br><span class="hljs-built_in">print</span>(arrh)<br>arrv = np.vstack((arr1, arr2))                <span class="hljs-comment"># 沿列堆叠</span><br><span class="hljs-built_in">print</span>(arrv)<br>arrd = np.dstack((arr1, arr2))                <span class="hljs-comment"># 沿高度或深度堆叠</span><br><span class="hljs-built_in">print</span>(arrd)<br></code></pre></td></tr></table></figure><ul><li>拆分<ul><li>拆分是连接的逆操作，<code>array_split()</code>方法用于拆分数组。<ul><li>如果数组的元素少于所需要的元素，那么将相应地从末尾进行自动调整。</li><li>也可以使用<code>split()</code>方法，但若元素较少，不会自动调整，将返回错误。</li></ul></li><li><code>array_split()</code>方法的返回值是一个数组，其中包含每个数组拆分为一个数组。<ul><li>若将一个数组拆分为3个数组，可以像访问任何数组元素一样从结果中进行访问。</li><li>可指定要围绕哪个轴进行拆分，使用axis参数进行拆分，或使用<code>hsplit()</code>替代。</li><li><code>vstack()</code>和<code>dstack()</code>函数对应沿列拆分<code>vsplit()</code>以及沿高度拆分<code>dsplit()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr2 = np.array_split(arr1, <span class="hljs-number">3</span>)                <span class="hljs-comment"># 将一维数组拆分为3部分</span><br><span class="hljs-built_in">print</span>(arr2)                                   <span class="hljs-comment"># 返回一个包含3个数组的数组</span><br><br>arr3 = np.array_split(arr1, <span class="hljs-number">4</span>)                <span class="hljs-comment"># 将一维数组拆分为4部分</span><br><span class="hljs-built_in">print</span>(arr3)                                   <span class="hljs-comment"># 数组元素少于所需的元素</span><br>arr4 = np.split(arr1, <span class="hljs-number">3</span>)                      <span class="hljs-comment"># 将一维数组拆分为3部分</span><br><span class="hljs-built_in">print</span>(arr4)<br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>])                                <span class="hljs-comment"># 打印拆分后的数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">2</span>])<br><br>arr5 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<br>arr6 = np.array_split(arr5, <span class="hljs-number">3</span>)                <span class="hljs-comment"># 将二维数组拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])<br>arr8 = np.array_split(arr7, <span class="hljs-number">3</span>)                <span class="hljs-comment"># 将二维数组拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br><br>arr9 = np.array_split(arr7, <span class="hljs-number">3</span>, axis=<span class="hljs-number">1</span>)        <span class="hljs-comment"># 将二维数组沿行拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr9)<br>arrh = np.hsplit(arr7, <span class="hljs-number">3</span>)                     <span class="hljs-comment"># 将二维数组沿行拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arrh)<br></code></pre></td></tr></table></figure><h1 id="6-数组迭代"><a href="#6-数组迭代" class="headerlink" title="6 数组迭代"></a>6 数组迭代</h1><ul><li>数组迭代<ul><li>迭代意味着一个一个地遍历元素，在NumPy中处理多维数组时，使用for循环可以进行迭代。</li><li>若迭代一个n-D数组，将遍历n-1维，要返回实际值，即标量，必须在每个维度中迭代数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr1:                      <span class="hljs-comment"># 迭代一维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> arr2:                      <span class="hljs-comment"># 迭代二维数组的元素</span><br>    <span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr2:                      <span class="hljs-comment"># 迭代二维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-built_in">print</span>(y)<br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:                      <span class="hljs-comment"># 迭代三维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:                      <span class="hljs-comment"># 迭代三维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> y:<br>            <span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>迭代方法<ul><li><code>nditer()</code>是一个帮助函数，可以解决迭代中的一些基本问题。<ul><li>使用op_dtypes参数并将预期的数据类型传递给它，可以在迭代时更改元素的数据类型。</li><li>元素在数组中时，NumPy不会就地更改元素的数据类型，需一些其他空间来执行此操作。</li><li>其他空间即缓冲区，为启用额外空间，还需要使用<code>nditer()</code>函数的<code>flags=[&quot;buffered&quot;]</code>。</li></ul></li><li>使用过滤可以以不同的步长进行迭代，若需元素的相应索引，可用<code>ndenumerate()</code>进行枚举迭代。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr1):           <span class="hljs-comment"># 遍历3-D数组</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])          <span class="hljs-comment"># 作为字符串遍历数组</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr2, flags=[<span class="hljs-string">&quot;buffered&quot;</span>], op_dtypes=[<span class="hljs-string">&quot;S&quot;</span>]):<br>    <span class="hljs-built_in">print</span>(x)<br><br>arr3 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr3[:, ::<span class="hljs-number">2</span>]):   <span class="hljs-comment"># 每跳过1个元素，遍历2-D数组的每个标量元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr2): <span class="hljs-comment"># 枚举一维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr3): <span class="hljs-comment"># 枚举二维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br></code></pre></td></tr></table></figure><h1 id="7-数组搜索"><a href="#7-数组搜索" class="headerlink" title="7 数组搜索"></a>7 数组搜索</h1><ul><li>数组搜索<ul><li><code>where()</code>方法可以进行数组搜索。</li><li><code>searchsorted()</code>方法：考虑先插入，再排序，最后索引。<ul><li>数组中执行二进制搜索，并返回将插入指定值的索引以保持搜索顺序。</li><li>默认情况下返回左侧索引，使用<code>side=&quot;right&quot;</code>可以改为返回右侧索引。</li><li>如果需要搜索多个值，那么可以使用具有指定值的数组进行数组的搜索。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br>val4 = np.where(arr1 == <span class="hljs-number">4</span>)          <span class="hljs-comment"># 查找值为4的索引</span><br><span class="hljs-built_in">print</span>(val4)                         <span class="hljs-comment"># 返回元组(array([3, 5, 6], ))，值4出现在索引的3、5和6位置处</span><br>even = np.where(arr1 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)      <span class="hljs-comment"># 查找值为偶数的索引</span><br><span class="hljs-built_in">print</span>(even)<br><br>arr2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br>insl = np.searchsorted(arr2, <span class="hljs-number">7</span>)     <span class="hljs-comment"># 查找应插入值7的索引</span><br><span class="hljs-built_in">print</span>(insl)                         <span class="hljs-comment"># 索引从左侧开始，并返回第一个索引</span><br>insr = np.searchsorted(arr2, <span class="hljs-number">7</span>, side=<span class="hljs-string">&quot;right&quot;</span>)<br><span class="hljs-built_in">print</span>(insr)                         <span class="hljs-comment"># 索引从右侧开始，并返回第一个索引</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br>ins1 = np.searchsorted(arr3, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(ins1)                         <span class="hljs-comment"># 返回0</span><br>ins2 = np.searchsorted(arr3, [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(ins2)                         <span class="hljs-comment"># 返回数组[4 4]</span><br>ins3 = np.searchsorted(arr3, [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(ins3)                         <span class="hljs-comment"># 查找应插入值2、4和6的索引，返回数组[1 2 3]</span><br></code></pre></td></tr></table></figure><h1 id="8-数组排序"><a href="#8-数组排序" class="headerlink" title="8 数组排序"></a>8 数组排序</h1><ul><li>数组排序<ul><li>NumPy的ndarray对象有一个<code>sort()</code>函数，可以对指定的数组进行排序。</li><li><code>sort()</code>函数可以对字符串数组、布尔数组或任何其他数据类型进行排序。</li><li>若对二维数组使用<code>sort()</code>函数，那么二维数组中的两个数组都将被排序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])       <span class="hljs-comment"># 对数组排序</span><br><span class="hljs-built_in">print</span>(np.sort(arr1))                <span class="hljs-comment"># 返回数组arr1的副本，保持原始数组不变</span><br><br>arr2 = np.array([<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>])<br><span class="hljs-built_in">print</span>(np.sort(arr2))                <span class="hljs-comment"># 按字母顺序对数组排序</span><br><br>arr3 = np.array([<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>])<br><span class="hljs-built_in">print</span>(np.sort(arr3))                <span class="hljs-comment"># 对布尔数组排序</span><br><br>arr4 = np.array([[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(np.sort(arr4))<br></code></pre></td></tr></table></figure><h1 id="9-数组过滤器"><a href="#9-数组过滤器" class="headerlink" title="9 数组过滤器"></a>9 数组过滤器</h1><ul><li>数组过滤器<ul><li>从现有数组中取出一些元素，并从中创建一个新数组，称为数组过滤。</li><li>布尔索引列表过滤数组<ul><li>如果索引处的值是True，则该元素包含在过滤后的数组中。</li><li>如果索引处的值是False，则该元素从过滤后的数组中排除。</li></ul></li><li>根据条件创建过滤器数组，可以在条件中直接替换数组而不是可迭代变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>])<br>boo1 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>]<br>new1 = arr1[boo1]                   <span class="hljs-comment"># 对True和False值进行了硬编码</span><br><span class="hljs-built_in">print</span>(new1)                         <span class="hljs-comment"># 返回[30 32]，新过滤器仅包含过滤器数组具有value的True值</span><br><br>filter_arr1 = []                    <span class="hljs-comment"># 创建空列表</span><br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> arr1:                <span class="hljs-comment"># 遍历数组arr1中的每个元素</span><br>    <span class="hljs-keyword">if</span> element &gt; <span class="hljs-number">31</span>:                <span class="hljs-comment"># 元素大于31，将值设为True，否则为False</span><br>        filter_arr1.append(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">else</span>:<br>        filter_arr1.append(<span class="hljs-literal">False</span>)<br>arr2 = arr1[filter_arr1]<br><span class="hljs-built_in">print</span>(filter_arr1)                  <span class="hljs-comment"># [False, False, True, True]</span><br><span class="hljs-built_in">print</span>(arr2)                         <span class="hljs-comment"># 返回[32 33]</span><br><br>filter_arr2 = arr1 &gt; <span class="hljs-number">31</span>             <span class="hljs-comment"># 在条件中直接替换数组</span><br>arr3 = arr1[filter_arr2]<br><span class="hljs-built_in">print</span>(filter_arr2)<br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 文件处理</title>
    <link href="/2021/02/03/python/python03-python-wen-jian-chu-li/"/>
    <url>/2021/02/03/python/python03-python-wen-jian-chu-li/</url>
    
    <content type="html"><![CDATA[<p>文件就是操作系统提供给用户或应用程序操作硬盘的一种功能，任何语言都离不开对文件的操作，Python语言更不例外。</p><span id="more"></span><h1 id="1-文件处理"><a href="#1-文件处理" class="headerlink" title="1 文件处理"></a>1 文件处理</h1><ul><li>文件处理<ul><li><code>open()</code>函数，文件处理的关键函数，有filename和mode两个参数。</li><li>打开文件的模式<ul><li><code>x</code>：创建指定文件，如果文件存在则返回错误。</li><li><code>r</code>：默认值，打开文件进行读取，如果文件不存在则出错。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li><li>指定文件的形式<ul><li><code>t</code>：默认值，文本模式。</li><li><code>b</code>：二进制模式，例如图像。</li></ul></li><li>打开文件进行读取，指定文件名就可以了。</li></ul></li></ul><h2 id="1-1-读取文件"><a href="#1-1-读取文件" class="headerlink" title="1-1 读取文件"></a>1-1 读取文件</h2><ul><li>读取文件<ul><li><code>read()</code>方法<ul><li><code>open()</code>函数返回一个文件对象，该对象的<code>read()</code>方法可以读取文件内容。</li><li>若文件位于其他位置，须指定文件路径，<code>read()</code>方法可指定要返回的字符数。</li></ul></li><li><code>readline()</code>方法<ul><li>使用该方法将返回文件的一行内容，调用两次则可以获取前两行。</li><li>通过遍历文件的行，可以逐行读取整个文件，完成操作后将文件关闭是个好习惯。</li><li>在某些情况下，由于缓冲，对文件所做的更改可能在关闭文件之前不会显示出来。</li></ul></li></ul></li></ul><h4 id="1-read"><a href="#1-read" class="headerlink" title="(1) read()"></a>(1) read()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/read_file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)    <span class="hljs-comment"># 确保文件存在，否则报错</span><br><span class="hljs-built_in">print</span>(x.read())                        <span class="hljs-comment"># 获取文件内容</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/read_file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)    <span class="hljs-comment"># 相对路径</span><br><span class="hljs-built_in">print</span>(y.read(<span class="hljs-number">5</span>))                       <span class="hljs-comment"># 返回文件的前5个字符</span><br><br><span class="hljs-comment"># f = open(&quot;D:\\read_file.txt&quot;, &quot;r&quot;)   # 指定文件路径，绝对路径</span><br><span class="hljs-comment"># print(f.read())</span><br></code></pre></td></tr></table></figure><h4 id="2-readline"><a href="#2-readline" class="headerlink" title="(2) readline()"></a>(2) readline()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/read_file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的一行</span><br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的前两行</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/read_file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> y:                           <span class="hljs-comment"># 逐行循环文件</span><br>    <span class="hljs-built_in">print</span>(i)<br><br>x.close()                             <span class="hljs-comment"># 完成后关闭文件</span><br>y.close()<br></code></pre></td></tr></table></figure><h2 id="1-2-文件操作"><a href="#1-2-文件操作" class="headerlink" title="1-2 文件操作"></a>1-2 文件操作</h2><ul><li>文件操作<ul><li>写入现有文件，必须向<code>open()</code>函数添加参数。<ul><li><code>a</code>：将内容追加到文件的末尾。</li><li><code>w</code>：将内容覆盖任何现有内容。</li></ul></li><li>创建新文件，使用<code>open()</code>函数带以下参数之一的方法。<ul><li><code>x</code>：创建一个文件，如果文件存在，则将返回错误。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/write_file.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)  <span class="hljs-comment"># 打开文件并将内容附加到文件中，如果文件不存在则创建文件</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/write_file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())<br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/write_file.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)  <span class="hljs-comment"># 打开文件并覆盖整个文件的内容，如果文件不存在则创建文件</span><br>y.write(<span class="hljs-string">&quot;Woops! I have deleted the content!&quot;</span>)<br>y.close()<br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/write_file.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read())<br></code></pre></td></tr></table></figure><h2 id="1-3-删除文件"><a href="#1-3-删除文件" class="headerlink" title="1-3 删除文件"></a>1-3 删除文件</h2><ul><li>删除文件<ul><li>os模块：删除整个文件夹，需要使用<code>os.rmdir()</code>方法。</li><li>导入模块并运行<code>os.remove()</code>方法对文件进行删除操作。</li><li>为避免出现错误，需要在尝试删除文件之前检查文件是否存在。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br>os.rmdir(<span class="hljs-string">&quot;folder&quot;</span>)                    <span class="hljs-comment"># 删除文件夹，只有文件夹为空时才可删除</span><br>os.remove(<span class="hljs-string">&quot;file/test_file.txt&quot;</span>)       <span class="hljs-comment"># 删除一个文件</span><br><br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;file/test_file.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)   <span class="hljs-comment"># 打开文件并将内容附加到文件中</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;file/test_file.txt&quot;</span>):<br>    os.remove(<span class="hljs-string">&quot;file/test_file.txt&quot;</span>)   <span class="hljs-comment"># 检查文件是否存在，然后将其删除</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The file does not exist.&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-Excel操作"><a href="#2-Excel操作" class="headerlink" title="2 Excel操作"></a>2 Excel操作</h1><ul><li>Excel操作<ul><li>xlwt库用于将数据写入Excel中，不支持xlsx格式，仅支持xls格式的Excel，命令<code>pip install xlwt</code>进行安装。</li><li>xlrd库用于读取Excel中的数据，新版不支持xlsx格式，若要支持，命令<code>pip install xlrd==1.2.0</code>进行安装。<ul><li>Python3.9新版中，xlrd库更新删除了<code>getiterator()</code>方法，xlrd版本1.2.0在读取xlsx格式文档时会报错。</li><li>执行时的报错信息：<code>AttributeError: &#39;ElementTree&#39; object has no attribute &#39;getiterator&#39;</code>。</li><li>到Python目录的\Lib\site-packages\xlrd\xlsx.py文件中，将两个<code>getiterator()</code>都改为<code>iter()</code>即可。</li></ul></li><li>常用单元格中的数据类型：empty(空的)、string(文本)、number、date、boolean、error、blank(空白表格)。</li><li>Excel中三大对象：Cell(单元格对象)、Sheet(工作表对象)、WorkBook(工作簿对象)。<ul><li><code>style_compression=0</code>：表示是否压缩。</li><li><code>cell_overwrite_ok=True</code>：是否可以覆盖单元格(覆写)，默认为False。</li><li><code>worksheet.write(行, 列, 值)</code>：向Sheet页的第一行第一列写入数据值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">import</span> xlrd<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, style_compression=<span class="hljs-number">0</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;tabname&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;xlwt&#x27;</span>)                                 <span class="hljs-comment"># 第1行第1列写入xlwt</span><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)          <span class="hljs-comment"># 读取excel_file.xls中的数据</span><br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><h2 id="2-1-写入样式"><a href="#2-1-写入样式" class="headerlink" title="2-1 写入样式"></a>2-1 写入样式</h2><ul><li>写入样式<ul><li>xlwt中设置单元格样式主要通过XFStyle这个类来完成。</li><li><code>font</code>：字体，Font类实例。</li><li><code>pattern</code>：填充，Pattern类实例。</li><li><code>borders</code>：边框，Borders类实例。</li><li><code>alignment</code>：对齐，Alignment类实例。</li><li><code>protection</code>：保护，Protection类实例。</li><li><code>num_format_str</code>(属性名)：数据格式(属性)，str(值类型)。</li></ul></li></ul><h4 id="1-字体"><a href="#1-字体" class="headerlink" title="(1) 字体"></a>(1) 字体</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;font&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                                    <span class="hljs-comment"># 初始化样式</span><br>fonts = xlwt.Font()                                       <span class="hljs-comment"># 为样式创建字体</span><br><br>fonts.name = <span class="hljs-string">&quot;Arial&quot;</span>                                      <span class="hljs-comment"># 指定字体</span><br>fonts.height = <span class="hljs-number">200</span>                                        <span class="hljs-comment"># 与Excel字体大小比例是1:20，200/20=10号字体</span><br>fonts.bold = <span class="hljs-literal">True</span>                                         <span class="hljs-comment"># 加粗</span><br>fonts.underline = <span class="hljs-literal">True</span>                                    <span class="hljs-comment"># 加下划线</span><br>fonts.struck_out = <span class="hljs-literal">True</span>                                   <span class="hljs-comment"># 加横线</span><br>fonts.italic = <span class="hljs-literal">True</span>                                       <span class="hljs-comment"># 斜体字</span><br>fonts.colour_index = <span class="hljs-number">4</span>                                    <span class="hljs-comment"># 字体颜色</span><br><br>style.font = fonts                                        <span class="hljs-comment"># 设定字体样式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                             <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;font&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h4 id="2-背景颜色"><a href="#2-背景颜色" class="headerlink" title="(2) 背景颜色"></a>(2) 背景颜色</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;pattern&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                                    <span class="hljs-comment"># 初始化样式</span><br>pattern = xlwt.Pattern()                                  <span class="hljs-comment"># 为样式创建背景图案</span><br><br>pattern.pattern = xlwt.Pattern.SOLID_PATTERN              <span class="hljs-comment"># 设置背景颜色模式</span><br>pattern.pattern_fore_colour = <span class="hljs-number">3</span>                           <span class="hljs-comment"># 不同值代表不同背景色</span><br><br>style.pattern = pattern                                   <span class="hljs-comment"># 设定背景图案样式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                             <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;pattern&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h4 id="3-边框设置"><a href="#3-边框设置" class="headerlink" title="(3) 边框设置"></a>(3) 边框设置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;borders&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                                    <span class="hljs-comment"># 初始化样式</span><br>borders = xlwt.Borders()                                  <span class="hljs-comment"># 为样式创建边框设置</span><br><br>borders.left = xlwt.Borders.THIN                          <span class="hljs-comment"># 设定边框属性</span><br>borders.right = xlwt.Borders.THIN<br>borders.top = xlwt.Borders.THIN<br>borders.bottom = xlwt.Borders.THIN<br><br>style.borders = borders                                   <span class="hljs-comment"># 设定边框样式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                             <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;borders&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h4 id="4-对齐方式"><a href="#4-对齐方式" class="headerlink" title="(4) 对齐方式"></a>(4) 对齐方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;alignment&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>style = xlwt.XFStyle()                                    <span class="hljs-comment"># 初始化样式</span><br>alignment = xlwt.Alignment()                              <span class="hljs-comment"># 为样式创建对齐方式设置</span><br><br>alignment.vert = <span class="hljs-number">0x01</span>                                     <span class="hljs-comment"># vert垂直对齐：0x00上、0x01中、0x02下</span><br>alignment.horz = <span class="hljs-number">0x03</span>                                     <span class="hljs-comment"># horz水平对齐：0x01左、0x02中、0x03右</span><br>alignment.wrap = <span class="hljs-number">1</span>                                        <span class="hljs-comment"># 设定自动换行</span><br><br>style.alignment = alignment                               <span class="hljs-comment"># 设定对齐方式</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                             <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;alignment\nalignment\nalignment&#x27;</span>, style)<br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h4 id="5-单元格格式"><a href="#5-单元格格式" class="headerlink" title="(5) 单元格格式"></a>(5) 单元格格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;format&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>data = <span class="hljs-string">&#x27;2022-02-02&#x27;</span><br>style = xlwt.XFStyle()                                    <span class="hljs-comment"># 初始化样式</span><br>num_format_str = <span class="hljs-string">&#x27;YYYY\/MM\/DD&#x27;</span>                           <span class="hljs-comment"># ..\site-packages\xlwt\Style.py文件中可查</span><br>style.num_format_str = num_format_str<br><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, data)                                   <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, datetime.strptime(data, <span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>).date(), style)<br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h4 id="6-列宽与行高"><a href="#6-列宽与行高" class="headerlink" title="(6) 列宽与行高"></a>(6) 列宽与行高</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;col&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                             <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;col&#x27;</span>)<br>sheet.write(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;col&#x27;</span>)<br>sheet.col(<span class="hljs-number">1</span>).width = <span class="hljs-number">256</span>*<span class="hljs-number">30</span>                               <span class="hljs-comment"># 设定第1列列宽，约为30个字符</span><br>sheet.row(<span class="hljs-number">1</span>).set_style(xlwt.easyxf(<span class="hljs-string">&#x27;font: height 720&#x27;</span>))   <span class="hljs-comment"># 44.25磅，怎么换算的？？？</span><br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                         <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h4 id="7-行与列合并"><a href="#7-行与列合并" class="headerlink" title="(7) 行与列合并"></a>(7) 行与列合并</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlwt<br><br>wbook = xlwt.Workbook(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>sheet = wbook.add_sheet(<span class="hljs-string">&#x27;merge&#x27;</span>, cell_overwrite_ok=<span class="hljs-literal">True</span>)<br><br>sheet.write(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;no style&#x27;</span>)                              <span class="hljs-comment"># 向sheet页添加数据</span><br>sheet.write_merge(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;merge&#x27;</span>)                     <span class="hljs-comment"># 1-4行，2-5列，合并单元格</span><br><br>wbook.save(<span class="hljs-string">&#x27;file/excel_file.xls&#x27;</span>)                          <span class="hljs-comment"># 保存到当前路径file目录的excel_file.xls中</span><br></code></pre></td></tr></table></figure><h2 id="2-2-读取数据"><a href="#2-2-读取数据" class="headerlink" title="2-2 读取数据"></a>2-2 读取数据</h2><figure class="highlight xlsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Xlsx"># file/excel_file.xlsx<br>Name  Age Language  Registration <span class="hljs-built_in">date</span><br>Sims  <span class="hljs-number">30</span>  C         <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">20</span><br>Peck  <span class="hljs-number">29</span>  C#        <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">21</span><br>Lane  <span class="hljs-number">28</span>  C++       <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">22</span><br>Fred  <span class="hljs-number">27</span>  Java      <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">23</span><br>Miya  <span class="hljs-number">26</span>  Python    <span class="hljs-number">2020</span>-<span class="hljs-number">12</span>-<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><h4 id="1-获取Sheet"><a href="#1-获取Sheet" class="headerlink" title="(1) 获取Sheet"></a>(1) 获取Sheet</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd<br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;file/excel_file.xlsx&#x27;</span>)         <span class="hljs-comment"># 读取文件中的数据</span><br><br>sheet1 = data.sheets()[<span class="hljs-number">0</span>]                                 <span class="hljs-comment"># 索引顺序获取首个sheet</span><br>sheet2 = data.sheet_by_index(<span class="hljs-number">0</span>)                           <span class="hljs-comment"># 索引顺序获取首个sheet</span><br>sheet3 = data.sheet_by_name(<span class="hljs-string">&#x27;info&#x27;</span>)                       <span class="hljs-comment"># 通过sheet获取，上述方式若不存在sheet会报错</span><br>sheetNames = data.sheet_names()                           <span class="hljs-comment"># 获取文件中的所有sheet页面名称</span><br><span class="hljs-built_in">print</span>(sheet1)<br><span class="hljs-built_in">print</span>(sheet2)<br><span class="hljs-built_in">print</span>(sheet3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All sheet page names: &quot;</span> + <span class="hljs-built_in">str</span>(sheetNames))<br></code></pre></td></tr></table></figure><h4 id="2-获取行操作"><a href="#2-获取行操作" class="headerlink" title="(2) 获取行操作"></a>(2) 获取行操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd<br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;file/excel_file.xlsx&#x27;</span>)         <span class="hljs-comment"># 读取文件中的数据</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)                            <span class="hljs-comment"># 获取首个sheet页数据</span><br><br>nrows = sheet.nrows                                       <span class="hljs-comment"># 获取该sheet中的有效行数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of valid nrows: &quot;</span> + <span class="hljs-built_in">str</span>(nrows))<br><br>cells = sheet.row_len(<span class="hljs-number">0</span>)                                  <span class="hljs-comment"># 获取第一行中有效单元格数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of valid cells: &quot;</span> + <span class="hljs-built_in">str</span>(cells))<br><br>firstLine = sheet.row_values(<span class="hljs-number">0</span>)                           <span class="hljs-comment"># 获取第一行内容</span><br><span class="hljs-built_in">print</span>(firstLine)<br><br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nrows):                                    <span class="hljs-comment"># 获取所有行数据</span><br>    <span class="hljs-built_in">print</span>(sheet.row_values(r))<br><br><span class="hljs-built_in">print</span>(sheet.row_slice(<span class="hljs-number">0</span>))                                 <span class="hljs-comment"># 返回由该行中所有的单元格对象组成的列表</span><br></code></pre></td></tr></table></figure><h4 id="3-获取列操作"><a href="#3-获取列操作" class="headerlink" title="(3) 获取列操作"></a>(3) 获取列操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd<br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;file/excel_file.xlsx&#x27;</span>)         <span class="hljs-comment"># 读取文件中的数据</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)                            <span class="hljs-comment"># 获取首个sheet页数据</span><br><br>ncols = sheet.ncols                                       <span class="hljs-comment"># 获取该sheet中的有效列数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Number of valid ncols: &quot;</span> + <span class="hljs-built_in">str</span>(ncols))<br><span class="hljs-built_in">print</span>(sheet.col(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))                                 <span class="hljs-comment"># 返回第一行和第二行的单元格对象组成的列表</span><br><span class="hljs-built_in">print</span>(sheet.col_slice(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))                           <span class="hljs-comment"># 返回第一行和第二行的单元格对象组成的列表</span><br><span class="hljs-built_in">print</span>(sheet.col_values(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))                          <span class="hljs-comment"># 返回第一行和第二行的单元格数据组成的列表</span><br></code></pre></td></tr></table></figure><h4 id="4-获取单元格"><a href="#4-获取单元格" class="headerlink" title="(4) 获取单元格"></a>(4) 获取单元格</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> xlrd<br><br>data = xlrd.open_workbook(<span class="hljs-string">&#x27;file/excel_file.xlsx&#x27;</span>)          <span class="hljs-comment"># 读取文件中的数据</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)                             <span class="hljs-comment"># 获取首个sheet页数据</span><br><br><span class="hljs-built_in">print</span>(sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))                                    <span class="hljs-comment"># 返回第一行第一列的单元格对象</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Data: &quot;</span> + <span class="hljs-built_in">str</span>(sheet.cell_value(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)))              <span class="hljs-comment"># 返回第一行第一列的单元格数据</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Xlwt</tag>
      
      <tag>Xlrd</tag>
      
      <tag>文件处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(二)</title>
    <link href="/2021/01/15/python/python02-python-ji-chu-er/"/>
    <url>/2021/01/15/python/python02-python-ji-chu-er/</url>
    
    <content type="html"><![CDATA[<p>Python面向对象，易于阅读和维护，丰富的库可用于Web开发、爬虫、自动化运维、自动化测试和数据分析等，功能十分强大。</p><span id="more"></span><h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a>1 函数</h1><ul><li>函数<ul><li>只有在被调用时才会运行，可以将参数传递给函数，函数返回数据作为结果。</li><li>通过<code>def</code>关键字定义函数，调用函数时，需要使用函数名称，后跟括号<code>()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():                                <span class="hljs-comment"># def定义函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Function&quot;</span>)<br><br><br>myfunc()                                     <span class="hljs-comment"># 调用函数</span><br></code></pre></td></tr></table></figure><ul><li>参数<ul><li>信息可以作为参数传递给函数，缩写为<code>args</code>，任意参数缩写为<code>*args</code>。</li><li>参数在函数名之后的括号内指定，可添加任意数量的参数，用逗号分隔。</li><li>默认情况下须使用正确数量的参数调用函数，函数需几个参数就必须使用几个参数调用该函数。</li><li>若不知道传递给函数的参数数量，则在函数定义的参数名称前使用星号<code>*</code>，接收一个参数元组。</li><li>函数定义不能为空，若函数内部没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">fname</span>):                          <span class="hljs-comment"># 带有一个参数fname的函数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; Refsnes.&quot;</span>)<br><br><br>myfunc(<span class="hljs-string">&quot;Emil&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">fname, lname</span>):                   <span class="hljs-comment"># 该函数带有两个参数，调用时就使用两个参数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; &quot;</span> + lname + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>myFunc(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Refsnes&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">*kids</span>):                         <span class="hljs-comment"># 任意参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + kids[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>my_func(<span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_Func</span>():<br>    <span class="hljs-keyword">pass</span>                                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>关键字参数<ul><li>使用<code>key = value</code>语法进行参数发送，这样就不用考虑参数的顺序了。</li><li>关键字参数通常缩写为<code>kwargs</code>，任意关键字参数则缩写为<code>**kwargs</code>。</li><li>若不知道传递给函数的关键字参数数量，则在函数定义的参数名称前使用两个星号<code>**</code>，接收参数字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">child3, child2, child1</span>):         <span class="hljs-comment"># key = value</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + child3 + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>myfunc(child1=<span class="hljs-string">&quot;Emil&quot;</span>, child2=<span class="hljs-string">&quot;Lily&quot;</span>, child3=<span class="hljs-string">&quot;Linus&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">**kid</span>):                         <span class="hljs-comment"># 任意关键字参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child&#x27;s last name is &quot;</span> + kid[<span class="hljs-string">&quot;lname&quot;</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>my_func(fname=<span class="hljs-string">&quot;Lily&quot;</span>, lname=<span class="hljs-string">&quot;Refsnes&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>函数调用<ul><li>调用不带参数的函数，可使用默认值参数，<code>return</code>语句可让函数返回值。</li><li>将任何数据类型的参数发送给函数，会在函数内部被视为相同的数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">country=<span class="hljs-string">&quot;Xiamen&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am from &quot;</span> + country + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>myfunc()                                    <span class="hljs-comment"># 使用默认值参数</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x                            <span class="hljs-comment"># 让函数返回值</span><br><br><br><span class="hljs-built_in">print</span>(myFunc(<span class="hljs-number">3</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">food</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> food:<br>        <span class="hljs-built_in">print</span>(y)<br><br><br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>my_func(fruits)                             <span class="hljs-comment"># 使用列表作为参数</span><br></code></pre></td></tr></table></figure><h2 id="1-1-递归"><a href="#1-1-递归" class="headerlink" title="1-1 递归"></a>1-1 递归</h2><ul><li>递归<ul><li>函数递归意味着自定义的函数可以调用自身，递归是一个常见的数学和编程概念。</li><li>编写时易陷入一个永无止境或使用过多内存的函数中，递归也是有效的编程方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myRecursion</span>(<span class="hljs-params">i</span>):                         <span class="hljs-comment"># 自定义myRecursion函数，使用变量i作为参数</span><br>    <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span>:<br>        result = i + myRecursion(i - <span class="hljs-number">1</span>)     <span class="hljs-comment"># 每次递归时递减1</span><br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">else</span>:                                   <span class="hljs-comment"># 当条件小于等于0时，递归结束</span><br>        result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recursion Example Results.&quot;</span>)<br>myRecursion(<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h2 id="1-2-lambda"><a href="#1-2-lambda" class="headerlink" title="1-2 lambda"></a>1-2 lambda</h2><ul><li>lambda<ul><li>匿名函数，可以接受任意数量的参数，但只能有一个表达式。</li><li>在另一函数中将一个函数用作匿名函数时，可以很好地展示<code>lambda</code>的作用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-keyword">lambda</span> i: i+<span class="hljs-number">10</span>                          <span class="hljs-comment"># 将10添加到参数i中，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b: a*b                        <span class="hljs-comment"># 将参数a与参数b相乘，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b, c: a+b+c                   <span class="hljs-comment"># 汇总参数a、b、c，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">y</span>):                              <span class="hljs-comment"># 定义一个带有一个参数的函数，并将该参数乘以一个未知数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> i: i*y<br><br><br>mydoubler = myfunc(<span class="hljs-number">2</span>)                       <span class="hljs-comment"># 创建一个始终发送数字加倍的函数</span><br><span class="hljs-built_in">print</span>(mydoubler(<span class="hljs-number">11</span>))<br>mytripler = myfunc(<span class="hljs-number">3</span>)                       <span class="hljs-comment"># 创建一个始终发送数字三倍的函数</span><br><span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<br></code></pre></td></tr></table></figure><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2 类和对象"></a>2 类和对象</h1><ul><li>类和对象<ul><li>Python是一种面向对象的编程语言，Python中一切皆对象，都有其属性和方法。</li><li>使用<code>class</code>关键字创建一个类，一个类就如同一个对象构造器，用于创建对象。</li><li>所有类都有一个名为<code>__init()</code>的函数，<code>__init__()</code>函数总是在类启动时执行。</li><li><code>class</code>定义不能为空，若<code>class</code>没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:                <span class="hljs-comment"># 创建一个名为MyClass的类，并带有一个名为x的属性</span><br>    x = <span class="hljs-number">5</span><br><br><br>p = MyClass()                 <span class="hljs-comment"># 创建一个名为p的对象，并打印x的值</span><br><span class="hljs-built_in">print</span>(p.x)                    <span class="hljs-comment"># 这是最为简单的类和对象，但在实际应用中没有真正用处</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                 <span class="hljs-comment"># 创建名为Person的类，__init__()函数为name和age赋值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br><br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(q.name)<br><span class="hljs-built_in">print</span>(q.age)<br><br>q.age = <span class="hljs-number">25</span>                    <span class="hljs-comment"># 修改对象属性</span><br><span class="hljs-built_in">print</span>(q.age)<br><span class="hljs-keyword">del</span> q.age                     <span class="hljs-comment"># 删除q对象中的age属性</span><br><span class="hljs-keyword">del</span> q                         <span class="hljs-comment"># 删除q对象</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">pass</span>                      <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>对象方法<ul><li>对象也可以包含方法，对象中的方法属于该对象的函数。</li><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">self</span>):         <span class="hljs-comment"># 创建对象方法，插入一个打印函数，并在q对象上执行</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + self.name + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><ul><li>self参数<ul><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li><li>不必命名为<code>self</code>，可随意调用，但必须是类中任何函数的第一个参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, name, age</span>):<br>        <span class="hljs-built_in">object</span>.name = name<br>        <span class="hljs-built_in">object</span>.age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">abc</span>):          <span class="hljs-comment"># object和abc代替self</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + abc.name + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><h1 id="3-继承"><a href="#3-继承" class="headerlink" title="3 继承"></a>3 继承</h1><ul><li>继承<ul><li>让类与类之间产生父子关系，即获取另一个类的静态属性或方法。</li><li>父类也叫基类或超类，子类是从另一个类继承的类，也叫派生类。</li><li>任何类都可以是父类，语法与创建类相同，创建子类时需将父类作为参数发送。</li><li><code>__init__()</code>函数每次使用类创建新对象时都会自动调用该函数，将其添加到子类中。<ul><li>子类不再继承父类的<code>__init__()</code>函数，会覆盖父类<code>__init__()</code>函数的继承。</li><li>为保持父类的<code>__init__()</code>函数继承，需添加对父类<code>__init__()</code>函数的调用。</li></ul></li><li>还可以使用<code>super()</code>函数，让子类继承父类的所有方法和属性。</li><li>若在子类中添加与父类中函数同名的方法，会覆盖父方法的继承。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                                   <span class="hljs-comment"># 创建Person父类，具有fname和lname属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        self.fname = fname<br>        self.lname = lname<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printName</span>(<span class="hljs-params">self</span>):                        <span class="hljs-comment"># 创建printName方法</span><br>        <span class="hljs-built_in">print</span>(self.fname, self.lname)<br><br><br>x = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>x.printName()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student1</span>(<span class="hljs-title class_ inherited__">Person</span>):                         <span class="hljs-comment"># 创建Student1子类，继承Person类的属性和方法</span><br>    <span class="hljs-comment"># pass                                      # 将__init__()函数添加到Student1子类中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        Person.__init__(self, fname, lname)     <span class="hljs-comment"># 添加对父类函数的调用，保留父类的继承</span><br><br><br>y = Student1(<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>y.printName()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)          <span class="hljs-comment"># super函数不必使用父类名称，自动继承</span><br>        self.graduation = year                  <span class="hljs-comment"># 添加一个Student2子类的graduation属性</span><br><br><br>z = Student2(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br><span class="hljs-built_in">print</span>(z.fname, z.lname, z.graduation)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)<br>        self.graduation = year<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">self</span>):                          <span class="hljs-comment"># 添加一个调用类welcome方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome&quot;</span>, self.fname, self.lname, <span class="hljs-string">&quot;to the class of&quot;</span>, self.graduation, <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>x = Student3(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br>x.Welcome()<br></code></pre></td></tr></table></figure><h1 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4 迭代器"></a>4 迭代器</h1><ul><li>迭代器<ul><li>一个实现迭代器协议的对象，由方法<code>__iter__()</code>和<code>__next__()</code>组成。</li><li>列表、元组、字典和集合等都是可迭代对象，都有<code>iter()</code>属性，用于获取迭代器。</li><li>for循环遍历可迭代对象，实际上for循环即创建一个迭代器并循环执行<code>next()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>myfruit = <span class="hljs-built_in">iter</span>(mytuple)                         <span class="hljs-comment"># 元组返回一个迭代器，并打印每个值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><br>mystring = <span class="hljs-string">&quot;apple&quot;</span>                              <span class="hljs-comment"># 字符串也是可迭代对象</span><br>alphabet = <span class="hljs-built_in">iter</span>(mystring)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(alphabet))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:                               <span class="hljs-comment"># for循环即一个迭代器</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>类和对象迭代器<ul><li>要将类和对象创建为一个迭代器，必须使用<code>__iter__()</code>和<code>__next__()</code>方法。<ul><li><code>__iter__()</code>方法进行初始化等操作，始终返回迭代器对象本身。</li><li><code>__next__()</code>方法允许执行操作，并且必须返回序列中的下一项。</li><li>如果有足够的<code>next()</code>语句或在for循环中使用，迭代将永远进行。</li></ul></li><li><code>__next__()</code>中添加StopIteration终止条件，以在迭代完成指定次数时引发错误，防止迭代永远进行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum1</span>:                                   <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>                              <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>                             <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br><br><br>myclass = MyNum1()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum2</span>:                                   <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>                              <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>                             <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br><br><br>myclass = MyNum2()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum3</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.a &lt;= <span class="hljs-number">20</span>:                        <span class="hljs-comment"># 20次迭代后停止</span><br>            x = self.a<br>            self.a += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> x<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br><br><br>myclass = MyNum3()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myiters:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="5-范围"><a href="#5-范围" class="headerlink" title="5 范围"></a>5 范围</h1><ul><li>局部范围<ul><li>在函数内部创建的变量属于该函数的局部范围，并且只能在该函数内部使用。</li><li>函数内部创建的局部变量，对函数内部的任何函数都可用(嵌套函数都可用)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    x = <span class="hljs-number">30</span>                    <span class="hljs-comment"># 在myfunc函数内部创建的变量，在该函数内部可用</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><br>myfunc()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">innerFunc</span>():<br>        <span class="hljs-built_in">print</span>(y)              <span class="hljs-comment"># 可以从函数内的函数访问局部变量y</span><br>    innerFunc()<br><br><br>myFunc()<br></code></pre></td></tr></table></figure><ul><li>全局范围<ul><li>在代码主体中创建的变量是全局变量，属于全局范围，可以在任何范围内使用。</li><li>若函数内外都使用相同变量名，将视为两个单独的变量，分别作用于函数内外部。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">30</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-built_in">print</span>(x)                  <span class="hljs-comment"># 可以在函数内部使用</span><br><br><br>myfunc()<br><span class="hljs-built_in">print</span>(x)                      <span class="hljs-comment"># 也可以在主体代码中使用</span><br><br>y = <span class="hljs-number">30</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-built_in">print</span>(y)                  <span class="hljs-comment"># 局部变量作用于函数内部</span><br><br><br>myFunc()<br><span class="hljs-built_in">print</span>(y)                      <span class="hljs-comment"># 全局变量作用于函数外部</span><br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>使用global关键字，在函数内部创建全局变量。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-keyword">global</span> x                  <span class="hljs-comment"># global关键字创建全局变量</span><br>    x = <span class="hljs-number">30</span><br><br><br>myfunc()<br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-number">30</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    <span class="hljs-keyword">global</span> y                  <span class="hljs-comment"># 修改函数内的全局变量y</span><br>    y = <span class="hljs-number">26</span><br><br><br>myFunc()<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h1 id="6-模块"><a href="#6-模块" class="headerlink" title="6 模块"></a>6 模块</h1><ul><li>模块<ul><li>模块可以看成一个代码库，包含一组要包含在应用程序中的函数文件。</li><li>创建一个模块，只需要将所需的代码保存在文件扩展名为.py的文件中。</li><li>使用模块则通过import语句导入，语法：<code>module_name.function_name</code>。</li><li>模块中可包含函数，也可包含所有类型的变量，例如数组、字典、对象等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greeting</span>(<span class="hljs-params">name</span>):                 <span class="hljs-comment"># 将该函数保存在名为greeting目录的greeting.py文件中</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;.&quot;</span>)<br><br><br>person = &#123;                          <span class="hljs-comment"># 该字典也存在于greeting.py文件中</span><br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;30&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;China&quot;</span><br>&#125;<br><br><span class="hljs-keyword">from</span> greeting <span class="hljs-keyword">import</span> greeting       <span class="hljs-comment"># 在另一个文件中使用import语句导入创建的模块</span><br><br>greeting.greeting(<span class="hljs-string">&quot;Lily&quot;</span>)<br>x = greeting.person[<span class="hljs-string">&quot;age&quot;</span>]          <span class="hljs-comment"># 访问person字典</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>内置模块<ul><li>导入模块时可以使用as关键字创建别名，<code>dir()</code>函数可以列出模块中的所有函数名。</li><li>使用from关键字从模块中导入部分元素，导入时引用模块中的元素不要使用模块名称。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> greeting <span class="hljs-keyword">import</span> greeting <span class="hljs-keyword">as</span> x  <span class="hljs-comment"># 将greeting模块重命名为x</span><br>y = x.person[<span class="hljs-string">&quot;age&quot;</span>]<br><span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">import</span> platform<br>z = <span class="hljs-built_in">dir</span>(platform)                   <span class="hljs-comment"># dir()函数可用于所有模块，包括自定义模块</span><br><span class="hljs-built_in">print</span>(z)<br><br><span class="hljs-keyword">from</span> greeting.greeting <span class="hljs-keyword">import</span> person<br><span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;name&quot;</span>])               <span class="hljs-comment"># 仅从模块中导入person字典</span><br><br><span class="hljs-keyword">from</span> greeting <span class="hljs-keyword">import</span> greeting<br><span class="hljs-built_in">print</span>(greeting.person[<span class="hljs-string">&quot;name&quot;</span>])      <span class="hljs-comment"># 不使用模块名称，例如greeting.person[&quot;name&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="6-1-Math"><a href="#6-1-Math" class="headerlink" title="6-1 Math"></a>6-1 Math</h2><ul><li>Math<ul><li>内置函数<ul><li><code>min()</code>和<code>max()</code>可用于查找可迭代对象中的最小值和最大值。</li><li><code>abs()</code>返回指定数字的绝对值，<code>pow(x, y)</code>则返回x的y次幂。</li></ul></li><li>使用时需要导入math模块，导入后就可以使用模块的方法和常量了。<ul><li><code>math.sqrt()</code>：返回一个数字的平方根。</li><li><code>math.ceil()</code>：将一个数字向上舍入取整。</li><li><code>math.floor()</code>：将一个数字向下舍入取整。</li><li><code>math.pi</code>：常数，返回PI，即圆周率3.14159265…的值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">min</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)                  <span class="hljs-comment"># 5</span><br>b = <span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)                  <span class="hljs-comment"># 25</span><br>c = <span class="hljs-built_in">abs</span>(-<span class="hljs-number">2.75</span>)                      <span class="hljs-comment"># 2.75</span><br>d = <span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)                       <span class="hljs-comment"># 4*4*4</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-keyword">import</span> math<br>x = math.sqrt(<span class="hljs-number">64</span>)                   <span class="hljs-comment"># 返回一个数字的平方根</span><br>y = math.ceil(<span class="hljs-number">1.45</span>)                 <span class="hljs-comment"># 向上取整，返回2</span><br>z = math.floor(<span class="hljs-number">1.45</span>)                <span class="hljs-comment"># 向下取整，返回1</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(math.pi)                      <span class="hljs-comment"># 返回圆周率PI</span><br></code></pre></td></tr></table></figure><h2 id="6-2-Json"><a href="#6-2-Json" class="headerlink" title="6-2 Json"></a>6-2 Json</h2><ul><li>Json<ul><li>一种用于存储和交换数据的语法，是文本，使用JavaScript对象表示法编写。</li><li>Python中有内置包json，用于处理json数据，使用前需要import导入json模块。</li><li><code>json.loads()</code>方法可以用来解析json字符串，结果将会返回一个Python字典。</li><li><code>json.dumps()</code>方法可以将Python对象转换为json字符串。<ul><li><code>json.dumps()</code>方法具有参数，用indent参数定义缩进数。</li><li>使用separators参数定义分隔符，默认值为<code>(&quot;, &quot;, &quot;: &quot;)</code>。</li><li>即：使用逗号和空格分隔每个对象，使用冒号和空格分隔键和值。</li><li>该方法还可用于对结果中的键进行排序，使用sort_keys参数指定。</li></ul></li><li>Python对象与等效的json(JavaScript)，转换如下。<table><thead><tr><th align="left">对象</th><th align="left">dict</th><th align="left">list</th><th align="left">tuple</th><th align="left">string</th><th align="left">int</th><th align="left">float</th><th align="left">True</th><th align="left">False</th><th align="left">None</th></tr></thead><tbody><tr><td align="left">json</td><td align="left">Object</td><td align="left">Array</td><td align="left">Array</td><td align="left">String</td><td align="left">Number</td><td align="left">Number</td><td align="left">true</td><td align="left">false</td><td align="left">null</td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><br>x = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Lily&quot;, &quot;age&quot;: &quot;26&quot;, &quot;city&quot;: &quot;XiaMen&quot;&#125;&#x27;</span><br>y = json.loads(x)                   <span class="hljs-comment"># 从json字符串转换为python字典</span><br><span class="hljs-built_in">print</span>(y[<span class="hljs-string">&quot;name&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>x = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;26&quot;</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;XiaMen&quot;</span>&#125;<br>y = json.dumps(x)                   <span class="hljs-comment"># 从Python字典转换为json字符串</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br><span class="hljs-built_in">print</span>(json.dumps(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;))<br><span class="hljs-built_in">print</span>(json.dumps([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>]))<br><span class="hljs-built_in">print</span>(json.dumps((<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-string">&quot;hello&quot;</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">42</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">31.76</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">None</span>))             <span class="hljs-comment"># 将Python对象转换为json字符串并打印</span><br><br>z = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <br>    <span class="hljs-string">&quot;married&quot;</span>: <span class="hljs-literal">True</span>, <br>    <span class="hljs-string">&quot;divorced&quot;</span>: <span class="hljs-literal">False</span>, <br>    <span class="hljs-string">&quot;children&quot;</span>: (<span class="hljs-string">&quot;Ann&quot;</span>, <span class="hljs-string">&quot;Billy&quot;</span>), <br>    <span class="hljs-string">&quot;pets&quot;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;BMW 230&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">27.5</span>&#125;, <br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Ford Edge&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">24.1</span>&#125;<br>    ]<br>&#125;<br><span class="hljs-built_in">print</span>(json.dumps(z))                <span class="hljs-comment"># 转换一个包含所有合法数据类型的Python对象</span><br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, separators=(<span class="hljs-string">&quot;. &quot;</span>, <span class="hljs-string">&quot; = &quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, sort_keys=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h2 id="6-3-Datetime"><a href="#6-3-Datetime" class="headerlink" title="6-3 Datetime"></a>6-3 Datetime</h2><ul><li>Datetime<ul><li>导入该模块可以显示当前日期，包含年、月、日、时、分、秒和微秒。</li><li>创建日期使用模块的构造函数<code>datetime()</code>，需年、月、日这三个参数。<ul><li>该函数还接受时间和时区参数(时、分、秒、微秒、tzone)。</li><li>该函数的时间和时区参数都是可选的，且具有默认值0，时区默认值为None。</li></ul></li><li><code>strftime()</code>方法将日期对象格式化为可读字符串，接受参数，使用format指定返回字符串的格式。</li><li>时间日期格式化符号，示例如下。<table><thead><tr><th align="left"><code>%a</code>：<code>Wed(简化星期)</code></th><th align="left"><code>%b</code>：<code>Dec(简化月份)</code></th></tr></thead><tbody><tr><td align="left"><code>%A</code>：<code>Wednesday(完整星期)</code></td><td align="left"><code>%B</code>：<code>December(完整月份)</code></td></tr><tr><td align="left"><code>%c</code>：<code>Mon Dec 29 17:17:00 2019</code></td><td align="left"><code>%d</code>：<code>31(日，0-31)</code></td></tr><tr><td align="left"><code>%C</code>：<code>20(世纪)</code></td><td align="left"><code>%f</code>：<code>548513(微秒)</code></td></tr><tr><td align="left"><code>%G</code>：<code>2019(年份，ISO 8601)</code></td><td align="left"><code>%H</code>：<code>20(时，00-23，24小时制)</code></td></tr><tr><td align="left"><code>%I</code>：<code>07(时，01-12，12小时制)</code></td><td align="left"><code>%j</code>：<code>365(年中的第n天，001-366)</code></td></tr><tr><td align="left"><code>%m</code>：<code>06(月份，01-12)</code></td><td align="left"><code>%u</code>：<code>1(星期，1-7，ISO 8601)</code></td></tr><tr><td align="left"><code>%M</code>：<code>15(分钟，00-59)</code></td><td align="left"><code>%U</code>：<code>52(一年中的星期数，00-53，星期天开始)</code></td></tr><tr><td align="left"><code>%p</code>：<code>A.M.或P.M.</code></td><td align="left"><code>%V</code>：<code>01(一年中的星期数，01-53，ISO 8601)</code></td></tr><tr><td align="left"><code>%S</code>：<code>15(秒，00-59)</code></td><td align="left"><code>%%</code>：<code>%(本身)</code></td></tr><tr><td align="left"><code>%w</code>：<code>0(星期，0-6，星期天开始)</code></td><td align="left"><code>%x</code>：<code>01/01/19</code></td></tr><tr><td align="left"><code>%W</code>：<code>52(一年中的星期数，00-53，星期一开始)</code></td><td align="left"><code>%X</code>：<code>17:15:00</code></td></tr><tr><td align="left"><code>%y</code>：<code>19(年份，00-99)</code></td><td align="left"><code>%z</code>：<code>+0100(UTC offset，标准时间偏移)</code></td></tr><tr><td align="left"><code>%Y</code>：<code>2019(年份，0000-9999)</code></td><td align="left"><code>%Z</code>：<code>CST(当前时区的名称)</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br><br>x = datetime.datetime.now()         <span class="hljs-comment"># 显示当前日期</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(x.year)                       <span class="hljs-comment"># 显示年份</span><br><span class="hljs-built_in">print</span>(x.strftime(<span class="hljs-string">&quot;%A&quot;</span>))             <span class="hljs-comment"># 显示英文星期</span><br><br>y = datetime.datetime(<span class="hljs-number">2019</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment"># 创建一个日期对象</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(y.strftime(<span class="hljs-string">&quot;%B&quot;</span>))             <span class="hljs-comment"># 显示英文月份</span><br></code></pre></td></tr></table></figure><h2 id="6-4-正则表达式"><a href="#6-4-正则表达式" class="headerlink" title="6-4 正则表达式"></a>6-4 正则表达式</h2><ul><li>正则表达式(RegEx)<ul><li>形成搜索模式的字符序列，用于检查字符串是否包含指定的搜索模式。</li><li>Python有一个re内置包，用于处理正则表达式，使用前需导入re模块。<ul><li><code>findall()</code>：返回一个包含所有匹配项的列表。</li><li><code>search()</code>：在字符串中搜索匹配项，若有，返回一个Match对象，若多个，返回匹配项的第一个。</li><li><code>split()</code>：返回一个列表，其中字符串在每次匹配时都被拆分，可通过maxsplit参数控制出现次数。</li><li><code>sub()</code>：将匹配项替换为选择的文本，可以通过count参数来控制替换次数。</li></ul></li><li>元字符：指在正则表达式中具有特殊意义的专用字符，用来规定其前导字符在目标对象中的出现模式。<table><thead><tr><th align="left">元字符</th><th align="left">说明</th><th align="left">示例<img width=180></th></tr></thead><tbody><tr><td align="left"><code>[]</code></td><td align="left">一组字符</td><td align="left"><code>&quot;[a-m]&quot;</code></td></tr><tr><td align="left"><code>\</code></td><td align="left">表示特殊序列，也可用于转义特殊字符</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">除换行符之外的任何字符</td><td align="left"><code>&quot;he..o&quot;</code></td></tr><tr><td align="left"><code>^</code></td><td align="left">以“hello”开头</td><td align="left"><code>&quot;^hello&quot;</code></td></tr><tr><td align="left"><code>$</code></td><td align="left">以“planet”结尾</td><td align="left"><code>&quot;planet$&quot;</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">零次或多次出现</td><td align="left"><code>&quot;he.*o&quot;</code></td></tr><tr><td align="left"><code>+</code></td><td align="left">一次或多次出现</td><td align="left"><code>&quot;he.+o&quot;</code></td></tr><tr><td align="left"><code>?</code></td><td align="left">零次或一次出现</td><td align="left"><code>&quot;he.?o&quot;</code></td></tr><tr><td align="left"><code>&#123;&#125;</code></td><td align="left">指定出现的次数</td><td align="left"><code>&quot;he.&#123;2&#125;o&quot;</code></td></tr><tr><td align="left"><code>|</code></td><td align="left">或</td><td align="left"><code>&quot;falls | stays&quot;</code></td></tr><tr><td align="left"><code>()</code></td><td align="left">捕获和分组</td><td align="left"></td></tr></tbody></table></li><li>集合类特殊字符<table><thead><tr><th align="left">集合字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>[arn]</code></td><td align="left">返回指定字符“a、r或n”之一的任意匹配项</td></tr><tr><td align="left"><code>[a-n]</code></td><td align="left">返回任意小写字符的匹配项</td></tr><tr><td align="left"><code>[^arn]</code></td><td align="left">返回除“a、r和n”之外的任意字符匹配项</td></tr><tr><td align="left"><code>[0123]</code></td><td align="left">返回指定数字“0、1、2或3”之一的任意匹配项</td></tr><tr><td align="left"><code>[0-9]</code></td><td align="left">返回0到9之间任意数字的匹配项</td></tr><tr><td align="left"><code>[0-5][0-9]</code></td><td align="left">返回从00到59之间任意两位数字的匹配项</td></tr><tr><td align="left"><code>[a-zA-Z]</code></td><td align="left">返回a到z、A到Z之间任意字母的匹配项</td></tr><tr><td align="left"><code>[+]</code></td><td align="left">集合中“+*.|()${} ”都无特殊含义，返回匹配字符串中任意“+”字符</td></tr></tbody></table></li><li>特殊序列类字符<table><thead><tr><th align="left">特殊字符</th><th align="left">说明</th><th align="left">示例<img width=55></th></tr></thead><tbody><tr><td align="left"><code>\A</code></td><td align="left">如果指定字符位于字符串“The”的开头，则返回匹配项</td><td align="left"><code>&quot;\AThe&quot;</code></td></tr><tr><td align="left"><code>\b</code></td><td align="left">返回位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;\bain&quot;</code></td></tr><tr><td align="left"><code>\B</code></td><td align="left">返回不位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;ain\B&quot;</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">返回字符串包含0到9数字的匹配项</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>\D</code></td><td align="left">返回字符串不包含数字0到9的匹配项</td><td align="left"><code>&quot;\D&quot;</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">用于匹配单个空格符，包括tab键和换行符</td><td align="left"><code>&quot;\s&quot;</code></td></tr><tr><td align="left"><code>\S</code></td><td align="left">用于匹配除单个空格符之外的所有字符</td><td align="left"><code>&quot;\S&quot;</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">用于匹配a到z的字符、0到9的数字和下划线(_)字符</td><td align="left"><code>&quot;\w&quot;</code></td></tr><tr><td align="left"><code>\W</code></td><td align="left">用于匹配所有与\w不匹配的字符</td><td align="left"><code>&quot;\W&quot;</code></td></tr><tr><td align="left"><code>\Z</code></td><td align="left">如果指定字符位于字符串“Spain”的末尾，则返回匹配项</td><td align="left"><code>&quot;Spain\Z&quot;</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>x = re.search(<span class="hljs-string">&quot;^The.*Spain.$&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                            <span class="hljs-comment"># 查看是否以The开头，并以Spain.结尾</span><br><br>x = re.findall(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                            <span class="hljs-comment"># 按找到的顺序包含匹配项</span><br>y = re.findall(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                            <span class="hljs-comment"># 没找到匹配项，返回一个空列表</span><br><br>x = re.search(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x.start())                    <span class="hljs-comment"># 搜索字符串中的第一个空格字符的位置</span><br>y = re.search(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                            <span class="hljs-comment"># 没找到匹配项，返回None</span><br><br>x = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                            <span class="hljs-comment"># 在每个空白字符处进行拆分</span><br>y = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(y)                            <span class="hljs-comment"># 仅在第一次出现时拆分字符串</span><br><br>x = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                            <span class="hljs-comment"># 用9替换每个空白字符</span><br>y = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(y)                            <span class="hljs-comment"># 替换前两次出现的空白字符</span><br></code></pre></td></tr></table></figure><ul><li>匹配对象<ul><li>指包含有关搜索和结果信息的对象，若无匹配，将返回None。</li><li>Match对象具有用于检索有关搜索的信息和结果的属性与方法。<ul><li><code>span()</code>：返回一个包含匹配“开始和结束位置”的元组。</li><li><code>string</code>：返回传递给函数的字符串。</li><li><code>group()</code>：返回字符串中匹配的部分。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>a = re.search(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(a)                            <span class="hljs-comment"># 执行将返回匹配对象的搜索</span><br><br>b = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(b.span())                     <span class="hljs-comment"># 查找以大写S开头的任何单词，并打印第一个匹配项的位置</span><br><br>c = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(c.string)                     <span class="hljs-comment"># 打印传入函数的字符串</span><br><br>d = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(d.group())                    <span class="hljs-comment"># 打印匹配的字符串部分</span><br></code></pre></td></tr></table></figure><h1 id="7-用户输入"><a href="#7-用户输入" class="headerlink" title="7 用户输入"></a>7 用户输入</h1><ul><li>用户输入<ul><li>Python3.6版本使用<code>input()</code>方法进行用户输入。</li><li>Python2.7版本使用<code>raw_input()</code>进行用户输入。</li><li>涉及到<code>input()</code>函数时停止执行，并在用户给出输入后继续执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">userName = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter username: &quot;</span>)          <span class="hljs-comment"># Python3.6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Username is &quot;</span> + userName + <span class="hljs-string">&quot;.&quot;</span>)<br><br><span class="hljs-comment"># userName = raw_input(&quot;Enter username: &quot;)    # Python2.7，已停止维护</span><br><span class="hljs-comment"># print(&quot;Username is &quot; + userName + &quot;.&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="8-异常处理"><a href="#8-异常处理" class="headerlink" title="8 异常处理"></a>8 异常处理</h1><ul><li>异常处理<ul><li>try代码块允许测试代码块的错误。</li><li>except代码块允许处理代码块的错误。</li><li>else代码块允许在没有错误时执行代码。</li><li>finally代码块不管try和except代码块的结果如何，都允许执行代码，可用于关闭对象和清理资源。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">try</span>:                      <span class="hljs-comment"># 发生错误或异常时，会停止并生成错误信息，使用try语句处理异常</span><br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">except</span>:                   <span class="hljs-comment"># try代码块引发异常，执行except语句，若无try代码块，则程序崩溃</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;An exception occurred.&quot;</span>)<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(b)<br><span class="hljs-keyword">except</span> NameError:         <span class="hljs-comment"># try语句异常，若为NameError异常，打印该条信息，否则打印except代码块语句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variable x is not defined.&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi~&quot;</span>)<br><span class="hljs-keyword">except</span>:                   <span class="hljs-comment"># try代码块若异常，只执行except代码块中的内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">else</span>:                     <span class="hljs-comment"># try代码块若没有异常，使用else定义要执行的代码块将被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nothing went wrong.&quot;</span>)<br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">finally</span>:                  <span class="hljs-comment"># 指定了finally代码块，无论try代码块是否异常，都将执行该代码块</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The &#x27;try except&#x27; is finished.&quot;</span>)<br><br><br><span class="hljs-keyword">try</span>:                      <span class="hljs-comment"># 尝试打开并写入一个不可写的文件</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        f.write(<span class="hljs-string">&quot;Open file test.&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when writing to the file.&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()         <span class="hljs-comment"># 用于关闭对象和清理资源</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when opening the file.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>引发异常<ul><li>使用raise关键字可以选择在条件发生时抛出异常。</li><li>可以定义要引发的错误类型，以及抛出异常时要打印给用户查看到的文本内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:                  <span class="hljs-comment"># 如果x小于0，引发异常并停止程序</span><br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Sorry, no numbers below zero.&quot;</span>)<br><br>y = <span class="hljs-string">&quot;Hi~&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">type</span>(y) <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>:     <span class="hljs-comment"># 如果y不是整数，引发TypeError异常</span><br>    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Only integers are allowed.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(一)</title>
    <link href="/2021/01/01/python/python01-python-ji-chu-yi/"/>
    <url>/2021/01/01/python/python01-python-ji-chu-yi/</url>
    
    <content type="html"><![CDATA[<p>Python由荷兰数学和计算机科学研究学会的Guido van Rossum于1990年代初设计，并于1991年发布，是跨平台解释型脚本语言。</p><span id="more"></span><h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a>1 语法</h1><ul><li>缩进<ul><li>指代码行开头的空格，便于阅读，非常重要。</li><li>使用缩进表示代码块，如果跳过缩进，运行将会返回一个错误。</li><li>空格数量由程序员决定，最常见的是Tab四个，或Tab两个空格。</li><li>同个代码块中必须使用相同数量的空格缩进，否则返回一个错误。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">if</span> <span class="hljs-number">7</span> &gt; <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seven is greater than three!&quot;</span>)   <span class="hljs-comment"># 使用tab四个空格的缩进</span><br></code></pre></td></tr></table></figure><ul><li>注释<ul><li>单行注释：以<code>#</code>开头。</li><li>多行注释：以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>开头，以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>结尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a comment.&quot;</span>)                 <span class="hljs-comment"># 单行注释</span><br><br><span class="hljs-string">&quot;&quot;&quot; 多行注释</span><br><span class="hljs-string">               《劝学》· 孟郊</span><br><span class="hljs-string">击石乃有火，不击元无烟。人学始知道，不学非自然。</span><br><span class="hljs-string">万事须己运，他得非我贤。青春须早为，岂能长少年。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><ul><li>变量<ul><li>存储数据值的容器，赋值时创建，Python没有用于声明变量的命令。</li><li>变量不需要以任何特定的类型进行声明，甚至可以在设置后更改类型。</li><li>指定变量的数据类型，通过强制转换完成。</li><li>使用函数<code>type()</code>可以获取变量的数据类型。</li><li>使用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>声明字符串变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span>                                       <span class="hljs-comment"># 变量x设为int类型</span><br>x = <span class="hljs-string">&quot;Lily&quot;</span>                                  <span class="hljs-comment"># 变量x更改为str类型</span><br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-built_in">int</span>(<span class="hljs-number">12345</span>)                              <span class="hljs-comment"># 强制转换变量y为int类型</span><br><span class="hljs-built_in">print</span>(y)<br><br>z = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))                              <span class="hljs-comment"># 获取变量z的数据类型</span><br></code></pre></td></tr></table></figure><ul><li>变量名<ul><li>命名规则<ul><li>区分大小写(age、Age和AGE是不同的变量)。</li><li>必须以字母或下划线开头，不能以数字开头。</li><li>只能包含字母数字字符和下划线(Az、0-9和_)。</li></ul></li><li>命名方法<ul><li>蛇形命名法，每个单词都以下划线字符(_)分隔。</li><li>小驼峰命名法，除首单词字母小写，其余单词都以大写字母开头。</li><li>大驼峰命名法，又叫帕斯卡命名法，每个单词都以大写字母开头。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">myvar__ = <span class="hljs-string">&quot;Lily&quot;</span><br>my_var_ = <span class="hljs-string">&quot;Lily&quot;</span><br>_my_var = <span class="hljs-string">&quot;Lily&quot;</span><br>my__Var = <span class="hljs-string">&quot;Lily&quot;</span><br>__MyVar = <span class="hljs-string">&quot;Lily&quot;</span><br>variable_name = <span class="hljs-string">&quot;Lily&quot;</span>                      <span class="hljs-comment"># 蛇形命名</span><br>myVariableName = <span class="hljs-string">&quot;Lily&quot;</span>                     <span class="hljs-comment"># 小驼峰命名</span><br>MyVariableName = <span class="hljs-string">&quot;Lily&quot;</span>                     <span class="hljs-comment"># 大驼峰命名</span><br></code></pre></td></tr></table></figure><ul><li>多值分配<ul><li>允许在一行中为多个变量赋值。</li><li>可以在一行中为多个变量分配相同值。</li><li>若有一组列表或元组，允许将值提取到变量中，该方法称为拆包。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">x, y, z = <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>      <span class="hljs-comment"># 多个变量赋值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>x = y = z = <span class="hljs-string">&quot;Orange&quot;</span>                       <span class="hljs-comment"># 多个变量分配相同值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>x, y, z = fruits                           <span class="hljs-comment"># 拆包</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>输出变量<ul><li>使用函数<code>print()</code>输出多个变量，逗号分隔，支持不同数据类型。</li><li>使用<code>+</code>运算符输出多个变量，对于数字，该字符用于数学运算符。</li><li>如果尝试使用<code>+</code>操作符组合字符串和数字，那么将TypeError报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;C&quot;</span><br>y = <span class="hljs-string">&quot;Java&quot;</span><br>z = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(x, y, z)<br><span class="hljs-built_in">print</span>(x + <span class="hljs-string">&quot; &quot;</span> + y + <span class="hljs-string">&quot; &quot;</span> + z)<br><br>x = <span class="hljs-number">2</span>                                      <span class="hljs-comment"># int类型</span><br>y = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(x + y)                               <span class="hljs-comment"># 2 + 1 = 3</span><br>x = <span class="hljs-string">&quot;2&quot;</span>                                    <span class="hljs-comment"># str类型</span><br>y = <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-built_in">print</span>(x + y)                               <span class="hljs-comment"># str(2) + str(1) = 21</span><br><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-comment"># print(x + y)</span><br><span class="hljs-comment"># TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;.</span><br></code></pre></td></tr></table></figure><ul><li>全局变量<ul><li>函数外创建的变量，每个人都可用，无论是函数内部或外部。</li><li>函数内创建的同名变量，是局部变量，只能在函数内部使用。</li><li>若函数内外创建同名变量，全局变量将保持原样，全局并具有原始值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;scripting language.&quot;</span>                  <span class="hljs-comment"># 在函数外部创建变量x，并在函数内部使用</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br><br><br>func_one()<br>y = <span class="hljs-string">&quot;interpreted language.&quot;</span>                <span class="hljs-comment"># 在函数内部创建变量y，与全局变量y同名</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():<br>    y = <span class="hljs-string">&quot;scripting language.&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br><br><br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>在函数内部创建全局变量，使用global关键字。</li><li>若更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():                            <span class="hljs-comment"># 使用global关键字，则变量x属于全局范围</span><br>    <span class="hljs-keyword">global</span> x<br>    x = <span class="hljs-string">&quot;scripting language.&quot;</span><br><br><br>func_one()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br>y = <span class="hljs-string">&quot;scripting language.&quot;</span>                  <span class="hljs-comment"># 更改函数内的全局变量值，使用global引用该变量</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():<br>    <span class="hljs-keyword">global</span> y<br>    y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br><br><br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><ul><li>运算符<ul><li>算术：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>**</code>、<code>//</code>。</li><li>赋值：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>**=</code>、<code>//=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code>。</li><li>比较：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>。</li><li>逻辑：<code>and</code>、<code>or</code>、<code>not</code>。</li><li>身份：<code>is</code>、<code>is not</code>。</li><li>成员：<code>in</code>、<code>not in</code>。</li><li>位：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">9</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a // b)                              <span class="hljs-comment"># 算术运算，向下取整除</span><br><span class="hljs-built_in">print</span>(-a // b)<br><br>b *= a                                     <span class="hljs-comment"># 赋值运算，b = b * a</span><br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-keyword">if</span> a &gt; b:                                  <span class="hljs-comment"># 比较运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a <span class="hljs-keyword">and</span> b:                                <span class="hljs-comment"># 逻辑运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b都为True.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b有一个不为True.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a <span class="hljs-keyword">is</span> b:                                 <span class="hljs-comment"># 身份运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b有相同的标识.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b没有相同标识.&quot;</span>)<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:                              <span class="hljs-comment"># 成员运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a在给定的列表list中.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a不在给定的列表list中.&quot;</span>)<br><br>c = a &gt;&gt; <span class="hljs-number">2</span>                                 <span class="hljs-comment"># 位运算，9=0000 1001</span><br><span class="hljs-built_in">print</span>(c)                                   <span class="hljs-comment"># 右移两位，0000 0010=2</span><br></code></pre></td></tr></table></figure><h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h1><ul><li>数据类型<ul><li>无类型：<code>NoneType</code>。</li><li>数字类型：<code>int</code>、<code>float</code>、<code>complex</code>。</li><li>文本类型：<code>str</code>。</li><li>布尔类型：<code>bool</code>。</li><li>序列类型：<code>list</code>、<code>tuple</code>、<code>range</code>。</li><li>映射类型：<code>dict</code>。</li><li>集合类型：<code>set</code>、<code>frozenset</code>。</li><li>二进制类型：<code>bytes</code>、<code>bytearray</code>、<code>memoryview</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))                              <span class="hljs-comment"># 打印变量x的数据类型</span><br><br>y = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]           <span class="hljs-comment"># 设置数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>z = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&quot;Lily&quot;</span>, age=<span class="hljs-number">26</span>)               <span class="hljs-comment"># 使用构造函数设置特定的数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br></code></pre></td></tr></table></figure><h2 id="4-1-数字"><a href="#4-1-数字" class="headerlink" title="4-1 数字"></a>4-1 数字</h2><ul><li>数字<ul><li><code>int</code>：整数，正数或负数，没有小数，长度不受限制。</li><li><code>float</code>：浮点数，包含一个或多个小数的正数或负数，可有带e的科学数字，表10的幂。</li><li><code>complex</code>：复数，使用j作为虚部，可以用<code>complex(a, b)</code>表示，也可以用<code>a + bj</code>表示。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span>                                     <span class="hljs-comment"># int</span><br>y = <span class="hljs-number">12E4</span>                                   <span class="hljs-comment"># float，12*10000</span><br>z = <span class="hljs-number">3</span> + <span class="hljs-number">5j</span>                                 <span class="hljs-comment"># complex，也可表示为complex(3, 5)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br><br><span class="hljs-keyword">import</span> random                              <span class="hljs-comment"># 使用random内置模块，用于生成随机数</span><br><br><span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><ul><li>构造：类型转换就是使用构造函数完成的。<ul><li><code>int()</code>：整数、浮点数或字符串构造整数。</li><li><code>str()</code>：各种数据类型都可以构造字符串。</li><li><code>float()</code>：整数、浮点数或字符串构造浮点数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span>                                     <span class="hljs-comment"># int</span><br>y = <span class="hljs-number">12E4</span>                                   <span class="hljs-comment"># float，12*10000</span><br>z = <span class="hljs-number">3</span> + <span class="hljs-number">5j</span>                                 <span class="hljs-comment"># complex，也可表示为complex(3, 5)</span><br><br>a = <span class="hljs-built_in">float</span>(x)                               <span class="hljs-comment"># int转float</span><br>b = <span class="hljs-built_in">int</span>(y)                                 <span class="hljs-comment"># float转int</span><br>c = <span class="hljs-built_in">complex</span>(x)                             <span class="hljs-comment"># int转complex</span><br><span class="hljs-built_in">print</span>(a)                                   <span class="hljs-comment"># 注意，这里不能将复数转换成其他数字类型，否则报错</span><br><span class="hljs-built_in">print</span>(b)                                   <span class="hljs-comment"># TypeError: can&#x27;t convert complex to float(int).</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-2-字符串"><a href="#4-2-字符串" class="headerlink" title="4-2 字符串"></a>4-2 字符串</h2><ul><li>字符串<ul><li>Python中的字符串用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>括起来。</li><li>可以使用三个引号<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>将多行字符串分配给变量。</li><li>字符串是表示Unicode字符的字节数组，没有<code>char</code>字符数据类型，单个字符只是长度为1的字符串。</li><li>方括号可以用来访问字符串中的元素，由于字符串是数组，可以通过<code>for</code>循环遍历字符串中的字符。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">s = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">人，得自个儿成全自个儿。</span><br><span class="hljs-string">要想人前显贵，必得人后受罪！</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s)                                   <span class="hljs-comment"># 换行符插入到与代码相同的位置</span><br><br>a = <span class="hljs-string">&quot;Test&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])                                <span class="hljs-comment"># 获取位置0的字符，即第一个字符的位置</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;banana&quot;</span>:  <br>    <span class="hljs-built_in">print</span>(b)                               <span class="hljs-comment"># for循环遍历单词banana中的字母</span><br><br>c = <span class="hljs-string">&quot;Hi!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(c))                              <span class="hljs-comment"># 使用len()函数获取字符串的长度</span><br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt)                       <span class="hljs-comment"># 关键字in，检查txt文本中是否存在单词free</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;free&#x27; is present.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt)              <span class="hljs-comment"># 关键字not in，检查txt文本中是否不存在单词expensive</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No, &#x27;expensive&#x27; in not present.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>切片字符串<ul><li>使用切片语法返回一系列字符。</li><li>指定以冒号<code>:</code>分隔的开始和结束索引，返回字符串的一部分。</li><li>通过省略开始索引，切片范围会从第一个字符开始，即位置0。</li><li>通过省略结束索引，切片范围将到达末尾，也可以使用负索引从字符串末尾开始切片。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot;Hello, World!&quot;</span>                         <span class="hljs-comment"># 第1个字符H的索引位置是0</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])                              <span class="hljs-comment"># 获取位置2到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[: <span class="hljs-number">5</span>])                               <span class="hljs-comment"># 获取位置0到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>:])                                <span class="hljs-comment"># 获取位置2到最后的字符，包括2</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">5</span>: -<span class="hljs-number">2</span>])                            <span class="hljs-comment"># 负索引：末尾字符!的索引位置是0，往左依次是-1，-2...</span><br></code></pre></td></tr></table></figure><ul><li>字符串内置方法<ul><li><code>upper()</code>：以大写形式返回字符串。</li><li><code>lower()</code>：以小写形式返回字符串。</li><li><code>strip()</code>：删除开头或结尾的任何空格。</li><li><code>replace()</code>：用另一个字符串替换当前字符串。</li><li><code>split()</code>：返回一个列表，其中指定分隔符之间的文本成为列表项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot; Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(a.upper())                            <span class="hljs-comment"># 大写形式</span><br><span class="hljs-built_in">print</span>(a.lower())                            <span class="hljs-comment"># 小写形式</span><br><span class="hljs-built_in">print</span>(a.strip())                            <span class="hljs-comment"># 删除空格</span><br><span class="hljs-built_in">print</span>(a.replace(<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>))                  <span class="hljs-comment"># 用J替换H</span><br><span class="hljs-built_in">print</span>(a.split(<span class="hljs-string">&quot;,&quot;</span>))                         <span class="hljs-comment"># 使用逗号分隔符拆分字符串</span><br></code></pre></td></tr></table></figure><ul><li>格式化字符串<ul><li>使用<code>+</code>运算符连接或组合两个字符串，如果用于连接字符串和数字，将报错。</li><li><code>format()</code>方法接受传递的参数，格式化字符串，可以用来组合字符串和数字。<ul><li>该方法接受无限数量的参数，并放置在相应的占位符中。</li><li>可通过索引号<code>&#123;num&#125;</code>确保将参数放置在正确的占位符中。</li><li>使用命名索引<code>&#123;name&#125;</code>，传递参数值时必须使用相应的变量名<code>name</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;Hello &quot;</span><br>y = <span class="hljs-string">&quot;World.&quot;</span><br>z = x + y                                  <span class="hljs-comment"># 使用+运算符连接</span><br><span class="hljs-built_in">print</span>(z)<br><br>age = <span class="hljs-number">26</span><br>txt = <span class="hljs-string">&quot;My name is Lily, and I am &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(age))                     <span class="hljs-comment"># 使用format()格式化方法</span><br><br>quantity = <span class="hljs-number">3</span><br>items_no = <span class="hljs-number">567</span><br>price_li = <span class="hljs-number">49.95</span><br>order = <span class="hljs-string">&quot;I want to pay &#123;&#125; dollars for &#123;&#125; pieces of item &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br>order = <span class="hljs-string">&quot;I want to pay &#123;2&#125; dollars for &#123;0&#125; pieces of item &#123;1&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br><br>price = <span class="hljs-number">49</span><br>txt = <span class="hljs-string">&quot;The price is &#123;:.2f&#125; dollars.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(price))                   <span class="hljs-comment"># 将价格格式化为带两位小数的数字</span><br><br>order = <span class="hljs-string">&quot;I have a &#123;carname&#125;, it is a &#123;model&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(carname=<span class="hljs-string">&quot;Ford&quot;</span>, model=<span class="hljs-string">&quot;Mustang&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>转义字符<ul><li>想在字符串中插入非法字符，可以使用转义字符<code>\</code>，后跟插入的非法字符即可。</li><li>常见的转义字符<ul><li><code>\&#39;</code>(单引号)、<code>\\</code>(反斜杠)、<code>\a</code>(响铃)、<code>\n</code>(换行)、<code>\r</code>(回车)、<code>\ooo</code>(八进制)。</li><li><code>\v</code>(纵向制表符)、<code>\t</code>(横向制表符)、<code>\b</code>(退格符)、<code>\f</code>(换页符)、<code>\xhh</code>(十六进制)。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">txt = <span class="hljs-string">&quot;We are the so-called \&quot;Vikings\&quot; from the north.&quot;</span><br><span class="hljs-built_in">print</span>(txt)                                  <span class="hljs-comment"># 转义双引号</span><br></code></pre></td></tr></table></figure><h2 id="4-3-布尔值"><a href="#4-3-布尔值" class="headerlink" title="4-3 布尔值"></a>4-3 布尔值</h2><ul><li>布尔值<ul><li>只表示为<code>True</code>或<code>False</code>，这两个值其中的一个。</li><li>函数<code>bool()</code>允许评估任何值，并返回<code>True</code>或<code>False</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">26</span><br>b = <span class="hljs-number">30</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b大于a.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b小于a.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))                             <span class="hljs-comment"># 评估一个数字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;Lily&quot;</span>))                         <span class="hljs-comment"># 评估一个字符串</span><br></code></pre></td></tr></table></figure><ul><li>True值<ul><li>任何数字都是True，0除外。</li><li>任何字符串都是True，空字符串除外。</li><li>任何列表、元组、集合和字典都是True，空值除外。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;abc&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><ul><li>False值<ul><li>空值，例如<code>[]</code>、<code>()</code>、<code>&#123;&#125;</code>、<code>&quot;&quot;</code>、数字<code>0</code>和<code>None</code>，还有<code>False</code>本身。</li><li>用户自定义类型的对象<ul><li>如果类定义了<code>__len__()</code>方法，并返回0或False，则输出False值。</li><li>如果类同时定义<code>__len__()</code>和<code>__bool__()</code>方法，则输出参考<code>__bool__()</code>的返回值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">False</span>))<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myclass</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><br>myobj = myclass()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(myobj))                         <span class="hljs-comment"># 定义了__len__()方法，并返回0</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__len__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__bool__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A is True.&quot;</span> <span class="hljs-keyword">if</span> A() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;A is not True.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(A()))                       <span class="hljs-comment"># 同时定义了__len__()和__bool__()方法</span><br></code></pre></td></tr></table></figure><ul><li>返回布尔值情况<ul><li>创建返回布尔值的函数，可返回布尔值。</li><li>返回布尔值的内置函数：<code>isinstance()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFun</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-built_in">print</span>(myFun())                              <span class="hljs-comment"># 创建返回布尔值的函数</span><br><br>x = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>))                   <span class="hljs-comment"># 检查对象是否为int整数</span><br></code></pre></td></tr></table></figure><h2 id="4-4-列表"><a href="#4-4-列表" class="headerlink" title="4-4 列表"></a>4-4 列表</h2><ul><li>列表<ul><li>用于将多个项目存储在单个变量中，使用方括号<code>[]</code>创建。</li><li>列表项是有序可变的，且允许重复值，索引时第一项为[0]。</li><li>列表长度使用<code>len()</code>函数计算，列表项可以是任何数据类型。</li><li>列表的数据类型为<code>&lt;class &#39;list&#39;&gt;</code>，使用<code>list()</code>构造函数创建新列表。</li><li>四种集合数据类型<ul><li>list：列表，有序且可变的集合，允许重复成员。</li><li>tuple：元组，有序且不可变的集合，允许重复成员。</li><li>set：集合，无序且不可变的集合(可删除或添加元素)，无索引，不允许重复成员。</li><li>dict：字典，有序且可变的集合(3.7版本开始有序，之前无序)，不允许重复成员。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mylist))                         <span class="hljs-comment"># 获取列表长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mylist))                        <span class="hljs-comment"># 查看列表的数据类型</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]                    <span class="hljs-comment"># 列表项可以是整数、布尔数据等类型</span><br>list2 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]<br>list3 = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;male&quot;</span>]<br>list4 = <span class="hljs-built_in">list</span>((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>))                   <span class="hljs-comment"># list()函数创建新列表</span><br><span class="hljs-built_in">print</span>(list4)<br></code></pre></td></tr></table></figure><ul><li>访问列表项<ul><li>通过索引号来访问列表项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是包含指定项目的新列表。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从列表末尾开始索引需指定负索引，使用<code>in</code>关键字确定列表中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>])                           <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">1</span>])                          <span class="hljs-comment"># 负索引最后一项Cherry</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>])                        <span class="hljs-comment"># 范围从0开始，到2结束，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[: <span class="hljs-number">2</span>])                         <span class="hljs-comment"># 省略起始值，范围从0到2，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>:])                          <span class="hljs-comment"># 省略结束值，范围从1到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">2</span>: -<span class="hljs-number">1</span>])                      <span class="hljs-comment"># 范围从-1到-2，不包括-1，即Banana</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mylist:                      <span class="hljs-comment"># 确定mylist列表中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits list.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改列表项<ul><li>更改特定项目的值，需要参考索引号。</li><li>更改特定范围内项目的值<ul><li>使用新值定义一个列表，并参考要插入新值的索引号范围。</li><li>插入的项目多于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>插入的项目少于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>当插入的项目数和替换的项目数不匹配时，列表的长度会发生改变。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Orange&quot;</span>                        <span class="hljs-comment"># 更改项目值</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">2</span>] = [<span class="hljs-string">&quot;Blackcurrant&quot;</span>, <span class="hljs-string">&quot;Watermelon&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)                               <span class="hljs-comment"># 更改项目值范围，插入的项目多于替换的项目</span><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">3</span>] = [<span class="hljs-string">&quot;Cherry&quot;</span>]                   <span class="hljs-comment"># 插入的项目少于替换的项目，将第2和第3个值替换为1个值</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>添加列表项<ul><li><code>append()</code>：将项目添加到列表的末尾。</li><li><code>insert()</code>：在指定索引处插入列表项。</li><li><code>extend()</code><ul><li>将另一个列表中的元素附加到当前列表，元素会被添加到列表的末尾。</li><li>附加列表非必须，还可添加任何可迭代对象，例如元组、集合或字典。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist.append(<span class="hljs-string">&quot;Orange&quot;</span>)                    <span class="hljs-comment"># 将Orange添加到列表末尾</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Blackcurrant&quot;</span>)<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># 插入Blackcurrant作为第二项</span><br><br>tropical = [<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>mylist.extend(tropical)                    <span class="hljs-comment"># 添加tropical元素到mylist列表</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mytuple = (<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>)<br>mylist.extend(mytuple)                     <span class="hljs-comment"># 添加元组的元素到mylist列表中</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>删除列表项<ul><li><code>remove()</code>：删除指定的项目。</li><li><code>pop()</code>：删除指定的索引，若不指定索引，则删除最后一项。</li><li>使用<code>del</code>关键字可以删除指定的索引，也可以完全删除列表。</li><li><code>clear()</code>：清空列表，该列表仍然存在，但列表中没有内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Cherry&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Mango&#x27;</span>, <span class="hljs-string">&#x27;Kiwi&#x27;</span>, <span class="hljs-string">&#x27;Papaya&#x27;</span>]<br>mylist.remove(<span class="hljs-string">&quot;Banana&quot;</span>)                    <span class="hljs-comment"># 删除Banana</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.pop(<span class="hljs-number">1</span>)                              <span class="hljs-comment"># 删除第二项</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.pop()                               <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">del</span> mylist[<span class="hljs-number">0</span>]                              <span class="hljs-comment"># 删除第一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-keyword">del</span> mylist                                 <span class="hljs-comment"># 删除整个列表，mylist此时不存在了</span><br><br>mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.clear()                             <span class="hljs-comment"># 清除列表内容</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表循环<ul><li>使用for循环可以遍历列表项。</li><li>还可以通过引用索引号遍历列表项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历列表项，<code>len()</code>函数确定列表的长度，从0开始通过索引循环遍历。</li><li>还可以使用列表推导式(List Comprehension)进行循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mylist:                           <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mylist)):<br>    <span class="hljs-built_in">print</span>(mylist[y])                       <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mylist):                     <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mylist[z])<br>    z = z + <span class="hljs-number">1</span><br><br>[<span class="hljs-built_in">print</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist]                 <span class="hljs-comment"># 列表推导式循环遍历</span><br></code></pre></td></tr></table></figure><ul><li>列表推导式<ul><li>语法：<code>newlist = [expression for item in iterable if condition == True]</code>。</li><li>返回值是一个新列表，保持旧列表不变。</li><li><code>condition</code>：条件是过滤器，只接受条件为True的项，可选项，可省略。</li><li><code>iterable</code>：迭代对象可以是任何可迭代对象，例如列表、元组或集合等。</li><li><code>expression</code>：表达式是迭代中的当前项，但也是结果，可作为操纵结果的方式包含条件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># 只接受条件不是Apple的物品</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># 条件可选</span><br><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># range()函数创建一个可迭代对象</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># 加了“只接受小于5”的判断条件</span><br><br>mylist = [x.upper() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># 将新列表中的值设置为大写</span><br><br>mylist = [x <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Cherry&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)                              <span class="hljs-comment"># 将Banana替换为Cherry</span><br></code></pre></td></tr></table></figure><ul><li>列表排序<ul><li><code>sort()</code><ul><li>按字母数字顺序对列表进行排序，默认情况下升序。</li><li>如果是降序排序，使用关键字参数<code>reverse = True</code>。</li><li>还可以使用关键字参数<code>key = function</code>自定义函数。</li><li>默认情况下该方法区分大小写，所有大写字母排在小写字母之前。</li><li>如果想要一个不区分大小写的排序，使用<code>str.lower</code>作为键函数。</li></ul></li><li><code>reverse()</code>：反转元素的当前排序顺序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.sort()                              <span class="hljs-comment"># 升序，从小到大</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(reverse=<span class="hljs-literal">True</span>)                  <span class="hljs-comment"># 降序，从大到小</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(n - <span class="hljs-number">50</span>)                     <span class="hljs-comment"># 根据数字与50的接近程度对列表进行排序</span><br><br><br>mylist = [<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">65</span>, <span class="hljs-number">82</span>, <span class="hljs-number">23</span>]<br>mylist.sort(key=func)                      <span class="hljs-comment"># 返回一个用于对列表进行升序排序的数字</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.sort()                              <span class="hljs-comment"># 区分大小写，大写在前，小写在后</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(key=<span class="hljs-built_in">str</span>.lower)                 <span class="hljs-comment"># 不区分大小写的排序</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.reverse()                           <span class="hljs-comment"># 颠倒列表项的顺序</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表复制<ul><li><code>copy()</code>：制作列表副本。</li><li><code>list()</code>：制作列表副本的另一种方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>cplist1 = mylist.copy()                     <span class="hljs-comment"># 使用copy()方法复制</span><br><span class="hljs-built_in">print</span>(cplist1)<br><br>cplist2 = <span class="hljs-built_in">list</span>(mylist)                      <span class="hljs-comment"># 使用list()方法复制</span><br><span class="hljs-built_in">print</span>(cplist2)<br></code></pre></td></tr></table></figure><ul><li>列表添加<ul><li>使用<code>+</code>运算符可以连接两个或多个列表。</li><li>将另一个列表中的所有项目逐个附加到一个列表中。</li><li>通过<code>extend()</code>方法将一个列表中的元素添加到另一个列表中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list3 = list1 + list2                      <span class="hljs-comment"># +运算符</span><br><span class="hljs-built_in">print</span>(list3)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list2:<br>    list1.append(x)                        <span class="hljs-comment"># 逐个符加到list1列表中</span><br><span class="hljs-built_in">print</span>(list1)<br><br>list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list1.extend(list2)                        <span class="hljs-comment"># extend()方法在list1列表末尾添加list2元素</span><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>列表内置方法<ul><li><code>count()</code>：统计列表元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist.count(<span class="hljs-string">&quot;Apple&quot;</span>))                <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mylist.index(<span class="hljs-string">&quot;Banana&quot;</span>))               <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4-5 元组"></a>4-5 元组</h2><ul><li>元组<ul><li>用在单个变量中存储多个项目，用圆括号<code>()</code>书写。</li><li>元组项是有序不可更改的，并且允许重复值，被索引时第一项索引为<code>[0]</code>。</li><li><code>len()</code>函数确定元组长度，创建一个只有一项的元组，须在项目后添加一个逗号。</li><li>元组项可以是任何数据类型，例如字符串、整数或布尔类型等，可以包含不同类型。</li><li>元组的数据类型为<code>&lt;class &#39;tuple&#39;&gt;</code>，使用<code>tuple()</code>构造函数创建一个新的元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)                             <span class="hljs-comment"># 圆括号书写</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)                             <span class="hljs-comment"># 允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mytuple))                        <span class="hljs-comment"># 打印元组中的项目数</span><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, )                      <span class="hljs-comment"># 一项元组，必须在项目后添加一个逗号</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mytuple))                       <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><br>tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)                   <span class="hljs-comment"># 字符串类型</span><br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>)                   <span class="hljs-comment"># 整数类型</span><br>tuple3 = (<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>)                   <span class="hljs-comment"># 包含不同类型</span><br><br>mytuple = <span class="hljs-built_in">tuple</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(mytuple)                             <span class="hljs-comment"># tuple()函数创建新元组</span><br></code></pre></td></tr></table></figure><ul><li>访问元组项<ul><li>通过引用方括号内的索引号来访问元组项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是具有指定项目的新元组。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从元组末尾开始索引需指定负索引，使用<code>in</code>关键字确定元组中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">1</span>])                          <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">1</span>])                         <span class="hljs-comment"># 打印元组的最后一项Cherry</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Melon&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])                       <span class="hljs-comment"># 返回第三、四、五项</span><br><span class="hljs-built_in">print</span>(mytuple[ : <span class="hljs-number">4</span>])                       <span class="hljs-comment"># 省略起始值，范围从0到4，不包括4</span><br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>:  ])                       <span class="hljs-comment"># 省略结束值，范围从2到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])                      <span class="hljs-comment"># 返回从索引-4到索引-1，不包括-4的项目</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mytuple:                     <span class="hljs-comment"># 确定mytuple元组中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits tuple.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更新元组值<ul><li>元组一旦创建就不可更改，可将其转换为列表，更改列表再转换回元组。</li><li>若要添加一个或多个项目，使用这些项目创建一个新元组，并将其添加到现有元组中。</li><li>删除元组中的项目同样需要先转换为列表进行操作，<code>del</code>关键字则可以完全删除元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mylists = <span class="hljs-built_in">list</span>(mytuple)                    <span class="hljs-comment"># 将元组转换为列表</span><br>mylists[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Kiwi&quot;</span>                        <span class="hljs-comment"># 更改列表</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)                   <span class="hljs-comment"># 再将列表转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>newtuple = (<span class="hljs-string">&quot;Orange&quot;</span>, )                    <span class="hljs-comment"># 创建新元组</span><br>mytuple += newtuple                        <span class="hljs-comment"># 添加该元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>mylists = <span class="hljs-built_in">list</span>(mytuple)                    <span class="hljs-comment"># 转换为列表</span><br>mylists.remove(<span class="hljs-string">&quot;Apple&quot;</span>)                    <span class="hljs-comment"># 删除列表项</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)                   <span class="hljs-comment"># 转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br><span class="hljs-keyword">del</span> mytuple                                <span class="hljs-comment"># 完全删除元组</span><br><span class="hljs-comment"># print(mytuple)                           # NameError: name &#x27;mytuple&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>元组拆包<ul><li>创建元组并赋值称为元组打包，将值提取回变量中称为拆包。</li><li>拆包时变量数必须与元组值的数量匹配，若不匹配则使用星号<code>*</code>将剩余值收集为列表。</li><li>若星号被添加到另一个变量而非最后一个，Python将为变量分配值，直至剩余值数量与剩余变量数匹配。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>(green, yellow, red) = mytuple<br><span class="hljs-built_in">print</span>(green)                               <span class="hljs-comment"># 拆包</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Strawberry&quot;</span>, <span class="hljs-string">&quot;Raspberry&quot;</span>)<br>(green, yellow, *red) = mytuple<br><span class="hljs-built_in">print</span>(red)                                 <span class="hljs-comment"># 使用星号*将剩余值收集为列表</span><br><br>(green, *tropic, red) = mytuple<br><span class="hljs-built_in">print</span>(tropic)                              <span class="hljs-comment"># 添加tropic变量值列表</span><br></code></pre></td></tr></table></figure><ul><li>元组循环<ul><li>使用for循环可以遍历元组项。</li><li>还可以通过引用索引号遍历元组项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历元组项，<code>len()</code>函数确定元组的长度，从0开始通过索引循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:                          <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mytuple)):<br>    <span class="hljs-built_in">print</span>(mytuple[y])                      <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mytuple):                    <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mytuple[z])<br>    z = z + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>元组添加<ul><li>使用<code>+</code>运算符可以连接两个或多个元组。</li><li>使用<code>*</code>运算符将元组内容乘以给定次数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>tuple3 = tuple1 + tuple2<br><span class="hljs-built_in">print</span>(tuple3)                               <span class="hljs-comment"># +运算符</span><br><br>fruits = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mytuple = fruits * <span class="hljs-number">2</span>                        <span class="hljs-comment"># *运算符</span><br><span class="hljs-built_in">print</span>(mytuple)<br></code></pre></td></tr></table></figure><ul><li>元组内置方法<ul><li><code>count()</code>：统计元组元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple.count(<span class="hljs-string">&quot;Apple&quot;</span>))               <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mytuple.index(<span class="hljs-string">&quot;Banana&quot;</span>))              <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-6-集合"><a href="#4-6-集合" class="headerlink" title="4-6 集合"></a>4-6 集合</h2><ul><li>集合<ul><li>用于将多个项目存储在单个变量中，用大括号<code>&#123;&#125;</code>书写。</li><li>集合项是无序不可更改的，且无索引，也不允许重复值。</li><li><code>len()</code>函数确定集合长度，集合项可以是任何数据类型。</li><li>例如字符串、整数或布尔类型等，可以包含不同数据类型。</li><li>集合的数据类型为<code>&lt;class &#39;set&#39;&gt;</code>，使用<code>set()</code>构造函数创建一个新集合，for循环遍历集合项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                               <span class="hljs-comment"># 大括号书写</span><br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                               <span class="hljs-comment"># 不允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(myset))                          <span class="hljs-comment"># 获取集合中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myset))                         <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;                     <span class="hljs-comment"># 字符串类型</span><br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;                     <span class="hljs-comment"># 整数类型</span><br>set3 = &#123;<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>&#125;                     <span class="hljs-comment"># 包含不同类型</span><br><br>myset = <span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(myset)                               <span class="hljs-comment"># set()函数创建新集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:                            <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>访问集合项<ul><li>不能通过索引访问集合项，使用<code>for</code>循环遍历。</li><li>或者使用<code>in</code>关键字确定集合中是否存在指定值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:                             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">in</span> myset)                    <span class="hljs-comment"># in关键字确定</span><br></code></pre></td></tr></table></figure><ul><li>添加集合项<ul><li>创建集合后无法更改集合项，但<code>add()</code>方法可添加新项目。</li><li>使用<code>update()</code>方法可以将另一个集合项添加到当前集合中。</li><li><code>update()</code>方法中的对象，可以是任何可迭代的对象，例如元组、列表或字典等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.add(<span class="hljs-string">&quot;Orange&quot;</span>)                        <span class="hljs-comment"># add()方法添加集合项</span><br><span class="hljs-built_in">print</span>(myset)<br><br>tropical = &#123;<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>&#125;<br>myset.update(tropical)                     <span class="hljs-comment"># 添加tropical集合项到myset</span><br><span class="hljs-built_in">print</span>(myset)<br><br>mylist = [<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>myset.update(mylist)                       <span class="hljs-comment"># 添加列表元素到myset集合中</span><br><span class="hljs-built_in">print</span>(myset)<br></code></pre></td></tr></table></figure><ul><li>删除集合项<ul><li>使用<code>remove()</code>或<code>discard()</code>方法删除集合中的项目。<ul><li>如果要删除的集合项不存在，使用<code>remove()</code>将会报错。</li><li>如果要删除的集合项不存在，使用<code>discard()</code>不会报错。</li></ul></li><li><code>pop()</code>方法删除最后一项，集合无序，不确定删除的具体项。</li><li><code>clear()</code>方法清空集合，该集合仍在，<code>del</code>关键字则完全删除集合。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.remove(<span class="hljs-string">&quot;Banana&quot;</span>)                     <span class="hljs-comment"># remove()方法删除Banana</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-comment"># myset.remove(&quot;Banana&quot;)                   # 不存在集合项，报错KeyError: &#x27;Banana&#x27;.</span><br>myset.discard(<span class="hljs-string">&quot;Banana&quot;</span>)                    <span class="hljs-comment"># 不存在集合项，使用discard()方法不会报错</span><br><span class="hljs-built_in">print</span>(myset)<br><br>thisset = myset.pop()                      <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(myset)<br><span class="hljs-built_in">print</span>(thisset)<br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.clear()                              <span class="hljs-comment"># 清空集合</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-keyword">del</span> myset                                  <span class="hljs-comment"># 完全删除集合</span><br><span class="hljs-comment"># print(myset)                             # NameError: name &#x27;myset&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>集合添加<ul><li><code>union()</code>：返回一个包含两个集合中所有项目的新集合，会排除重复项。</li><li><code>update()</code>：将一个集合的所有项目插入到另一个集合中，会排除重复项。</li><li><code>intersection()</code>：仅包含存在于两个集合中的相同项。</li><li><code>intersection_update()</code>：仅保留两个集合中存在的相同项。</li><li><code>symmetric_difference()</code>：仅包含存在于两个集合中的不同项。</li><li><code>symmetric_difference_update()</code>：仅保留两个集合中存在的不同项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.union(set2)                    <span class="hljs-comment"># 返回一个新集合set3</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set1.update(set2)                          <span class="hljs-comment"># 将set2中的所有项目插入到set1中</span><br><span class="hljs-built_in">print</span>(set1)<br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.intersection(set2)<br><span class="hljs-built_in">print</span>(set3)                                <span class="hljs-comment"># 仅包含存在于set1和set2中的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set1.intersection_update(set2)<br><span class="hljs-built_in">print</span>(set1)                                <span class="hljs-comment"># 仅保留set1和set2中存在的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.symmetric_difference(set2)<br><span class="hljs-built_in">print</span>(set3)                                <span class="hljs-comment"># 仅包含存在于set1和set2中的不同项</span><br><br>set1.symmetric_difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                                <span class="hljs-comment"># 仅保留set1和set2中存在的不同项</span><br></code></pre></td></tr></table></figure><ul><li>集合内置方法<ul><li><code>copy()</code>：复制一个集合。</li><li><code>difference()</code>：返回集合的差集。</li><li><code>difference_update()</code>：移除指定集合中包含与另一个集合相同项的元素。</li><li><code>isdisjoint()</code>：判断两个集合是否相交，不相交返回True，否则返回False。</li><li><code>issubset()</code>：判断集合是否被其他集合包含，是则返回True，否则返回False。</li><li><code>issuperset()</code>：判断集合是否包含其他集合，是则返回True，否则返回False。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.copy()                         <span class="hljs-comment"># 复制set1</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set3 = set1.difference(set2)<br><span class="hljs-built_in">print</span>(set3)                                <span class="hljs-comment"># 差集</span><br>set1.difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                                <span class="hljs-comment"># 移除set1中与set2相同的元素，返回set1中剩余的元素</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>result = set1.isdisjoint(set2)<br><span class="hljs-built_in">print</span>(result)                              <span class="hljs-comment"># 判断是否相交，不相交为True</span><br>result = set1.issubset(set3)<br><span class="hljs-built_in">print</span>(result)                              <span class="hljs-comment"># 判断set1是否被set3包含</span><br>result = set1.issuperset(set2)<br><span class="hljs-built_in">print</span>(result)                              <span class="hljs-comment"># 判断set1是否包含set2</span><br></code></pre></td></tr></table></figure><h2 id="4-7-字典"><a href="#4-7-字典" class="headerlink" title="4-7 字典"></a>4-7 字典</h2><ul><li>字典<ul><li>用于将数据值存储在键值对中，使用大括号<code>&#123;&#125;</code>进行书写，带有键和值。</li><li>字典项目是有序可更改且不允许重复的，键值对形式呈现，用键名引用。</li><li>使用<code>len()</code>函数获取字典长度，字典的数据类型为<code>&lt;class &#39;dict&#39;&gt;</code>。</li><li>字典的值可以是任何数据类型，例如字符串、整数、布尔值或列表等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,                    <span class="hljs-comment"># 字符串</span><br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,                          <span class="hljs-comment"># 整数</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>],             <span class="hljs-comment"># 列表</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(mydict)                              <span class="hljs-comment"># 不允许重复，重复值将覆盖现有值</span><br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;brand&quot;</span>])                     <span class="hljs-comment"># 使用键名引用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mydict))                         <span class="hljs-comment"># 打印字典中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mydict))                        <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问字典项<ul><li>通过引用方括号内的键名来访问字典的项目，还可以使用<code>get()</code>方法获取。</li><li>修改原字典对象，视图对象的值也会发生改变，视图对象包括以下三个方法。<ul><li><code>keys()</code>方法返回字典中所有的键列表。</li><li><code>values()</code>方法返回字典中所有的值列表。</li><li><code>items()</code>方法以列表返回可遍历的元组数组。</li></ul></li><li>使用<code>in</code>关键字确定字典中是否存在指定的键。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;model&quot;</span>])                     <span class="hljs-comment"># 引用键名访问</span><br><span class="hljs-built_in">print</span>(mydict.get(<span class="hljs-string">&quot;model&quot;</span>))                 <span class="hljs-comment"># get()方法获取</span><br><br><span class="hljs-built_in">print</span>(mydict.keys())                       <span class="hljs-comment"># 获取键列表</span><br>mydict[<span class="hljs-string">&quot;colors&quot;</span>] = <span class="hljs-string">&quot;white&quot;</span>                 <span class="hljs-comment"># 修改原字典mydict的colors对象</span><br><span class="hljs-built_in">print</span>(mydict.keys())                       <span class="hljs-comment"># 获取的键列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.values())                     <span class="hljs-comment"># 获取值列表</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2022</span>                      <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.values())                     <span class="hljs-comment"># 获取的值列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.items())                      <span class="hljs-comment"># 返回字典中的每个项目作为列表的元组</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2020</span>                      <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.items())                      <span class="hljs-comment"># 获取的元组数组也得到更新</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;model&quot;</span> <span class="hljs-keyword">in</span> mydict:                      <span class="hljs-comment"># 检查mydict字典中是否存在model对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;model&#x27; is one of the keys in mydict dictionary.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改字典项<ul><li>通过引用键名来更改特定字典项的值。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2019</span>                       <span class="hljs-comment"># 引用键名更改</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2021</span>&#125;)               <span class="hljs-comment"># update()方法更新</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>添加字典项<ul><li>通过使用新的索引键并为其分配值来完成向字典添加项目。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;color&quot;</span>] = <span class="hljs-string">&quot;red&quot;</span>                     <span class="hljs-comment"># 使用新的索引键并为其分配值</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">2000000</span>&#125;)           <span class="hljs-comment"># update()方法将price添加到字典中</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>删除字典项<ul><li><code>pop()</code>：删除具有指定键名的项目。</li><li><code>popitem()</code>：删除最后插入的项目，3.7之前的版本会删除随机项目。</li><li>使用<code>del</code>关键字删除具有指定键名的项目，也可以完全删除整个字典。</li><li><code>clear()</code>：清空字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,<br>    <span class="hljs-string">&quot;colors&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">20000000</span><br>&#125;<br>mydict.pop(<span class="hljs-string">&quot;model&quot;</span>)                        <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)  <br>mydict.popitem()                           <span class="hljs-comment"># 删除最后插入的项目</span><br><span class="hljs-built_in">print</span>(mydict)     <br><span class="hljs-keyword">del</span> mydict[<span class="hljs-string">&quot;brand&quot;</span>]                        <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.clear()                             <span class="hljs-comment"># 清空字典</span><br><span class="hljs-built_in">print</span>(mydict)       <br><span class="hljs-keyword">del</span> mydict                                 <span class="hljs-comment"># 完全删除整个字典</span><br><span class="hljs-comment"># print(mydict)                            # NameError: name &#x27;mydict&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>字典循环<ul><li>for循环可以遍历字典项，返回值可以是字典的键，也可以是字典的值。</li><li>可以使用for循环配合<code>keys()</code>和<code>values()</code>方法分别返回字典的键和值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(x)                               <span class="hljs-comment"># 打印字典中的所有键</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(mydict[y])                       <span class="hljs-comment"># 打印字典中的所有值</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> mydict.keys():<br>    <span class="hljs-built_in">print</span>(a)                               <span class="hljs-comment"># keys()方法返回键</span><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> mydict.values():<br>    <span class="hljs-built_in">print</span>(b)                               <span class="hljs-comment"># values()方法返回值</span><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> mydict.items():<br>    <span class="hljs-built_in">print</span>(x, y)                            <span class="hljs-comment"># items()方法遍历keys和values</span><br></code></pre></td></tr></table></figure><ul><li>字典复制<ul><li><code>copy()</code>：复制副本。</li><li><code>dict()</code>：制作副本。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>dict1 = mydict.copy()                       <span class="hljs-comment"># 复制副本</span><br><span class="hljs-built_in">print</span>(dict1)<br>dict2 = <span class="hljs-built_in">dict</span>(mydict)                        <span class="hljs-comment"># 制作副本</span><br><span class="hljs-built_in">print</span>(dict2)<br></code></pre></td></tr></table></figure><ul><li>字典嵌套<ul><li>指字典可以包含字典。</li><li>可以将其他字典添加到一个新字典中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">myfamily = &#123;                               <span class="hljs-comment"># 创建一个包含两个字典的字典</span><br>    <span class="hljs-string">&quot;child1&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;,<br>    <span class="hljs-string">&quot;child2&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br><br>child1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;<br>child2 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>myfamily = &#123;                               <span class="hljs-comment"># 创建一个包含两个字典的新字典</span><br>    <span class="hljs-string">&quot;child1&quot;</span>: child1,<br>    <span class="hljs-string">&quot;child2&quot;</span>: child2<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br></code></pre></td></tr></table></figure><ul><li>字典内置方法<ul><li><code>fromkeys()</code>：创建新字典，以序列中的元素作为字典的键，value为字典所有键对应的初始值。</li><li><code>setdefault()</code>：与<code>get()</code>方法类似，如果键不存在于字典中，就会添加键并将值设为默认值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">seq = (<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Sougou&quot;</span>)<br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq)                <span class="hljs-comment"># 不指定默认的键值，默认为None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                         <span class="hljs-comment"># &#123;&#x27;Google&#x27;: None, &#x27;Baidu&#x27;: None, &#x27;Sougou&#x27;: None&#125;</span><br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq, <span class="hljs-number">10</span>)            <span class="hljs-comment"># 指定默认的键值为10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                         <span class="hljs-comment"># &#123;&#x27;Google&#x27;: 10, &#x27;Baidu&#x27;: 10, &#x27;Sougou&#x27;: 10&#125;</span><br><br>mydict = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">26</span>&#125;<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>))            <span class="hljs-comment"># 与get()方法类似</span><br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Sex&quot;</span>))            <span class="hljs-comment"># 添加键并将值设为默认值None，默认为None后再设置则无效</span><br><span class="hljs-comment"># print(mydict.setdefault(&quot;Sex&quot;, &quot;female&quot;))</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><ul><li>数组<ul><li>Python没有数组类型，只有列表类型，数组可用列表替代。</li><li>数组用于在一个变量中存储多个值，通过索引号来访问这些值。</li><li>Python没有对数组的内置支持，列表代替时内置方法与之相通。<ul><li><code>append()</code>、<code>clear()</code>、<code>copy()</code>、<code>count()</code>、<code>extend()</code>。</li><li><code>index()</code>、<code>insert()</code>、<code>pop()</code>、<code>remove()</code>、<code>reverse()</code>、<code>sort()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">cars = [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>]<br><span class="hljs-built_in">print</span>(cars[<span class="hljs-number">0</span>])                <span class="hljs-comment"># 获取第一个数组项的值</span><br><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span>            <span class="hljs-comment"># 修改第一个数组项的值</span><br><span class="hljs-built_in">print</span>(cars)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cars))              <span class="hljs-comment"># 返回该数组的长度，长度总比最高数组索引数大1</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cars:                <span class="hljs-comment"># 使用for循环遍历数组的所有元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>cars.append(<span class="hljs-string">&quot;Honda&quot;</span>)          <span class="hljs-comment"># append()方法添加元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.pop(<span class="hljs-number">1</span>)                   <span class="hljs-comment"># pop()方法从数组删除第二个元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.remove(<span class="hljs-string">&quot;Volvo&quot;</span>)          <span class="hljs-comment"># remove()方法从数组删除Volvo元素，只删除第一次出现的指定值</span><br><span class="hljs-built_in">print</span>(cars)<br></code></pre></td></tr></table></figure><ul><li>numpy库定义的数组<ul><li>数组在numpy库中定义，若要使用需事先导入库，数组类型为<code>&lt;class &#39;numpy.ndarray&#39;&gt;</code>。</li><li>numpy中的数组对象称为ndarray，通过使用<code>array()</code>函数可以创建一个numpy的ndarray对象。</li><li>将列表、元组或任何类似数组的对象传递给<code>array()</code>方法，<code>array()</code>方法将其转换为ndarray。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>myArray = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(myArray)                 <span class="hljs-comment"># 列表创建数组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myArray))           <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>myArray = np.array(((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(myArray)                 <span class="hljs-comment"># 元组创建数组</span><br></code></pre></td></tr></table></figure><ul><li>数组维度<ul><li>数组维度是嵌套数组的一个级别，嵌套数组即数组中有数组。</li><li>零维数组，也叫标量，数组值只有一个。</li><li>一维数组，指由多个元素值构成的数组。</li><li>二维数组<ul><li>是一维数组的数组，通常用于表示矩阵或二阶张量。</li><li>numpy库中有专门用于矩阵运算的完整子模块<code>numpy.mat</code>。</li></ul></li><li>三维数组，是二维数组的数组。</li><li>数组可以拥有任意数量的维度，创建数组时使用ndmin参数定义维数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = <span class="hljs-number">1</span><br>arr0 = np.array(a)            <span class="hljs-comment"># 零维数组</span><br><span class="hljs-built_in">print</span>(arr0)<br><span class="hljs-built_in">print</span>(arr0.shape)             <span class="hljs-comment"># 返回元组，获取数组各个维度的维数</span><br><span class="hljs-built_in">print</span>(arr0.ndim)              <span class="hljs-comment"># ndim属性返回一个整数，检查数组维度</span><br><br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr1 = np.array(b)            <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1)<br><span class="hljs-built_in">print</span>(arr1.shape)<br><span class="hljs-built_in">print</span>(arr1.ndim)<br><br>c = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>arr2 = np.array(c)            <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2)<br><span class="hljs-built_in">print</span>(arr2.shape)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><br>d = [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]<br>arr3 = np.array([c, d])       <span class="hljs-comment"># 三维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.shape)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                   <span class="hljs-comment"># 五维数组</span><br><span class="hljs-built_in">print</span>(arr5.shape)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><ul><li>数组裁切<ul><li>类似列表和元组的切片，<code>[start: end]</code>或<code>[start: end: step]</code>。</li><li>将元素从一个给定的索引切到另一个给定的索引，包含开始索引，不包含结束索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1.ndim)              <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])             <span class="hljs-comment"># 裁切索引1到5的元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])          <span class="hljs-comment"># 设置裁切步长</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])          <span class="hljs-comment"># 返回数组中相隔的元素</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负裁切，索引从-1开始</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2.ndim)              <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])          <span class="hljs-comment"># 第二个元素[6, 7, 8, 9, 10]，索引号从1到4的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])          <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号为2的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])       <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号从1到4的元素，返回数组</span><br></code></pre></td></tr></table></figure><h1 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6 if语句"></a>6 if语句</h1><ul><li>if语句<ul><li>使用<code>if</code>关键字编写。</li><li>支持<code>if...</code>、<code>if...elif...</code>、<code>if...elif...else...</code>和<code>if...else...</code>格式。</li><li><code>if...</code>格式，如果只有一条语句要执行，可以将该条执行语句与if语句放在同一行上。</li><li><code>if...else...</code>格式，如果只有一条语句要执行，可以将执行语句与if语句放在同一行。</li><li>如果if语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> b &gt; a:                             <span class="hljs-comment"># 注意缩进，若没有缩进，会报错</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)<br><span class="hljs-keyword">elif</span> a == b:                          <span class="hljs-comment"># 如果if条件不成立，则执行elif</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a等于b.&quot;</span>)<br><span class="hljs-keyword">else</span>:                                 <span class="hljs-comment"># else关键字捕获任何未被上述条件捕获的内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a &lt; b: <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)            <span class="hljs-comment"># 只有一条语句要执行，将执行语句与if语句放在同一行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>) <span class="hljs-keyword">if</span> a &lt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>)   <span class="hljs-comment"># 又叫三元运算符或条件表达式，还可同一行上多个else语句</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>) <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>) <span class="hljs-keyword">if</span> a==b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>)<br><br>x = <span class="hljs-number">23</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">10</span>:                            <span class="hljs-comment"># if嵌套</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于10.&quot;</span>)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">20</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于20.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小于20.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a == b:<br>    <span class="hljs-keyword">pass</span>                              <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><h1 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7 for循环"></a>7 for循环</h1><ul><li>for循环<ul><li>用于迭代序列，例如列表、元组、集合或字符串等，不需要预先设置索引变量。</li><li>在循环遍历所有项目前停止循环，可以使用<code>break</code>关键字。</li><li><code>continue</code>关键字，停止循环的当前迭代并继续下一个循环。</li><li>如果for循环语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(x)                          <span class="hljs-comment"># 遍历列表</span><br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Banana&quot;</span>:<br>    <span class="hljs-built_in">print</span>(y)                          <span class="hljs-comment"># 遍历字符串</span><br><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(z)                          <span class="hljs-comment"># Apple, Banana</span><br>    <span class="hljs-keyword">if</span> z == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span>                         <span class="hljs-comment"># 遍历到Banana时break停止，跳出循环</span><br><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(a)                          <span class="hljs-comment"># Apple</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">continue</span>                      <span class="hljs-comment"># 遍历到Banana时continue跳过，继续下一个循环</span><br>    <span class="hljs-built_in">print</span>(b)                          <span class="hljs-comment"># Apple, Cherry</span><br><br>obj = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;big&quot;</span>, <span class="hljs-string">&quot;delicious&quot;</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> obj:                         <span class="hljs-comment"># for循环嵌套</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>        <span class="hljs-built_in">print</span>(a, b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">pass</span>                              <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>range()函数<ul><li>循环一组代码指定的次数，可以使用<code>range()</code>函数。</li><li>返回一个数字序列，默认从0开始，递增1，并以指定的数字结束。</li><li><code>range()</code>函数默认是以0作为起始值的，可通过添加参数来指定。</li><li><code>range()</code>函数默认序列递增1，可以通过添加第三个参数来指定。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(a)                           <span class="hljs-comment"># 打印0到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(b)                           <span class="hljs-comment"># 打印3到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(c)                           <span class="hljs-comment"># 打印3到30的值，序列递增3</span><br></code></pre></td></tr></table></figure><ul><li>else关键字<ul><li>for循环中的<code>else</code>关键字指定循环结束时要执行的代码块。</li><li>如果循环语句被<code>break</code>停止，则else语句的代码块不会被执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(x)                          <span class="hljs-comment"># 打印从0到5的所有数字，并在循环结束时打印一条信息</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">if</span> y == <span class="hljs-number">3</span>: <span class="hljs-keyword">break</span>                  <span class="hljs-comment"># 当循环到y为3时，break停止并跳出循环，else语句不执行</span><br>    <span class="hljs-built_in">print</span>(y)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8 while循环"></a>8 while循环</h1><ul><li>while循环<ul><li>只要条件为真，就可以执行一组语句。</li><li>使用<code>break</code>关键字，即使while条件为真，也可以停止循环。</li><li>使用<code>continue</code>关键字，停止当前迭代，并继续下一个循环。</li><li>当条件不再为真时运行一段代码，可以使用else语句。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(a)                          <span class="hljs-comment"># 打印小于6的数</span><br>    a += <span class="hljs-number">1</span>                            <span class="hljs-comment"># 注意递增，否则循环永远继续</span><br><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> b &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(b)<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">break</span>                         <span class="hljs-comment"># 当b为3时break停止，跳出循环</span><br>    b += <span class="hljs-number">1</span><br><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> c &lt; <span class="hljs-number">6</span>:<br>    c += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> c == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">continue</span>                      <span class="hljs-comment"># 当c为3时，继续下一次迭代</span><br>    <span class="hljs-built_in">print</span>(c)<br><br>x = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> x &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(x)<br>    x += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:                                 <span class="hljs-comment"># 条件不再为真时运行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is no longer less than 6.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
