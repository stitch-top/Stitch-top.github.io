<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python SciPy</title>
    <link href="/2021/04/15/python/python08-python-scipy/"/>
    <url>/2021/04/15/python/python08-python-scipy/</url>
    
    <content type="html"><![CDATA[<p>SciPy是一个在底层使用NumPy的科学计算库，为优化、统计和信号处理提供了实用功能，由NumPy的创建者Travis Olliphant创建。</p><span id="more"></span><h1 id="1-SciPy"><a href="#1-SciPy" class="headerlink" title="1 SciPy"></a>1 SciPy</h1><ul><li>SciPy<ul><li>命令窗口下使用<code>pip install scipy</code>进行安装。</li><li>通过import关键字将其导入应用程序：<code>import scipy</code>。</li><li>检查SciPy版本，版本字符串存在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> scipy<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants         <span class="hljs-comment"># 导入</span><br><br><span class="hljs-built_in">print</span>(constants.liter)<br><span class="hljs-built_in">print</span>(scipy.__version__)            <span class="hljs-comment"># 检查SciPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-常量"><a href="#2-常量" class="headerlink" title="2 常量"></a>2 常量</h1><ul><li>常量<ul><li>PI是科学常数的一个例子，<code>dir()</code>函数可以看到常量模块下所有单元的列表。</li><li>单位类别<ul><li>质量：返回以kg为单位的指定单位。</li><li>时间：返回以秒为单位的指定单位。</li><li>长度：返回以米为单位的指定单位。</li><li>角度：返回以弧度为单位的指定单位。</li><li>能量：返回以焦耳为单位的指定单位。</li><li>功率：返回以瓦特为单位的指定单位。</li><li>力量：返回以牛顿为单位的指定单位。</li><li>压力：返回以帕斯卡为单位的指定单位。</li><li>区域：返回以平方米为单位的指定单位。</li><li>体积：返回以立方米为单位的指定单位。</li><li>速度：返回以米每秒为单位的指定单位。</li><li>温度：返回以开尔文为单位的指定单位。</li><li>二进制：返回以字节为单位的指定单位。</li><li>公制(SI)：返回以米为单位的指定单位。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> constants<br><br><span class="hljs-built_in">print</span>(constants.pi)                 <span class="hljs-comment"># 打印PI的常数值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(constants))               <span class="hljs-comment"># 列出所有常量</span><br><br><span class="hljs-built_in">print</span>(constants.gram)               <span class="hljs-comment"># 0.001，质量</span><br><span class="hljs-built_in">print</span>(constants.metric_ton)         <span class="hljs-comment"># 1000.0</span><br><span class="hljs-built_in">print</span>(constants.grain)              <span class="hljs-comment"># 6.479891e-05</span><br><span class="hljs-built_in">print</span>(constants.lb)                 <span class="hljs-comment"># 0.45359236999999997</span><br><span class="hljs-built_in">print</span>(constants.pound)              <span class="hljs-comment"># 0.45359236999999997</span><br><span class="hljs-built_in">print</span>(constants.oz)                 <span class="hljs-comment"># 0.028349523124999998</span><br><span class="hljs-built_in">print</span>(constants.ounce)              <span class="hljs-comment"># 0.028349523124999998</span><br><span class="hljs-built_in">print</span>(constants.stone)              <span class="hljs-comment"># 6.3502931799999995</span><br><span class="hljs-built_in">print</span>(constants.long_ton)           <span class="hljs-comment"># 1016.0469088</span><br><span class="hljs-built_in">print</span>(constants.short_ton)          <span class="hljs-comment"># 907.1847399999999</span><br><span class="hljs-built_in">print</span>(constants.troy_ounce)         <span class="hljs-comment"># 0.031103476799999998</span><br><span class="hljs-built_in">print</span>(constants.troy_pound)         <span class="hljs-comment"># 0.37324172159999996</span><br><span class="hljs-built_in">print</span>(constants.carat)              <span class="hljs-comment"># 0.0002</span><br><span class="hljs-built_in">print</span>(constants.atomic_mass)        <span class="hljs-comment"># 1.66053904e-27</span><br><span class="hljs-built_in">print</span>(constants.m_u)                <span class="hljs-comment"># 1.66053904e-27</span><br><span class="hljs-built_in">print</span>(constants.u)                  <span class="hljs-comment"># 1.66053904e-27</span><br><br><span class="hljs-built_in">print</span>(constants.minute)             <span class="hljs-comment"># 60.0，时间</span><br><span class="hljs-built_in">print</span>(constants.hour)               <span class="hljs-comment"># 3600.0</span><br><span class="hljs-built_in">print</span>(constants.day)                <span class="hljs-comment"># 86400.0</span><br><span class="hljs-built_in">print</span>(constants.week)               <span class="hljs-comment"># 604800.0</span><br><span class="hljs-built_in">print</span>(constants.year)               <span class="hljs-comment"># 31536000.0</span><br><span class="hljs-built_in">print</span>(constants.Julian_year)        <span class="hljs-comment"># 31557600.0</span><br><br><span class="hljs-built_in">print</span>(constants.inch)               <span class="hljs-comment"># 0.0254，长度</span><br><span class="hljs-built_in">print</span>(constants.foot)               <span class="hljs-comment"># 0.30479999999999996</span><br><span class="hljs-built_in">print</span>(constants.yard)               <span class="hljs-comment"># 0.9143999999999999</span><br><span class="hljs-built_in">print</span>(constants.mile)               <span class="hljs-comment"># 1609.3439999999998</span><br><span class="hljs-built_in">print</span>(constants.mil)                <span class="hljs-comment"># 2.5399999999999997e-05</span><br><span class="hljs-built_in">print</span>(constants.pt)                 <span class="hljs-comment"># 0.00035277777777777776</span><br><span class="hljs-built_in">print</span>(constants.point)              <span class="hljs-comment"># 0.00035277777777777776</span><br><span class="hljs-built_in">print</span>(constants.survey_foot)        <span class="hljs-comment"># 0.3048006096012192</span><br><span class="hljs-built_in">print</span>(constants.survey_mile)        <span class="hljs-comment"># 1609.3472186944373</span><br><span class="hljs-built_in">print</span>(constants.nautical_mile)      <span class="hljs-comment"># 1852.0</span><br><span class="hljs-built_in">print</span>(constants.fermi)              <span class="hljs-comment"># 1e-15</span><br><span class="hljs-built_in">print</span>(constants.angstrom)           <span class="hljs-comment"># 1e-10</span><br><span class="hljs-built_in">print</span>(constants.micron)             <span class="hljs-comment"># 1e-06</span><br><span class="hljs-built_in">print</span>(constants.au)                 <span class="hljs-comment"># 149597870691.0</span><br><span class="hljs-built_in">print</span>(constants.astronomical_unit)  <span class="hljs-comment"># 149597870691.0</span><br><span class="hljs-built_in">print</span>(constants.light_year)         <span class="hljs-comment"># 9460730472580800.0</span><br><span class="hljs-built_in">print</span>(constants.parsec)             <span class="hljs-comment"># 3.0856775813057292e+16</span><br><br><span class="hljs-built_in">print</span>(constants.degree)             <span class="hljs-comment"># 0.017453292519943295，角度</span><br><span class="hljs-built_in">print</span>(constants.arcmin)             <span class="hljs-comment"># 0.0002908882086657216</span><br><span class="hljs-built_in">print</span>(constants.arcminute)          <span class="hljs-comment"># 0.0002908882086657216</span><br><span class="hljs-built_in">print</span>(constants.arcsec)             <span class="hljs-comment"># 4.84813681109536e-06</span><br><span class="hljs-built_in">print</span>(constants.arcsecond)          <span class="hljs-comment"># 4.84813681109536e-06</span><br><br><span class="hljs-built_in">print</span>(constants.eV)                 <span class="hljs-comment"># 1.6021766208e-19，能量</span><br><span class="hljs-built_in">print</span>(constants.electron_volt)      <span class="hljs-comment"># 1.6021766208e-19</span><br><span class="hljs-built_in">print</span>(constants.calorie)            <span class="hljs-comment"># 4.184</span><br><span class="hljs-built_in">print</span>(constants.calorie_th)         <span class="hljs-comment"># 4.184</span><br><span class="hljs-built_in">print</span>(constants.calorie_IT)         <span class="hljs-comment"># 4.1868</span><br><span class="hljs-built_in">print</span>(constants.erg)                <span class="hljs-comment"># 1e-07</span><br><span class="hljs-built_in">print</span>(constants.Btu)                <span class="hljs-comment"># 1055.05585262</span><br><span class="hljs-built_in">print</span>(constants.Btu_IT)             <span class="hljs-comment"># 1055.05585262</span><br><span class="hljs-built_in">print</span>(constants.Btu_th)             <span class="hljs-comment"># 1054.3502644888888</span><br><span class="hljs-built_in">print</span>(constants.ton_TNT)            <span class="hljs-comment"># 4184000000.0</span><br><br><span class="hljs-built_in">print</span>(constants.hp)                 <span class="hljs-comment"># 745.6998715822701，功率</span><br><span class="hljs-built_in">print</span>(constants.horsepower)         <span class="hljs-comment"># 745.6998715822701</span><br><br><span class="hljs-built_in">print</span>(constants.dyn)                <span class="hljs-comment"># 1e-05，力量</span><br><span class="hljs-built_in">print</span>(constants.dyne)               <span class="hljs-comment"># 1e-05</span><br><span class="hljs-built_in">print</span>(constants.lbf)                <span class="hljs-comment"># 4.4482216152605</span><br><span class="hljs-built_in">print</span>(constants.pound_force)        <span class="hljs-comment"># 4.4482216152605</span><br><span class="hljs-built_in">print</span>(constants.kgf)                <span class="hljs-comment"># 9.80665</span><br><span class="hljs-built_in">print</span>(constants.kilogram_force)     <span class="hljs-comment"># 9.80665</span><br><br><span class="hljs-built_in">print</span>(constants.atm)                <span class="hljs-comment"># 101325.0，压力</span><br><span class="hljs-built_in">print</span>(constants.atmosphere)         <span class="hljs-comment"># 101325.0</span><br><span class="hljs-built_in">print</span>(constants.bar)                <span class="hljs-comment"># 100000.0</span><br><span class="hljs-built_in">print</span>(constants.torr)               <span class="hljs-comment"># 133.32236842105263</span><br><span class="hljs-built_in">print</span>(constants.mmHg)               <span class="hljs-comment"># 133.32236842105263</span><br><span class="hljs-built_in">print</span>(constants.psi)                <span class="hljs-comment"># 6894.757293168361</span><br><br><span class="hljs-built_in">print</span>(constants.hectare)            <span class="hljs-comment"># 10000.0，区域</span><br><span class="hljs-built_in">print</span>(constants.acre)               <span class="hljs-comment"># 4046.8564223999992</span><br><br><span class="hljs-built_in">print</span>(constants.liter)              <span class="hljs-comment"># 0.001，体积</span><br><span class="hljs-built_in">print</span>(constants.litre)              <span class="hljs-comment"># 0.001</span><br><span class="hljs-built_in">print</span>(constants.gallon)             <span class="hljs-comment"># 0.0037854117839999997</span><br><span class="hljs-built_in">print</span>(constants.gallon_US)          <span class="hljs-comment"># 0.0037854117839999997</span><br><span class="hljs-built_in">print</span>(constants.gallon_imp)         <span class="hljs-comment"># 0.00454609</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce)        <span class="hljs-comment"># 2.9573529562499998e-05</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce_US)     <span class="hljs-comment"># 2.9573529562499998e-05</span><br><span class="hljs-built_in">print</span>(constants.fluid_ounce_imp)    <span class="hljs-comment"># 2.84130625e-05</span><br><span class="hljs-built_in">print</span>(constants.barrel)             <span class="hljs-comment"># 0.15898729492799998</span><br><span class="hljs-built_in">print</span>(constants.bbl)                <span class="hljs-comment"># 0.15898729492799998</span><br><br><span class="hljs-built_in">print</span>(constants.kmh)                <span class="hljs-comment"># 0.2777777777777778，速度</span><br><span class="hljs-built_in">print</span>(constants.mph)                <span class="hljs-comment"># 0.44703999999999994</span><br><span class="hljs-built_in">print</span>(constants.mach)               <span class="hljs-comment"># 340.5</span><br><span class="hljs-built_in">print</span>(constants.speed_of_sound)     <span class="hljs-comment"># 340.5</span><br><span class="hljs-built_in">print</span>(constants.knot)               <span class="hljs-comment"># 0.5144444444444445</span><br><br><span class="hljs-built_in">print</span>(constants.zero_Celsius)       <span class="hljs-comment"># 273.15，温度</span><br><span class="hljs-built_in">print</span>(constants.degree_Fahrenheit)  <span class="hljs-comment"># 0.5555555555555556</span><br><br><span class="hljs-built_in">print</span>(constants.kibi)               <span class="hljs-comment"># 1024，二进制</span><br><span class="hljs-built_in">print</span>(constants.mebi)               <span class="hljs-comment"># 1048576</span><br><span class="hljs-built_in">print</span>(constants.gibi)               <span class="hljs-comment"># 1073741824</span><br><span class="hljs-built_in">print</span>(constants.tebi)               <span class="hljs-comment"># 1099511627776</span><br><span class="hljs-built_in">print</span>(constants.pebi)               <span class="hljs-comment"># 1125899906842624</span><br><span class="hljs-built_in">print</span>(constants.exbi)               <span class="hljs-comment"># 1152921504606846976</span><br><span class="hljs-built_in">print</span>(constants.zebi)               <span class="hljs-comment"># 1180591620717411303424</span><br><span class="hljs-built_in">print</span>(constants.yobi)               <span class="hljs-comment"># 1208925819614629174706176</span><br><br><span class="hljs-built_in">print</span>(constants.yotta)              <span class="hljs-comment"># 1e+24，公制</span><br><span class="hljs-built_in">print</span>(constants.zetta)              <span class="hljs-comment"># 1e+21</span><br><span class="hljs-built_in">print</span>(constants.exa)                <span class="hljs-comment"># 1e+18</span><br><span class="hljs-built_in">print</span>(constants.peta)               <span class="hljs-comment"># 1000000000000000.0</span><br><span class="hljs-built_in">print</span>(constants.tera)               <span class="hljs-comment"># 1000000000000.0</span><br><span class="hljs-built_in">print</span>(constants.giga)               <span class="hljs-comment"># 1000000000.0</span><br><span class="hljs-built_in">print</span>(constants.mega)               <span class="hljs-comment"># 1000000.0</span><br><span class="hljs-built_in">print</span>(constants.kilo)               <span class="hljs-comment"># 1000.0</span><br><span class="hljs-built_in">print</span>(constants.hecto)              <span class="hljs-comment"># 100.0</span><br><span class="hljs-built_in">print</span>(constants.deka)               <span class="hljs-comment"># 10.0</span><br><span class="hljs-built_in">print</span>(constants.deci)               <span class="hljs-comment"># 0.1</span><br><span class="hljs-built_in">print</span>(constants.centi)              <span class="hljs-comment"># 0.01</span><br><span class="hljs-built_in">print</span>(constants.milli)              <span class="hljs-comment"># 0.001</span><br><span class="hljs-built_in">print</span>(constants.micro)              <span class="hljs-comment"># 1e-06</span><br><span class="hljs-built_in">print</span>(constants.nano)               <span class="hljs-comment"># 1e-09</span><br><span class="hljs-built_in">print</span>(constants.pico)               <span class="hljs-comment"># 1e-12</span><br><span class="hljs-built_in">print</span>(constants.femto)              <span class="hljs-comment"># 1e-15</span><br><span class="hljs-built_in">print</span>(constants.atto)               <span class="hljs-comment"># 1e-18</span><br><span class="hljs-built_in">print</span>(constants.zepto)              <span class="hljs-comment"># 1e-21</span><br></code></pre></td></tr></table></figure><h1 id="3-优化器"><a href="#3-优化器" class="headerlink" title="3 优化器"></a>3 优化器</h1><ul><li>优化器<ul><li>在SciPy中定义的一组过程，找到函数的最小值，或找到方程的根。</li><li>NumPy能够为多项式和线性方程求根，但是不能为非线性方程求根。</li><li>例如：<code>x+cos(x)</code>，使用SciPy的optimize.root功能，接受两个必需的参数。<ul><li>x0，对根的初始猜测。</li><li>fun，表示方程的函数。</li></ul></li><li>optimze.root返回一个对象，其中包含有关解决方案的信息。</li><li>最小化函数<ul><li>非线性方程下一个函数代表一条曲线。</li><li>曲线有高点和低点，高点称为最大值，低点称为最小值。</li><li>整个曲线的最高点称为全局最大值，其余的称为局部最大值。</li><li>整个曲线的最低点称为全局最小值，其余的称为局部最小值。</li></ul></li><li>使用<code>scipy.optimize.minimize()</code>来最小化函数，接受以下参数。<ul><li>x0，对根的初始猜测。</li><li>fun，表示方程的函数。</li><li>options，定义额外参数的字典。</li><li>callback，每次优化迭代后调用的函数。</li><li>method，要使用的方法名称，<code>CG</code>、<code>BFGS</code>、<code>Newton-CG</code>、<code>L-BFGS-B</code>、<code>TNC</code>、<code>COBYLA</code>、<code>SLSQP</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> cos<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> root<br><span class="hljs-keyword">from</span> scipy.optimize <span class="hljs-keyword">import</span> minimize<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eqn</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + cos(x)<br>myroot = root(eqn, <span class="hljs-number">0</span>)               <span class="hljs-comment"># 求方程x + cos(x)的根</span><br><span class="hljs-built_in">print</span>(myroot)                       <span class="hljs-comment"># 打印有关解决方案的所有信息</span><br><span class="hljs-built_in">print</span>(myroot.x)                     <span class="hljs-comment"># 返回的对象包含有关解决方案的更多信息</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eqnr</span>(<span class="hljs-params">y</span>):<br>    <span class="hljs-keyword">return</span> y**<span class="hljs-number">2</span> + y + <span class="hljs-number">2</span><br>mymin = minimize(eqnr, <span class="hljs-number">0</span>, method=<span class="hljs-string">&#x27;BFGS&#x27;</span>)<br><span class="hljs-built_in">print</span>(mymin)                        <span class="hljs-comment"># 使用BFGS方法最小化y^2 + y + 2函数</span><br></code></pre></td></tr></table></figure><h1 id="4-稀疏数据"><a href="#4-稀疏数据" class="headerlink" title="4 稀疏数据"></a>4 稀疏数据</h1><ul><li>稀疏数据<ul><li>具有大部分未使用元素的数据，元素不携带任何信息。<ul><li>稀疏数据：是大多数项目值为0的数据集。</li><li>密集数组：与稀疏数组相反，大多数值不为0。</li></ul></li><li>科学计算中处理线性代数的偏导数时会遇到稀疏数据。</li><li>SciPy有一个scipy.sparse模块，用于处理稀疏数据，主要使用两种类型的稀疏矩阵。<ul><li>CSC：压缩稀疏列。</li><li>CSR：压缩稀疏行，通过将数组传递给<code>scipy.sparse.csr_matrix()</code>函数来创建。</li></ul></li><li>还可以使用data属性，用于查看存储的数据，<code>count_nonzero()</code>方法可以计算非零数。</li><li><code>eliminate_zeros()</code>方法从矩阵中删除零条目，<code>sum_duplicates()</code>方法消除重复条目。</li><li><code>tocsc()</code>方法从CSR类型转换为CSC类型，除此，稀疏矩阵还支持普通矩阵支持的所有操作。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix<br><br>arr1 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(csr_matrix(arr1))                       <span class="hljs-comment"># 从数组创建CSR矩阵</span><br><br>arr2 = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])<br><span class="hljs-built_in">print</span>(csr_matrix(arr2).data)                  <span class="hljs-comment"># 查看存储的数据，非零项</span><br><span class="hljs-built_in">print</span>(csr_matrix(arr2).count_nonzero())       <span class="hljs-comment"># 计算非零数</span><br><br>mat1 = csr_matrix(arr2)<br>mat1.eliminate_zeros()                        <span class="hljs-comment"># 删除零条目</span><br><span class="hljs-built_in">print</span>(mat1)<br><br>mat2 = csr_matrix(arr2)<br>mat2.sum_duplicates()                         <span class="hljs-comment"># 消除重复项</span><br><span class="hljs-built_in">print</span>(mat2)<br><br>arr3 = csr_matrix(arr2).tocsc()               <span class="hljs-comment"># 从CSR类型转换为CSC类型</span><br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure><h1 id="5-图表数据"><a href="#5-图表数据" class="headerlink" title="5 图表数据"></a>5 图表数据</h1><ul><li>图表数据<ul><li>使用scipy.sparse.csgraph模块处理图表数据结构。</li><li>邻接矩阵：Adjacency Matrix，表示顶点之间相邻关系的矩阵。<ul><li>通过<code>connected_components()</code>方法，查找所有连接的组件。</li><li>迪杰斯特拉：通过<code>dijkstra()</code>方法，在图中找到从一个元素到另一个元素的最短路径。<ul><li>limit：路径的最大权重。</li><li>indices：元素的索引，仅返回该元素的所有路径。</li><li>return_predecessors：布尔值，True返回整个遍历路径，否则为False。</li></ul></li><li>弗洛伊德·沃歇尔：<code>floyd_warshall()</code>方法找到所有元素对之间的最短路径。</li><li>贝尔曼福特：<code>bellman_ford()</code>方法找到所有元素对之间的最短路径，也可处理负权重。</li><li>深度一阶<ul><li><code>depth_first_order()</code>方法从节点返回深度优先遍历。</li><li>这一方法采用了两个参数，图表和遍历图的起始元素。</li></ul></li><li>广度优先顺序<ul><li><code>breadth_first_order()</code>方法从节点返回广度优先遍历。</li><li>这一方法采用了两个参数，即图表和遍历图的起始元素。</li></ul></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.sparse <span class="hljs-keyword">import</span> csr_matrix<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> dijkstra<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> bellman_ford<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> floyd_warshall<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> depth_first_order<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> breadth_first_order<br><span class="hljs-keyword">from</span> scipy.sparse.csgraph <span class="hljs-keyword">import</span> connected_components<br><br>arr1 = np.array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]])<br>arr2 = csr_matrix(arr1)<br><span class="hljs-built_in">print</span>(connected_components(arr2))             <span class="hljs-comment"># 查找所有连接的组件</span><br><br>arr3 = csr_matrix(arr1)                       <span class="hljs-comment"># 元素1到元素2的最短路径</span><br><span class="hljs-built_in">print</span>(dijkstra(arr3, return_predecessors=<span class="hljs-literal">True</span>, indices=<span class="hljs-number">0</span>))<br><br>arr4 = csr_matrix(arr1)                       <span class="hljs-comment"># 所有元素对之间的最短路径</span><br><span class="hljs-built_in">print</span>(floyd_warshall(arr4, return_predecessors=<span class="hljs-literal">True</span>))<br><br>arr5 = csr_matrix(arr1)                       <span class="hljs-comment"># 用给定的负权重找到元素1到元素2的最短路径</span><br><span class="hljs-built_in">print</span>(bellman_ford(arr5, return_predecessors=<span class="hljs-literal">True</span>, indices=<span class="hljs-number">0</span>))<br><br>arr6 = np.array([<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>], <br>    [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], <br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>])<br>arr7 = csr_matrix(arr6)<br><span class="hljs-built_in">print</span>(depth_first_order(arr7, <span class="hljs-number">1</span>))             <span class="hljs-comment"># 对于给定的邻接矩阵，首先遍历图深度</span><br><br>arr8 = csr_matrix(arr6)<br><span class="hljs-built_in">print</span>(breadth_first_order(arr8, <span class="hljs-number">1</span>))           <span class="hljs-comment"># 对于给定的邻接矩阵，首先遍历图宽度</span><br></code></pre></td></tr></table></figure><h1 id="6-空间数据"><a href="#6-空间数据" class="headerlink" title="6 空间数据"></a>6 空间数据</h1><ul><li>空间数据<ul><li>指在几何空间中表示的数据，例如坐标系上的点，SciPy提供了scipy.spatial模块。</li><li>三角测量：利用三角形计算多边形的面积，通过点生成三角部分的方法用<code>Delaunay()</code>。</li><li>凸包：覆盖了所有给定点的最小多边形，可以使用<code>ConvexHull()</code>方法进行凸包的创建。</li><li>KDTrees：指针对最近邻查询优化的数据结构，有效地询问了哪些点最接近某个给定点。<ul><li><code>KDTree()</code>：返回一个KDTree对象。</li><li><code>query()</code>：返回最近邻点的距离和邻点的位置。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> KDTree<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> Delaunay<br><span class="hljs-keyword">from</span> scipy.spatial <span class="hljs-keyword">import</span> ConvexHull<br><br>points1 = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>]])<br>simplices = Delaunay(points1).simplices                 <span class="hljs-comment"># simplices属性创建了三角形符号的一般化</span><br>plt.triplot(points1[:, <span class="hljs-number">0</span>], points1[:, <span class="hljs-number">1</span>], simplices)<br>plt.scatter(points1[:, <span class="hljs-number">0</span>], points1[:, <span class="hljs-number">1</span>], color=<span class="hljs-string">&#x27;r&#x27;</span>)<br>plt.show()                                              <span class="hljs-comment"># 为points1矩阵创建三角部分</span><br><br>points2 = np.array([[<span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">1</span>],<br>                    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>]])<br>hull = ConvexHull(points2)<br>hull_points = hull.simplices<br>plt.scatter(points2[ : , <span class="hljs-number">0</span>], points2[ : , <span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> simplex <span class="hljs-keyword">in</span> hull_points:<br>    plt.plot(points2[simplex,<span class="hljs-number">0</span>], points2[simplex,<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;k-&#x27;</span>)<br>plt.show()                                              <span class="hljs-comment"># 为points2矩阵创建凸包</span><br><br>points3 = [(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (-<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>)]<br>kdtree = KDTree(points3)<br>res = kdtree.query((<span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(res)                                              <span class="hljs-comment"># 找到点(1, 1)的最近邻点</span><br></code></pre></td></tr></table></figure><ul><li>距离矩阵<ul><li>两个向量之间的距离不仅可以是直线长度，还可以是它们与原点的夹角，或所需的单位步数等。</li><li>欧几里得距离：<code>euclidean()</code>。</li><li>余弦距离：是A和B两点之间的余弦角值，<code>cosine()</code>。</li><li>城市街区距离(曼哈顿距离)：采用四方向移动计算的距离，<code>cityblock()</code>。</li><li>汉明距离：两位不同的位比例，测量二进制序列距离的方法，<code>hamming()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cosine<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> hamming<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> euclidean<br><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> cityblock<br><br>p1 = (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>p2 = (<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>res1 = euclidean(p1, p2)<br><span class="hljs-built_in">print</span>(res1)                                     <span class="hljs-comment"># 给定点之间的欧几里得距离</span><br><br>res2 = cosine(p1, p2)<br><span class="hljs-built_in">print</span>(res2)                                     <span class="hljs-comment"># 给定点之间的余弦距离</span><br><br>res3 = cityblock(p1, p2)<br><span class="hljs-built_in">print</span>(res3)                                     <span class="hljs-comment"># 给定点之间的街区距离</span><br><br>p3 = (<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>)<br>p4 = (<span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">True</span>)<br>res4 = hamming(p3, p4)<br><span class="hljs-built_in">print</span>(res4)                                     <span class="hljs-comment"># 给定点之间的汉明距离</span><br></code></pre></td></tr></table></figure><h1 id="7-Matlab数组"><a href="#7-Matlab数组" class="headerlink" title="7 Matlab数组"></a>7 Matlab数组</h1><ul><li>Matlab数组<ul><li>SciPy提供了模块scipy.io，具有处理Matlab数组的功能。</li><li><code>savemat()</code>：以Matlab格式导出数据。<ul><li>mdict：包含数据的字典。</li><li>filename：保存数据的文件名。</li><li>do_compression：布尔值，指定是否压缩结果，默认为假。</li></ul></li><li><code>loadmat()</code>：从Matlab文件中导入数据，filename是必须参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy <span class="hljs-keyword">import</span> io<br><br>arr1 = np.arange(<span class="hljs-number">10</span>)<br>io.savemat(<span class="hljs-string">&#x27;arr1.mat&#x27;</span>, &#123;<span class="hljs-string">&quot;vec&quot;</span>: arr1&#125;)   <span class="hljs-comment"># 将arr1数组作为变量名vec导出到arr1.mat文件</span><br><br>arr2 = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>,])<br>io.savemat(<span class="hljs-string">&#x27;arr2.mat&#x27;</span>, &#123;<span class="hljs-string">&quot;vec&quot;</span>: arr2&#125;)   <span class="hljs-comment"># Export</span><br>mydata = io.loadmat(<span class="hljs-string">&#x27;arr2.mat&#x27;</span>)         <span class="hljs-comment"># Import</span><br><span class="hljs-built_in">print</span>(mydata)                           <span class="hljs-comment"># 从arr2.mat文件导入数组，返回一个结构化数组</span><br><span class="hljs-built_in">print</span>(mydata[<span class="hljs-string">&#x27;vec&#x27;</span>])                    <span class="hljs-comment"># 仅显示来自matlab数据的数组</span><br><br>mydata = io.loadmat(<span class="hljs-string">&#x27;arr2.mat&#x27;</span>, squeeze_me=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(mydata[<span class="hljs-string">&#x27;vec&#x27;</span>])                    <span class="hljs-comment"># 参数去除额外增加的一维[]</span><br></code></pre></td></tr></table></figure><h1 id="8-插值"><a href="#8-插值" class="headerlink" title="8 插值"></a>8 插值</h1><ul><li>插值<ul><li>在给定点之间生成点的方法，例如点1和2，插值并找到点1.33和1.66。</li><li>机器学习中经常处理数据集中的缺失数据，插值通常用于替换这些值。</li><li>SciPy的scipy.interpolate模块具有许多处理插值的函数。<ul><li>一维插值：<code>interp1d()</code>，用于对具有1个变量的分布进行插值，点被拟合为曲线。</li><li>样条插值：<code>UnivariateSpline()</code>，点被拟合为一个叫样条多项式定义的分段函数。</li><li>径向基函数插值：使用<code>Rbf()</code>函数，径向基函数是对应于固定参考点定义的函数。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> Rbf<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> interp1d<br><span class="hljs-keyword">from</span> scipy.interpolate <span class="hljs-keyword">import</span> UnivariateSpline<br><br>xs1 = np.arange(<span class="hljs-number">10</span>)<br>ys1 = <span class="hljs-number">2</span>*xs1 + <span class="hljs-number">1</span><br>interp_func = interp1d(xs1, ys1)<br>newarr1 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr1)                                  <span class="hljs-comment"># 对于给定的xs1和ys1插值从2.1、2.2...到2.9</span><br><br>xs2 = np.arange(<span class="hljs-number">10</span>)<br>ys2 = xs2**<span class="hljs-number">2</span> + np.sin(xs2) + <span class="hljs-number">1</span><br>interp_func = UnivariateSpline(xs2, ys2)<br>newarr2 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr2)                                  <span class="hljs-comment"># 为非线性点找到2.1、2.2...2.9的单变量样条插值</span><br><br>xs3 = np.arange(<span class="hljs-number">10</span>)<br>ys3 = xs3**<span class="hljs-number">2</span> + np.sin(xs3) + <span class="hljs-number">1</span><br>interp_func = Rbf(xs3, ys3)<br>newarr3 = interp_func(np.arange(<span class="hljs-number">2.1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0.1</span>))<br><span class="hljs-built_in">print</span>(newarr3)                                  <span class="hljs-comment"># 插入xs3和ys3并找到2.1、2.2...2.9的值</span><br></code></pre></td></tr></table></figure><h1 id="9-显著性测试"><a href="#9-显著性测试" class="headerlink" title="9 显著性测试"></a>9 显著性测试</h1><ul><li>显著性测试<ul><li>SciPy提供的scipy.stats模块，具有执行统计显著性检验的功能。</li><li>技术及关键字<ul><li>统计学假设：关于总体参数的假设。</li><li>零假设：假设观察结果在统计上不显著。</li><li>替代假设：假设观察结果是由于某种原因，零假设的替代品。</li><li>一尾测试：当假设仅测试值的一侧时，称为单尾检验。</li><li>二尾测试：当假设正在测试值的两侧时，称二尾测试。</li><li>阿尔法值：Alpha值是显著性水平。</li><li>P值：数据实际与极端的接近程度。</li><li>如果P值&lt;&#x3D;Alpha值，拒绝原假设并说数据具有统计显著性，否则接受原假设。</li></ul></li><li>T检验(双尾测试)<ul><li>用于确定两个变量的平均值之间是否存在显著差异，是否属于同一分布。</li><li><code>ttest_ind()</code>：采用两个相同大小的样本，生成一个t统计量和p值的元组。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> ttest_ind<br><br>v1 = np.random.normal(size=<span class="hljs-number">100</span>)<br>v2 = np.random.normal(size=<span class="hljs-number">100</span>)<br><br>res = ttest_ind(v1, v2)                         <span class="hljs-comment"># 查找给定值v1和v2是否来自同一分布</span><br>pes = ttest_ind(v1, v2).pvalue                  <span class="hljs-comment"># 只返回p值</span><br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(pes)<br></code></pre></td></tr></table></figure><h2 id="9-1-KS测试"><a href="#9-1-KS测试" class="headerlink" title="9-1 KS测试"></a>9-1 KS测试</h2><ul><li>KS测试<ul><li>用于检查给定值是否服从分布，可以用作一尾或二尾测试，默认情况下是两个尾的。</li><li><code>kstest()</code>将要测试的值和CDF作为两个参数，CDF可以是字符串或返回概率的可调用函数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> kstest<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br>res = kstest(v, <span class="hljs-string">&#x27;norm&#x27;</span>)                         <span class="hljs-comment"># 查找给定值是否服从正态分布</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="9-2-统计描述"><a href="#9-2-统计描述" class="headerlink" title="9-2 统计描述"></a>9-2 统计描述</h2><ul><li>统计描述<ul><li>使用<code>describe()</code>函数，查看数组中值的摘要。</li><li>返回参数：观察次数、最小值和最大值、平均值、方差、偏度、峰度。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> describe<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br>res = describe(v)                               <span class="hljs-comment"># 显示数组中值的统计描述</span><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="9-3-正态性检验"><a href="#9-3-正态性检验" class="headerlink" title="9-3 正态性检验"></a>9-3 正态性检验</h2><ul><li>正态性检验<ul><li>基于偏度和峰度，使用<code>normaltest()</code>函数返回原假设的p值。</li><li>偏度：数据对称性的度量，正态分布时是0，负数数据向左倾斜，正数数据向右倾斜。</li><li>峰度：衡量数据是重尾还是轻尾正态分布的度量，正峰度是重尾，负峰度则轻微拖尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> normaltest<br><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> skew, kurtosis<br><br>v = np.random.normal(size=<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(skew(v))                                  <span class="hljs-comment"># 偏度</span><br><span class="hljs-built_in">print</span>(kurtosis(v))                              <span class="hljs-comment"># 峰度</span><br><span class="hljs-built_in">print</span>(normaltest(v))                            <span class="hljs-comment"># 查找数据是否来自正态分布</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SciPy</tag>
      
      <tag>优化器</tag>
      
      <tag>数据统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Pandas</title>
    <link href="/2021/03/24/python/python07-python-pandas/"/>
    <url>/2021/03/24/python/python07-python-pandas/</url>
    
    <content type="html"><![CDATA[<p>Pandas既指Panel Data，又指Data Analysis，用于处理数据集，具有分析、清理、探索和操作数据的功能，由Wes McKinney于2008年创建。</p><span id="more"></span><h1 id="1-Pandas"><a href="#1-Pandas" class="headerlink" title="1 Pandas"></a>1 Pandas</h1><ul><li>Pandas<ul><li>命令窗口下使用<code>pip install pandas</code>进行安装。</li><li>通过import关键字将其导入应用程序，通常以pd别名替代。</li><li>检查Pandas版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd             <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>dataset = &#123;<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>],<br>    <span class="hljs-string">&quot;passings&quot;</span>: [<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>]<br>&#125;<br>var = pd.DataFrame(dataset)<br><span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-built_in">print</span>(pd.__version__)           <span class="hljs-comment"># 检查Pandas版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建系列"><a href="#2-创建系列" class="headerlink" title="2 创建系列"></a>2 创建系列</h1><ul><li>创建系列<ul><li>Pandas Series就像表格中的一列，是一个保存任何类型数据的一维数组。</li><li>若未指定其他内容，使用索引号标记值，第一个值索引为0，第二个为1，以此类推。</li><li>index参数创建自定义标签，创建系列时还可用键值对象，同理index参数指定标签。</li><li>Pandas中的数据集通常是多维表，即DataFrames，Series是列，DataFrame就是表。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-built_in">set</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>]<br>var = pd.Series(<span class="hljs-built_in">set</span>)<br><span class="hljs-built_in">print</span>(var)<br><span class="hljs-built_in">print</span>(var[<span class="hljs-number">0</span>])                   <span class="hljs-comment"># 返回Series的第一个值</span><br><br>var = pd.Series(<span class="hljs-built_in">set</span>, index = [<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;z&quot;</span>])<br><span class="hljs-built_in">print</span>(var)                      <span class="hljs-comment"># 创建自定义标签</span><br><span class="hljs-built_in">print</span>(var[<span class="hljs-string">&quot;y&quot;</span>])                 <span class="hljs-comment"># 返回标签为y的值</span><br><br>dic = &#123;<span class="hljs-string">&quot;day1&quot;</span>: <span class="hljs-number">420</span>, <span class="hljs-string">&quot;day2&quot;</span>: <span class="hljs-number">260</span>, <span class="hljs-string">&quot;day3&quot;</span>: <span class="hljs-number">300</span>&#125;<br>var = pd.Series(dic)            <span class="hljs-comment"># 从字典创建一个简单的Pandas系列</span><br><span class="hljs-built_in">print</span>(var)                      <span class="hljs-comment"># 字典的键成为标签</span><br>var = pd.Series(dic, index = [<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>])<br><span class="hljs-built_in">print</span>(var)<br><br>dat = &#123;<br>  <span class="hljs-string">&quot;cal&quot;</span>: [<span class="hljs-number">210</span>, <span class="hljs-number">260</span>, <span class="hljs-number">300</span>],<br>  <span class="hljs-string">&quot;dur&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>]<br>&#125;<br>var = pd.DataFrame(dat)         <span class="hljs-comment"># 从两个系列创建一个数据框DataFrame</span><br><span class="hljs-built_in">print</span>(var)<br></code></pre></td></tr></table></figure><h1 id="3-DataFrame"><a href="#3-DataFrame" class="headerlink" title="3 DataFrame"></a>3 DataFrame</h1><ul><li>DataFrame<ul><li>一种二维数据结构，例如二维数组或具有行和列的表。</li><li>使用loc属性返回一个或多个指定行，index参数自定义索引。</li><li>如果数据集存储在文件中，Pandas可将其加载到DataFrame中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>dat = &#123;<br>  <span class="hljs-string">&quot;cal&quot;</span>: [<span class="hljs-number">210</span>, <span class="hljs-number">260</span>, <span class="hljs-number">300</span>],<br>  <span class="hljs-string">&quot;dur&quot;</span>: [<span class="hljs-number">50</span>, <span class="hljs-number">30</span>, <span class="hljs-number">10</span>]<br>&#125;<br>var = pd.DataFrame(dat)         <span class="hljs-comment"># 从两个系列创建一个数据框DataFrame</span><br><span class="hljs-built_in">print</span>(var)<br><br><span class="hljs-built_in">print</span>(var.loc[<span class="hljs-number">0</span>])               <span class="hljs-comment"># 返回第0行，返回Pandas Series</span><br><span class="hljs-built_in">print</span>(var.loc[[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])          <span class="hljs-comment"># 返回第0行和第1行，返回Pandas DataFrame</span><br><br>var = pd.DataFrame(dat, index = [<span class="hljs-string">&quot;day1&quot;</span>, <span class="hljs-string">&quot;day2&quot;</span>, <span class="hljs-string">&quot;day3&quot;</span>])<br><span class="hljs-built_in">print</span>(var)                      <span class="hljs-comment"># 添加名称列表给每行命令</span><br><span class="hljs-built_in">print</span>(var.loc[<span class="hljs-string">&quot;day2&quot;</span>])          <span class="hljs-comment"># 索引返回指定的行</span><br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">  Language  Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">      Java     120</span><br><span class="hljs-string">    Golang     112</span><br><span class="hljs-string">       C++     155</span><br><span class="hljs-string">        C#     110</span><br><span class="hljs-string">         C      78</span><br><span class="hljs-string">JavaScript      99</span><br><span class="hljs-string">      HTML      35</span><br><span class="hljs-string">       CSS      45</span><br><span class="hljs-string">       PHP      75</span><br><span class="hljs-string">     React      15</span><br><span class="hljs-string">         R      25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)   <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h2 id="3-1-读取CSV"><a href="#3-1-读取CSV" class="headerlink" title="3-1 读取CSV"></a>3-1 读取CSV</h2><ul><li>读取CSV<ul><li><code>to_string()</code>：用于打印整个DataFrame。</li><li>若包含多行的大型DataFrame，Pandas将只返回前5行和最后5行。</li><li>可以使用<code>pd.options.display.max_rows</code>语句检查系统的最大行数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">  Language  Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">      Java     120</span><br><span class="hljs-string">    Golang     112</span><br><span class="hljs-string">       C++     155</span><br><span class="hljs-string">        C#     110</span><br><span class="hljs-string">         C      78</span><br><span class="hljs-string">JavaScript      99</span><br><span class="hljs-string">      HTML      35</span><br><span class="hljs-string">       CSS      45</span><br><span class="hljs-string">       PHP      75</span><br><span class="hljs-string">     React      15</span><br><span class="hljs-string">         R      25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)       <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><span class="hljs-built_in">print</span>(pd.options.display.max_rows)  <span class="hljs-comment"># 检查返回的最大行数</span><br><br>pd.options.display.max_rows = <span class="hljs-number">5</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)       <span class="hljs-comment"># 更改最大行数，只显示五行</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h2 id="3-2-读取JSON"><a href="#3-2-读取JSON" class="headerlink" title="3-2 读取JSON"></a>3-2 读取JSON</h2><ul><li>读取JSON<ul><li><code>to_string()</code>：用于打印整个DataFrame，JSON对象具有与字典相同的格式。</li><li>若JSON代码不在文件中，而在Python字典里，则可直接将其加载到DataFrame中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">    &quot;Duration&quot;: &#123; &quot;0&quot;: 60, &quot;1&quot;: 60, &quot;2&quot;: 60, &quot;3&quot;: 45, &quot;4&quot;: 45, &quot;5&quot;: 60 &#125;,</span><br><span class="hljs-string">    &quot;Pulse&quot;: &#123; &quot;0&quot;: 110, &quot;1&quot;: 117, &quot;2&quot;: 103, &quot;3&quot;: 109, &quot;4&quot;: 117, &quot;5&quot;: 102 &#125;,</span><br><span class="hljs-string">    &quot;Maxpulse&quot;: &#123; &quot;0&quot;: 130, &quot;1&quot;: 145, &quot;2&quot;: 135, &quot;3&quot;: 175, &quot;4&quot;: 148, &quot;5&quot;: 127 &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_json(<span class="hljs-string">r&quot;data.json&quot;</span>)   <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>data = &#123;<br><span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">71</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">73</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">75</span>&#125;, <br><span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">35</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">37</span>&#125;, <br><span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">55</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">57</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">59</span>&#125;<br>&#125;<br>df = pd.DataFrame(data)           <span class="hljs-comment"># Python字典加载到DataFrame中</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><h1 id="4-分析数据"><a href="#4-分析数据" class="headerlink" title="4 分析数据"></a>4 分析数据</h1><ul><li>分析数据<ul><li><code>head()</code>：从顶部开始返回标题和指定数量的行，不指定行数时默认返回前5行。</li><li><code>tail()</code>：从底部开始返回标题和指定数量的行，不指定行数时默认返回后5行。</li><li><code>info()</code>：打印有关数据的信息，返回RangeIndex行数和Columns列数、每列名称和数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; data.csv</span><br><span class="hljs-string">  Language  Number</span><br><span class="hljs-string">    Python      50</span><br><span class="hljs-string">      Java     120</span><br><span class="hljs-string">    Golang     112</span><br><span class="hljs-string">       C++     155</span><br><span class="hljs-string">        C#     110</span><br><span class="hljs-string">         C      78</span><br><span class="hljs-string">JavaScript      99</span><br><span class="hljs-string">      HTML      35</span><br><span class="hljs-string">       CSS      45</span><br><span class="hljs-string">       PHP      75</span><br><span class="hljs-string">     React      15</span><br><span class="hljs-string">         R      25</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;data.csv&quot;</span>)   <span class="hljs-comment"># 文件数据集加载到DataFrame中，注意文件路径</span><br><span class="hljs-built_in">print</span>(df.head())                <span class="hljs-comment"># 打印前5行</span><br><span class="hljs-built_in">print</span>(df.head(<span class="hljs-number">3</span>))               <span class="hljs-comment"># 打印前3行</span><br><br><span class="hljs-built_in">print</span>(df.tail())                <span class="hljs-comment"># 打印后5行</span><br><span class="hljs-built_in">print</span>(df.tail(<span class="hljs-number">3</span>))               <span class="hljs-comment"># 打印后3行</span><br><br><span class="hljs-built_in">print</span>(df.info())                <span class="hljs-comment"># 打印有关数据的信息</span><br></code></pre></td></tr></table></figure><h1 id="5-清理数据"><a href="#5-清理数据" class="headerlink" title="5 清理数据"></a>5 清理数据</h1><ul><li>清理数据<ul><li>清理意味着修复数据集中的不良数据，可能是空单元格、数据格式错误、错误数据或重复数据。</li><li><code>dropna()</code>：删除包含空单元格的行，返回新DataFrame且不改变原来的，inplace参数可以改变。</li><li><code>fillna()</code>：允许用一个值替换空单元格，通过指定DataFrame的列名，可以替换指定列的空值。</li><li>平均值<code>mean()</code>、中位数<code>median()</code>和众数<code>mode()</code>方法计算指定列的相应值，用于替换空单元格。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data1 = data2 = data3 = data4 = data5 = data6 = &#123;<br><span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">60</span>&#125;, <br><span class="hljs-string">&quot;Date&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-string">&quot;2020/12/21&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>: np.NaN, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;2020/12/18&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;2020/12/28&quot;</span>&#125;,  <br><span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">108</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">90</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">103</span>&#125;, <br><span class="hljs-string">&quot;Maxpulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">131</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">112</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">132</span>&#125;,  <br><span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">364.2</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">282.0</span>, <span class="hljs-string">&quot;2&quot;</span>: np.NaN, <span class="hljs-string">&quot;3&quot;</span>: np.NaN&#125;<br>&#125;<br>df = pd.DataFrame(data1)            <span class="hljs-comment"># Python字典加载到DataFrame中</span><br>new_df = df.dropna()                <span class="hljs-comment"># 返回没有空单元格的DataFrame</span><br><span class="hljs-built_in">print</span>(new_df.to_string())<br><br><span class="hljs-built_in">print</span>(df.to_string())<br>df.dropna(inplace = <span class="hljs-literal">True</span>)           <span class="hljs-comment"># 改变原始DataFrame</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data2)<br>df.fillna(<span class="hljs-number">120</span>, inplace = <span class="hljs-literal">True</span>)      <span class="hljs-comment"># 数字120替换NULL值</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data3)<br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(<span class="hljs-number">150</span>, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 替换指定列的NULL值</span><br><br>df = pd.DataFrame(data4)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].mean()          <span class="hljs-comment"># 计算平均值，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data5)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].median()        <span class="hljs-comment"># 计算中位数，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.DataFrame(data6)<br>dx = df[<span class="hljs-string">&quot;Calories&quot;</span>].mode()[<span class="hljs-number">0</span>]       <span class="hljs-comment"># 计算众数，并替换空值</span><br>df[<span class="hljs-string">&quot;Calories&quot;</span>].fillna(dx, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><ul><li>错误格式<ul><li>删除相应行，或将列中的所有单元格转换为相同格式。</li><li><code>to_datetime()</code>：将列中的日期元素转换为日期格式。</li><li><code>dropna()</code>：NaT值即空日期，可将其处理为NULL值，删除对应行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>data1 = data2 = &#123;<br><span class="hljs-string">&quot;Duration&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">45</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">60</span>&#125;, <br><span class="hljs-string">&quot;Date&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: np.NaN, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;2020/12/23&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;2020/12/24&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">20201226</span>&#125;,  <br><span class="hljs-string">&quot;Pulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">130</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">105</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">100</span>&#125;, <br><span class="hljs-string">&quot;Maxpulse&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">119</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">132</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">120</span>&#125;,  <br><span class="hljs-string">&quot;Calories&quot;</span>: &#123;<span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">282.0</span>, <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-number">300.0</span>, <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-number">246.0</span>, <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-number">250.0</span>&#125;<br>&#125;<br>df = pd.DataFrame(data1)            <span class="hljs-comment"># Python字典加载到DataFrame中</span><br>df[<span class="hljs-string">&quot;Date&quot;</span>] = pd.to_datetime(df[<span class="hljs-string">&quot;Date&quot;</span>])<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 转换为日期</span><br><br>df = pd.DataFrame(data2)<br>df.dropna(subset=[<span class="hljs-string">&quot;Date&quot;</span>], inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())               <span class="hljs-comment"># 删除日期为NULL值的行</span><br></code></pre></td></tr></table></figure><ul><li>错误数据<ul><li>错误数据不一定是空单元格或错误格式，也可能只是错误的。</li><li>错误数据可能是拼写错误，可以在对应行插入数据进行替换。</li><li>另一种处理方法就是使用<code>drop()</code>方法删除包含错误数据的行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; errorData.csv</span><br><span class="hljs-string">Duration          Date  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      60    2020/12/01    110       130     409.1</span><br><span class="hljs-string">      60    2020/12/02    117       145     479.0</span><br><span class="hljs-string">     600    2020/12/03    103       135     340.0</span><br><span class="hljs-string">      45    2020/12/04    109       175     282.4</span><br><span class="hljs-string">     450    2020/12/05    117       148     406.0</span><br><span class="hljs-string">      60    2020/12/06    102       127     300.0</span><br><span class="hljs-string">      60    2020/12/07    110       136     374.0</span><br><span class="hljs-string">      30    2020/12/09    109       133     195.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">&quot;errorData.csv&quot;</span>)<br>df.loc[<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Duration&quot;</span>] = <span class="hljs-number">50</span>          <span class="hljs-comment"># 第2行Duration设置为50</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.read_csv(<span class="hljs-string">&quot;errorData.csv&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.index:                  <span class="hljs-comment"># 若是大数据集替换，可创建一些规则</span><br>    <span class="hljs-keyword">if</span> df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] &gt; <span class="hljs-number">100</span>:<br>        df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(df.to_string())<br><br>df = pd.read_csv(<span class="hljs-string">&quot;errorData.csv&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> df.index:                  <span class="hljs-comment"># 创建规则，删除行</span><br>    <span class="hljs-keyword">if</span> df.loc[x, <span class="hljs-string">&quot;Duration&quot;</span>] &gt; <span class="hljs-number">50</span>:<br>        df.drop(x, inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><ul><li>重复数据<ul><li><code>duplicated()</code>：为每一行返回一个布尔值，重复返回True，否则为False。</li><li><code>drop_duplicates()</code>：删除重复项，inplace参数会从原始DataFrame中删除。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; repetData.csv</span><br><span class="hljs-string">Duration          Date  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      65    2020/12/01    110       130     409.1</span><br><span class="hljs-string">      60    2020/12/02    117       145     479.0</span><br><span class="hljs-string">      60    2020/12/02    117       145     479.0</span><br><span class="hljs-string">      45    2020/12/04    109       175     282.4</span><br><span class="hljs-string">      45    2020/12/05    117       148     406.0</span><br><span class="hljs-string">      60    2020/12/06    102       127     300.0</span><br><span class="hljs-string">      60    2020/12/07    110       136     374.0</span><br><span class="hljs-string">      30    2020/12/09    109       133     195.1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;repetData.csv&quot;</span>)  <span class="hljs-comment"># 重复的行将返回True，否则为False</span><br><span class="hljs-built_in">print</span>(df.duplicated())<br><br>df.drop_duplicates(inplace = <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br></code></pre></td></tr></table></figure><h1 id="6-数据相关性"><a href="#6-数据相关性" class="headerlink" title="6 数据相关性"></a>6 数据相关性</h1><ul><li>数据相关性<ul><li><code>corr()</code>：计算数据集中每一列之间的关系，该方法忽略非数字列。</li><li>返回的结果是一个包含大量数字的表格，这些数字表示两列之间的关系。</li><li>数字从-1到1不等。<ul><li>1表示完全相关，数据集中，每次第一列中的值上升，另一个值也会上升。</li><li>0.9表示良好相关，增加一个值，另一个可能也增加。</li><li>-0.9也是良好相关，增加一个值，另一个可能会下降。</li><li>0.2表示不良相关，意味着如果一个值上升，另一个值不一定上升。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-string">&quot;&quot;&quot; relatData.csv</span><br><span class="hljs-string">Duration  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      60    110       130     409.1</span><br><span class="hljs-string">      60    117       145     479.0</span><br><span class="hljs-string">      60    103       135     340.0</span><br><span class="hljs-string">      45    109       175     282.4</span><br><span class="hljs-string">      45    117       148     406.0</span><br><span class="hljs-string">      60    102       127     300.0</span><br><span class="hljs-string">      60    110       136     374.0</span><br><span class="hljs-string">      45    104       134     253.3</span><br><span class="hljs-string">      30    109       133     195.1</span><br><span class="hljs-string">      60     98       124     269.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;relatData.csv&quot;</span>)<br><span class="hljs-built_in">print</span>(df.to_string())<br><span class="hljs-built_in">print</span>(df.corr())                    <span class="hljs-comment"># 显示列之间的关系</span><br></code></pre></td></tr></table></figure><h1 id="7-可视化图表"><a href="#7-可视化图表" class="headerlink" title="7 可视化图表"></a>7 可视化图表</h1><ul><li>可视化图表<ul><li><code>plot()</code>方法创建图表，也可以使用Matplotlib库的子模块Pyplot创建。</li><li>直方图：指定参数<code>kind=&quot;hist&quot;</code>，并且只需要一列。</li><li>散点图：指定参数<code>kind=&quot;scatter&quot;</code>，并且需要x轴和y轴。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt     <span class="hljs-comment"># 从Matplotlib导入pyplot</span><br><br><span class="hljs-string">&quot;&quot;&quot; relatData.csv</span><br><span class="hljs-string">Duration  Pulse  Maxpulse  Calories</span><br><span class="hljs-string">      60    110       130     409.1</span><br><span class="hljs-string">      60    117       145     479.0</span><br><span class="hljs-string">      60    103       135     340.0</span><br><span class="hljs-string">      45    109       175     282.4</span><br><span class="hljs-string">      45    117       148     406.0</span><br><span class="hljs-string">      60    102       127     300.0</span><br><span class="hljs-string">      60    110       136     374.0</span><br><span class="hljs-string">      45    104       134     253.3</span><br><span class="hljs-string">      30    109       133     195.1</span><br><span class="hljs-string">      60     98       124     269.0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>df = pd.read_csv(<span class="hljs-string">r&quot;relatData.csv&quot;</span>)<br>df.plot()<br>plt.show()<br><br>df[<span class="hljs-string">&quot;Duration&quot;</span>].plot(kind = <span class="hljs-string">&quot;hist&quot;</span>)<br>plt.show()                          <span class="hljs-comment"># 直方图</span><br><br>df.plot(kind = <span class="hljs-string">&quot;scatter&quot;</span>, x = <span class="hljs-string">&quot;Duration&quot;</span>, y = <span class="hljs-string">&quot;Calories&quot;</span>)<br>plt.show()                          <span class="hljs-comment"># 散点图</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pandas</tag>
      
      <tag>系列</tag>
      
      <tag>数据分析</tag>
      
      <tag>可视化图表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 函数</title>
    <link href="/2021/03/05/python/python06-python-numpy-han-shu/"/>
    <url>/2021/03/05/python/python06-python-numpy-han-shu/</url>
    
    <content type="html"><![CDATA[<p>NumPy数组存储在内存中的一个连续位置，因此进程可以非常有效地访问和操作，此行为在计算机科学中被称为局部性。</p><span id="more"></span><h1 id="1-Ufunc"><a href="#1-Ufunc" class="headerlink" title="1 Ufunc"></a>1 Ufunc</h1><ul><li>Ufunc<ul><li>即通用函数，指对ndarray对象进行操作的NumPy函数，用于实现矢量化。</li><li>ufunc提供了广播和其他方法，对计算非常有帮助，也提供了额外的参数。<ul><li>out：复制返回值的输出数组。</li><li>dtype：定义元素的返回类型。</li><li>where：布尔数组或条件定义操作应在哪里发生。</li></ul></li><li>矢量化：将迭代语句转换为基于向量的操作，现代CPU优化了此类操作，速度更快。</li><li>例如：添加两个列表<code>[1、2、3、4]</code>和<code>[4、5、6、7]</code>的元素。<ul><li>方法一：先遍历两个列表，然后对列表的每个元素求和。</li><li>方法二：ufunc提供<code>add(x, y)</code>函数，会产生相同的结果。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>y = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>z = []<br><span class="hljs-keyword">for</span> i, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, y):          <span class="hljs-comment"># 使用Python的内置zip()</span><br>    z.append(i + j)<br><span class="hljs-built_in">print</span>(z)<br><br>k = np.add(x, y)                <span class="hljs-comment"># 使用ufunc的add()函数</span><br><span class="hljs-built_in">print</span>(k)<br></code></pre></td></tr></table></figure><ul><li>创建Ufunc<ul><li>创建ufunc，必须定义一个函数，类似Python中使用普通函数。</li><li>使用<code>frompyfunc()</code>将其添加到NumPy ufunc库中，有以下参数。<ul><li>function：函数名称。</li><li>inputs：输入参数(数组)的数量。</li><li>outputs：输出参数(数组)的数量。</li></ul></li><li>检查是否为ufunc函数，应该返回<code>&lt;class &#39;numpy.ufunc&#39;&gt;</code>。</li><li>if语句中测试函数是否为ufunc，需要使用<code>numpy.ufunc</code>值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myadd</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x+y<br>myadd = np.frompyfunc(myadd, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)          <span class="hljs-comment"># 创建ufunc函数</span><br><span class="hljs-built_in">print</span>(myadd([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myadd))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.add))                         <span class="hljs-comment"># 检查函数是否为ufunc</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(np.concatenate))<br><span class="hljs-comment"># print(type(np.blahblah))                  # 函数无法识别，返回错误</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(np.add) == np.ufunc:                <span class="hljs-comment"># numpy.ufunc</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Add is ufunc.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Add is not ufunc.&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="2-简单算术"><a href="#2-简单算术" class="headerlink" title="2 简单算术"></a>2 简单算术</h1><ul><li>简单算术<ul><li>加：<code>add()</code>函数将两个数组的内容相加，并在一个新数组中返回结果。</li><li>减：<code>subtract()</code>函数将两个数组的内容相减，并在一个新数组中返回结果。</li><li>乘：<code>multiply()</code>函数将两个数组的内容相乘，并在一个新数组中返回结果。</li><li>除：<code>divide()</code>函数将两个数组的内容相除，并且在一个新数组中返回结果。</li><li>幂：<code>power()</code>函数将一个数组的值乘以另一个数组值的幂并在新数组中返回结果。</li><li>余：<code>mod()</code>和<code>remainder()</code>函数都会在一个新数组中返回两个数组值相除的余数。</li><li>商和模：<code>divmod()</code>函数，返回值是两个数组，第一个数组包含商，第二个数组包含模。</li><li>绝对值：<code>absolute()</code>和<code>abs()</code>函数，尽量使用<code>absolute()</code>，避免与<code>math.abs()</code>混淆。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>])<br>arr2 = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>])<br>arr3 = np.add(arr1, arr2)                   <span class="hljs-comment"># 将arr1的值添加到arr2中</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.subtract(arr1, arr2)              <span class="hljs-comment"># 将arr1的值减去arr2的值</span><br><span class="hljs-built_in">print</span>(arr4)<br>arr4 = np.absolute(arr4)                    <span class="hljs-comment"># 返回arr4值的绝对值</span><br><span class="hljs-built_in">print</span>(arr4)<br><br>arr5 = np.divide(arr1, arr2)                <span class="hljs-comment"># 将arr1的值除以arr2的值</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>arr6 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br>arr7 = np.power(arr1, arr6)                 <span class="hljs-comment"># 将arr1的值提高到arr6值的幂</span><br><span class="hljs-built_in">print</span>(arr7)<br><br>arr8 = np.mod(arr1, arr6)                   <span class="hljs-comment"># 返回arr1除以arr6值的余数</span><br><span class="hljs-built_in">print</span>(arr8)<br>arr8 = np.remainder(arr1, arr6)<br><span class="hljs-built_in">print</span>(arr8)<br><br>arr9 = np.<span class="hljs-built_in">divmod</span>(arr1, arr6)                <span class="hljs-comment"># 返回arr1除以arr6的商和模</span><br><span class="hljs-built_in">print</span>(arr9)<br></code></pre></td></tr></table></figure><h2 id="2-1-四舍五入"><a href="#2-1-四舍五入" class="headerlink" title="2-1 四舍五入"></a>2-1 四舍五入</h2><ul><li>四舍五入<ul><li>NumPy中主要有如下五种对小数进行四舍五入的方法。</li><li>通过<code>around()</code>函数将元素四舍五入到小数点后指定位。</li><li><code>trunc()</code>和<code>fix()</code>函数删除小数并返回最接近零的浮点数。</li><li>使用<code>ceil()</code>函数将小数四舍五入到最接近的较高整数(向上取整)。</li><li>使用<code>floor()</code>函数将小数四舍五入到最接近的较低整数(向下取整)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.around(<span class="hljs-number">3.1666</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(arr1)                     <span class="hljs-comment"># 将3.1666四舍五入到小数点后2位</span><br><br>arr2 = np.trunc([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr2)                     <span class="hljs-comment"># 截断数组元素</span><br><br>arr3 = np.fix([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.ceil([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr4)                     <span class="hljs-comment"># 向上取整</span><br><br>arr5 = np.floor([-<span class="hljs-number">3.1666</span>, <span class="hljs-number">3.6667</span>])<br><span class="hljs-built_in">print</span>(arr5)                     <span class="hljs-comment"># 返回一个浮点数，向下取整，与trunc()函数返回的不同</span><br></code></pre></td></tr></table></figure><h2 id="2-2-对数函数"><a href="#2-2-对数函数" class="headerlink" title="2-2 对数函数"></a>2-2 对数函数</h2><ul><li>对数函数<ul><li>NumPy提供了以e、2和10为底的log函数，不提供指定底数的log函数。</li><li>如果无法计算log函数，那么所有的log函数都将在元素中放置-inf或inf。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><br>arr = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)          <span class="hljs-comment"># 返回一个从1-10的整数数组</span><br><span class="hljs-built_in">print</span>(np.log(arr))              <span class="hljs-comment"># 自然对数</span><br><span class="hljs-built_in">print</span>(np.log2(arr))<br><span class="hljs-built_in">print</span>(np.log10(arr))<br><br>nplog = np.frompyfunc(log, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(nplog(<span class="hljs-number">100</span>, <span class="hljs-number">15</span>))           <span class="hljs-comment"># 指定底数为15的log函数</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数组求和"><a href="#2-3-数组求和" class="headerlink" title="2-3 数组求和"></a>2-3 数组求和</h2><ul><li>数组求和<ul><li>加法是两个参数之间完成的，而求和则是在n个元素之间进行的。</li><li>轴上求和：指定<code>axis=1</code>，NumPy将对每个数组中的数字进行求和。</li><li>部分求和：使用<code>cumsum()</code>函数，例如<code>[1, 2, 3]</code>部分求和为<code>[1, 1+2, 1+2+3]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr3 = np.add(arr1, arr2)       <span class="hljs-comment"># 将arr1的值添加到arr2的值，加法</span><br><span class="hljs-built_in">print</span>(arr3)<br>arr3 = np.<span class="hljs-built_in">sum</span>([arr1, arr2])     <span class="hljs-comment"># 将arr1的值与arr2的值相加，求和</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.<span class="hljs-built_in">sum</span>([arr1, arr2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr4)                     <span class="hljs-comment"># 在arr1的轴上求和</span><br><br>arr5 = np.cumsum(arr1)          <span class="hljs-comment"># 累计求和(部分求和)</span><br><span class="hljs-built_in">print</span>(arr5)<br></code></pre></td></tr></table></figure><h2 id="2-4-数组乘积"><a href="#2-4-数组乘积" class="headerlink" title="2-4 数组乘积"></a>2-4 数组乘积</h2><ul><li>数组乘积<ul><li>查找数组中元素的乘积，可以使用<code>prod()</code>函数。</li><li>轴上乘积：指定<code>axis=1</code>，NumPy将返回每个数组的乘积。</li><li>部分乘积：使用<code>cumprod()</code>函数，例如<code>[1, 2, 3]</code>部分乘积为<code>[1, 1*2, 1*2*3]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>arr2 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br>arr3 = np.prod(arr1)            <span class="hljs-comment"># arr1数组元素的乘积，1*2*3*4</span><br><span class="hljs-built_in">print</span>(arr3)<br>arr3 = np.prod([arr1, arr2])    <span class="hljs-comment"># arr1和arr2元素的乘积，1*2*3*4*5*6*7*8</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.prod([arr1, arr2], axis=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(arr4)                     <span class="hljs-comment"># 在arr1的轴上乘积</span><br><br>arr5 = np.cumprod(arr2)         <span class="hljs-comment"># 累计乘积(部分乘积)</span><br><span class="hljs-built_in">print</span>(arr5)<br></code></pre></td></tr></table></figure><h2 id="2-5-数组差集"><a href="#2-5-数组差集" class="headerlink" title="2-5 数组差集"></a>2-5 数组差集</h2><ul><li>数组差集<ul><li>使用<code>diff()</code>函数，例如<code>[1, 2, 3]</code>差集是<code>[2-1, 3-2]</code>。</li><li>通过给定参数n重复执行操作，例如n&#x3D;2，<code>[1, 2, 3]</code>差集再差集是<code>[1-1]</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">25</span>, <span class="hljs-number">5</span>])<br>arr2 = np.diff(arr1)            <span class="hljs-comment"># arr1数组元素的差集，[15-10, 25-15, 5-25]</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.diff(arr1, n=<span class="hljs-number">2</span>)       <span class="hljs-comment"># arr1数组元素的差集再差集，[10-5, -20-10]</span><br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure><h1 id="3-三角函数"><a href="#3-三角函数" class="headerlink" title="3 三角函数"></a>3 三角函数</h1><ul><li>三角函数<ul><li>NumPy提供正弦函数<code>sin()</code>、余弦函数<code>cos()</code>和正切函数<code>tan()</code>。</li><li>三角函数默认将弧度作为参数<ul><li>通过<code>deg2rad()</code>函数，可以将数组中的所有值转换为弧度。</li><li>使用<code>rad2deg()</code>函数，可以将数组中的所有值转换为度数。</li></ul></li><li>还提供了反正弦<code>arcsin()</code>、反余弦<code>arccos()</code>和反正切<code>arctan()</code>，生成弧度值(角度)。</li><li>NumPy提供<code>hypot()</code>函数，基于毕达哥拉斯定理(即勾股定理)获取基值和垂直值并产生斜边。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.sin(np.pi/<span class="hljs-number">2</span>)             <span class="hljs-comment"># PI/2的正弦值</span><br><span class="hljs-built_in">print</span>(x)<br>arr1 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi/<span class="hljs-number">3</span>, np.pi/<span class="hljs-number">4</span>, np.pi/<span class="hljs-number">5</span>])<br>arr2 = np.sin(arr1)             <span class="hljs-comment"># 数组arr1所有值的正弦值</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.array([<span class="hljs-number">90</span>, <span class="hljs-number">180</span>, <span class="hljs-number">270</span>, <span class="hljs-number">360</span>])<br>arr4 = np.deg2rad(arr3)         <span class="hljs-comment"># 将数组arr3所有值转换为弧度</span><br><span class="hljs-built_in">print</span>(arr4)<br>arr5 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi, <span class="hljs-number">1.5</span>*np.pi, <span class="hljs-number">2</span>*np.pi])<br>arr6 = np.rad2deg(arr5)         <span class="hljs-comment"># 将数组arr5所有值转换为度数</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>y = np.arcsin(<span class="hljs-number">1.0</span>)              <span class="hljs-comment"># 1.0的角度</span><br><span class="hljs-built_in">print</span>(y)<br>arr7 = np.array([<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>])<br>arr8 = np.arcsin(arr7)          <span class="hljs-comment"># 数组arr7中所有正弦值的角度</span><br><span class="hljs-built_in">print</span>(arr8)<br><br>base = <span class="hljs-number">3</span><br>perp = <span class="hljs-number">4</span><br>z = np.hypot(base, perp)        <span class="hljs-comment"># 勾股定理求斜边</span><br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h1 id="4-双曲函数"><a href="#4-双曲函数" class="headerlink" title="4 双曲函数"></a>4 双曲函数</h1><ul><li>双曲函数<ul><li>NumPy提供双曲正弦函数<code>sinh()</code>、双曲余弦函数<code>cosh()</code>和双曲正切函数<code>tanh()</code>。</li><li>还提供了反双曲正弦<code>arcsinh()</code>、反双曲余弦<code>arccosh()</code>和反双曲正切<code>arctanh()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>x = np.sinh(np.pi/<span class="hljs-number">2</span>)            <span class="hljs-comment"># PI/2的双曲正弦值</span><br><span class="hljs-built_in">print</span>(x)<br>arr1 = np.array([np.pi/<span class="hljs-number">2</span>, np.pi/<span class="hljs-number">3</span>, np.pi/<span class="hljs-number">4</span>, np.pi/<span class="hljs-number">5</span>])<br>arr2 = np.cosh(arr1)            <span class="hljs-comment"># 数组arr1所有值的双曲余弦值</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>y = np.arcsinh(<span class="hljs-number">1.0</span>)             <span class="hljs-comment"># 1.0的角度</span><br><span class="hljs-built_in">print</span>(y)<br>arr3 = np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>])<br>arr4 = np.arctanh(arr3)         <span class="hljs-comment"># 数组arr3所有tanh值的角度</span><br><span class="hljs-built_in">print</span>(arr4)<br></code></pre></td></tr></table></figure><h1 id="5-集合操作"><a href="#5-集合操作" class="headerlink" title="5 集合操作"></a>5 集合操作</h1><ul><li>集合操作<ul><li>创建一个集合数组，集合数组只能是一维数组。</li><li><code>unique()</code>：可以从数组中查找唯一元素(集合)。</li><li><code>union1d()</code>：可以查找两个数组的唯一值(并集)。</li><li><code>intersect1d()</code>：仅查找两个数组都存在的值(交集)。<ul><li>可选参数assume_unique为True时加快计算速度。</li><li>在处理集合时，assume_unique应始终设置为True。</li></ul></li><li><code>setdiff1d()</code>：仅查找一个数组中不存在于另一个数组中的值(差集)，参数assume_unique同上。</li><li><code>setxor1d()</code>：只属于一个集合不属于另一个集合的元素集合(对称差集)，参数assume_unique同上。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br>arr2 = np.unique(arr1)          <span class="hljs-comment"># 将具有重复元素的数组转换为集合</span><br><span class="hljs-built_in">print</span>(arr2)<br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>arr4 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr5 = np.union1d(arr3, arr4)   <span class="hljs-comment"># arr3和arr4的并集</span><br><span class="hljs-built_in">print</span>(arr5)<br><br>arr6 = np.intersect1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr6)                     <span class="hljs-comment"># arr3和arr4的交集</span><br><br>arr7 = np.setdiff1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr7)                     <span class="hljs-comment"># arr3和arr4的差集</span><br><br>arr8 = np.setxor1d(arr3, arr4, assume_unique=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(arr8)                     <span class="hljs-comment"># arr3和arr4的对称差集</span><br></code></pre></td></tr></table></figure><h1 id="6-最小公倍数"><a href="#6-最小公倍数" class="headerlink" title="6 最小公倍数"></a>6 最小公倍数</h1><ul><li>最小公倍数<ul><li>使用<code>lcm()</code>函数，可以查找两个数的最小公倍数。</li><li>查找数组中所有值的最小公倍数，使用<code>reduce()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>num1 = <span class="hljs-number">4</span><br>num2 = <span class="hljs-number">6</span><br>x = np.lcm(num1, num2)          <span class="hljs-comment"># num1和num2的最小公倍数</span><br><span class="hljs-built_in">print</span>(x)<br><br>arr1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>])<br>y = np.lcm.reduce(arr1)         <span class="hljs-comment"># 数组arr1所有元素的最小公倍数</span><br><span class="hljs-built_in">print</span>(y)<br><br>arr2 = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)         <span class="hljs-comment"># 包含1-10所有整数的数组最小公倍数</span><br>z = np.lcm.reduce(arr2)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><h1 id="7-最大公约数"><a href="#7-最大公约数" class="headerlink" title="7 最大公约数"></a>7 最大公约数</h1><ul><li>最大公约数<ul><li>使用<code>gcd()</code>函数，可以查找两个数的最大公约数。</li><li>查找数组中所有值的最大公约数，使用<code>reduce()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>num1 = <span class="hljs-number">6</span><br>num2 = <span class="hljs-number">9</span><br>x = np.gcd(num1, num2)          <span class="hljs-comment"># num1和num2的最大公约数</span><br><span class="hljs-built_in">print</span>(x)<br><br>arr = np.array([<span class="hljs-number">20</span>, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>, <span class="hljs-number">36</span>, <span class="hljs-number">16</span>])<br>y = np.gcd.reduce(arr)          <span class="hljs-comment"># 数组arr所有元素的最大公约数</span><br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
      <tag>NumPy</tag>
      
      <tag>Ufunc</tag>
      
      <tag>算术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 随机</title>
    <link href="/2021/02/21/python/python05-python-numpy-sui-ji/"/>
    <url>/2021/02/21/python/python05-python-numpy-sui-ji/</url>
    
    <content type="html"><![CDATA[<p>NumPy库部分由Python编写，多数需快速计算的部分由C或C++编写，旨在提供一个比传统Python列表快50倍的数组对象，即ndarray。</p><span id="more"></span><h1 id="1-随机数"><a href="#1-随机数" class="headerlink" title="1 随机数"></a>1 随机数</h1><ul><li>随机数<ul><li>伪随机数：通过一些算法生成的随机数。<ul><li>通过random处理随机数，<code>randint()</code>返回随机整数，<code>rand()</code>返回0-1之间的随机浮点数。</li><li><code>randint()</code>使用size参数来制作随机数组，<code>randint()</code>和<code>rand()</code>都允许指定数组的形状。</li><li><code>choice()</code>允许根据数组值生成随机值，添加一个size参数来指定数组的形状。</li></ul></li><li>真随机数：没有规律，不能预见的数，使用物理现象产生，例如投硬币猜测正反面。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>x = random.randint(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 0-100的随机整数</span><br>y = random.rand()<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 0-1的随机浮点数</span><br><br>x = random.randint(<span class="hljs-number">100</span>, size=(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成一个一维数组，包含5个从0-100的随机整数</span><br>y = random.randint(<span class="hljs-number">100</span>, size=(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个3行的二维数组，每行包含5个从0-100的随机整数</span><br><br>x = random.rand(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成一个一维数组，包含5个0-1之间的随机浮点数</span><br>y = random.rand(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个3行的二维数组，每行包含5个0-1之间的随机浮点数</span><br><br>x = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 返回数组中的一个值</span><br>y = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], size=(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成一个由数组参数3、5、7和9中的值组成的二维数组</span><br></code></pre></td></tr></table></figure><h1 id="2-数据分布"><a href="#2-数据分布" class="headerlink" title="2 数据分布"></a>2 数据分布</h1><ul><li>数据分布<ul><li>指在分布式环境中通过合理分布数据，提高数据操作自然并行度，以达到最优执行效率的目的。</li><li>主要内容是数据位置的存放和高效的数据划分问题，是所有可能值的列表及每个值出现的频率。</li><li>随机分布：一组遵循一定概率密度函数的随机数。<ul><li>概率密度函数：描述连续概率的函数，即数组中所有值的概率。</li><li><code>choice()</code>方法依据定义的概率生成随机数，允许指定每个值的概率。</li><li>概率由0-1之间的数字设置，0表示该值永远不会出现，1表示始终出现。</li><li>所有的概率数之和为1，还可以通过size参数指定数组的形状来返回数组。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 生成一个包含100个值的一维数组，其中生成3的概率为0.1，5概率0.3，7概率0.6，9概率0</span><br>x = random.choice([<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], p=[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.3</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.0</span>], size=(<span class="hljs-number">100</span>))<br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="3-随机排列"><a href="#3-随机排列" class="headerlink" title="3 随机排列"></a>3 随机排列</h1><ul><li>随机排列<ul><li><code>shuffle()</code>：就地改变数组元素的排序，即对原始数组进行的更改。</li><li><code>permutation()</code>：返回一个重新排列的数组，并保持原始数组不变。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>random.shuffle(arr1)                <span class="hljs-comment"># 随机打乱数组元素</span><br><span class="hljs-built_in">print</span>(arr1)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(random.permutation(arr2))     <span class="hljs-comment"># 生成数组元素的随机排列</span><br></code></pre></td></tr></table></figure><h1 id="4-Seaborn"><a href="#4-Seaborn" class="headerlink" title="4 Seaborn"></a>4 Seaborn</h1><ul><li>Seaborn<ul><li>一个在底层使用Matplotlib绘制图形的库，用于可视化随机分布。</li><li>打开系统上的命令窗口，输入命令进行安装：<code>pip install seaborn</code>。</li><li>使用前需要先导入Matplotlib模块的pyplot对象，以及安装好的第三方库seaborn模块。</li><li>Distplot代表分布图，将一个数组作为输入，并绘制一条与数组中点的分布相对应的曲线。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>sns.distplot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])                <span class="hljs-comment"># FutureWarning警告，distplot已弃用</span><br>plt.show()                                      <span class="hljs-comment"># 绘制分布图</span><br><br>sns.distplot([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], hist=<span class="hljs-literal">False</span>)<br>plt.show()                                      <span class="hljs-comment"># 绘制没有直方图的分布图</span><br></code></pre></td></tr></table></figure><h1 id="5-连续分布"><a href="#5-连续分布" class="headerlink" title="5 连续分布"></a>5 连续分布</h1><ul><li>连续分布<ul><li>Continuous Distribution，一个随机变量在其区间内能够取任何数值时所具有的分布。</li><li>常用分类<ul><li>正态分布：最常用，特点是密度函数以均值为中心对称分布，适用于描述一般经济变量的概率分布。</li><li>均匀分布：概率论和统计学中叫矩形分布，是对称概率分布，相同长度间隔的分布概率是等可能的。</li><li>指数分布：用来表示独立随机事件发生的时间间隔，重要特征是无记忆性，又称遗失记忆性。</li><li>贝塔分布：特点是密度函数为最大值两边的不对称分布，适用于描述工期等不对称分布的变量。</li><li>经验分布：对产生样本点累积分布函数的估计，统计学中是与样本的经验测度相关的分布函数。</li><li>三角型分布：密度数由最大值、最可能值和最小值构成的对称或不对称的三角型。</li></ul></li></ul></li></ul><h2 id="5-1-正态分布"><a href="#5-1-正态分布" class="headerlink" title="5-1 正态分布"></a>5-1 正态分布</h2><ul><li>正态分布<ul><li>Normal Distribution，又叫常态分布或高斯分布，Gaussian Distribution。</li><li>重要的分布之一，适合许多事件的概率分布，正态曲线呈钟型，也叫钟形曲线。</li><li>使用<code>random.normal()</code>方法获取正态分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>loc：平均值，钟型峰值所在的位置。</li><li>scale：标准偏差，偏差越小，值偏离算术平均值就越少，反之亦然。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.normal(size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成大小为2x3的随机正态分布</span><br><br>y = random.normal(loc=<span class="hljs-number">1</span>, scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(y)                    <span class="hljs-comment"># 生成大小为2x3的随机正态分布，平均值为1，标准差为2</span><br><br>sns.distplot(random.normal(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 正态分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-2-均匀分布"><a href="#5-2-均匀分布" class="headerlink" title="5-2 均匀分布"></a>5-2 均匀分布</h2><ul><li>均匀分布<ul><li>Uniform Distribution，用于描述每个事件发生机会均等的概率。</li><li>使用<code>random.uniform()</code>方法获取均匀分布数据，有以下三个参数。<ul><li>a：下限，默认0.0。</li><li>b：上限，默认1.0。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.uniform(size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 创建一个2x3均匀分布样本</span><br><br>sns.distplot(random.uniform(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 均匀分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-3-增长分布"><a href="#5-3-增长分布" class="headerlink" title="5-3 增长分布"></a>5-3 增长分布</h2><ul><li>增长分布<ul><li>Logistic Distribution，又叫逻辑斯谛分布，用于描述增长。</li><li>广泛用于逻辑回归、神经网络等机器学习，连续型概率分布的一种。</li><li>使用<code>random.logistic()</code>方法获取增长分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>loc：峰值的位置，默认为0。</li><li>scale：标准偏差，默认为1。</li></ul></li><li>增长分布与正态分布的区别<ul><li>增长分布的尾部下方面积更大，意味着代表了更远离均值的事件发生可能性。</li><li>对于较高的尺度值(标准偏差)，除峰值外，正态分布和增长分布几乎是相同。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.logistic(loc=<span class="hljs-number">1</span>, scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 从均值为1且标准差为2的增长分布中抽取2x3个样本</span><br><br>sns.distplot(random.logistic(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 增长分布的可视化</span><br><br>sns.distplot(random.normal(scale=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.logistic(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;logistic&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="5-4-指数分布"><a href="#5-4-指数分布" class="headerlink" title="5-4 指数分布"></a>5-4 指数分布</h2><ul><li>指数分布<ul><li>Exponential Distribution，也叫负指数分布。</li><li>用于描述直到下一个事件的时间，例如失败或成功等。</li><li>使用<code>random.exponential()</code>方法获取指数分布数据，有以下两个参数。<ul><li>size：返回数组的形状。</li><li>scale：速率的倒数，默认为1.0。</li></ul></li><li>泊松分布处理事件在一段时间内发生的次数，而指数分布处理这些事件之间的时间。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.exponential(scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 以2x3大小绘制一个2.0比例的指数分布样本</span><br><br>sns.distplot(random.exponential(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 指数分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-5-卡方分布"><a href="#5-5-卡方分布" class="headerlink" title="5-5 卡方分布"></a>5-5 卡方分布</h2><ul><li>卡方分布<ul><li>Chi-Square Distribution，又叫西格玛分布，用于验证假设的基础。</li><li>使用<code>random.chisquare()</code>方法获取卡方分布数据，有以下两个参数。<ul><li>df：自由度。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.chisquare(df=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽取一个自由度为2，大小为2x3的卡方分布样本</span><br><br>sns.distplot(random.chisquare(df=<span class="hljs-number">1</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 卡方分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-6-瑞利分布"><a href="#5-6-瑞利分布" class="headerlink" title="5-6 瑞利分布"></a>5-6 瑞利分布</h2><ul><li>瑞利分布<ul><li>Rayleigh Distribution，用于信号处理。</li><li>使用<code>random.rayleigh()</code>方法获取瑞利分布数据，有以下两个参数。<ul><li>size：返回数组的形状。</li><li>scale：标准偏差，默认为1.0。</li></ul></li><li>在单位StdDev(标准偏差)中，自由度为2的瑞利分布和卡方分布相同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.rayleigh(scale=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 绘制一个尺度为2且大小为2x3的瑞利分布样本</span><br><br>sns.distplot(random.rayleigh(size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 瑞利分布的可视化</span><br></code></pre></td></tr></table></figure><h2 id="5-7-帕累托分布"><a href="#5-7-帕累托分布" class="headerlink" title="5-7 帕累托分布"></a>5-7 帕累托分布</h2><ul><li>帕累托分布<ul><li>Pareto Distribution，经济学以外又被叫布拉德福分布。</li><li>帕累托分布即80-20分布，指的是20%的因素导致80%的结果。</li><li>使用<code>random.pareto()</code>方法获取帕累托分布数据，有以下两个参数。<ul><li>a：形状参数。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.pareto(a=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 绘制一个形状为2且大小为2x3的帕累托分布样本</span><br><br>sns.distplot(random.pareto(a=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 帕累托分布的可视化</span><br></code></pre></td></tr></table></figure><h1 id="6-离散分布"><a href="#6-离散分布" class="headerlink" title="6 离散分布"></a>6 离散分布</h1><ul><li>离散分布<ul><li>Discrete Distribution，随机变量只能取有限或可数无限数量的值的概率分布。</li><li>常用分类<ul><li>二项分布：在概率论和统计学中，n个独立的成功或失败试验里成功次数的离散概率分布。</li><li>泊松分布：统计与概率学里常见的离散概率分布，法国数学家西莫恩·德尼·泊松在1838年时发表。</li><li>几何分布：n次伯努利试验中试验k次才得到首次成功的机率，即前k-1次失败，第k次成功的概率。</li><li>负二项分布：Negative Binomial Distribution，统计学上一种离散概率分布。</li></ul></li></ul></li></ul><h2 id="6-1-二项分布"><a href="#6-1-二项分布" class="headerlink" title="6-1 二项分布"></a>6-1 二项分布</h2><ul><li>二项分布<ul><li>Binomial Distribution，又叫伯努利分布，离散概率分布的一种。</li><li>二项分布描述二项式场景的结果，例如抛硬币，要么正面要么反面。</li><li>使用<code>random.binomial()</code>方法获取二项分布数据，有以下三个参数。<ul><li>n：试验次数。</li><li>size：返回数组的形状。</li><li>p：每次试验的发生概率，例如每次抛硬币正反面概率都是0.5。</li></ul></li><li>如果二项分布有足够的数据点，将与具有一定位置和尺度的正态分布相似。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.binomial(n=<span class="hljs-number">10</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 给定10次抛硬币试验，生成10个数据点</span><br><br>sns.distplot(random.binomial(n=<span class="hljs-number">10</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">True</span>, kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 二项分布的可视化</span><br><br>sns.distplot(random.normal(loc=<span class="hljs-number">50</span>, scale=<span class="hljs-number">5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.binomial(n=<span class="hljs-number">100</span>, p=<span class="hljs-number">0.5</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;binomial&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-2-多项分布"><a href="#6-2-多项分布" class="headerlink" title="6-2 多项分布"></a>6-2 多项分布</h2><ul><li>多项分布<ul><li>Multinomial Distribution，是二项分布的推广。</li><li>描述了多项式场景的结果，例如人群血型，掷骰结果等。</li><li>使用<code>random.multinomial()</code>方法获取多项分布数据，有以下三个参数。<ul><li>size：返回数组的形状。</li><li>n：可能结果的数量，例如掷骰子有6个结果。</li><li>pvals：结果概率列表，例如掷骰子的概率为6个1&#x2F;6。</li></ul></li><li>返回的多项样本不会只产生单个值，结果会生成pvals中的对应值。</li><li>由于是二项分布的推广，视觉效果和正态分布的相似性与二项分布的相同。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><br>x = random.multinomial(n=<span class="hljs-number">6</span>, pvals=[<span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>, <span class="hljs-number">1</span>/<span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽出一个掷骰子的样本</span><br></code></pre></td></tr></table></figure><h2 id="6-3-泊松分布"><a href="#6-3-泊松分布" class="headerlink" title="6-3 泊松分布"></a>6-3 泊松分布</h2><ul><li>泊松分布<ul><li>Poisson Distribution，离散概率分布的一种。</li><li>泊松分布估计事件在指定时间内可以发生的次数。</li><li>使用<code>random.poisson()</code>方法获取泊松分布数据，有以下两个参数。<ul><li>size：返回数组的形状。</li><li>lam：发生率或已知次数。</li></ul></li><li>足够大的泊松分布，类似于二项分布和具有特定标准偏差和均值的正态分布。</li><li>泊松分布与二项分布的区别<ul><li>二项分布适用于离散试验，泊松分布适用于连续试验。</li><li>n非常大且p接近于0的二项分布，几乎与泊松分布相同，n*p约等于lam。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.poisson(lam=<span class="hljs-number">2</span>, size=<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 生成随机1x10发生次数为2的分布</span><br><br>sns.distplot(random.poisson(lam=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>), kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 泊松分布的可视化</span><br><br>sns.distplot(random.normal(loc=<span class="hljs-number">50</span>, scale=<span class="hljs-number">7</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;normal&quot;</span>)<br>sns.distplot(random.poisson(lam=<span class="hljs-number">50</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;poisson&quot;</span>)<br>plt.show()<br><br>sns.distplot(random.binomial(n=<span class="hljs-number">1000</span>, p=<span class="hljs-number">0.01</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;binomial&quot;</span>)<br>sns.distplot(random.poisson(lam=<span class="hljs-number">10</span>, size=<span class="hljs-number">1000</span>), hist=<span class="hljs-literal">False</span>, label=<span class="hljs-string">&quot;poisson&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><h2 id="6-4-齐普夫分布"><a href="#6-4-齐普夫分布" class="headerlink" title="6-4 齐普夫分布"></a>6-4 齐普夫分布</h2><ul><li>齐普夫分布<ul><li>Zipf Distribution，又叫Zeta分布，用于根据Zipf定律对数据进行采样。</li><li>齐夫定律(Zipf)：实验定律，一集合中第n个常用项是最常用项的1&#x2F;n倍。</li><li>使用<code>random.zipf()</code>方法获取齐普夫分布数据，有以下两个参数。<ul><li>a：分布参数。</li><li>size：返回数组的形状。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> seaborn <span class="hljs-keyword">as</span> sns<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = random.zipf(a=<span class="hljs-number">2</span>, size=(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(x)                    <span class="hljs-comment"># 抽取一个分布参数为2且大小为2x3的齐普夫分布样本</span><br><br>y = random.zipf(a=<span class="hljs-number">2</span>, size=<span class="hljs-number">1000</span>)<br>sns.distplot(y[y&lt;<span class="hljs-number">10</span>], kde=<span class="hljs-literal">False</span>)<br>plt.show()                  <span class="hljs-comment"># 齐普夫分布的可视化</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>随机数</tag>
      
      <tag>连续分布</tag>
      
      <tag>离散分布</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python NumPy 基础</title>
    <link href="/2021/02/07/python/python04-python-numpy-ji-chu/"/>
    <url>/2021/02/07/python/python04-python-numpy-ji-chu/</url>
    
    <content type="html"><![CDATA[<p>NumPy是一个用于处理数组的Python库，具有在线性代数、傅里叶变换和矩阵领域工作的功能，由Travis Oliphant于2005年创建。</p><span id="more"></span><h1 id="1-NumPy"><a href="#1-NumPy" class="headerlink" title="1 NumPy"></a>1 NumPy</h1><ul><li>Numpy<ul><li>通过import关键字将其导入应用程序，通常以np别名替代。</li><li>检查NumPy版本，版本字符串存储在<code>__version__</code>属性下。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np          <span class="hljs-comment"># 导入时使用关键字别名</span><br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><br><span class="hljs-built_in">print</span>(np.__version__)       <span class="hljs-comment"># 检查NumPy版本</span><br></code></pre></td></tr></table></figure><h1 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2 创建数组"></a>2 创建数组</h1><ul><li>创建数组<ul><li>NumPy中的数组对象称为ndarray，使用数组对象的<code>array()</code>函数创建NumPy对象。</li><li><code>type()</code>用于显示数组类型numpy.ndarray，数组中的维度是一级数组深度(嵌套数组)。<ul><li>0-D数组：零维数组，又叫标量，数组中的每个值都是一个0-D数组。</li><li>1-D数组：一维数组，以零维数组作为元素的数组，是最基本的数组。</li><li>2-D数组：二维数组，以一维数组作为元素的数组，用于表示矩阵或二阶张量。</li><li>3-D数组：三维数组，以二维数组作为元素的数组，用于表示三阶张量。</li><li>高维数组：数组可有任意数量的维度，创建时使用ndmin参数定义维数。</li></ul></li><li>使用ndim检查数组的维数，返回整数的属性。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(arr))                        <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>arr0 = np.array(<span class="hljs-number">30</span>)                     <span class="hljs-comment"># 0-D</span><br><span class="hljs-built_in">print</span>(arr0)<br>arr1 = np.array((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))              <span class="hljs-comment"># 1-D</span><br><span class="hljs-built_in">print</span>(arr1)<br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])       <span class="hljs-comment"># 2-D</span><br><span class="hljs-built_in">print</span>(arr2)<br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-built_in">print</span>(arr3)                             <span class="hljs-comment"># 3-D</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                             <span class="hljs-comment"># 5-D</span><br><br><span class="hljs-built_in">print</span>(arr0.ndim)                        <span class="hljs-comment"># 检查数组的维数</span><br><span class="hljs-built_in">print</span>(arr1.ndim)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><h2 id="2-1-数组索引"><a href="#2-1-数组索引" class="headerlink" title="2-1 数组索引"></a>2-1 数组索引</h2><ul><li>数组索引<ul><li>数组索引与访问数组元素相同，通过引用索引号访问数组元素。</li><li>索引从0开始，第一个元素索引为0，第二个元素索引为1，以此类推。</li><li>二维数组和三维数组都使用逗号分隔的整数来表示元素的维度和索引。</li><li>二维数组索引可以想象为具有行和列的表，行表示维度，索引表示列。</li><li>可以使用负索引从末尾访问数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 访问一维数组元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">2</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">3</span>])<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>])           <span class="hljs-comment"># 访问二维数组元素，第一行第二列的元素</span><br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-built_in">print</span>(arr3[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 访问三维数组元素，第一个数组的第二个数组的第三个元素</span><br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>])          <span class="hljs-comment"># 访问二维数组元素，第二行的最后一个元素</span><br></code></pre></td></tr></table></figure><h2 id="2-2-数组切片"><a href="#2-2-数组切片" class="headerlink" title="2-2 数组切片"></a>2-2 数组切片</h2><ul><li>数组切片<ul><li>格式：<code>[start: end]</code>或<code>[start: end: step]</code>，结果包括开始索引，不包括结束索引。</li><li>start默认为0，end在维度中考虑数组的长度，step默认为1，使用负号可从末尾引用索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])           <span class="hljs-comment"># 索引1到5的元素，不包括5</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">4</span>:  ])           <span class="hljs-comment"># 索引4到数组末尾的元素切片</span><br><span class="hljs-built_in">print</span>(arr1[ : <span class="hljs-number">4</span>])           <span class="hljs-comment"># 索引开始到4的切片元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])         <span class="hljs-comment"># 负索引从-1开始，索引末尾-1到-3的元素，不包括-1</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引1到5的所有元素，其中步长为2</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])        <span class="hljs-comment"># 索引整个数组中步长为2的所有元素</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])        <span class="hljs-comment"># 第二个元素开始，索引1到4的元素，不包括4</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])        <span class="hljs-comment"># 两个元素中返回索引2</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])     <span class="hljs-comment"># 两个元素中，返回索引1到4的元素，不包括4，返回一个二维数组</span><br></code></pre></td></tr></table></figure><h2 id="2-3-数据类型"><a href="#2-3-数据类型" class="headerlink" title="2-3 数据类型"></a>2-3 数据类型</h2><ul><li>数据类型<ul><li>Python中的数据类型：float、integer、boolean、complex、strings。</li><li>NumPy模块也有一些额外的数据类型，并且是指代具有一个字符的数据类型。<ul><li>i(整数)、b(布尔值)、u(无符号整数)、f(浮点数)、c(复数)、m(时间增量)。</li><li>M(日期时间)、O(对象)、S(字符串)、U(Unicode字符串)、V(其他类型的固定内存块void)。</li></ul></li><li>NumPy数组对象有个dtype属性，用于返回数组的数据类型。</li><li><code>array()</code>创建具有已定义数据类型的数组，带可选参数dtype，允许定义数组元素的预期数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(arr1.dtype)           <span class="hljs-comment"># 获取数组对象的数据类型</span><br>arr2 = np.array([<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>])<br><span class="hljs-built_in">print</span>(arr2.dtype)           <span class="hljs-comment"># 获取包含字符串数组的数据类型</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;S&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 创建一个数据类型为字符串的数组</span><br><span class="hljs-built_in">print</span>(arr3.dtype)<br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=<span class="hljs-string">&quot;i4&quot;</span>)<br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 创建一个数据类型为4字节整数的数组</span><br><span class="hljs-built_in">print</span>(arr4.dtype)<br></code></pre></td></tr></table></figure><ul><li>类型转换<ul><li>若给定类型无法转换元素，NumPy将引发ValueError(传递给函数的参数类型意外或不正确时显示)。</li><li>使用<code>astype()</code>方法制作数组的副本，允许将数据类型指定为参数，可以更改现有数组的数据类型。</li><li>可用字符串指定数据类型，例如f(浮点数)、i(整数)等，或直接使用数据类型，例如float、int等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 像a这样的非整数字符串不能转换为整数，会引发错误</span><br><span class="hljs-comment"># arr1 = np.array([&quot;a&quot;, &quot;2&quot;], dtype=&quot;i&quot;)</span><br><br><span class="hljs-comment"># 通过使用i作为参数值将数据类型从浮点数更改为整数</span><br>arr2 = np.array([<span class="hljs-number">1.1</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">3.1</span>])<br>arr3 = arr2.astype(<span class="hljs-string">&quot;i&quot;</span>)<br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.dtype)<br><br><span class="hljs-comment"># 通过使用int作为参数值将数据类型从浮点数更改为整数</span><br>arr4 = arr2.astype(<span class="hljs-built_in">int</span>)<br><span class="hljs-built_in">print</span>(arr4)<br><span class="hljs-built_in">print</span>(arr4.dtype)<br><br><span class="hljs-comment"># 将数据类型从整数更改为布尔值</span><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>])<br>arr6 = arr5.astype(<span class="hljs-built_in">bool</span>)<br><span class="hljs-built_in">print</span>(arr6)<br><span class="hljs-built_in">print</span>(arr6.dtype)<br></code></pre></td></tr></table></figure><h1 id="3-副本与视图"><a href="#3-副本与视图" class="headerlink" title="3 副本与视图"></a>3 副本与视图</h1><ul><li>副本与视图<ul><li>副本是一个新数组，而视图只是原始数组的视图。<ul><li>副本拥有数据，对副本所做的更改不会影响原始数组，对原始数组所做的更改不会影响副本。</li><li>视图没有数据，对视图所做的更改将会影响原始数组，对原始数组所做的更改也会影响视图。</li></ul></li><li>每个NumPy数组都有base属性，如果数组拥有数据，则返回None，否则base属性引用原始对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br>arr2 = arr1.copy()          <span class="hljs-comment"># 创建一个副本</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>                 <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr2)                 <span class="hljs-comment"># 副本不应受到对原始数组所做更改的影响</span><br><br>arr3 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-number">30</span>                <span class="hljs-comment"># 更改原始数组</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr3)                 <span class="hljs-comment"># 视图应该受到对原始数组所做更改的影响</span><br><br>arr4 = arr1.view()          <span class="hljs-comment"># 创建一个视图</span><br>arr4[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>                 <span class="hljs-comment"># 更改视图</span><br><span class="hljs-built_in">print</span>(arr1)                 <span class="hljs-comment"># 显示两个数组</span><br><span class="hljs-built_in">print</span>(arr4)                 <span class="hljs-comment"># 原始数组应该受到对视图所做更改的影响</span><br><br>arr5 = arr1.copy()          <span class="hljs-comment"># 打印base属性的值，检查数组是否拥有数据</span><br>arr6 = arr1.view()<br><span class="hljs-built_in">print</span>(arr5.base)            <span class="hljs-comment"># 副本返回None</span><br><span class="hljs-built_in">print</span>(arr6.base)            <span class="hljs-comment"># 视图返回原始数组</span><br></code></pre></td></tr></table></figure><h1 id="4-形状与重塑"><a href="#4-形状与重塑" class="headerlink" title="4 形状与重塑"></a>4 形状与重塑</h1><ul><li>形状<ul><li>数组形状是每个维度中元素的数量，NumPy数组有shape属性。</li><li>shape属性返回一个元组，每个索引都有与之对应元素的数量。</li><li>形状元组：每个索引处的整数都表示相应维度具有的元素数量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-built_in">print</span>(arr1.shape)     <span class="hljs-comment"># 二维数组的形状(2, 4)，2个维度，维度一有2个元素，维度二有4个元素</span><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr2)           <span class="hljs-comment"># 使用值为1、2、3、4的ndmin向量创建一个5维数组，并打印最后一维的值</span><br><span class="hljs-built_in">print</span>(arr2.shape)<br></code></pre></td></tr></table></figure><ul><li>重塑<ul><li>数组重塑意味着改变数组形状，可添加或删除维度，或更改每个维度元素的数量。</li><li>只要数组重塑所需要的元素在两种形状中都相同，就可以将数组重塑成任何形状。</li><li>不必为reshape方法的其中一个维度指定确切的数字，拥有未知维度，作为-1值传递。</li><li>扁平化数组意味着将多维数组转换为一维数组，可以使用<code>reshape(-1)</code>来做到这一点。</li><li>改变数组形状还有flatten、revel函数，rot90、flip、fliplr和flipud等则可重新排列元素。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br>arr2 = arr1.reshape(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)     <span class="hljs-comment"># 从一维重塑到二维</span><br><span class="hljs-built_in">print</span>(arr2)                   <span class="hljs-comment"># 最外层维度有4个数组，每个数组包含3个元素</span><br><br>arr3 = arr1.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 从一维重塑到三维</span><br><span class="hljs-built_in">print</span>(arr3)                   <span class="hljs-comment"># 最外层维度有2个数组，其中包含3个数组，每个数组有2个元素</span><br><br>arr4 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-comment"># arr5 = arr4.reshape(3, 3)</span><br><span class="hljs-comment"># print(arr5)                 # 8个元素的1-D数组转换为每个维度具有3个元素的2-D数组，会引发错误</span><br><br><span class="hljs-built_in">print</span>(arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>).base)<span class="hljs-comment"># 检查返回的数组是副本或视图，返回原始数组，是视图</span><br>arr6 = arr4.reshape(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>) <span class="hljs-comment"># 8个元素的1-D数组转换为2x2元素的3-D数组，不能传递-1值到多个维度</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br>arr8 = arr7.reshape(-<span class="hljs-number">1</span>)       <span class="hljs-comment"># 将数组转换为一维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br></code></pre></td></tr></table></figure><h1 id="5-连接与拆分"><a href="#5-连接与拆分" class="headerlink" title="5 连接与拆分"></a>5 连接与拆分</h1><ul><li>连接<ul><li>SQL中基于键连接表，NumPy中通过轴连接数组。</li><li>通过<code>concatenate()</code>函数将数组与轴一起进行传递连接，参数axis默认为0。</li><li>使用堆栈函数<code>stack()</code>连接数组(堆叠，一个轴在另一个轴上)，参数axis默认为0。<ul><li><code>hstack()</code>：沿行堆叠。</li><li><code>vstack()</code>：沿列堆叠。</li><li><code>dstack()</code>：沿高度或深度堆叠。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>arr2 = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr3 = np.concatenate((arr1, arr2))         <span class="hljs-comment"># 连接两个一维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><br>arr4 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]])<br>arr5 = np.array([[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br>arr6 = np.concatenate((arr4, arr5), axis=<span class="hljs-number">1</span>) <span class="hljs-comment"># 连接两个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.stack((arr1, arr2), axis=<span class="hljs-number">1</span>)       <span class="hljs-comment"># 堆叠</span><br><span class="hljs-built_in">print</span>(arr7)<br>arrh = np.hstack((arr1, arr2))              <span class="hljs-comment"># 沿行堆叠</span><br><span class="hljs-built_in">print</span>(arrh)<br>arrv = np.vstack((arr1, arr2))              <span class="hljs-comment"># 沿列堆叠</span><br><span class="hljs-built_in">print</span>(arrv)<br>arrd = np.dstack((arr1, arr2))              <span class="hljs-comment"># 沿高度或深度堆叠</span><br><span class="hljs-built_in">print</span>(arrd)<br></code></pre></td></tr></table></figure><ul><li>拆分<ul><li>拆分是连接的逆操作，<code>array_split()</code>方法用于拆分数组。<ul><li>如果数组的元素少于所需要的元素，那么将相应地从末尾进行自动调整。</li><li>也可以使用<code>split()</code>方法，但若元素较少，不会自动调整，将返回错误。</li></ul></li><li><code>array_split()</code>方法的返回值是一个数组，其中包含每个拆分为一个数组。<ul><li>若将一个数组拆分为3个数组，可以像访问任何数组元素一样从结果中进行访问。</li><li>可以指定要围绕哪个轴进行拆分，使用axis参数进行拆分，或使用<code>hsplit()</code>替代。</li><li>同理，<code>vstack()</code>和<code>dstack()</code>函数对应沿列拆分<code>vsplit()</code>和沿高度拆分<code>dsplit()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>])<br>arr2 = np.array_split(arr1, <span class="hljs-number">3</span>)              <span class="hljs-comment"># 将一维数组拆分为3部分</span><br><span class="hljs-built_in">print</span>(arr2)                                 <span class="hljs-comment"># 返回一个包含3个数组的数组</span><br><br>arr3 = np.array_split(arr1, <span class="hljs-number">4</span>)              <span class="hljs-comment"># 将一维数组拆分为4部分</span><br><span class="hljs-built_in">print</span>(arr3)                                 <span class="hljs-comment"># 数组元素少于所需的元素</span><br>arr4 = np.split(arr1, <span class="hljs-number">3</span>)                    <span class="hljs-comment"># 将一维数组拆分为3部分</span><br><span class="hljs-built_in">print</span>(arr4)<br><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>])                              <span class="hljs-comment"># 打印拆分后的数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">2</span>])<br><br>arr5 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">11</span>, <span class="hljs-number">12</span>]])<br>arr6 = np.array_split(arr5, <span class="hljs-number">3</span>)              <span class="hljs-comment"># 将二维数组拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr6)<br><br>arr7 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>], [<span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>]])<br>arr8 = np.array_split(arr7, <span class="hljs-number">3</span>)              <span class="hljs-comment"># 将二维数组拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr8)<br><br>arr9 = np.array_split(arr7, <span class="hljs-number">3</span>, axis=<span class="hljs-number">1</span>)      <span class="hljs-comment"># 将二维数组沿行拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arr9)<br>arrh = np.hsplit(arr7, <span class="hljs-number">3</span>)                   <span class="hljs-comment"># 将二维数组沿行拆分为3个二维数组</span><br><span class="hljs-built_in">print</span>(arrh)<br></code></pre></td></tr></table></figure><h1 id="6-数组迭代"><a href="#6-数组迭代" class="headerlink" title="6 数组迭代"></a>6 数组迭代</h1><ul><li>数组迭代<ul><li>迭代意味着一个一个地遍历元素，在NumPy中处理多维数组时，使用for循环可进行迭代。</li><li>如果迭代一个n-D数组，将遍历n-1维，要返回实际值，即标量，必须在每个维度中迭代数组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr1:              <span class="hljs-comment"># 迭代一维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> arr2:              <span class="hljs-comment"># 迭代二维数组的元素</span><br>    <span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr2:              <span class="hljs-comment"># 迭代二维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-built_in">print</span>(y)<br><br>arr3 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]], [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:              <span class="hljs-comment"># 迭代三维数组的元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr3:              <span class="hljs-comment"># 迭代三维数组的每个标量元素</span><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> x:<br>        <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> y:<br>            <span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>迭代方法<ul><li><code>nditer()</code>是一个帮助函数，可以解决迭代中的一些基本问题。<ul><li>使用op_dtypes参数并将预期的数据类型传递给它，可以在迭代时更改元素的数据类型。</li><li>元素在数组中时，NumPy不会就地更改元素的数据类型，需一些其他空间来执行此操作。</li><li>其他空间即缓冲区，为启用额外空间，还需要使用<code>nditer()</code>函数的<code>flags=[&quot;buffered&quot;]</code>。</li></ul></li><li>使用过滤，可以以不同的步长进行迭代。</li><li>如果迭代时需要元素的相应索引，则可以用<code>ndenumerate()</code>进行枚举迭代。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], [[<span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>]]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr1):           <span class="hljs-comment"># 遍历3-D数组</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>arr2 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])          <span class="hljs-comment"># 作为字符串遍历数组</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr2, flags=[<span class="hljs-string">&quot;buffered&quot;</span>], op_dtypes=[<span class="hljs-string">&quot;S&quot;</span>]):<br>    <span class="hljs-built_in">print</span>(x)<br><br>arr3 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]])<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> np.nditer(arr3[:, ::<span class="hljs-number">2</span>]):   <span class="hljs-comment"># 每跳过1个元素，遍历2-D数组的每个标量元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr2): <span class="hljs-comment"># 枚举一维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br><span class="hljs-keyword">for</span> idx, x <span class="hljs-keyword">in</span> np.ndenumerate(arr3): <span class="hljs-comment"># 枚举二维数组元素</span><br>    <span class="hljs-built_in">print</span>(idx, x)<br></code></pre></td></tr></table></figure><h1 id="7-数组搜索"><a href="#7-数组搜索" class="headerlink" title="7 数组搜索"></a>7 数组搜索</h1><ul><li>数组搜索<ul><li><code>where()</code>方法可以进行数组搜索。</li><li><code>searchsorted()</code>方法：考虑先插入，再排序，最后索引。<ul><li>数组中执行二进制搜索，并返回将插入指定值的索引以保持搜索顺序。</li><li>默认情况下返回左侧索引，使用<code>side=&quot;right&quot;</code>可以改为返回右侧索引。</li><li>如果需要搜索多个值，那么可以使用具有指定值的数组进行数组的搜索。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br>val4 = np.where(arr1 == <span class="hljs-number">4</span>)      <span class="hljs-comment"># 查找值为4的索引</span><br><span class="hljs-built_in">print</span>(val4)                     <span class="hljs-comment"># 返回元组(array([3, 5, 6], ))，值4出现在索引的3、5和6位置处</span><br>even = np.where(arr1 % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)  <span class="hljs-comment"># 查找值为偶数的索引</span><br><span class="hljs-built_in">print</span>(even)<br><br>arr2 = np.array([<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br>insl = np.searchsorted(arr2, <span class="hljs-number">7</span>) <span class="hljs-comment"># 查找应插入值7的索引</span><br><span class="hljs-built_in">print</span>(insl)                     <span class="hljs-comment"># 索引从左侧开始，并返回第一个索引</span><br>insr = np.searchsorted(arr2, <span class="hljs-number">7</span>, side=<span class="hljs-string">&quot;right&quot;</span>)<br><span class="hljs-built_in">print</span>(insr)                     <span class="hljs-comment"># 索引从右侧开始，并返回第一个索引</span><br><br>arr3 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>])<br>ins1 = np.searchsorted(arr3, <span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(ins1)                     <span class="hljs-comment"># 返回0</span><br>ins2 = np.searchsorted(arr3, [<span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">print</span>(ins2)                     <span class="hljs-comment"># 返回数组[4 4]</span><br>ins3 = np.searchsorted(arr3, [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>])<br><span class="hljs-built_in">print</span>(ins3)                     <span class="hljs-comment"># 查找应插入值2、4和6的索引，返回数组[1 2 3]</span><br></code></pre></td></tr></table></figure><h1 id="8-数组排序"><a href="#8-数组排序" class="headerlink" title="8 数组排序"></a>8 数组排序</h1><ul><li>数组排序<ul><li>NumPy的ndarray对象有一个<code>sort()</code>函数，可以对指定的数组进行排序。</li><li><code>sort()</code>函数可以对字符串数组、布尔数组或任何其他数据类型进行排序。</li><li>若对二维数组使用<code>sort()</code>函数，那么二维数组中的两个数组都将被排序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>])   <span class="hljs-comment"># 对数组排序</span><br><span class="hljs-built_in">print</span>(np.sort(arr1))            <span class="hljs-comment"># 返回数组arr1的副本，保持原始数组不变</span><br><br>arr2 = np.array([<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>])<br><span class="hljs-built_in">print</span>(np.sort(arr2))            <span class="hljs-comment"># 按字母顺序对数组排序</span><br><br>arr3 = np.array([<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>])<br><span class="hljs-built_in">print</span>(np.sort(arr3))            <span class="hljs-comment"># 对布尔数组排序</span><br><br>arr4 = np.array([[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]])<br><span class="hljs-built_in">print</span>(np.sort(arr4))<br></code></pre></td></tr></table></figure><h1 id="9-数组过滤器"><a href="#9-数组过滤器" class="headerlink" title="9 数组过滤器"></a>9 数组过滤器</h1><ul><li>数组过滤器<ul><li>从现有数组中取出一些元素，并从中创建一个新数组，称为数组过滤。</li><li>布尔索引列表过滤数组<ul><li>如果索引处的值是True，则该元素包含在过滤后的数组中。</li><li>如果索引处的值是False，则该元素从过滤后的数组中排除。</li></ul></li><li>根据条件创建过滤器数组，可以在条件中直接替换数组而不是可迭代变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">32</span>, <span class="hljs-number">33</span>])<br>boo1 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>]<br>new1 = arr1[boo1]         <span class="hljs-comment"># 对True和False值进行了硬编码</span><br><span class="hljs-built_in">print</span>(new1)               <span class="hljs-comment"># 返回[30 32]，新过滤器仅包含过滤器数组具有value的True值</span><br><br>filter_arr1 = []          <span class="hljs-comment"># 创建空列表</span><br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> arr1:      <span class="hljs-comment"># 遍历数组arr1中的每个元素</span><br>    <span class="hljs-keyword">if</span> element &gt; <span class="hljs-number">31</span>:      <span class="hljs-comment"># 元素大于31，将值设为True，否则为False</span><br>        filter_arr1.append(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">else</span>:<br>        filter_arr1.append(<span class="hljs-literal">False</span>)<br>arr2 = arr1[filter_arr1]<br><span class="hljs-built_in">print</span>(filter_arr1)        <span class="hljs-comment"># [False, False, True, True]</span><br><span class="hljs-built_in">print</span>(arr2)               <span class="hljs-comment"># 返回[32 33]</span><br><br>filter_arr2 = arr1 &gt; <span class="hljs-number">31</span>   <span class="hljs-comment"># 在条件中直接替换数组</span><br>arr3 = arr1[filter_arr2]<br><span class="hljs-built_in">print</span>(filter_arr2)<br><span class="hljs-built_in">print</span>(arr3)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NumPy</tag>
      
      <tag>数组操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 文件处理</title>
    <link href="/2021/02/03/python/python03-python-wen-jian-chu-li/"/>
    <url>/2021/02/03/python/python03-python-wen-jian-chu-li/</url>
    
    <content type="html"><![CDATA[<p>文件就是操作系统提供给用户或应用程序操作硬盘的一种功能，任何语言都离不开对文件的操作，Python语言更不例外。</p><span id="more"></span><h1 id="1-文件处理"><a href="#1-文件处理" class="headerlink" title="1 文件处理"></a>1 文件处理</h1><ul><li>open()函数<ul><li>文件处理的关键函数，有filename和mode两个参数。</li><li>打开文件的模式<ul><li><code>x</code>：创建指定文件，如果文件存在则返回错误。</li><li><code>r</code>：默认值，打开文件进行读取，如果文件不存在则出错。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li><li>指定文件的形式<ul><li><code>t</code>：默认值，文本模式。</li><li><code>b</code>：二进制模式，例如图像。</li></ul></li><li>打开文件进行读取，指定文件名就可以了。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)              <span class="hljs-comment"># 确保文件存在，否则报错</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;rt&quot;</span>)        <span class="hljs-comment"># rt即read和text，默认值，所以不需要指定(代码同上)</span><br></code></pre></td></tr></table></figure><h1 id="2-读取文件"><a href="#2-读取文件" class="headerlink" title="2 读取文件"></a>2 读取文件</h1><ul><li>read()方法<ul><li><code>open()</code>函数返回一个文件对象，该对象的<code>read()</code>方法可以读取文件内容。</li><li>若文件位于其他位置，须指定文件路径，<code>read()</code>方法可指定要返回的字符数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())                       <span class="hljs-comment"># 获取文件内容</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read(<span class="hljs-number">5</span>))                      <span class="hljs-comment"># 返回文件的前5个字符</span><br><br><span class="hljs-comment"># f = open(&quot;D:\\demofile.txt&quot;, &quot;r&quot;)   # 指定文件路径</span><br><span class="hljs-comment"># print(f.read())</span><br></code></pre></td></tr></table></figure><ul><li>readline()方法<ul><li>使用该方法将返回文件的一行内容，调用两次则可以获取前两行。</li><li>通过遍历文件的行，可以逐行读取整个文件，完成操作后将文件关闭是个好习惯。</li><li>在某些情况下，由于缓冲，对文件所做的更改可能在关闭文件之前不会显示出来。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的一行</span><br><span class="hljs-built_in">print</span>(x.readline())                   <span class="hljs-comment"># 读取文件的前两行</span><br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> y:                           <span class="hljs-comment"># 逐行循环文件</span><br>    <span class="hljs-built_in">print</span>(i)<br><br>x.close()                             <span class="hljs-comment"># 完成后关闭文件</span><br>y.close()<br></code></pre></td></tr></table></figure><h1 id="3-文件操作"><a href="#3-文件操作" class="headerlink" title="3 文件操作"></a>3 文件操作</h1><ul><li>文件操作<ul><li>写入现有文件，必须向<code>open()</code>函数添加参数。<ul><li><code>a</code>：将内容追加到文件的末尾。</li><li><code>w</code>：将内容覆盖任何现有内容。</li></ul></li><li>创建新文件，使用<code>open()</code>函数带以下参数之一的方法。<ul><li><code>x</code>：创建一个文件，如果文件存在则返回错误。</li><li><code>w</code>：打开文件进行内容的写入，如果文件不存在则创建文件。</li><li><code>a</code>：打开文件进行内容的追加，如果文件不存在则创建文件。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)       <span class="hljs-comment"># 打开文件并将内容附加到文件中，如果文件不存在则创建文件</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(x.read())<br><br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)       <span class="hljs-comment"># 打开文件并覆盖整个文件的内容，如果文件不存在则创建文件</span><br>y.write(<span class="hljs-string">&quot;Woops! I have deleted the content!&quot;</span>)<br>y.close()<br>y = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><span class="hljs-built_in">print</span>(y.read())<br></code></pre></td></tr></table></figure><h1 id="4-删除文件"><a href="#4-删除文件" class="headerlink" title="4 删除文件"></a>4 删除文件</h1><ul><li>os模块<ul><li>删除整个文件夹，需要使用<code>os.rmdir()</code>方法。</li><li>导入模块并运行<code>os.remove()</code>方法对文件进行删除操作。</li><li>为避免出现错误，需要在尝试删除文件之前检查文件是否存在。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> os<br>os.rmdir(<span class="hljs-string">&quot;myfolder&quot;</span>)                  <span class="hljs-comment"># 删除文件夹</span><br>os.remove(<span class="hljs-string">&quot;demofile.txt&quot;</span>)             <span class="hljs-comment"># 删除一个文件</span><br><br>x = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)         <span class="hljs-comment"># 打开文件并将内容附加到文件中</span><br>x.write(<span class="hljs-string">&quot;Now the file has more content!&quot;</span>)<br>x.close()<br><span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&quot;demofile.txt&quot;</span>):    <span class="hljs-comment"># 检查文件是否存在，然后将其删除</span><br>    os.remove(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The file does not exist.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件打开</tag>
      
      <tag>文件读取</tag>
      
      <tag>文件写入</tag>
      
      <tag>文件删除</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(二)</title>
    <link href="/2021/01/15/python/python02-python-ji-chu-er/"/>
    <url>/2021/01/15/python/python02-python-ji-chu-er/</url>
    
    <content type="html"><![CDATA[<p>Python面向对象，易于阅读和维护，丰富的库可用于Web开发、爬虫、自动化运维、自动化测试和数据分析等，功能十分强大。</p><span id="more"></span><h1 id="1-函数"><a href="#1-函数" class="headerlink" title="1 函数"></a>1 函数</h1><ul><li>函数<ul><li>只有在被调用时才会运行，可将参数传递给函数，函数返回数据作为结果。</li><li>通过<code>def</code>关键字定义函数，调用函数时，需要使用函数名称，后跟括号<code>()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():               <span class="hljs-comment"># def定义函数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Function&quot;</span>)<br>myfunc()                    <span class="hljs-comment"># 调用函数</span><br></code></pre></td></tr></table></figure><ul><li>参数<ul><li>信息可作为参数传递给函数，缩写为<code>args</code>，任意参数缩写为<code>*args</code>。</li><li>参数在函数名之后的括号内指定，可以添加任意数量的参数，用逗号分隔。</li><li>默认情况下须使用正确数量的参数调用函数，函数需几个参数就必须使用几个参数调用该函数。</li><li>若不知道传递给函数的参数数量，则在函数定义的参数名称前使用星号<code>*</code>，接收一个参数元组。</li><li>函数定义不能为空，若函数内部没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">fname</span>):          <span class="hljs-comment"># 带有一个参数fname的函数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; Refsnes.&quot;</span>)<br>myfunc(<span class="hljs-string">&quot;Emil&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">fname, lname</span>):   <span class="hljs-comment"># 该函数带有两个参数，调用时就使用两个参数</span><br>    <span class="hljs-built_in">print</span>(fname + <span class="hljs-string">&quot; &quot;</span> + lname + <span class="hljs-string">&quot;.&quot;</span>)<br>myFunc(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Refsnes&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">*kids</span>):         <span class="hljs-comment"># 任意参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + kids[<span class="hljs-number">2</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br>my_func(<span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_Func</span>():<br>    <span class="hljs-keyword">pass</span>                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>关键字参数<ul><li>使用<code>key = value</code>语法发送参数，这样就不用考虑参数的顺序了。</li><li>关键字参数通常缩写为<code>kwargs</code>，任意关键字参数则缩写为<code>**kwargs</code>。</li><li>若不知道传递给函数的关键字参数数量，则在函数定义的参数名称前使用两个星号<code>**</code>，接收参数字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">child3, child2, child1</span>):       <span class="hljs-comment"># key = value</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child is &quot;</span> + child3 +<span class="hljs-string">&quot;.&quot;</span>)<br>myfunc(child1 = <span class="hljs-string">&quot;Emil&quot;</span>, child2 = <span class="hljs-string">&quot;Lily&quot;</span>, child3 = <span class="hljs-string">&quot;Linus&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">**kid</span>):                       <span class="hljs-comment"># 任意关键字参数</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The youngest child&#x27;s last name is &quot;</span> + kid[<span class="hljs-string">&quot;lname&quot;</span>] + <span class="hljs-string">&quot;.&quot;</span>)<br>my_func(fname = <span class="hljs-string">&quot;Lily&quot;</span>, lname = <span class="hljs-string">&quot;Refsnes&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>函数调用<ul><li>调用不带参数的函数，使用默认值参数，<code>return</code>语句可让函数返回值。</li><li>将任何数据类型的参数发送给函数，会在函数内部被视为相同的数据类型。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">country = <span class="hljs-string">&quot;Xiamen&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am from &quot;</span> + country + <span class="hljs-string">&quot;.&quot;</span>)<br>myfunc()                      <span class="hljs-comment"># 使用默认值参数</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * x              <span class="hljs-comment"># 让函数返回值</span><br><span class="hljs-built_in">print</span>(myFunc(<span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>(<span class="hljs-params">food</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> food:<br>        <span class="hljs-built_in">print</span>(y)<br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>my_func(fruits)               <span class="hljs-comment"># 使用列表作为参数</span><br></code></pre></td></tr></table></figure><h2 id="1-1-递归"><a href="#1-1-递归" class="headerlink" title="1-1 递归"></a>1-1 递归</h2><ul><li>递归函数<ul><li>函数递归意味着自定义的函数可以调用自身，递归是一个常见的数学和编程概念。</li><li>编写时易陷入一个永无止境或使用过多内存的函数中，递归也是有效的编程方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myRecursion</span>(<span class="hljs-params">i</span>):                         <span class="hljs-comment"># 自定义myRecursion函数，使用变量i作为参数</span><br>    <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span>):<br>        result = i + myRecursion(i - <span class="hljs-number">1</span>)     <span class="hljs-comment"># 每次递归时递减1</span><br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">else</span>:                                   <span class="hljs-comment"># 当条件小于等于0时，递归结束</span><br>        result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> result<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Recursion Example Results.&quot;</span>)<br>myRecursion(<span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><h2 id="1-2-lambda"><a href="#1-2-lambda" class="headerlink" title="1-2 lambda"></a>1-2 lambda</h2><ul><li>lambda函数<ul><li>匿名函数，可以接受任意数量的参数，但只能有一个表达式。</li><li>在另一函数中将一个函数用作匿名函数时，可以很好地展示<code>lambda</code>的作用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-keyword">lambda</span> i: i+<span class="hljs-number">10</span>            <span class="hljs-comment"># 将10添加到参数i中，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b: a*b          <span class="hljs-comment"># 将参数a与参数b相乘，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>))<br>x = <span class="hljs-keyword">lambda</span> a, b, c: a+b+c     <span class="hljs-comment"># 汇总参数a、b、c，并返回结果</span><br><span class="hljs-built_in">print</span>(x(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>(<span class="hljs-params">y</span>):                <span class="hljs-comment"># 定义一个带有一个参数的函数，并将该参数乘以一个未知数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">lambda</span> i: i*y<br>mydoubler = myfunc(<span class="hljs-number">2</span>)         <span class="hljs-comment"># 创建一个始终发送数字加倍的函数</span><br><span class="hljs-built_in">print</span>(mydoubler(<span class="hljs-number">11</span>))<br>mytripler = myfunc(<span class="hljs-number">3</span>)         <span class="hljs-comment"># 创建一个始终发送数字三倍的函数</span><br><span class="hljs-built_in">print</span>(mytripler(<span class="hljs-number">11</span>))<br></code></pre></td></tr></table></figure><h1 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2 类和对象"></a>2 类和对象</h1><ul><li>类和对象<ul><li>Python是一种面向对象的编程语言，Python中一切皆对象，都有其属性和方法。</li><li>使用<code>class</code>关键字创建一个类，一个类就如同一个对象构造器，用于创建对象。</li><li>所有类都有一个名为<code>__init()</code>的函数，<code>__init__()</code>函数总是在类启动时执行。</li><li><code>class</code>定义不能为空，若<code>class</code>没有定义内容，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:                <span class="hljs-comment"># 创建一个名为MyClass的类，并带有一个名为x的属性</span><br>    x = <span class="hljs-number">5</span><br>p = MyClass()                 <span class="hljs-comment"># 创建一个名为p的对象，并打印x的值</span><br><span class="hljs-built_in">print</span>(p.x)                    <span class="hljs-comment"># 这是最为简单的类和对象，但在实际应用中没有真正用处</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                 <span class="hljs-comment"># 创建名为Person的类，__init__()函数为name和age赋值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br><span class="hljs-built_in">print</span>(q.name)<br><span class="hljs-built_in">print</span>(q.age)<br><br>q.age = <span class="hljs-number">25</span>                    <span class="hljs-comment"># 修改对象属性</span><br><span class="hljs-built_in">print</span>(q.age)<br><span class="hljs-keyword">del</span> q.age                     <span class="hljs-comment"># 删除q对象中的age属性</span><br><span class="hljs-keyword">del</span> q                         <span class="hljs-comment"># 删除q对象</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">pass</span>                      <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>对象方法<ul><li>对象也可以包含方法，对象中的方法属于该对象的函数。</li><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age</span>):<br>        self.name = name<br>        self.age = age<br>    <span class="hljs-comment"># 创建对象方法，插入一个打印函数，并在q对象上执行</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + self.name + <span class="hljs-string">&quot;.&quot;</span>)<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><ul><li>self参数<ul><li>参数<code>self</code>是对当前类实例的引用，用于访问属于该类的变量。</li><li>不必命名为<code>self</code>，可随意调用，但必须是类中任何函数的第一个参数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>, name, age</span>):<br>        <span class="hljs-built_in">object</span>.name = name<br>        <span class="hljs-built_in">object</span>.age = age<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>(<span class="hljs-params">abc</span>):          <span class="hljs-comment"># object和abc代替self</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;My name is &quot;</span> + abc.name + <span class="hljs-string">&quot;.&quot;</span>)<br>q = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-number">26</span>)<br>q.myFunc()<br></code></pre></td></tr></table></figure><h1 id="3-继承"><a href="#3-继承" class="headerlink" title="3 继承"></a>3 继承</h1><ul><li>继承<ul><li>让类与类之间产生父子关系，即获取另一个类的静态属性或方法。</li><li>父类也叫基类或超类，子类是从另一个类继承的类，也叫派生类。</li><li>任何类都可以是父类，语法与创建类相同，创建子类时需将父类作为参数发送。</li><li><code>__init__()</code>函数每次使用类创建新对象时都会自动调用该函数，将其添加到子类中。<ul><li>子类不再继承父类的<code>__init__()</code>函数，会覆盖父类<code>__init__()</code>函数的继承。</li><li>为保持父类的<code>__init__()</code>函数继承，需添加对父类<code>__init__()</code>函数的调用。</li></ul></li><li>还可以使用<code>super()</code>函数，让子类继承父类的所有方法和属性。</li><li>若在子类中添加与父类中函数同名的方法，会覆盖父方法的继承。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:                                   <span class="hljs-comment"># 创建Person父类，具有fname和lname属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        self.fname = fname<br>        self.lname = lname<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">printName</span>(<span class="hljs-params">self</span>):                        <span class="hljs-comment"># 创建printName方法</span><br>        <span class="hljs-built_in">print</span>(self.fname, self.lname)<br>x = Person(<span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>x.printName()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student1</span>(<span class="hljs-title class_ inherited__">Person</span>):                         <span class="hljs-comment"># 创建Student1子类，继承Person类的属性和方法</span><br>    <span class="hljs-comment"># pass                                      # 将__init__()函数添加到Student1子类中</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname</span>):<br>        Person.__init__(self, fname, lname)     <span class="hljs-comment"># 添加对父类函数的调用，保留父类的继承</span><br>y = Student1(<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>)<br>y.printName()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student2</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)          <span class="hljs-comment"># super函数不必使用父类名称，自动继承</span><br>        self.graduation = year                  <span class="hljs-comment"># 添加一个Student2子类的graduation属性</span><br>z = Student2(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br><span class="hljs-built_in">print</span>(z.fname, z.lname, z.graduation)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student3</span>(<span class="hljs-title class_ inherited__">Person</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, fname, lname, year</span>):<br>        <span class="hljs-built_in">super</span>().__init__(fname, lname)<br>        self.graduation = year<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Welcome</span>(<span class="hljs-params">self</span>):                          <span class="hljs-comment"># 添加一个调用类welcome方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Welcome&quot;</span>, self.fname, self.lname, <span class="hljs-string">&quot;to the class of&quot;</span>, self.graduation, <span class="hljs-string">&quot;.&quot;</span>)<br>x = Student3(<span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-number">2019</span>)<br>x.Welcome()<br></code></pre></td></tr></table></figure><h1 id="4-迭代器"><a href="#4-迭代器" class="headerlink" title="4 迭代器"></a>4 迭代器</h1><ul><li>迭代器<ul><li>一个实现迭代器协议的对象，由方法<code>__iter__()</code>和<code>__next__()</code>组成。</li><li>列表、元组、字典和集合等都是可迭代对象，都有<code>iter()</code>属性，用于获取迭代器。</li><li>使用for循环遍历可迭代对象，实际for循环即创建一个迭代器并循环执行<code>next()</code>方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>myfruit = <span class="hljs-built_in">iter</span>(mytuple)       <span class="hljs-comment"># 元组返回一个迭代器，并打印每个值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myfruit))<br><br>mystring = <span class="hljs-string">&quot;apple&quot;</span>            <span class="hljs-comment"># 字符串也是可迭代对象</span><br>alphabet = <span class="hljs-built_in">iter</span>(mystring)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(alphabet))<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:             <span class="hljs-comment"># for循环即一个迭代器</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>类和对象迭代器<ul><li>要将类和对象创建为一个迭代器，必须使用<code>__iter__()</code>和<code>__next__()</code>方法。<ul><li><code>__iter__()</code>方法进行初始化等操作，始终返回迭代器对象本身。</li><li><code>__next__()</code>方法允许执行操作，并且必须返回序列中的下一项。</li><li>如果有足够的<code>next()</code>语句或在for循环中使用，迭代将永远进行。</li></ul></li><li><code>__next__()</code>中添加StopIteration终止条件，以在迭代完成指定次数时引发错误，防止迭代永远进行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum1</span>:                 <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>            <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>           <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br>myclass = MyNum1()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum2</span>:                 <span class="hljs-comment"># 创建一个返回数字的迭代器</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span>            <span class="hljs-comment"># 从1开始</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        x = self.a<br>        self.a += <span class="hljs-number">1</span>           <span class="hljs-comment"># 每个序列递增1</span><br>        <span class="hljs-keyword">return</span> x<br>myclass = MyNum2()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(myiters))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyNum3</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        self.a = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.a &lt;= <span class="hljs-number">20</span>:      <span class="hljs-comment"># 20次迭代后停止</span><br>            x = self.a<br>            self.a += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> x<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br>myclass = MyNum3()<br>myiters = <span class="hljs-built_in">iter</span>(myclass)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myiters:<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><h1 id="5-范围"><a href="#5-范围" class="headerlink" title="5 范围"></a>5 范围</h1><ul><li>局部范围<ul><li>在函数内部创建的变量属于该函数的局部范围，并且只能在该函数内部使用。</li><li>函数内部创建的局部变量，对函数内部的任何函数都可用(嵌套函数都可用)。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    x = <span class="hljs-number">30</span>                    <span class="hljs-comment"># 在myfunc函数内部创建的变量，在该函数内部可用</span><br>    <span class="hljs-built_in">print</span>(x)<br>myfunc()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">innerFunc</span>():<br>        <span class="hljs-built_in">print</span>(y)              <span class="hljs-comment"># 可以从函数内的函数访问局部变量y</span><br>    innerFunc()<br>myFunc()<br></code></pre></td></tr></table></figure><ul><li>全局范围<ul><li>在代码主体中创建的变量是全局变量，属于全局范围，可以在任何范围内使用。</li><li>若函数内外都使用相同变量名，将视为两个单独的变量，分别作用于函数内外部。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-built_in">print</span>(x)                  <span class="hljs-comment"># 可以在函数内部使用</span><br>myfunc()<br><span class="hljs-built_in">print</span>(x)                      <span class="hljs-comment"># 也可以在主体代码中使用</span><br><br>y = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    y = <span class="hljs-number">26</span><br>    <span class="hljs-built_in">print</span>(y)                  <span class="hljs-comment"># 局部变量作用于函数内部</span><br>myFunc()<br><span class="hljs-built_in">print</span>(y)                      <span class="hljs-comment"># 全局变量作用于函数外部</span><br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>使用global关键字，在函数内部创建全局变量。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfunc</span>():<br>    <span class="hljs-keyword">global</span> x                  <span class="hljs-comment"># global关键字创建全局变量</span><br>    x = <span class="hljs-number">30</span><br>myfunction()<br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-number">30</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFunc</span>():<br>    <span class="hljs-keyword">global</span> y                  <span class="hljs-comment"># 修改函数内的全局变量y</span><br>    y = <span class="hljs-number">26</span><br>myFunc()<br><span class="hljs-built_in">print</span>(y)<br></code></pre></td></tr></table></figure><h1 id="6-模块"><a href="#6-模块" class="headerlink" title="6 模块"></a>6 模块</h1><ul><li>模块<ul><li>模块可看成代码库，包含一组要包含在应用程序中的函数文件。</li><li>创建一个模块，只需要将所需的代码保存在文件扩展名为.py的文件中。</li><li>使用模块则通过import语句导入，语法：<code>module_name.function_name</code>。</li><li>模块中可包含函数，也可包含所有类型的变量，例如数组、字典、对象等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greeting</span>(<span class="hljs-params">name</span>):         <span class="hljs-comment"># 将该函数保存在名为Greeting.py文件中</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;.&quot;</span>)<br><br>person = &#123;                  <span class="hljs-comment"># 该字典也存在于Greeting.py文件中</span><br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;30&quot;</span>, <br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;China&quot;</span><br>&#125;<br><br><span class="hljs-keyword">import</span> Greeting             <span class="hljs-comment"># 在另一个文件中使用import语句导入创建的模块</span><br>Greeting.greeting(<span class="hljs-string">&quot;Lily&quot;</span>)<br><br>x = Greeting.person[<span class="hljs-string">&quot;age&quot;</span>]  <span class="hljs-comment"># 访问person字典</span><br><span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>内置模块<ul><li>导入模块时可以使用as关键字创建别名，<code>dir()</code>函数可以列出模块中的所有函数名。</li><li>使用from关键字从模块中导入部分元素，导入时引用模块中的元素不要使用模块名称。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> Greeting <span class="hljs-keyword">as</span> x        <span class="hljs-comment"># 将Greeting模块重命名为x</span><br>y = x.person[<span class="hljs-string">&quot;age&quot;</span>]<br><span class="hljs-built_in">print</span>(y)<br><br><span class="hljs-keyword">import</span> platform<br>z = <span class="hljs-built_in">dir</span>(platform)           <span class="hljs-comment"># dir()函数可用于所有模块，包括自定义模块</span><br><span class="hljs-built_in">print</span>(z)<br><br><span class="hljs-keyword">from</span> Greeting <span class="hljs-keyword">import</span> person <span class="hljs-comment"># 仅从模块中导入person字典</span><br><span class="hljs-built_in">print</span>(person[<span class="hljs-string">&quot;name&quot;</span>])       <span class="hljs-comment"># 不使用模块名称，例如Greeting.person[&quot;name&quot;]</span><br></code></pre></td></tr></table></figure><h2 id="6-1-Math"><a href="#6-1-Math" class="headerlink" title="6-1 Math"></a>6-1 Math</h2><ul><li>math模块<ul><li>内置函数<ul><li><code>min()</code>和<code>max()</code>可用于查找可迭代对象中的最小值和最大值。</li><li><code>abs()</code>函数返回指定数字的绝对值，<code>pow(x, y)</code>函数返回x的y次幂。</li></ul></li><li>使用时需要导入math模块，导入后就可以使用模块的方法和常量了。<ul><li><code>math.sqrt()</code>：返回一个数字的平方根。</li><li><code>math.ceil()</code>：将一个数字向上舍入取整。</li><li><code>math.floor()</code>：将一个数字向下舍入取整。</li><li><code>math.pi</code>：常数，返回PI，即圆周率3.14159265…的值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">min</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)          <span class="hljs-comment"># 5</span><br>b = <span class="hljs-built_in">max</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">25</span>)          <span class="hljs-comment"># 25</span><br>c = <span class="hljs-built_in">abs</span>(-<span class="hljs-number">2.75</span>)              <span class="hljs-comment"># 2.75</span><br>d = <span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)               <span class="hljs-comment"># 4*4*4</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br><br><span class="hljs-keyword">import</span> math<br>x = math.sqrt(<span class="hljs-number">64</span>)           <span class="hljs-comment"># 返回一个数字的平方根</span><br>y = math.ceil(<span class="hljs-number">1.45</span>)         <span class="hljs-comment"># 向上取整，返回2</span><br>z = math.floor(<span class="hljs-number">1.45</span>)        <span class="hljs-comment"># 向下取整，返回1</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><span class="hljs-built_in">print</span>(math.pi)              <span class="hljs-comment"># 返回圆周率PI</span><br></code></pre></td></tr></table></figure><h2 id="6-2-Json"><a href="#6-2-Json" class="headerlink" title="6-2 Json"></a>6-2 Json</h2><ul><li>json模块<ul><li>一种用于存储和交换数据的语法，是文本，使用JavaScript对象表示法编写。</li><li>Python中有内置包json，用于处理json数据，使用前需import导入json模块。</li><li><code>json.loads()</code>方法可以用来解析json字符串，结果将会返回一个Python字典。</li><li><code>json.dumps()</code>方法可以将Python对象转换为json字符串。<ul><li>该方法具有参数，使用indent参数定义缩进数。</li><li>使用separators参数定义分隔符，默认值为<code>(&quot;, &quot;, &quot;: &quot;)</code>。</li><li>即使用逗号和空格分隔每个对象，使用冒号和空格分隔键和值。</li><li>该方法还可以用于对结果中的键进行排序，使用sort_keys参数来指定。</li></ul></li><li>Python对象与等效的json(JavaScript)，转换如下。<table><thead><tr><th align="left">对象</th><th align="left">dict</th><th align="left">list</th><th align="left">tuple</th><th align="left">string</th><th align="left">int</th><th align="left">float</th><th align="left">True</th><th align="left">False</th><th align="left">None</th></tr></thead><tbody><tr><td align="left">json</td><td align="left">Object</td><td align="left">Array</td><td align="left">Array</td><td align="left">String</td><td align="left">Number</td><td align="left">Number</td><td align="left">true</td><td align="left">false</td><td align="left">null</td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> json<br><br>x = <span class="hljs-string">&#x27;&#123;&quot;name&quot;: &quot;Lily&quot;, &quot;age&quot;: &quot;26&quot;, &quot;city&quot;: &quot;XiaMen&quot;&#125;&#x27;</span><br>y = json.loads(x)           <span class="hljs-comment"># 从json字符串转换为python字典</span><br><span class="hljs-built_in">print</span>(y[<span class="hljs-string">&quot;name&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>x = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;26&quot;</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;XiaMen&quot;</span>&#125;<br>y = json.dumps(x)           <span class="hljs-comment"># 从Python字典转换为json字符串</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br><span class="hljs-built_in">print</span>(json.dumps(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Liki&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>&#125;))<br><span class="hljs-built_in">print</span>(json.dumps([<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>]))<br><span class="hljs-built_in">print</span>(json.dumps((<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;bananas&quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-string">&quot;hello&quot;</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">42</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-number">31.76</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">False</span>))<br><span class="hljs-built_in">print</span>(json.dumps(<span class="hljs-literal">None</span>))     <span class="hljs-comment"># 将Python对象转换为json字符串并打印</span><br><br>z = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <br>    <span class="hljs-string">&quot;married&quot;</span>: <span class="hljs-literal">True</span>, <br>    <span class="hljs-string">&quot;divorced&quot;</span>: <span class="hljs-literal">False</span>, <br>    <span class="hljs-string">&quot;children&quot;</span>: (<span class="hljs-string">&quot;Ann&quot;</span>, <span class="hljs-string">&quot;Billy&quot;</span>), <br>    <span class="hljs-string">&quot;pets&quot;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&quot;cars&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;BMW 230&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">27.5</span>&#125;, <br>        &#123;<span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Ford Edge&quot;</span>, <span class="hljs-string">&quot;mpg&quot;</span>: <span class="hljs-number">24.1</span>&#125;<br>    ]<br>&#125;<br><span class="hljs-built_in">print</span>(json.dumps(z))        <span class="hljs-comment"># 转换一个包含所有合法数据类型的Python对象</span><br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, separators=(<span class="hljs-string">&quot;. &quot;</span>, <span class="hljs-string">&quot; = &quot;</span>)))<br><span class="hljs-built_in">print</span>(json.dumps(z, indent=<span class="hljs-number">4</span>, sort_keys=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h2 id="6-3-Datetime"><a href="#6-3-Datetime" class="headerlink" title="6-3 Datetime"></a>6-3 Datetime</h2><ul><li>datetime模块<ul><li>导入该模块可以显示当前日期，包含年、月、日、时、分、秒和微秒。</li><li>创建日期使用模块的构造函数<code>datetime()</code>，该函数需年月日这三个参数。<ul><li>该函数还接受时间和时区参数(时、分、秒、微秒、tzone)。</li><li>该函数的时间和时区参数都是可选的，且具有默认值0，时区默认值为None。</li></ul></li><li><code>strftime()</code>方法将日期对象格式化为可读字符串，接受参数，使用format指定返回字符串的格式。</li><li>时间日期格式化符号，示例如下。<table><thead><tr><th align="left"><code>%a</code>：<code>Wed(简化星期)</code></th><th align="left"><code>%b</code>：<code>Dec(简化月份)</code></th></tr></thead><tbody><tr><td align="left"><code>%A</code>：<code>Wednesday(完整星期)</code></td><td align="left"><code>%B</code>：<code>December(完整月份)</code></td></tr><tr><td align="left"><code>%c</code>：<code>Mon Dec 29 17:17:00 2019</code></td><td align="left"><code>%d</code>：<code>31(日，0-31)</code></td></tr><tr><td align="left"><code>%C</code>：<code>20(世纪)</code></td><td align="left"><code>%f</code>：<code>548513(微秒)</code></td></tr><tr><td align="left"><code>%G</code>：<code>2019(年份，ISO 8601)</code></td><td align="left"><code>%H</code>：<code>20(时，00-23，24小时制)</code></td></tr><tr><td align="left"><code>%I</code>：<code>07(时，01-12，12小时制)</code></td><td align="left"><code>%j</code>：<code>365(年中的第n天，001-366)</code></td></tr><tr><td align="left"><code>%m</code>：<code>06(月份，01-12)</code></td><td align="left"><code>%u</code>：<code>1(星期，1-7，ISO 8601)</code></td></tr><tr><td align="left"><code>%M</code>：<code>15(分钟，00-59)</code></td><td align="left"><code>%U</code>：<code>52(一年中的星期数，00-53，星期天开始)</code></td></tr><tr><td align="left"><code>%p</code>：<code>A.M.或P.M.</code></td><td align="left"><code>%V</code>：<code>01(一年中的星期数，01-53，ISO 8601)</code></td></tr><tr><td align="left"><code>%S</code>：<code>15(秒，00-59)</code></td><td align="left"><code>%%</code>：<code>%(本身)</code></td></tr><tr><td align="left"><code>%w</code>：<code>0(星期，0-6，星期天开始)</code></td><td align="left"><code>%x</code>：<code>01/01/19</code></td></tr><tr><td align="left"><code>%W</code>：<code>52(一年中的星期数，00-53，星期一开始)</code></td><td align="left"><code>%X</code>：<code>17:15:00</code></td></tr><tr><td align="left"><code>%y</code>：<code>19(年份，00-99)</code></td><td align="left"><code>%z</code>：<code>+0100(UTC offset，标准时间偏移)</code></td></tr><tr><td align="left"><code>%Y</code>：<code>2019(年份，0000-9999)</code></td><td align="left"><code>%Z</code>：<code>CST(当前时区的名称)</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> datetime<br><br>x = datetime.datetime.now()         <span class="hljs-comment"># 显示当前日期</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(x.year)                       <span class="hljs-comment"># 显示年份</span><br><span class="hljs-built_in">print</span>(x.strftime(<span class="hljs-string">&quot;%A&quot;</span>))             <span class="hljs-comment"># 显示英文星期</span><br><br>y = datetime.datetime(<span class="hljs-number">2019</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)   <span class="hljs-comment"># 创建一个日期对象</span><br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(y.strftime(<span class="hljs-string">&quot;%B&quot;</span>))             <span class="hljs-comment"># 显示英文月份</span><br></code></pre></td></tr></table></figure><h2 id="6-4-正则表达式"><a href="#6-4-正则表达式" class="headerlink" title="6-4 正则表达式"></a>6-4 正则表达式</h2><ul><li>RegEx正则<ul><li>形成搜索模式的字符序列，用于检查字符串是否包含指定的搜索模式。</li><li>Python有一个名为re的内置包，用于处理正则表达式，使用前需导入re模块。<ul><li><code>findall()</code>：返回一个包含所有匹配项的列表。</li><li><code>search()</code>：在字符串中搜索匹配项，若有，返回一个Match对象，若多个，返回匹配项的第一个。</li><li><code>split()</code>：返回一个列表，其中字符串在每次匹配时都被拆分，可通过maxsplit参数控制出现次数。</li><li><code>sub()</code>：将匹配项替换为选择的文本，可以通过count参数来控制替换次数。</li></ul></li><li>元字符：指在正则表达式中具有特殊意义的专用字符，用来规定其前导字符在目标对象中的出现模式。<table><thead><tr><th align="left">元字符</th><th align="left">说明</th><th align="left">示例<img width=205></th></tr></thead><tbody><tr><td align="left"><code>[]</code></td><td align="left">一组字符</td><td align="left"><code>&quot;[a-m]&quot;</code></td></tr><tr><td align="left"><code>\</code></td><td align="left">表示特殊序列，也可用于转义特殊字符</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>.</code></td><td align="left">除换行符之外的任何字符</td><td align="left"><code>&quot;he..o&quot;</code></td></tr><tr><td align="left"><code>^</code></td><td align="left">以“hello”开头</td><td align="left"><code>&quot;^hello&quot;</code></td></tr><tr><td align="left"><code>$</code></td><td align="left">以“planet”结尾</td><td align="left"><code>&quot;planet$&quot;</code></td></tr><tr><td align="left"><code>*</code></td><td align="left">零次或多次出现</td><td align="left"><code>&quot;he.*o&quot;</code></td></tr><tr><td align="left"><code>+</code></td><td align="left">一次或多次出现</td><td align="left"><code>&quot;he.+o&quot;</code></td></tr><tr><td align="left"><code>?</code></td><td align="left">零次或一次出现</td><td align="left"><code>&quot;he.?o&quot;</code></td></tr><tr><td align="left"><code>&#123;&#125;</code></td><td align="left">指定出现的次数</td><td align="left"><code>&quot;he.&#123;2&#125;o&quot;</code></td></tr><tr><td align="left"><code>|</code></td><td align="left">或</td><td align="left"><code>&quot;falls | stays&quot;</code></td></tr><tr><td align="left"><code>()</code></td><td align="left">捕获和分组</td><td align="left"></td></tr></tbody></table></li><li>集合类特殊字符<table><thead><tr><th align="left">集合字符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>[arn]</code></td><td align="left">返回指定字符“a、r或n”之一的任意匹配项</td></tr><tr><td align="left"><code>[a-n]</code></td><td align="left">返回任意小写字符的匹配项</td></tr><tr><td align="left"><code>[^arn]</code></td><td align="left">返回除“a、r和n”之外的任意字符匹配项</td></tr><tr><td align="left"><code>[0123]</code></td><td align="left">返回指定数字“0、1、2或3”之一的任意匹配项</td></tr><tr><td align="left"><code>[0-9]</code></td><td align="left">返回0到9之间任意数字的匹配项</td></tr><tr><td align="left"><code>[0-5][0-9]</code></td><td align="left">返回从00到59之间任意两位数字的匹配项</td></tr><tr><td align="left"><code>[a-zA-Z]</code></td><td align="left">返回a到z、A到Z之间任意字母的匹配项</td></tr><tr><td align="left"><code>[+]</code></td><td align="left">集合中“+*.|()${} ”都无特殊含义，返回匹配字符串中任意“+”字符</td></tr></tbody></table></li><li>特殊序列类字符<table><thead><tr><th align="left">特殊字符</th><th align="left">说明</th><th align="left">示例<img width=60></th></tr></thead><tbody><tr><td align="left"><code>\A</code></td><td align="left">如果指定字符位于字符串“The”的开头，则返回匹配项</td><td align="left"><code>&quot;\AThe&quot;</code></td></tr><tr><td align="left"><code>\b</code></td><td align="left">返回位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;\bain&quot;</code></td></tr><tr><td align="left"><code>\B</code></td><td align="left">返回不位于单词“ain”的开头或结尾的指定字符匹配项</td><td align="left"><code>r&quot;ain\B&quot;</code></td></tr><tr><td align="left"><code>\d</code></td><td align="left">返回字符串包含0到9数字的匹配项</td><td align="left"><code>&quot;\d&quot;</code></td></tr><tr><td align="left"><code>\D</code></td><td align="left">返回字符串不包含数字0到9的匹配项</td><td align="left"><code>&quot;\D&quot;</code></td></tr><tr><td align="left"><code>\s</code></td><td align="left">用于匹配单个空格符，包括tab键和换行符</td><td align="left"><code>&quot;\s&quot;</code></td></tr><tr><td align="left"><code>\S</code></td><td align="left">用于匹配除单个空格符之外的所有字符</td><td align="left"><code>&quot;\S&quot;</code></td></tr><tr><td align="left"><code>\w</code></td><td align="left">用于匹配a到z的字符、0到9的数字和下划线(_)字符</td><td align="left"><code>&quot;\w&quot;</code></td></tr><tr><td align="left"><code>\W</code></td><td align="left">用于匹配所有与\w不匹配的字符</td><td align="left"><code>&quot;\W&quot;</code></td></tr><tr><td align="left"><code>\Z</code></td><td align="left">如果指定字符位于字符串“Spain”的末尾，则返回匹配项</td><td align="left"><code>&quot;Spain\Z&quot;</code></td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>x = re.search(<span class="hljs-string">&quot;^The.*Spain.$&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 查看是否以The开头，并以Spain.结尾</span><br><br>x = re.findall(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 按找到的顺序包含匹配项</span><br>y = re.findall(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 没找到匹配项，返回一个空列表</span><br><br>x = re.search(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x.start())        <span class="hljs-comment"># 搜索字符串中的第一个空格字符的位置</span><br>y = re.search(<span class="hljs-string">&quot;Portugal&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 没找到匹配项，返回None</span><br><br>x = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 在每个空白字符处进行拆分</span><br>y = re.split(<span class="hljs-string">&quot;\s&quot;</span>, txt, <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 仅在第一次出现时拆分字符串</span><br><br>x = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 用9替换每个空白字符</span><br>y = re.sub(<span class="hljs-string">&quot;\s&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, txt, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 替换前两次出现的空白字符</span><br></code></pre></td></tr></table></figure><ul><li>匹配对象<ul><li>指包含有关搜索和结果信息的对象，如果没有匹配，将返回None，而非匹配对象。</li><li>Match对象具有用于检索有关搜索的信息和结果的属性与方法。<ul><li><code>span()</code>：返回一个包含匹配的开始和结束位置的元组。</li><li><code>string</code>：返回传递给函数的字符串。</li><li><code>group()</code>：返回字符串中匹配的部分。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> re<br><br>txt = <span class="hljs-string">&quot;The rain in Spain.&quot;</span><br>a = re.search(<span class="hljs-string">&quot;ai&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 执行将返回匹配对象的搜索</span><br><br>b = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(b.span())         <span class="hljs-comment"># 查找以大写S开头的任何单词，并打印第一个匹配项的位置</span><br><br>c = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(c.string)         <span class="hljs-comment"># 打印传入函数的字符串</span><br><br>d = re.search(<span class="hljs-string">r&quot;\bS\w+&quot;</span>, txt)<br><span class="hljs-built_in">print</span>(d.group())        <span class="hljs-comment"># 打印匹配的字符串部分</span><br></code></pre></td></tr></table></figure><h1 id="7-用户输入"><a href="#7-用户输入" class="headerlink" title="7 用户输入"></a>7 用户输入</h1><ul><li>用户输入<ul><li>Python3.6版本使用<code>input()</code>方法进行用户输入。</li><li>Python2.7版本则使用<code>raw_input()</code>方法进行用户输入。</li><li>涉及到<code>input()</code>函数时停止执行，并在用户给出输入后继续执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">userName = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter username: &quot;</span>)          <span class="hljs-comment"># Python3.6</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Username is &quot;</span> + userName + <span class="hljs-string">&quot;.&quot;</span>)<br><br><span class="hljs-comment"># userName = raw_input(&quot;Enter username: &quot;)    # Python2.7，已停止维护</span><br><span class="hljs-comment"># print(&quot;Username is &quot; + userName + &quot;.&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="8-异常处理"><a href="#8-异常处理" class="headerlink" title="8 异常处理"></a>8 异常处理</h1><ul><li>异常处理<ul><li>try代码块允许测试代码块的错误。</li><li>except代码块允许处理错误。</li><li>else代码块允许在没有错误时执行代码。</li><li>finally代码块不管try和except代码块的结果如何，都允许执行代码，可用于关闭对象和清理资源。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 发生错误或异常时，会停止并生成错误信息，使用try语句处理异常</span><br>    <span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">except</span>:             <span class="hljs-comment"># try代码块引发异常，执行except语句，若无try代码块，则程序崩溃</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;An exception occurred.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(b)<br><span class="hljs-keyword">except</span> NameError:   <span class="hljs-comment"># try语句异常，若为NameError异常，打印该条信息，否则打印except代码块语句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variable x is not defined.&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hi~&quot;</span>)<br><span class="hljs-keyword">except</span>:             <span class="hljs-comment"># try代码块若异常，只执行except代码块中的内容</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">else</span>:               <span class="hljs-comment"># try代码块若没有异常，使用else定义要执行的代码块将被执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Nothing went wrong.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(c)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something else went wrong.&quot;</span>)<br><span class="hljs-keyword">finally</span>:            <span class="hljs-comment"># 指定了finally代码块，无论try代码块是否异常，都将执行该代码块</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The &#x27;try except&#x27; is finished.&quot;</span>)<br><br><span class="hljs-keyword">try</span>:                <span class="hljs-comment"># 尝试打开并写入一个不可写的文件</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;demofile.txt&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        f.write(<span class="hljs-string">&quot;Open file test.&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when writing to the file.&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()   <span class="hljs-comment"># 用于关闭对象和清理资源</span><br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Something went wrong when opening the file.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>引发异常<ul><li>使用raise关键字可以选择在条件发生时抛出异常。</li><li>可以定义要引发的错误类型，以及抛出异常时要打印给用户查看到的文本内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span>:                   <span class="hljs-comment"># 如果x小于0，引发异常并停止程序</span><br>    <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;Sorry, no numbers below zero.&quot;</span>)<br><br>y = <span class="hljs-string">&quot;Hi~&quot;</span><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">type</span>(y) <span class="hljs-keyword">is</span> <span class="hljs-built_in">int</span>:      <span class="hljs-comment"># 如果y不是整数，引发TypeError异常</span><br>    <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;Only integers are allowed.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数</tag>
      
      <tag>类</tag>
      
      <tag>对象</tag>
      
      <tag>继承</tag>
      
      <tag>模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础(一)</title>
    <link href="/2021/01/01/python/python01-python-ji-chu-yi/"/>
    <url>/2021/01/01/python/python01-python-ji-chu-yi/</url>
    
    <content type="html"><![CDATA[<p>Python由荷兰数学和计算机科学研究学会的Guido van Rossum于1990年代初设计，并于1991年发布，是跨平台解释型脚本语言。</p><span id="more"></span><h1 id="1-语法"><a href="#1-语法" class="headerlink" title="1 语法"></a>1 语法</h1><ul><li>缩进<ul><li>指代码行开头的空格，便于阅读，非常重要。</li><li>使用缩进表示代码块，如果跳过缩进，运行将会返回一个错误。</li><li>空格数量由程序员决定，最常见的是Tab四个，或Tab两个空格。</li><li>同个代码块中必须使用相同数量的空格缩进，否则返回一个错误。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">if</span> <span class="hljs-number">7</span> &gt; <span class="hljs-number">3</span>:<br>    <span class="hljs-comment"># 使用tab四个空格的缩进</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Seven is greater than three!&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>注释<ul><li>单行注释：以<code>#</code>开头。</li><li>多行注释：以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>开头，以<code>&quot;&quot;&quot;</code>或<code>&#39;&#39;&#39;</code>结尾。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;This is a comment.&quot;</span>)         <br><span class="hljs-comment">### 单行注释</span><br><span class="hljs-string">&quot;&quot;&quot; 多行注释</span><br><span class="hljs-string">《劝学》· 孟郊</span><br><span class="hljs-string">击石乃有火，不击元无烟。</span><br><span class="hljs-string">人学始知道，不学非自然。</span><br><span class="hljs-string">万事须己运，他得非我贤。</span><br><span class="hljs-string">青春须早为，岂能长少年。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2 变量"></a>2 变量</h1><ul><li>变量<ul><li>存储数据值的容器，赋值时创建，Python没有用于声明变量的命令。</li><li>变量不需要以任何特定的类型进行声明，甚至可以在设置后更改类型。</li><li>指定变量的数据类型，通过强制转换完成。</li><li>使用函数<code>type()</code>可以获取变量的数据类型。</li><li>使用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>声明字符串变量。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span>               <span class="hljs-comment"># 变量x设为int类型</span><br>x = <span class="hljs-string">&quot;Lily&quot;</span>          <span class="hljs-comment"># 变量x更改为str类型</span><br><span class="hljs-built_in">print</span>(x)<br><br>y = <span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>)          <span class="hljs-comment"># 强制转换变量y为int类型</span><br><span class="hljs-built_in">print</span>(y)        <br><br>z = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))      <span class="hljs-comment"># 获取变量z的数据类型</span><br></code></pre></td></tr></table></figure><ul><li>变量名<ul><li>命名规则<ul><li>区分大小写(age、Age和AGE是不同的变量)。</li><li>必须以字母或下划线开头，不能以数字开头。</li><li>只能包含字母数字字符和下划线(Az、0-9和_)。</li></ul></li><li>命名方法<ul><li>蛇形命名法，每个单词都以下划线字符(_)分隔。</li><li>小驼峰命名法，除首单词字母小写，其余单词都以大写字母开头。</li><li>大驼峰命名法，又叫帕斯卡命名法，每个单词都以大写字母开头。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">myvar__ = <span class="hljs-string">&quot;Lily&quot;</span><br>my_var_ = <span class="hljs-string">&quot;Lily&quot;</span><br>_my_var = <span class="hljs-string">&quot;Lily&quot;</span><br>my__Var = <span class="hljs-string">&quot;Lily&quot;</span><br>__MyVar = <span class="hljs-string">&quot;Lily&quot;</span><br>variable_name = <span class="hljs-string">&quot;Lily&quot;</span>      <span class="hljs-comment"># 蛇形命名</span><br>myVariableName = <span class="hljs-string">&quot;Lily&quot;</span>     <span class="hljs-comment"># 小驼峰命名</span><br>MyVariableName = <span class="hljs-string">&quot;Lily&quot;</span>     <span class="hljs-comment"># 大驼峰命名</span><br></code></pre></td></tr></table></figure><ul><li>多值分配<ul><li>允许在一行中为多个变量赋值。</li><li>可以在一行中为多个变量分配相同值。</li><li>若有一组列表或元组，允许将值提取到变量中，该方法称为拆包。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">x, y, z = <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>   <span class="hljs-comment"># 多个变量赋值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>x = y = z = <span class="hljs-string">&quot;Orange&quot;</span>                    <span class="hljs-comment"># 多个变量分配相同值</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br><br>fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>x, y, z = fruits                        <span class="hljs-comment"># 拆包</span><br><span class="hljs-built_in">print</span>(x)<br><span class="hljs-built_in">print</span>(y)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure><ul><li>输出变量<ul><li>使用函数<code>print()</code>输出多个变量，逗号分隔，支持不同数据类型。</li><li>使用<code>+</code>运算符输出多个变量，对于数字，该字符用于数学运算符。</li><li>如果尝试使用<code>+</code>操作符组合字符串和数字，那么将TypeError报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;C&quot;</span><br>y = <span class="hljs-string">&quot;Java&quot;</span><br>z = <span class="hljs-string">&quot;Python&quot;</span><br><span class="hljs-built_in">print</span>(x, y, z)<br><span class="hljs-built_in">print</span>(x + <span class="hljs-string">&quot; &quot;</span> + y + <span class="hljs-string">&quot; &quot;</span> + z)<br><br>x = <span class="hljs-number">2</span>             <span class="hljs-comment"># int类型</span><br>y = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(x + y)      <span class="hljs-comment"># 2 + 1 = 3</span><br>x = <span class="hljs-string">&quot;2&quot;</span>           <span class="hljs-comment"># str类型</span><br>y = <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-built_in">print</span>(x + y)      <span class="hljs-comment"># str(2) + str(1) = 21</span><br><br>x = <span class="hljs-number">1</span><br>y = <span class="hljs-string">&quot;Lily&quot;</span><br><span class="hljs-comment"># print(x + y)    # TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;.</span><br></code></pre></td></tr></table></figure><ul><li>全局变量<ul><li>函数外创建的变量，每个人都可用，无论是函数内部或外部。</li><li>函数内创建的同名变量，是局部变量，只能在函数内部使用。</li><li>若函数内外创建同名变量，全局变量将保持原样，全局并具有原始值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 在函数外部创建变量x，并在函数内部使用</span><br>x = <span class="hljs-string">&quot;scripting language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():                     <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br>func_one()<br><br><span class="hljs-comment"># 在函数内部创建变量y，与全局变量y同名</span><br>y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():  <br>    y = <span class="hljs-string">&quot;scripting language.&quot;</span>                   <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><ul><li>全局关键字<ul><li>在函数内部创建全局变量，使用global关键字。</li><li>若要更改函数内的全局变量，需使用关键字引用。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 使用global关键字，则变量x属于全局范围</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_one</span>():<br>    <span class="hljs-keyword">global</span> x<br>    x = <span class="hljs-string">&quot;scripting language.&quot;</span><br>func_one()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + x)<br><br><span class="hljs-comment"># 更改函数内的全局变量值，使用global引用该变量</span><br>y = <span class="hljs-string">&quot;scripting language.&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func_two</span>():<br>    <span class="hljs-keyword">global</span> y<br>    y = <span class="hljs-string">&quot;interpreted language.&quot;</span><br>func_two()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Python is a &quot;</span> + y)<br></code></pre></td></tr></table></figure><h1 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h1><ul><li>运算符<ul><li>算术：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>**</code>、<code>//</code>。</li><li>赋值：<code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>**=</code>、<code>//=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code>、<code>&gt;&gt;=</code>、<code>&lt;&lt;=</code>。</li><li>比较：<code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>。</li><li>逻辑：<code>and</code>、<code>or</code>、<code>not</code>。</li><li>身份：<code>is</code>、<code>is not</code>。</li><li>成员：<code>in</code>、<code>not in</code>。</li><li>位：<code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python">a, b = <span class="hljs-number">9</span>, <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(a // b)           <span class="hljs-comment"># 算术运算，向下取整除</span><br><span class="hljs-built_in">print</span>(-a // b)<br><br>b *= a                  <span class="hljs-comment"># 赋值运算，b = b * a</span><br><span class="hljs-built_in">print</span>(b)<br><br><span class="hljs-keyword">if</span> a &gt; b:               <span class="hljs-comment"># 比较运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a <span class="hljs-keyword">and</span> b:             <span class="hljs-comment"># 逻辑运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a和b都为True.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a和b有一个不为True.&quot;</span>)<br><br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">is</span> b):            <span class="hljs-comment"># 身份运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b有相同的标识.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a和b没有相同标识.&quot;</span>)<br><br><span class="hljs-built_in">list</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br><span class="hljs-keyword">if</span> (a <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>):         <span class="hljs-comment"># 成员运算</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a在给定的列表list中.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量a不在给定的列表list中.&quot;</span>)<br><br>c = a &gt;&gt; <span class="hljs-number">2</span>              <span class="hljs-comment"># 位运算，9=0000 1001</span><br><span class="hljs-built_in">print</span>(c)                <span class="hljs-comment"># 右移两位，0000 0010=2</span><br></code></pre></td></tr></table></figure><h1 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4 数据类型"></a>4 数据类型</h1><ul><li>数据类型<ul><li>无类型：<code>NoneType</code>。</li><li>数字类型：<code>int</code>、<code>float</code>、<code>complex</code>。</li><li>文本类型：<code>str</code>。</li><li>布尔类型：<code>bool</code>。</li><li>序列类型：<code>list</code>、<code>tuple</code>、<code>range</code>。</li><li>映射类型：<code>dict</code>。</li><li>集合类型：<code>set</code>、<code>frozenset</code>。</li><li>二进制类型：<code>bytes</code>、<code>bytearray</code>、<code>memoryview</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))                      <span class="hljs-comment"># 打印变量x的数据类型</span><br><br>y = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]   <span class="hljs-comment"># 设置数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><br>z = <span class="hljs-built_in">dict</span>(name = <span class="hljs-string">&quot;Lily&quot;</span>, age = <span class="hljs-number">26</span>)   <span class="hljs-comment"># 使用构造函数设置特定的数据类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br></code></pre></td></tr></table></figure><h2 id="4-1-数字"><a href="#4-1-数字" class="headerlink" title="4-1 数字"></a>4-1 数字</h2><ul><li>数字<ul><li><code>int</code>：整数，正数或负数，没有小数，长度不受限制。</li><li><code>float</code>：浮点数，包含一个或多个小数的正数或负数，可有带e的科学数字，表10的幂。</li><li><code>complex</code>：复数，使用j作为虚部，可以用<code>complex(a, b)</code>表示，也可以用<code>a + bj</code>表示。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = -<span class="hljs-number">1</span>           <span class="hljs-comment"># int</span><br>y = <span class="hljs-number">12E4</span>         <span class="hljs-comment"># float，12*10000</span><br>z = <span class="hljs-number">3</span> + <span class="hljs-number">5j</span>       <span class="hljs-comment"># complex，也可表示为complex(3, 5)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(x))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(y))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(z))<br><br><span class="hljs-keyword">import</span> random    <span class="hljs-comment"># 使用random内置模块，用于生成随机数</span><br><span class="hljs-built_in">print</span>(random.randrange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><ul><li>构造：类型转换就是使用构造函数完成的。<ul><li><code>int()</code>：整数、浮点数或字符串构造整数。</li><li><code>str()</code>：各种数据类型都可以构造字符串。</li><li><code>float()</code>：整数、浮点数或字符串构造浮点数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-built_in">float</span>(x)     <span class="hljs-comment"># int转float</span><br>b = <span class="hljs-built_in">int</span>(y)       <span class="hljs-comment"># float转int</span><br>c = <span class="hljs-built_in">complex</span>(x)   <span class="hljs-comment"># int转complex</span><br><span class="hljs-built_in">print</span>(a)         <span class="hljs-comment"># 注意，这里不能将复数转换成其他数字类型，否则报错</span><br><span class="hljs-built_in">print</span>(b)         <span class="hljs-comment"># TypeError: can&#x27;t convert complex to float(int).</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-2-字符串"><a href="#4-2-字符串" class="headerlink" title="4-2 字符串"></a>4-2 字符串</h2><ul><li>字符串<ul><li>Python中的字符串用单引号<code>&#39;&#39;</code>或双引号<code>&quot;&quot;</code>括起来。</li><li>可以使用三个引号<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>将多行字符串分配给变量。</li><li>字符串是表示Unicode字符的字节数组，没有<code>char</code>字符数据类型，单个字符只是长度为1的字符串。</li><li>方括号可以用来访问字符串中的元素，由于字符串是数组，可以通过<code>for</code>循环遍历字符串中的字符。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">s = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">人，得自个儿成全自个儿。</span><br><span class="hljs-string">要想人前显贵，必得人后受罪！</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(s)                          <span class="hljs-comment"># 换行符插入到与代码相同的位置</span><br><br>a = <span class="hljs-string">&quot;Test&quot;</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>])                       <span class="hljs-comment"># 获取位置0的字符，即第一个字符的位置</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;banana&quot;</span>:  <br>    <span class="hljs-built_in">print</span>(b)                      <span class="hljs-comment"># for循环遍历单词banana中的字母</span><br><br>c = <span class="hljs-string">&quot;Hi!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(c))                     <span class="hljs-comment"># 使用len()函数获取字符串的长度</span><br><br>txt = <span class="hljs-string">&quot;The best things in life are free!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt)              <span class="hljs-comment"># 关键字in，检查txt文本中是否存在单词free</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;free&quot;</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;free&#x27; is present.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt)     <span class="hljs-comment"># 关键字not in，检查txt文本中是否不存在单词expensive</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;expensive&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> txt:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No, &#x27;expensive&#x27; in not present.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>切片字符串<ul><li>使用切片语法返回一系列字符。</li><li>指定以冒号<code>:</code>分隔的开始和结束索引，返回字符串的一部分。</li><li>通过省略开始索引，切片范围会从第一个字符开始，即位置0。</li><li>通过省略结束索引，切片范围将到达末尾，也可以使用负索引从字符串末尾开始切片。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot;Hello, World!&quot;</span>         <span class="hljs-comment"># 第1个字符H的索引位置是0</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])              <span class="hljs-comment"># 获取位置2到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[ : <span class="hljs-number">5</span>])              <span class="hljs-comment"># 获取位置0到5的字符，不包括5</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>:  ])              <span class="hljs-comment"># 获取位置2到最后的字符，包括2</span><br><span class="hljs-built_in">print</span>(a[-<span class="hljs-number">5</span>: -<span class="hljs-number">2</span>])            <span class="hljs-comment"># 负索引：末尾字符!的索引位置是0，往左依次是-1，-2...</span><br></code></pre></td></tr></table></figure><ul><li>字符串内置方法<ul><li><code>upper()</code>：以大写形式返回字符串。</li><li><code>lower()</code>：以小写形式返回字符串。</li><li><code>strip()</code>：删除开头或结尾的任何空格。</li><li><code>replace()</code>：用另一个字符串替换当前字符串。</li><li><code>split()</code>：返回一个列表，其中指定分隔符之间的文本成为列表项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-string">&quot; Hello, World!&quot;</span><br><span class="hljs-built_in">print</span>(a.upper())            <span class="hljs-comment"># 大写形式</span><br><span class="hljs-built_in">print</span>(a.lower())            <span class="hljs-comment"># 小写形式</span><br><span class="hljs-built_in">print</span>(a.strip())            <span class="hljs-comment"># 删除空格</span><br><span class="hljs-built_in">print</span>(a.replace(<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>))  <span class="hljs-comment"># 用J替换H</span><br><span class="hljs-built_in">print</span>(a.split(<span class="hljs-string">&quot;,&quot;</span>))         <span class="hljs-comment"># 使用逗号分隔符拆分字符串</span><br></code></pre></td></tr></table></figure><ul><li>格式化字符串<ul><li>使用<code>+</code>运算符连接或组合两个字符串，如果用于连接字符串和数字，将报错。</li><li><code>format()</code>方法接受传递的参数，格式化字符串，可以用来组合字符串和数字。<ul><li>该方法接受无限数量的参数，并放置在相应的占位符中。</li><li>可通过索引号<code>&#123;num&#125;</code>确保将参数放置在正确的占位符中。</li><li>使用命名索引<code>&#123;name&#125;</code>，传递参数值时必须使用相应的变量名<code>name</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">x = <span class="hljs-string">&quot;Hello &quot;</span><br>y = <span class="hljs-string">&quot;World.&quot;</span><br>z = x + y                   <span class="hljs-comment"># 使用+运算符连接</span><br><span class="hljs-built_in">print</span>(z)<br><br>age = <span class="hljs-number">26</span><br>txt = <span class="hljs-string">&quot;My name is Lily, and I am &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(age))      <span class="hljs-comment"># 使用format()格式化方法</span><br><br>quantity = <span class="hljs-number">3</span><br>items_no = <span class="hljs-number">567</span><br>price_li = <span class="hljs-number">49.95</span><br>order = <span class="hljs-string">&quot;I want to pay &#123;&#125; dollars for &#123;&#125; pieces of item &#123;&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br>order = <span class="hljs-string">&quot;I want to pay &#123;2&#125; dollars for &#123;0&#125; pieces of item &#123;1&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(quantity, items_no, price_li))<br><br>price = <span class="hljs-number">49</span><br>txt = <span class="hljs-string">&quot;The price is &#123;:.2f&#125; dollars.&quot;</span><br><span class="hljs-built_in">print</span>(txt.<span class="hljs-built_in">format</span>(price))    <span class="hljs-comment"># 将价格格式化为带两位小数的数字</span><br><br>order = <span class="hljs-string">&quot;I have a &#123;carname&#125;, it is a &#123;model&#125;.&quot;</span><br><span class="hljs-built_in">print</span>(order.<span class="hljs-built_in">format</span>(carname = <span class="hljs-string">&quot;Ford&quot;</span>, model = <span class="hljs-string">&quot;Mustang&quot;</span>))<br></code></pre></td></tr></table></figure><ul><li>转义字符<ul><li>想在字符串中插入非法字符，可以使用转义字符<code>\</code>，后跟插入的非法字符即可。</li><li>常见的转义字符<ul><li><code>\&#39;</code>：单引号。</li><li><code>\\</code>：反斜杠。</li><li><code>\a</code>：响铃。</li><li><code>\n</code>：换行。</li><li><code>\r</code>：回车。</li><li><code>\v</code>：纵向制表符。</li><li><code>\t</code>：横向制表符。</li><li><code>\b</code>：退格符。</li><li><code>\f</code>：换页符。</li><li><code>\ooo</code>：八进制。</li><li><code>\xhh</code>：十六进制。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">txt = <span class="hljs-string">&quot;We are the so-called \&quot;Vikings\&quot; from the north.&quot;</span><br><span class="hljs-built_in">print</span>(txt)                  <span class="hljs-comment"># 转义双引号</span><br></code></pre></td></tr></table></figure><h2 id="4-3-布尔值"><a href="#4-3-布尔值" class="headerlink" title="4-3 布尔值"></a>4-3 布尔值</h2><ul><li>布尔值<ul><li>只表示为<code>True</code>或<code>False</code>，这两个值其中的一个。</li><li>函数<code>bool()</code>允许评估任何值，并返回<code>True</code>或<code>False</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">26</span><br>b = <span class="hljs-number">30</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b大于a.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b小于a.&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))             <span class="hljs-comment"># 评估一个数字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;Lily&quot;</span>))         <span class="hljs-comment"># 评估一个字符串</span><br></code></pre></td></tr></table></figure><ul><li>True值<ul><li>任何数字都是True，0除外。</li><li>任何字符串都是True，空字符串除外。</li><li>任何列表、元组、集合和字典都是True，空值除外。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">13</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-string">&quot;abc&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]))<br></code></pre></td></tr></table></figure><ul><li>False值<ul><li>空值，例如<code>[]</code>、<code>()</code>、<code>&#123;&#125;</code>、<code>&quot;&quot;</code>、数字<code>0</code>和<code>None</code>，还有<code>False</code>本身。</li><li>用户自定义类型的对象<ul><li>如果类定义了<code>__len__()</code>方法，并返回0或False，则输出False值。</li><li>如果类同时定义<code>__len__()</code>和<code>__bool__()</code>方法，则输出参考<code>__bool__()</code>的返回值。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(<span class="hljs-literal">False</span>))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myclass</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>myobj = myclass()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(myobj))          <span class="hljs-comment"># 定义了__len__()方法，并返回0       </span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__len__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A.__bool__()&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A is True.&quot;</span> <span class="hljs-keyword">if</span> A() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;A is not True.&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bool</span>(A()))        <span class="hljs-comment"># 同时定义了__len__()和__bool__()方法</span><br></code></pre></td></tr></table></figure><ul><li>返回布尔值情况<ul><li>创建返回布尔值的函数，可返回布尔值。</li><li>返回布尔值的内置函数：<code>isinstance()</code>。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">myFun</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(myFun())              <span class="hljs-comment"># 创建返回布尔值的函数</span><br><br>x = <span class="hljs-number">25</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">int</span>))   <span class="hljs-comment"># 检查对象是否为int整数</span><br></code></pre></td></tr></table></figure><h2 id="4-4-列表"><a href="#4-4-列表" class="headerlink" title="4-4 列表"></a>4-4 列表</h2><ul><li>列表<ul><li>用于将多个项目存储在单个变量中，使用方括号<code>[]</code>创建。</li><li>列表项是有序可变的，且允许重复值，索引时第一项为[0]。</li><li>列表长度使用<code>len()</code>函数计算，列表项可以是任何数据类型。</li><li>列表的数据类型为<code>&lt;class &#39;list&#39;&gt;</code>，使用<code>list()</code>构造函数创建新列表。</li><li>四种集合数据类型<ul><li>list：列表，有序且可变的集合，允许重复成员。</li><li>tuple：元组，有序且不可变的集合，允许重复成员。</li><li>set：集合，无序且不可变的集合(可删除或添加元素)，无索引，不允许重复成员。</li><li>dict：字典，有序且可变的集合(3.7版本开始有序，之前无序)，不允许重复成员。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mylist))          <span class="hljs-comment"># 获取列表长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mylist))         <span class="hljs-comment"># 查看列表的数据类型</span><br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]     <span class="hljs-comment"># 列表项可以是整数、布尔数据等类型</span><br>list2 = [<span class="hljs-literal">True</span>, <span class="hljs-literal">False</span>, <span class="hljs-literal">False</span>]<br>list3 = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-literal">True</span>, <span class="hljs-string">&quot;male&quot;</span>]<br>list4 = <span class="hljs-built_in">list</span>((<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>))    <span class="hljs-comment"># list()函数创建新列表</span><br><span class="hljs-built_in">print</span>(list4)<br></code></pre></td></tr></table></figure><ul><li>访问列表项<ul><li>通过索引号来访问列表项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是包含指定项目的新列表。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从列表末尾开始索引需指定负索引，使用<code>in</code>关键字确定列表中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>])            <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负索引最后一项Cherry</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>])         <span class="hljs-comment"># 范围从0开始，到2结束，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[ : <span class="hljs-number">2</span>])         <span class="hljs-comment"># 省略起始值，范围从0到2，不包括2</span><br><span class="hljs-built_in">print</span>(mylist[<span class="hljs-number">1</span>:  ])         <span class="hljs-comment"># 省略结束值，范围从1到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mylist[-<span class="hljs-number">2</span>: -<span class="hljs-number">1</span>])       <span class="hljs-comment"># 范围从-1到-2，不包括-1，即Banana</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mylist:       <span class="hljs-comment"># 确定mylist列表中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits list.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改列表项<ul><li>更改特定项目的值，需要参考索引号。</li><li>更改特定范围内项目的值<ul><li>使用新值定义一个列表，并参考要插入新值的索引号范围。</li><li>插入的项目多于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>插入的项目少于替换的项目，则新项目将插入指定的位置，其余项目将相应移动。</li><li>当插入的项目数和替换的项目数不匹配时，列表的长度会发生改变。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Orange&quot;</span>        <span class="hljs-comment"># 更改项目值</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">2</span>] = [<span class="hljs-string">&quot;Blackcurrant&quot;</span>, <span class="hljs-string">&quot;Watermelon&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 更改项目值范围，插入的项目多于替换的项目</span><br>mylist[<span class="hljs-number">1</span>: <span class="hljs-number">3</span>] = [<span class="hljs-string">&quot;Cherry&quot;</span>]   <span class="hljs-comment"># 插入的项目少于替换的项目，将第2和第3个值替换为1个值</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>添加列表项<ul><li><code>append()</code>：将项目添加到列表的末尾。</li><li><code>insert()</code>：在指定索引处插入列表项。</li><li><code>extend()</code><ul><li>将另一个列表中的元素附加到当前列表，元素会被添加到列表的末尾。</li><li>附加列表非必须，还可添加任何可迭代对象，例如元组、集合或字典。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist.append(<span class="hljs-string">&quot;Orange&quot;</span>)     <span class="hljs-comment"># 将Orange添加到列表末尾</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Blackcurrant&quot;</span>)<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 插入Blackcurrant作为第二项</span><br><br>tropical = [<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>mylist.extend(tropical)     <span class="hljs-comment"># 添加tropical元素到mylist列表</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mytuple = (<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>)<br>mylist.extend(mytuple)      <span class="hljs-comment"># 添加元组的元素到mylist列表中</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>删除列表项<ul><li><code>remove()</code>：删除指定的项目。</li><li><code>pop()</code>：删除指定的索引，若不指定索引，则删除最后一项。</li><li>使用<code>del</code>关键字可以删除指定的索引，也可以完全删除列表。</li><li><code>clear()</code>：清空列表，该列表仍然存在，但列表中没有内容。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-string">&#x27;Cherry&#x27;</span>, <span class="hljs-string">&#x27;Orange&#x27;</span>, <span class="hljs-string">&#x27;Mango&#x27;</span>, <span class="hljs-string">&#x27;Kiwi&#x27;</span>, <span class="hljs-string">&#x27;Papaya&#x27;</span>]<br>mylist.remove(<span class="hljs-string">&quot;Banana&quot;</span>)     <span class="hljs-comment"># 删除Banana</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist.pop(<span class="hljs-number">1</span>)               <span class="hljs-comment"># 删除第二项</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.pop()                <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">del</span> mylist[<span class="hljs-number">0</span>]               <span class="hljs-comment"># 删除第一项</span><br><span class="hljs-built_in">print</span>(mylist)<br><span class="hljs-keyword">del</span> mylist                  <span class="hljs-comment"># 删除整个列表，mylist此时不存在了</span><br><br>mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.clear()              <span class="hljs-comment"># 清除列表内容</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表循环<ul><li>使用for循环可以遍历列表项。</li><li>还可以通过引用索引号遍历列表项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历列表项，<code>len()</code>函数确定列表的长度，从0开始通过索引循环遍历。</li><li>还可以使用列表推导式(List Comprehension)进行循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mylist:            <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mylist)):<br>    <span class="hljs-built_in">print</span>(mylist[y])        <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mylist):      <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mylist[z])<br>    z = z + <span class="hljs-number">1</span><br><br>[<span class="hljs-built_in">print</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mylist]  <span class="hljs-comment"># 列表推导式循环遍历</span><br></code></pre></td></tr></table></figure><ul><li>列表推导式<ul><li>语法：<code>newlist = [expression for item in iterable if condition == True]</code>。</li><li>返回值是一个新列表，保持旧列表不变。</li><li><code>condition</code>：条件是过滤器，只接受条件为True的项，可选项，可省略。</li><li><code>iterable</code>：迭代对象可以是任何可迭代对象，例如列表、元组或集合等。</li><li><code>expression</code>：表达式是迭代中的当前项，但也是结果，可作为操纵结果的方式包含条件。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 只接受条件不是Apple的物品</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 条件可选</span><br><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># range()函数创建一个可迭代对象</span><br>mylist = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">5</span>]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 加了“只接受小于5”的判断条件</span><br><br>mylist = [x.upper() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 将新列表中的值设置为大写</span><br><br>mylist = [x <span class="hljs-keyword">if</span> x != <span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Cherry&quot;</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits]<br><span class="hljs-built_in">print</span>(mylist)               <span class="hljs-comment"># 将Banana替换为Cherry</span><br></code></pre></td></tr></table></figure><ul><li>列表排序<ul><li><code>sort()</code><ul><li>按字母数字顺序对列表进行排序，默认情况下升序。</li><li>如果是降序排序，使用关键字参数<code>reverse = True</code>。</li><li>还可以使用关键字参数<code>key = function</code>自定义函数。</li><li>默认情况下该方法区分大小写，所有大写字母排在小写字母之前。</li><li>如果想要一个不区分大小写的排序，使用<code>str.lower</code>作为键函数。</li></ul></li><li><code>reverse()</code>：反转元素的当前排序顺序。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>]<br>mylist.sort()               <span class="hljs-comment"># 升序，从小到大</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(reverse = <span class="hljs-literal">True</span>) <span class="hljs-comment"># 降序，从大到小</span><br><span class="hljs-built_in">print</span>(mylist)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(n - <span class="hljs-number">50</span>)      <span class="hljs-comment"># 根据数字与50的接近程度对列表进行排序</span><br>mylist = [<span class="hljs-number">100</span>, <span class="hljs-number">50</span>, <span class="hljs-number">65</span>, <span class="hljs-number">82</span>, <span class="hljs-number">23</span>]<br>mylist.sort(key = func)     <span class="hljs-comment"># 返回一个用于对列表进行升序排序的数字</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.sort()               <span class="hljs-comment"># 区分大小写，大写在前，小写在后</span><br><span class="hljs-built_in">print</span>(mylist)<br>mylist.sort(key = <span class="hljs-built_in">str</span>.lower)<span class="hljs-comment"># 不区分大小写的排序</span><br><span class="hljs-built_in">print</span>(mylist)<br><br>mylist = [<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>mylist.reverse()            <span class="hljs-comment"># 颠倒列表项的顺序</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><ul><li>列表复制<ul><li><code>copy()</code>：制作列表副本。</li><li><code>list()</code>：制作列表副本的另一种方法。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br>cplist1 = mylist.copy()     <span class="hljs-comment"># 使用copy()方法复制</span><br><span class="hljs-built_in">print</span>(cplist1)<br><br>cplist2 = <span class="hljs-built_in">list</span>(mylist)      <span class="hljs-comment"># 使用list()方法复制</span><br><span class="hljs-built_in">print</span>(cplist2)<br></code></pre></td></tr></table></figure><ul><li>列表添加<ul><li>使用<code>+</code>运算符可以连接两个或多个列表。</li><li>将另一个列表中的所有项目逐个附加到一个列表中。</li><li>通过<code>extend()</code>方法将一个列表中的元素添加到另一个列表中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python">list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list3 = list1 + list2       <span class="hljs-comment"># +运算符</span><br><span class="hljs-built_in">print</span>(list3)<br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list2:<br>    list1.append(x)         <span class="hljs-comment"># 逐个符加到list1列表中</span><br><span class="hljs-built_in">print</span>(list1)<br><br>list1 = [<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br>list2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>list1.extend(list2)         <span class="hljs-comment"># extend()方法在list1列表末尾添加list2元素</span><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>列表内置方法<ul><li><code>count()</code>：统计列表元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mylist = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>]<br><span class="hljs-built_in">print</span>(mylist.count(<span class="hljs-string">&quot;Apple&quot;</span>))      <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mylist.index(<span class="hljs-string">&quot;Banana&quot;</span>))     <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-5-元组"><a href="#4-5-元组" class="headerlink" title="4-5 元组"></a>4-5 元组</h2><ul><li>元组<ul><li>用在单个变量中存储多个项目，用圆括号<code>()</code>书写。</li><li>元组项是有序不可更改的，并且允许重复值，被索引时第一项索引为<code>[0]</code>。</li><li><code>len()</code>函数确定元组长度，创建一个只有一项的元组，须在项目后添加一个逗号。</li><li>元组项可以是任何数据类型，例如字符串、整数或布尔类型等，可以包含不同类型。</li><li>元组的数据类型为<code>&lt;class &#39;tuple&#39;&gt;</code>，使用<code>tuple()</code>构造函数创建一个新的元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># 圆括号书写</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># 允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mytuple))         <span class="hljs-comment"># 打印元组中的项目数</span><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, )       <span class="hljs-comment"># 一项元组，必须在项目后添加一个逗号</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mytuple))        <span class="hljs-comment"># &lt;class &#x27;tuple&#x27;&gt;</span><br><br>tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)    <span class="hljs-comment"># 字符串类型</span><br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>)    <span class="hljs-comment"># 整数类型</span><br>tuple3 = (<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>)    <span class="hljs-comment"># 包含不同类型</span><br><br>mytuple = <span class="hljs-built_in">tuple</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(mytuple)              <span class="hljs-comment"># tuple()函数创建新元组</span><br></code></pre></td></tr></table></figure><ul><li>访问元组项<ul><li>通过引用方括号内的索引号来访问元组项，第一项的索引为0。</li><li>负索引从末尾开始，最后一项是-1，倒数第二项是-2，以此类推。</li><li>指定开始和结束位置来指定索引范围，返回值将是具有指定项目的新元组。</li><li>省略起始值，范围将从第一项开始，省略结束值，范围将继续到列表末尾。</li><li>从元组末尾开始索引需指定负索引，使用<code>in</code>关键字确定元组中是否存在指定项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">1</span>])           <span class="hljs-comment"># Banana</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">1</span>])          <span class="hljs-comment"># 打印元组的最后一项Cherry</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Melon&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>: <span class="hljs-number">5</span>])        <span class="hljs-comment"># 返回第三、四、五项</span><br><span class="hljs-built_in">print</span>(mytuple[ : <span class="hljs-number">4</span>])        <span class="hljs-comment"># 省略起始值，范围从0到4，不包括4</span><br><span class="hljs-built_in">print</span>(mytuple[<span class="hljs-number">2</span>:  ])        <span class="hljs-comment"># 省略结束值，范围从2到末尾结束位置</span><br><span class="hljs-built_in">print</span>(mytuple[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])       <span class="hljs-comment"># 返回从索引-4到索引-1，不包括-4的项目</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Apple&quot;</span> <span class="hljs-keyword">in</span> mytuple:      <span class="hljs-comment"># 确定mytuple元组中是否存在指定项Apple</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;Apple&#x27; is in the fruits typle.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更新元组值<ul><li>元组一旦创建就不可更改，可将其转换为列表，更改列表再转换回元组。</li><li>若要添加一个或多个项目，使用这些项目创建一个新元组，并将其添加到现有元组中。</li><li>删除元组中的项目同样需要先转换为列表进行操作，<code>del</code>关键字则可以完全删除元组。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mylists = <span class="hljs-built_in">list</span>(mytuple)     <span class="hljs-comment"># 将元组转换为列表</span><br>mylists[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Kiwi&quot;</span>         <span class="hljs-comment"># 更改列表</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)    <span class="hljs-comment"># 再将列表转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>newtuple = (<span class="hljs-string">&quot;Orange&quot;</span>, )     <span class="hljs-comment"># 创建新元组</span><br>mytuple += newtuple         <span class="hljs-comment"># 添加该元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br>mylists = <span class="hljs-built_in">list</span>(mytuple)     <span class="hljs-comment"># 转换为列表</span><br>mylists.remove(<span class="hljs-string">&quot;Apple&quot;</span>)     <span class="hljs-comment"># 删除列表项</span><br>mytuple = <span class="hljs-built_in">tuple</span>(mylists)    <span class="hljs-comment"># 转换回元组</span><br><span class="hljs-built_in">print</span>(mytuple)<br><br><span class="hljs-keyword">del</span> mytuple                 <span class="hljs-comment"># 完全删除元组</span><br><span class="hljs-comment"># print(mytuple)            # NameError: name &#x27;mytuple&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>元组拆包<ul><li>创建元组并赋值称为元组打包，将值提取回变量中称为拆包。</li><li>拆包时变量数必须与元组值的数量匹配，若不匹配则使用星号<code>*</code>将剩余值收集为列表。</li><li>若星号被添加到另一个变量而非最后一个，Python将为变量分配值，直至剩余值数量与剩余变量数匹配。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>(green, yellow, red) = mytuple<br><span class="hljs-built_in">print</span>(green)                <span class="hljs-comment"># 拆包</span><br><br>mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Strawberry&quot;</span>, <span class="hljs-string">&quot;Raspberry&quot;</span>)<br>(green, yellow, *red) = mytuple<br><span class="hljs-built_in">print</span>(red)                  <span class="hljs-comment"># 使用星号*将剩余值收集为列表</span><br><br>(green, *tropic, red) = mytuple<br><span class="hljs-built_in">print</span>(tropic)               <span class="hljs-comment"># 添加tropic变量值列表</span><br></code></pre></td></tr></table></figure><ul><li>元组循环<ul><li>使用for循环可以遍历元组项。</li><li>还可以通过引用索引号遍历元组项，使用<code>range()</code>和<code>len()</code>函数创建合适的迭代器。</li><li>使用while循环遍历元组项，<code>len()</code>函数确定元组的长度，从0开始通过索引循环遍历。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mytuple:           <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mytuple)):<br>    <span class="hljs-built_in">print</span>(mytuple[y])       <span class="hljs-comment"># 索引号遍历</span><br><br>z = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> z &lt; <span class="hljs-built_in">len</span>(mytuple):     <span class="hljs-comment"># while循环遍历</span><br>    <span class="hljs-built_in">print</span>(mytuple[z])<br>    z = z + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>元组添加<ul><li>使用<code>+</code>运算符可以连接两个或多个元组。</li><li>使用<code>*</code>运算符将元组内容乘以给定次数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python">tuple1 = (<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>)<br>tuple2 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>tuple3 = tuple1 + tuple2<br><span class="hljs-built_in">print</span>(tuple3)               <span class="hljs-comment"># +运算符</span><br><br>fruits = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>)<br>mytuple = fruits * <span class="hljs-number">2</span>        <span class="hljs-comment"># *运算符</span><br><span class="hljs-built_in">print</span>(mytuple)<br></code></pre></td></tr></table></figure><ul><li>元组内置方法<ul><li><code>count()</code>：统计元组元素出现的次数。</li><li><code>index()</code>：返回指定值首次出现的位置。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python">mytuple = (<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>)<br><span class="hljs-built_in">print</span>(mytuple.count(<span class="hljs-string">&quot;Apple&quot;</span>))     <span class="hljs-comment"># 统计Apple出现的次数</span><br><span class="hljs-built_in">print</span>(mytuple.index(<span class="hljs-string">&quot;Banana&quot;</span>))    <span class="hljs-comment"># 返回Banana首次出现的位置</span><br></code></pre></td></tr></table></figure><h2 id="4-6-集合"><a href="#4-6-集合" class="headerlink" title="4-6 集合"></a>4-6 集合</h2><ul><li>集合<ul><li>用于将多个项目存储在单个变量中，用大括号<code>&#123;&#125;</code>书写。</li><li>集合项是无序不可更改的，且无索引，也不允许重复值。</li><li><code>len()</code>函数确定集合长度，集合项可以是任何数据类型。</li><li>例如字符串、整数或布尔类型等，可以包含不同数据类型。</li><li>集合的数据类型为<code>&lt;class &#39;set&#39;&gt;</code>，使用<code>set()</code>构造函数创建一个新集合，for循环遍历集合项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># 大括号书写</span><br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>&#125;<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># 不允许重复值</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(myset))           <span class="hljs-comment"># 获取集合中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myset))          <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;      <span class="hljs-comment"># 字符串类型</span><br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;      <span class="hljs-comment"># 整数类型</span><br>set3 = &#123;<span class="hljs-literal">True</span>, <span class="hljs-number">26</span>, <span class="hljs-string">&quot;s&quot;</span>&#125;      <span class="hljs-comment"># 包含不同类型</span><br><br>myset = <span class="hljs-built_in">set</span>((<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>))<br><span class="hljs-built_in">print</span>(myset)                <span class="hljs-comment"># set()函数创建新集合</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><ul><li>访问集合项<ul><li>不能通过索引访问集合项，使用<code>for</code>循环遍历。</li><li>或者使用<code>in</code>关键字确定集合中是否存在指定值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> myset:             <span class="hljs-comment"># for循环遍历</span><br>    <span class="hljs-built_in">print</span>(x)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Banana&quot;</span> <span class="hljs-keyword">in</span> myset)    <span class="hljs-comment"># in关键字确定</span><br></code></pre></td></tr></table></figure><ul><li>添加集合项<ul><li>创建集合后无法更改集合项，但<code>add()</code>方法可添加新项目。</li><li>使用<code>update()</code>方法可以将另一个集合项添加到当前集合中。</li><li><code>update()</code>方法中的对象，可以是任何可迭代的对象，例如元组、列表或字典等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.add(<span class="hljs-string">&quot;Orange&quot;</span>)         <span class="hljs-comment"># add()方法添加集合项</span><br><span class="hljs-built_in">print</span>(myset)<br><br>tropical = &#123;<span class="hljs-string">&quot;Mango&quot;</span>, <span class="hljs-string">&quot;Papaya&quot;</span>&#125;<br>myset.update(tropical)      <span class="hljs-comment"># 添加tropical集合项到myset</span><br><span class="hljs-built_in">print</span>(myset)<br><br>mylist = [<span class="hljs-string">&quot;Kiwi&quot;</span>, <span class="hljs-string">&quot;Pineapple&quot;</span>]<br>myset.update(mylist)        <span class="hljs-comment"># 添加列表元素到myset集合中</span><br><span class="hljs-built_in">print</span>(myset)<br></code></pre></td></tr></table></figure><ul><li>删除集合项<ul><li>使用<code>remove()</code>或<code>discard()</code>方法删除集合中的项目。<ul><li>如果要删除的集合项不存在，使用<code>remove()</code>将会报错。</li><li>如果要删除的集合项不存在，使用<code>discard()</code>不会报错。</li></ul></li><li><code>pop()</code>方法删除最后一项，集合无序，不确定删除的具体项。</li><li><code>clear()</code>方法清空集合，该集合仍在，<code>del</code>关键字则完全删除集合。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Python">myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.remove(<span class="hljs-string">&quot;Banana&quot;</span>)      <span class="hljs-comment"># remove()方法删除Banana</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-comment"># myset.remove(&quot;Banana&quot;)    # 不存在集合项，报错KeyError: &#x27;Banana&#x27;.</span><br>myset.discard(<span class="hljs-string">&quot;Banana&quot;</span>)     <span class="hljs-comment"># 不存在集合项，使用discard()方法不会报错</span><br><span class="hljs-built_in">print</span>(myset)<br><br>thisset = myset.pop()       <span class="hljs-comment"># 删除最后一项</span><br><span class="hljs-built_in">print</span>(myset)<br><span class="hljs-built_in">print</span>(thisset)<br><br>myset = &#123;<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>&#125;<br>myset.clear()               <span class="hljs-comment"># 清空集合</span><br><span class="hljs-built_in">print</span>(myset)<br><br><span class="hljs-keyword">del</span> myset                   <span class="hljs-comment"># 完全删除集合</span><br><span class="hljs-comment"># print(myset)              # NameError: name &#x27;myset&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>集合添加<ul><li><code>union()</code>：返回一个包含两个集合中所有项目的新集合，会排除重复项。</li><li><code>update()</code>：将一个集合的所有项目插入到另一个集合中，会排除重复项。</li><li><code>intersection()</code>：仅包含存在于两个集合中的相同项。</li><li><code>intersection_update()</code>：仅保留两个集合中存在的相同项。</li><li><code>symmetric_difference()</code>：仅包含存在于两个集合中的不同项。</li><li><code>symmetric_difference_update()</code>：仅保留两个集合中存在的不同项。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.union(set2)     <span class="hljs-comment"># 返回一个新集合set3</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set1.update(set2)           <span class="hljs-comment"># 将set2中的所有项目插入到set1中</span><br><span class="hljs-built_in">print</span>(set1)<br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.intersection(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 仅包含存在于set1和set2中的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set1.intersection_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 仅保留set1和set2中存在的相同项</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.symmetric_difference(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 仅包含存在于set1和set2中的不同项</span><br><br>set1.symmetric_difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 仅保留set1和set2中存在的不同项</span><br></code></pre></td></tr></table></figure><ul><li>集合内置方法<ul><li><code>copy()</code>：复制一个集合。</li><li><code>difference()</code>：返回集合的差集。</li><li><code>difference_update()</code>：移除指定集合中包含与另一个集合相同项的元素。</li><li><code>isdisjoint()</code>：判断两个集合是否相交，不相交返回True，否则返回False。</li><li><code>issubset()</code>：判断集合是否被其他集合包含，是则返回True，否则返回False。</li><li><code>issuperset()</code>：判断集合是否包含其他集合，是则返回True，否则返回False。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = set1.copy()          <span class="hljs-comment"># 复制set1</span><br><span class="hljs-built_in">print</span>(set3)<br><br>set3 = set1.difference(set2)<br><span class="hljs-built_in">print</span>(set3)                 <span class="hljs-comment"># 差集</span><br>set1.difference_update(set2)<br><span class="hljs-built_in">print</span>(set1)                 <span class="hljs-comment"># 移除set1中与set2相同的元素，返回set1中剩余的元素</span><br><br>set1 = &#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>set3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>result = set1.isdisjoint(set2)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断是否相交，不相交为True</span><br>result = set1.issubset(set3)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断set1是否被set3包含</span><br>result = set1.issuperset(set2)<br><span class="hljs-built_in">print</span>(result)               <span class="hljs-comment"># 判断set1是否包含set2</span><br></code></pre></td></tr></table></figure><h2 id="4-7-字典"><a href="#4-7-字典" class="headerlink" title="4-7 字典"></a>4-7 字典</h2><ul><li>字典<ul><li>用于将数据值存储在键值对中，使用大括号<code>&#123;&#125;</code>进行书写，带有键和值。</li><li>字典项目是有序可更改的，且不允许重复，键值对形式呈现，用键名引用。</li><li>使用<code>len()</code>函数获取字典长度，字典的数据类型为<code>&lt;class &#39;dict&#39;&gt;</code>。</li><li>字典的值可以是任何数据类型，例如字符串、整数、布尔值或列表等。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,           <span class="hljs-comment"># 字符串</span><br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,                 <span class="hljs-comment"># 整数</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>],    <span class="hljs-comment"># 列表</span><br>    <span class="hljs-string">&quot;colors&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;white&quot;</span>]<br>&#125;<br><span class="hljs-built_in">print</span>(mydict)                     <span class="hljs-comment"># 不允许重复，重复值将覆盖现有值</span><br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;brand&quot;</span>])            <span class="hljs-comment"># 使用键名引用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mydict))                <span class="hljs-comment"># 打印字典中的项目数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(mydict))               <span class="hljs-comment"># &lt;class &#x27;dict&#x27;&gt;</span><br></code></pre></td></tr></table></figure><ul><li>访问字典项<ul><li>通过引用方括号内的键名来访问字典的项目，还可以使用<code>get()</code>方法获取。</li><li>修改原字典对象，视图对象的值也会发生改变，视图对象包括以下三个方法。<ul><li><code>keys()</code>方法返回字典中所有的键列表。</li><li><code>values()</code>方法返回字典中所有的值列表。</li><li><code>items()</code>方法以列表返回可遍历的元组数组。</li></ul></li><li>使用<code>in</code>关键字确定字典中是否存在指定的键。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-built_in">print</span>(mydict[<span class="hljs-string">&quot;model&quot;</span>])      <span class="hljs-comment"># 引用键名访问</span><br><span class="hljs-built_in">print</span>(mydict.get(<span class="hljs-string">&quot;model&quot;</span>))  <span class="hljs-comment"># get()方法获取</span><br><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 获取键列表</span><br>mydict[<span class="hljs-string">&quot;colors&quot;</span>] = <span class="hljs-string">&quot;white&quot;</span>  <span class="hljs-comment"># 修改原字典mydict的colors对象</span><br><span class="hljs-built_in">print</span>(mydict.keys())        <span class="hljs-comment"># 获取的键列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.values())      <span class="hljs-comment"># 获取值列表</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2022</span>       <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.values())      <span class="hljs-comment"># 获取的值列表也得到更新</span><br><br><span class="hljs-built_in">print</span>(mydict.items())       <span class="hljs-comment"># 返回字典中的每个项目作为列表的元组</span><br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2020</span>       <span class="hljs-comment"># 修改原字典mydict的year对象</span><br><span class="hljs-built_in">print</span>(mydict.items())       <span class="hljs-comment"># 获取的元组数组也得到更新</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;model&quot;</span> <span class="hljs-keyword">in</span> mydict:       <span class="hljs-comment"># 检查mydict字典中是否存在model对象</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Yes, &#x27;model&#x27; is one of the keys in mydict dictionary.&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li>更改字典项<ul><li>通过引用键名来更改特定字典项的值。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;year&quot;</span>] = <span class="hljs-number">2019</span>             <span class="hljs-comment"># 引用键名更改</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2021</span>&#125;)     <span class="hljs-comment"># update()方法更新</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>添加字典项<ul><li>通过使用新的索引键并为其分配值来完成向字典添加项目。</li><li><code>update()</code>方法使用给定参数中的字典项更新字典，参数必须是字典或具有键值对的可迭代对象。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>mydict[<span class="hljs-string">&quot;color&quot;</span>] = <span class="hljs-string">&quot;red&quot;</span>           <span class="hljs-comment"># 使用新的索引键并为其分配值</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.update(&#123;<span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">2000000</span>&#125;) <span class="hljs-comment"># update()方法将price添加到字典中</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><ul><li>删除字典项<ul><li><code>pop()</code>：删除具有指定键名的项目。</li><li><code>popitem()</code>：删除最后插入的项目，3.7之前的版本会删除随机项目。</li><li>使用<code>del</code>关键字删除具有指定键名的项目，也可以完全删除整个字典。</li><li><code>clear()</code>：清空字典。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span>,<br>    <span class="hljs-string">&quot;colors&quot;</span>: <span class="hljs-string">&quot;red&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">20000000</span><br>&#125;<br>mydict.pop(<span class="hljs-string">&quot;model&quot;</span>)         <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)  <br>mydict.popitem()            <span class="hljs-comment"># 删除最后插入的项目</span><br><span class="hljs-built_in">print</span>(mydict)     <br><span class="hljs-keyword">del</span> mydict[<span class="hljs-string">&quot;brand&quot;</span>]         <span class="hljs-comment"># 删除指定键名的项目</span><br><span class="hljs-built_in">print</span>(mydict)<br>mydict.clear()              <span class="hljs-comment"># 清空字典</span><br><span class="hljs-built_in">print</span>(mydict)       <br><span class="hljs-keyword">del</span> mydict                  <span class="hljs-comment"># 完全删除整个字典</span><br><span class="hljs-comment"># print(mydict)             # NameError: name &#x27;mydict&#x27; is not defined.</span><br></code></pre></td></tr></table></figure><ul><li>字典循环<ul><li>for循环可以遍历字典项，返回值可以是字典的键，也可以是字典的值。</li><li>可以使用for循环配合<code>keys()</code>和<code>values()</code>方法分别返回字典的键和值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 打印字典中的所有键</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> mydict:<br>    <span class="hljs-built_in">print</span>(mydict[y])        <span class="hljs-comment"># 打印字典中的所有值</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> mydict.keys():<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># keys()方法返回键</span><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> mydict.values():<br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># values()方法返回值</span><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> mydict.items():<br>    <span class="hljs-built_in">print</span>(x, y)             <span class="hljs-comment"># items()方法遍历keys和values</span><br></code></pre></td></tr></table></figure><ul><li>字典复制<ul><li><code>copy()</code>：复制副本。</li><li><code>dict()</code>：制作副本。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Python">mydict = &#123;<br>    <span class="hljs-string">&quot;brand&quot;</span>: <span class="hljs-string">&quot;Ford&quot;</span>,<br>    <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;Mustang&quot;</span>,<br>    <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">1964</span><br>&#125;<br>dict1 = mydict.copy()       <span class="hljs-comment"># 复制副本</span><br><span class="hljs-built_in">print</span>(dict1)<br>dict2 = <span class="hljs-built_in">dict</span>(mydict)        <span class="hljs-comment"># 制作副本</span><br><span class="hljs-built_in">print</span>(dict2)<br></code></pre></td></tr></table></figure><ul><li>字典嵌套<ul><li>指字典可以包含字典。</li><li>可以将其他字典添加到一个新字典中。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 创建一个包含两个字典的字典</span><br>myfamily = &#123;<br>    <span class="hljs-string">&quot;child1&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;,<br>    <span class="hljs-string">&quot;child2&quot;</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br><span class="hljs-comment"># 创建一个包含两个字典的新字典</span><br>child1 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Emil&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2010</span>&#125;<br>child2 = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tobias&quot;</span>, <span class="hljs-string">&quot;year&quot;</span>: <span class="hljs-number">2020</span>&#125;<br>myfamily = &#123;<br>    <span class="hljs-string">&quot;child1&quot;</span>: child1,<br>    <span class="hljs-string">&quot;child2&quot;</span>: child2<br>&#125;<br><span class="hljs-built_in">print</span>(myfamily)<br></code></pre></td></tr></table></figure><ul><li>字典内置方法<ul><li><code>fromkeys()</code>：创建新字典，以序列中的元素作为字典的键，value为字典所有键对应的初始值。</li><li><code>setdefault()</code>：与<code>get()</code>方法类似，如果键不存在于字典中，就会添加键并将值设为默认值。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Python">seq = (<span class="hljs-string">&quot;Google&quot;</span>, <span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Sougou&quot;</span>)<br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq)                 <span class="hljs-comment"># 不指定默认的键值，默认为None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                          <span class="hljs-comment"># &#123;&#x27;Google&#x27;: None, &#x27;Baidu&#x27;: None, &#x27;Sougou&#x27;: None&#125;</span><br>mydict = <span class="hljs-built_in">dict</span>.fromkeys(seq, <span class="hljs-number">10</span>)             <span class="hljs-comment"># 指定默认的键值为10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(mydict))                          <span class="hljs-comment"># &#123;&#x27;Google&#x27;: 10, &#x27;Baidu&#x27;: 10, &#x27;Sougou&#x27;: 10&#125;</span><br><br>mydict = &#123;<span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;Lily&quot;</span>, <span class="hljs-string">&quot;Age&quot;</span>: <span class="hljs-number">26</span>&#125;<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>))             <span class="hljs-comment"># 与get()方法类似</span><br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Age&quot;</span>, <span class="hljs-literal">None</span>))<br><span class="hljs-built_in">print</span>(mydict.setdefault(<span class="hljs-string">&quot;Sex&quot;</span>))             <span class="hljs-comment"># 添加键并将值设为默认值None   </span><br><span class="hljs-comment"># print(mydict.setdefault(&quot;Sex&quot;, &quot;female&quot;)) # 默认为None后再设置无效</span><br><span class="hljs-built_in">print</span>(mydict)<br></code></pre></td></tr></table></figure><h1 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h1><ul><li>数组<ul><li>Python没有数组类型，只有列表类型，数组可用列表替代。</li><li>数组用于在一个变量中存储多个值，通过索引号来访问这些值。</li><li>Python没有对数组的内置支持，列表代替时内置方法与之相通。<ul><li><code>append()</code>、<code>clear()</code>、<code>copy()</code>、<code>count()</code>、<code>extend()</code>。</li><li><code>index()</code>、<code>insert()</code>、<code>pop()</code>、<code>remove()</code>、<code>reverse()</code>、<code>sort()</code>。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Python">cars = [<span class="hljs-string">&quot;BMW&quot;</span>, <span class="hljs-string">&quot;Ford&quot;</span>, <span class="hljs-string">&quot;Volvo&quot;</span>]<br><span class="hljs-built_in">print</span>(cars[<span class="hljs-number">0</span>])                <span class="hljs-comment"># 获取第一个数组项的值</span><br><br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;Toyota&quot;</span>            <span class="hljs-comment"># 修改第一个数组项的值</span><br><span class="hljs-built_in">print</span>(cars)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(cars))              <span class="hljs-comment"># 返回该数组的长度，长度总比最高数组索引数大1</span><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cars:                <span class="hljs-comment"># 使用for循环遍历数组的所有元素</span><br>    <span class="hljs-built_in">print</span>(x)<br><br>cars.append(<span class="hljs-string">&quot;Honda&quot;</span>)          <span class="hljs-comment"># append()方法添加元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.pop(<span class="hljs-number">1</span>)                   <span class="hljs-comment"># pop()方法从数组删除第二个元素</span><br><span class="hljs-built_in">print</span>(cars)<br><br>cars.remove(<span class="hljs-string">&quot;Volvo&quot;</span>)          <span class="hljs-comment"># remove()方法从数组删除Volvo元素，只删除第一次出现的指定值</span><br><span class="hljs-built_in">print</span>(cars)<br></code></pre></td></tr></table></figure><ul><li>numpy库定义的数组<ul><li>数组在numpy库中定义，若要使用需事先导入库，数组类型为<code>&lt;class &#39;numpy.ndarray&#39;&gt;</code>。</li><li>numpy中的数组对象称为ndarray，通过使用<code>array()</code>函数可以创建一个numpy的ndarray对象。</li><li>将列表、元组或任何类似数组的对象传递给<code>array()</code>方法，<code>array()</code>方法将其转换为ndarray。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>myArray = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(myArray)                <span class="hljs-comment"># 列表创建数组</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(myArray))          <span class="hljs-comment"># &lt;class &#x27;numpy.ndarray&#x27;&gt;</span><br><br>myArray = np.array(((<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)))<br><span class="hljs-built_in">print</span>(myArray)                <span class="hljs-comment"># 元组创建数组</span><br></code></pre></td></tr></table></figure><ul><li>数组维度<ul><li>数组维度是嵌套数组的一个级别，嵌套数组即数组中有数组。</li><li>零维数组，也叫标量，数组值只有一个。</li><li>一维数组，指由多个元素值构成的数组。</li><li>二维数组<ul><li>是一维数组的数组，通常用于表示矩阵或二阶张量。</li><li>numpy库中有专门用于矩阵运算的完整子模块<code>numpy.mat</code>。</li></ul></li><li>三维数组，是二维数组的数组。</li><li>数组可以拥有任意数量的维度，创建数组时使用ndmin参数定义维数。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a = <span class="hljs-number">1</span><br>arr0 = np.array(a)            <span class="hljs-comment"># 零维数组</span><br><span class="hljs-built_in">print</span>(arr0)<br><span class="hljs-built_in">print</span>(arr0.shape)             <span class="hljs-comment"># 返回元组，获取数组各个维度的维数</span><br><span class="hljs-built_in">print</span>(arr0.ndim)              <span class="hljs-comment"># ndim属性返回一个整数，检查数组维度</span><br><br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>arr1 = np.array(b)            <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1)<br><span class="hljs-built_in">print</span>(arr1.shape)<br><span class="hljs-built_in">print</span>(arr1.ndim)<br><br>c = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br>arr2 = np.array(c)            <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2)<br><span class="hljs-built_in">print</span>(arr2.shape)<br><span class="hljs-built_in">print</span>(arr2.ndim)<br><br>d = [[<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]]<br>arr3 = np.array([c, d])       <span class="hljs-comment"># 三维数组</span><br><span class="hljs-built_in">print</span>(arr3)<br><span class="hljs-built_in">print</span>(arr3.shape)<br><span class="hljs-built_in">print</span>(arr3.ndim)<br><br>arr5 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], ndmin=<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(arr5)                   <span class="hljs-comment"># 五维数组</span><br><span class="hljs-built_in">print</span>(arr5.shape)<br><span class="hljs-built_in">print</span>(arr5.ndim)<br></code></pre></td></tr></table></figure><ul><li>数组的裁切<ul><li>类似列表和元组的切片，<code>[start: end]</code>或<code>[start: end: step]</code>。</li><li>将元素从一个给定的索引切到另一个给定的索引，包含开始索引，不包含结束索引。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>arr1 = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>])<br><span class="hljs-built_in">print</span>(arr1.ndim)              <span class="hljs-comment"># 一维数组</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>])             <span class="hljs-comment"># 裁切索引1到5的元素</span><br><span class="hljs-built_in">print</span>(arr1[<span class="hljs-number">1</span>: <span class="hljs-number">5</span>: <span class="hljs-number">2</span>])          <span class="hljs-comment"># 设置裁切步长</span><br><span class="hljs-built_in">print</span>(arr1[ :  : <span class="hljs-number">2</span>])          <span class="hljs-comment"># 返回数组中相隔的元素</span><br><span class="hljs-built_in">print</span>(arr1[-<span class="hljs-number">3</span>: -<span class="hljs-number">1</span>])           <span class="hljs-comment"># 负裁切，索引从-1开始</span><br><br>arr2 = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]])<br><span class="hljs-built_in">print</span>(arr2.ndim)              <span class="hljs-comment"># 二维数组</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])          <span class="hljs-comment"># 第二个元素[6, 7, 8, 9, 10]，索引号从1到4的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">2</span>])          <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号为2的元素</span><br><span class="hljs-built_in">print</span>(arr2[<span class="hljs-number">0</span>: <span class="hljs-number">2</span>, <span class="hljs-number">1</span>: <span class="hljs-number">4</span>])       <span class="hljs-comment"># 第一个元素和第二个元素，各自索引号从1到4的元素，返回数组</span><br></code></pre></td></tr></table></figure><h1 id="6-if语句"><a href="#6-if语句" class="headerlink" title="6 if语句"></a>6 if语句</h1><ul><li>if语句<ul><li>使用<code>if</code>关键字编写。</li><li>支持<code>if...</code>、<code>if...elif...</code>、<code>if...elif...else...</code>和<code>if...else...</code>格式。</li><li><code>if...</code>格式，如果只有一条语句要执行，可以将该条执行语句与if语句放在同一行上。</li><li><code>if...else...</code>格式，如果只有一条语句要执行，可以将执行语句与if语句放在同一行。</li><li>如果if语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> b &gt; a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)                      <span class="hljs-comment"># 注意缩进，若没有缩进，会报错</span><br><span class="hljs-keyword">elif</span> a == b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a等于b.&quot;</span>)                      <span class="hljs-comment"># 如果if条件不成立，则执行elif</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a大于b.&quot;</span>)                      <span class="hljs-comment"># else关键字捕获任何未被上述条件捕获的内容</span><br><br><span class="hljs-keyword">if</span> a &lt; b: <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a小于b.&quot;</span>)                <span class="hljs-comment"># 只有一条语句要执行，将执行语句与if语句放在同一行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>) <span class="hljs-keyword">if</span> a &lt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>)       <span class="hljs-comment"># 又叫三元运算符或条件表达式，还可同一行上多个else语句</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A&quot;</span>) <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=&quot;</span>) <span class="hljs-keyword">if</span> a==b <span class="hljs-keyword">else</span> <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B&quot;</span>)<br><br>x = <span class="hljs-number">23</span><br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">10</span>:                                <span class="hljs-comment"># if嵌套</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于10.&quot;</span>)<br>    <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">20</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;大于20.&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;小于20.&quot;</span>)<br><br><span class="hljs-keyword">if</span> a == b:<br>    <span class="hljs-keyword">pass</span>                                  <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><h1 id="7-for循环"><a href="#7-for循环" class="headerlink" title="7 for循环"></a>7 for循环</h1><ul><li>for循环<ul><li>用于迭代序列，例如列表、元组、集合或字符串等，不需要预先设置索引变量。</li><li>在循环遍历所有项目前停止循环，可以使用<code>break</code>关键字。</li><li><code>continue</code>关键字，停止循环的当前迭代并继续下一个循环。</li><li>如果for循环语句没有内容输出，使用<code>pass</code>关键字可以避免语句报错。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Python">fruits = [<span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Cherry&quot;</span>]<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 遍历列表</span><br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;Banana&quot;</span>:<br>    <span class="hljs-built_in">print</span>(y)                <span class="hljs-comment"># 遍历字符串</span><br><br><span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-built_in">print</span>(z)                <span class="hljs-comment"># Apple, Banana</span><br>    <span class="hljs-keyword">if</span> z == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span>               <span class="hljs-comment"># 遍历到Banana时break停止，跳出循环</span><br><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> a == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># Apple</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-string">&quot;Banana&quot;</span>:<br>        <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># 遍历到Banana时continue跳过，继续下一个循环</span><br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># Apple, Cherry</span><br><br>obj = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;big&quot;</span>, <span class="hljs-string">&quot;delicious&quot;</span>]<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> obj:               <span class="hljs-comment"># for循环嵌套</span><br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> fruits:<br>        <span class="hljs-built_in">print</span>(a, b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]:<br>    <span class="hljs-keyword">pass</span>                    <span class="hljs-comment"># pass关键字避免出错</span><br></code></pre></td></tr></table></figure><ul><li>range()函数<ul><li>循环一组代码指定的次数，可以使用<code>range()</code>函数。</li><li>返回一个数字序列，默认从0开始，递增1，并以指定的数字结束。</li><li><code>range()</code>函数默认是以0作为起始值的，可通过添加参数来指定。</li><li><code>range()</code>函数默认序列递增1，可以通过添加第三个参数来指定。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 打印0到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(b)                <span class="hljs-comment"># 打印3到9的值，序列递增1</span><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">31</span>, <span class="hljs-number">3</span>):<br>    <span class="hljs-built_in">print</span>(c)                <span class="hljs-comment"># 打印3到30的值，序列递增3</span><br></code></pre></td></tr></table></figure><ul><li>else<ul><li>for循环中的<code>else</code>关键字指定循环结束时要执行的代码块。</li><li>如果循环语句被<code>break</code>停止，则else语句的代码块不会被执行。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(x)                <span class="hljs-comment"># 打印从0到5的所有数字，并在循环结束时打印一条信息</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-keyword">if</span> y == <span class="hljs-number">3</span>: <span class="hljs-keyword">break</span>        <span class="hljs-comment"># 当循环到y为3时，break停止并跳出循环，else语句不执行</span><br>    <span class="hljs-built_in">print</span>(y)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Finally finished!&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="8-while循环"><a href="#8-while循环" class="headerlink" title="8 while循环"></a>8 while循环</h1><ul><li>while循环<ul><li>只要条件为真，就可以执行一组语句。</li><li>使用<code>break</code>关键字，即使while条件为真，也可以停止循环。</li><li>使用<code>continue</code>关键字，停止当前迭代，并继续下一个循环。</li><li>当条件不再为真时运行一段代码，可以使用else语句。</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Python">a = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> a &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(a)                <span class="hljs-comment"># 打印小于6的数</span><br>    a += <span class="hljs-number">1</span>                  <span class="hljs-comment"># 注意递增，否则循环永远继续</span><br><br>b = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> b &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(b)<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">break</span>               <span class="hljs-comment"># 当b为3时break停止，跳出循环</span><br>    b += <span class="hljs-number">1</span><br><br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> c &lt; <span class="hljs-number">6</span>:<br>    c += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> c == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">continue</span>            <span class="hljs-comment"># 当c为3时，继续下一次迭代</span><br>    <span class="hljs-built_in">print</span>(c)<br><br>x = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> x &lt; <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">print</span>(x)<br>    x += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:                       <span class="hljs-comment"># 条件不再为真时运行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x is no longer less than 6.&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>运算符</tag>
      
      <tag>数据类型</tag>
      
      <tag>数组</tag>
      
      <tag>循环语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
